
(function () { function r(e, n, t) { function o(i, f) { if (!n[i]) { if (!e[i]) { var c = "function" == typeof require && require; if (!f && c) return c(i, !0); if (u) return u(i, !0); var a = new Error("Cannot find module '" + i + "'"); throw a.code = "MODULE_NOT_FOUND", a } var p = n[i] = { exports: {} }; e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r) }, p, p.exports, r, e, n, t) } return n[i].exports } for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)o(t[i]); return o } return r })()({
  1: [function (require, module, exports) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 2: [function (require, module, exports) {
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 3: [function (require, module, exports) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
          args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 4: [function (require, module, exports) {
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 5: [function (require, module, exports) {
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 6: [function (require, module, exports) {
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 7: [function (require, module, exports) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 8: [function (require, module, exports) {
    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 9: [function (require, module, exports) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 10: [function (require, module, exports) {
    var _typeof = require("./typeof.js")["default"];

    function _regeneratorRuntime() {
      "use strict";
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg; ;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg; else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() { }

      function GeneratorFunction() { }

      function GeneratorFunctionPrototype() { }

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
              value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
              next = function next() {
                for (; ++i < iterable.length;) {
                  if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                }

                return next.value = undefined, next.done = !0, next;
              };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
              record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, { "./typeof.js": 12 }], 11: [function (require, module, exports) {
    var arrayWithHoles = require("./arrayWithHoles.js");

    var iterableToArrayLimit = require("./iterableToArrayLimit.js");

    var unsupportedIterableToArray = require("./unsupportedIterableToArray.js");

    var nonIterableRest = require("./nonIterableRest.js");

    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }

    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, { "./arrayWithHoles.js": 2, "./iterableToArrayLimit.js": 8, "./nonIterableRest.js": 9, "./unsupportedIterableToArray.js": 13 }], 12: [function (require, module, exports) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
    }

    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, {}], 13: [function (require, module, exports) {
    var arrayLikeToArray = require("./arrayLikeToArray.js");

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
    }

    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }, { "./arrayLikeToArray.js": 1 }], 14: [function (require, module, exports) {
    // TODO(Babel 8): Remove this file.

    var runtime = require("../helpers/regeneratorRuntime")();
    module.exports = runtime;

    // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }

  }, { "../helpers/regeneratorRuntime": 10 }], 15: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict';
        Object.defineProperty(exports, "__esModule", { value: true });
        // **Github:** https://github.com/fidm/asn1
        //
        // **License:** MIT
        const util_1 = require("util");
        const common_1 = require("./common");
        /**
         * ASN.1 classes.
         */
        var Class;
        (function (Class) {
          Class[Class["UNIVERSAL"] = 0] = "UNIVERSAL";
          Class[Class["APPLICATION"] = 64] = "APPLICATION";
          Class[Class["CONTEXT_SPECIFIC"] = 128] = "CONTEXT_SPECIFIC";
          Class[Class["PRIVATE"] = 192] = "PRIVATE";
        })(Class = exports.Class || (exports.Class = {}));
        /**
         * ASN.1 types. Not all types are supported by this implementation.
         */
        var Tag;
        (function (Tag) {
          Tag[Tag["NONE"] = 0] = "NONE";
          Tag[Tag["BOOLEAN"] = 1] = "BOOLEAN";
          Tag[Tag["INTEGER"] = 2] = "INTEGER";
          Tag[Tag["BITSTRING"] = 3] = "BITSTRING";
          Tag[Tag["OCTETSTRING"] = 4] = "OCTETSTRING";
          Tag[Tag["NULL"] = 5] = "NULL";
          Tag[Tag["OID"] = 6] = "OID";
          // ODESC = 7,
          // EXTERNAL = 8,
          // REAL = 9,
          Tag[Tag["ENUMERATED"] = 10] = "ENUMERATED";
          // EMBEDDED = 11,
          Tag[Tag["UTF8"] = 12] = "UTF8";
          // ROID = 13,
          Tag[Tag["SEQUENCE"] = 16] = "SEQUENCE";
          Tag[Tag["SET"] = 17] = "SET";
          Tag[Tag["NUMERICSTRING"] = 18] = "NUMERICSTRING";
          Tag[Tag["PRINTABLESTRING"] = 19] = "PRINTABLESTRING";
          Tag[Tag["T61STRING"] = 20] = "T61STRING";
          Tag[Tag["IA5STRING"] = 22] = "IA5STRING";
          Tag[Tag["UTCTIME"] = 23] = "UTCTIME";
          Tag[Tag["GENERALIZEDTIME"] = 24] = "GENERALIZEDTIME";
          Tag[Tag["GENERALSTRING"] = 27] = "GENERALSTRING";
        })(Tag = exports.Tag || (exports.Tag = {}));
        /**
         * BitString is the structure to use when you want an ASN.1 BIT STRING type. A
         * bit string is padded up to the nearest byte in memory and the number of
         * valid bits is recorded. Padding bits will be zero.
         */
        class BitString {
          constructor(buf, bitLen) {
            this.buf = buf;
            this.bitLen = bitLen;
          }
          /**
           * Returns the value for the given bits offset.
           * @param i bits offet
           */
          at(i) {
            if (i < 0 || i >= this.bitLen || !Number.isInteger(i)) {
              return 0;
            }
            const x = Math.floor(i / 8);
            const y = 7 - i % 8;
            return (this.buf[x] >> y) & 1;
          }
          /**
           * Align buffer
           */
          rightAlign() {
            const shift = 8 - (this.bitLen % 8);
            if (shift === 8 || this.buf.length === 0) {
              return this.buf;
            }
            const buf = Buffer.alloc(this.buf.length);
            buf[0] = this.buf[0] >> shift;
            for (let i = 1; i < this.buf.length; i++) {
              buf[i] = this.buf[i - 1] << (8 - shift);
              buf[i] |= this.buf[i] >> shift;
            }
            return buf;
          }
        }
        exports.BitString = BitString;
        /**
         * Implements parsing of DER-encoded ASN.1 data structures,
         * as defined in ITU-T Rec X.690.
         *
         * See also ``A Layman's Guide to a Subset of ASN.1, BER, and DER,''
         * http://luca.ntop.org/Teaching/Appunti/asn1.html.
         *
         * ASN.1 is a syntax for specifying abstract objects and BER, DER, PER, XER etc
         * are different encoding formats for those objects. Here, we'll be dealing
         * with DER, the Distinguished Encoding Rules. DER is used in X.509 because
         * it's fast to parse and, unlike BER, has a unique encoding for every object.
         * When calculating hashes over objects, it's important that the resulting
         * bytes be the same at both ends and DER removes this margin of error.
         * ASN.1 is very complex and this package doesn't attempt to implement
         * everything by any means.
         *
         * DER Encoding of ASN.1 Types:
         * https://msdn.microsoft.com/en-us/library/windows/desktop/bb540792(v=vs.85).aspx
         */
        class ASN1 {
          /**
           * Creates a Tag.BOOLEAN ASN.1 object.
           * @param val boolean value.
           */
          static Bool(val) {
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.BOOLEAN, Buffer.from([val ? 0xff : 0x0]));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.BOOLEAN value from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseBool(buf) {
            if (!(buf instanceof Buffer) || buf.length !== 1) {
              throw new Error('ASN1 syntax error: invalid boolean');
            }
            switch (buf[0]) {
              case 0:
                return false;
              case 0xff:
                return true;
              default:
                throw new Error('ASN1 syntax error: invalid boolean');
            }
          }
          /**
           * Creates a Tag.INTEGER ASN.1 object.
           * @param val integer value or buffer.
           */
          static Integer(val) {
            if (val instanceof Buffer) {
              const asn = new ASN1(Class.UNIVERSAL, Tag.INTEGER, val);
              asn._value = val.toString('hex');
              return asn;
            }
            if (!Number.isSafeInteger(val)) {
              throw new Error('ASN1 syntax error: invalid integer');
            }
            let buf;
            if (val >= -0x80 && val < 0x80) {
              buf = Buffer.alloc(1);
              buf.writeInt8(val, 0);
            }
            else if (val >= -0x8000 && val < 0x8000) {
              buf = Buffer.alloc(2);
              buf.writeIntBE(val, 0, 2);
            }
            else if (val >= -0x800000 && val < 0x800000) {
              buf = Buffer.alloc(3);
              buf.writeIntBE(val, 0, 3);
            }
            else if (val >= -0x80000000 && val < 0x80000000) {
              buf = Buffer.alloc(4);
              buf.writeIntBE(val, 0, 4);
            }
            else if (val >= -0x8000000000 && val < 0x8000000000) {
              buf = Buffer.alloc(5);
              buf.writeIntBE(val, 0, 5);
            }
            else if (val >= -0x800000000000 && val < 0x800000000000) {
              buf = Buffer.alloc(6);
              buf.writeIntBE(val, 0, 6);
            }
            else {
              throw new Error('ASN1 syntax error: invalid Integer');
            }
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.INTEGER, buf);
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.INTEGER value from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseInteger(buf) {
            if (!(buf instanceof Buffer) || buf.length === 0) {
              throw new Error('ASN1 syntax error: invalid Integer');
            }
            // some INTEGER (BigInt) will be 16 bytes, 32 bytes or others.
            // CertificateSerialNumber ::= INTEGER (>= 16 bytes)
            if (buf.length > 6) {
              return buf.toString('hex');
            }
            return buf.readIntBE(0, buf.length);
          }
          /**
           * Parse a Tag.INTEGER value as a number from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseIntegerNum(buf) {
            const value = ASN1.parseInteger(buf);
            if (typeof value !== 'number') {
              throw new Error('ASN1 syntax error: invalid Integer number');
            }
            return value;
          }
          /**
           * Parse a Tag.INTEGER value as a hex string(for BigInt) from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseIntegerStr(buf) {
            const value = ASN1.parseInteger(buf);
            if (typeof value === 'number') {
              return value.toString(16);
            }
            return value;
          }
          /**
           * Creates a Tag.BITSTRING ASN.1 object.
           * @param val BitString object or buffer.
           */
          static BitString(val) {
            if (val instanceof Buffer) {
              val = new BitString(val, val.length * 8);
            }
            const paddingBits = val.buf.length * 8 - val.bitLen;
            const buf = Buffer.alloc(val.buf.length + 1);
            buf.writeInt8(paddingBits, 0);
            val.buf.copy(buf, 1);
            return new ASN1(Class.UNIVERSAL, Tag.BITSTRING, buf);
          }
          /**
           * Parse a Tag.BITSTRING value from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseBitString(buf) {
            if (!(buf instanceof Buffer) || buf.length === 0) {
              throw new Error('ASN1 syntax error: invalid BitString');
            }
            const paddingBits = buf[0];
            if (paddingBits > 7 ||
              buf.length === 1 && paddingBits > 0 ||
              (buf[buf.length - 1] & ((1 << buf[0]) - 1)) !== 0) {
              throw new Error('ASN1 syntax error: invalid padding bits in BIT STRING');
            }
            return new BitString(buf.slice(1), (buf.length - 1) * 8 - paddingBits);
          }
          /**
           * Creates a Tag.NULL ASN.1 object.
           */
          static Null() {
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.NULL, Buffer.alloc(0));
            asn1._value = null;
            return asn1;
          }
          /**
           * Parse a Tag.NULL value from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseNull(buf) {
            if (!(buf instanceof Buffer) || buf.length !== 0) {
              throw new Error('ASN1 syntax error: invalid null');
            }
            return null;
          }
          /**
           * Creates an Tag.OID (dot-separated numeric string) ASN.1 object.
           * @param val dot-separated numeric string.
           */
          static OID(val) {
            const values = val.split('.');
            if (values.length === 0) {
              throw new Error('ASN1 syntax error: invalid Object Identifier');
            }
            const bytes = [];
            // first byte is 40 * value1 + value2
            bytes.push(40 * mustParseInt(values[0]) + mustParseInt(values[1]));
            // other bytes are each value in base 128 with 8th bit set except for
            // the last byte for each value
            const valueBytes = [];
            for (let i = 2; i < values.length; ++i) {
              let value = mustParseInt(values[i]);
              valueBytes.length = 0;
              valueBytes.push(value & 0x7f);
              while (value > 0x7f) {
                value = value >>> 7;
                valueBytes.unshift((value & 0x7f) | 0x80); // add value bytes in reverse for big endian
              }
              bytes.push(...valueBytes);
            }
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.OID, Buffer.from(bytes));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.OID value from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseOID(buf) {
            if (!(buf instanceof Buffer) || buf.length === 0) {
              throw new Error('ASN1 syntax error: invalid OID');
            }
            // first byte is 40 * value1 + value2
            let oid = Math.floor(buf[0] / 40) + '.' + (buf[0] % 40);
            // other bytes are each value in base 128 with 8th bit set except for
            // the last byte for each value
            let high = 0;
            for (let i = 1; i < buf.length; i++) {
              // not the last byte for the value
              if (buf[i] >= 0x80) {
                high += buf[i] & 0x7F;
                high = high << 7;
              }
              else {
                oid += '.' + (high + buf[i]);
                high = 0;
              }
            }
            return oid;
          }
          /**
           * Creates an Tag.UTF8 ASN.1 object.
           * @param val utf8 string.
           */
          static UTF8(val) {
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.UTF8, Buffer.from(val, 'utf8'));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.UTF8 string from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseUTF8(buf) {
            if (!(buf instanceof Buffer)) {
              throw new Error('parse ASN1 error: invalid Buffer');
            }
            return buf.toString('utf8');
          }
          /**
           * Creates an Tag.NUMERICSTRING ASN.1 object.
           * @param val numeric string.
           */
          static NumericString(val) {
            if (!isNumericString(val)) {
              throw new Error('ASN1 syntax error: invalid NumericString');
            }
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.NUMERICSTRING, Buffer.from(val, 'utf8'));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.UTF8 string from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseNumericString(buf) {
            if (!(buf instanceof Buffer)) {
              throw new Error('parse ASN1 error: invalid Buffer');
            }
            const str = buf.toString('utf8');
            if (!isNumericString(str)) {
              throw new Error('ASN1 syntax error: invalid NumericString');
            }
            return str;
          }
          /**
           * Creates an Tag.NUMERICSTRING ASN.1 object.
           * @param val printable string.
           */
          static PrintableString(val) {
            // TODO, validate
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.PRINTABLESTRING, Buffer.from(val, 'utf8'));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.PRINTABLESTRING string from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parsePrintableString(buf) {
            if (!(buf instanceof Buffer)) {
              throw new Error('parse ASN1 error: invalid Buffer');
            }
            // TODO, validate
            return buf.toString('utf8');
          }
          /**
           * Creates an Tag.IA5STRING (ASCII string) ASN.1 object.
           * @param val ASCII string.
           */
          static IA5String(val) {
            if (!isIA5String(val)) {
              throw new Error('ASN1 syntax error: invalid IA5String');
            }
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.IA5STRING, Buffer.from(val, 'utf8'));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.IA5STRING string from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseIA5String(buf) {
            if (!(buf instanceof Buffer)) {
              throw new Error('parse ASN1 error: invalid Buffer');
            }
            const str = buf.toString('utf8');
            if (!isIA5String(str)) {
              throw new Error('ASN1 syntax error: invalid IA5String');
            }
            return str;
          }
          /**
           * Creates an Tag.T61STRING (8-bit clean string) ASN.1 object.
           * @param val 8-bit clean string.
           */
          static T61String(val) {
            // TODO, validate
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.T61STRING, Buffer.from(val, 'utf8'));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.T61STRING string from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseT61String(buf) {
            if (!(buf instanceof Buffer)) {
              throw new Error('parse ASN1 error: invalid Buffer');
            }
            // TODO, validate
            return buf.toString('utf8');
          }
          /**
           * Creates an Tag.GENERALSTRING (specified in ISO-2022/ECMA-35) ASN.1 object.
           * @param val general string.
           */
          static GeneralString(val) {
            // TODO, validate
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.GENERALSTRING, Buffer.from(val, 'utf8'));
            asn1._value = val;
            return asn1;
          }
          /**
           * Parse a Tag.GENERALSTRING string from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseGeneralString(buf) {
            if (!(buf instanceof Buffer)) {
              throw new Error('parse ASN1 error: invalid Buffer');
            }
            // TODO, validate
            return buf.toString('utf8');
          }
          /**
           * Creates an Tag.UTCTIME ASN.1 object.
           *
           * Note: GeneralizedTime has 4 digits for the year and is used for X.509.
           * dates past 2049. Converting to a GeneralizedTime hasn't been implemented yet.
           * @param date date value.
           */
          static UTCTime(date) {
            let rval = '';
            // create format YYMMDDhhmmssZ
            const format = [];
            format.push(('' + date.getUTCFullYear()).substr(2));
            format.push('' + (date.getUTCMonth() + 1));
            format.push('' + date.getUTCDate());
            format.push('' + date.getUTCHours());
            format.push('' + date.getUTCMinutes());
            format.push('' + date.getUTCSeconds());
            // ensure 2 digits are used for each format entry
            for (const s of format) {
              if (s.length < 2) {
                rval += '0';
              }
              rval += s;
            }
            rval += 'Z';
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.UTCTIME, Buffer.from(rval, 'utf8'));
            asn1._value = date;
            return asn1;
          }
          /**
           * Parse a Tag.UTCTIME date from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseUTCTime(buf) {
            if (!(buf instanceof Buffer) || buf.length === 0) {
              throw new Error('ASN1 syntax error: invalid UTC Time');
            }
            const utc = buf.toString('utf8');
            /* The following formats can be used:
        
              YYMMDDhhmmZ
              YYMMDDhhmm+hh'mm'
              YYMMDDhhmm-hh'mm'
              YYMMDDhhmmssZ
              YYMMDDhhmmss+hh'mm'
              YYMMDDhhmmss-hh'mm'
        
              Where:
        
              YY is the least significant two digits of the year
              MM is the month (01 to 12)
              DD is the day (01 to 31)
              hh is the hour (00 to 23)
              mm are the minutes (00 to 59)
              ss are the seconds (00 to 59)
              Z indicates that local time is GMT, + indicates that local time is
              later than GMT, and - indicates that local time is earlier than GMT
              hh' is the absolute value of the offset from GMT in hours
              mm' is the absolute value of the offset from GMT in minutes */
            const date = new Date();
            // if YY >= 50 use 19xx, if YY < 50 use 20xx
            let year = mustParseInt(utc.substr(0, 2));
            year = (year >= 50) ? 1900 + year : 2000 + year;
            const MM = mustParseInt(utc.substr(2, 2)) - 1; // use 0-11 for month
            const DD = mustParseInt(utc.substr(4, 2));
            const hh = mustParseInt(utc.substr(6, 2));
            const mm = mustParseInt(utc.substr(8, 2));
            let ss = 0;
            let end = 0;
            // get character after minutes
            let c = '';
            // not just YYMMDDhhmmZ
            if (utc.length > 11) {
              end = 10;
              // get character after minutes
              c = utc.charAt(end);
              // see if seconds are present
              if (c !== '+' && c !== '-') {
                // get seconds
                ss = mustParseInt(utc.substr(10, 2));
                end += 2;
              }
            }
            // update date
            date.setUTCFullYear(year, MM, DD);
            date.setUTCHours(hh, mm, ss, 0);
            if (end > 0) {
              // get +/- after end of time
              c = utc.charAt(end);
              if (c === '+' || c === '-') {
                // get hours+minutes offset
                const hhoffset = mustParseInt(utc.substr(end + 1, 2));
                const mmoffset = mustParseInt(utc.substr(end + 4, 2));
                // calculate offset in milliseconds
                let offset = hhoffset * 60 + mmoffset;
                offset *= 60000;
                // apply offset
                if (c === '+') {
                  date.setTime(+date - offset);
                }
                else {
                  date.setTime(+date + offset);
                }
              }
            }
            return date;
          }
          /**
           * Creates an Tag.GENERALIZEDTIME ASN.1 object.
           * @param date date value.
           */
          static GeneralizedTime(date) {
            let rval = '';
            // create format YYYYMMDDHHMMSSZ
            const format = [];
            format.push('' + date.getUTCFullYear());
            format.push('' + (date.getUTCMonth() + 1));
            format.push('' + date.getUTCDate());
            format.push('' + date.getUTCHours());
            format.push('' + date.getUTCMinutes());
            format.push('' + date.getUTCSeconds());
            // ensure 2 digits are used for each format entry
            for (const s of format) {
              if (s.length < 2) {
                rval += '0';
              }
              rval += s;
            }
            rval += 'Z';
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.GENERALIZEDTIME, Buffer.from(rval, 'utf8'));
            asn1._value = date;
            return asn1;
          }
          /**
           * Parse a Tag.GENERALIZEDTIME date from ASN.1 object' value.
           * @param buf the buffer to parse.
           */
          static parseGeneralizedTime(buf) {
            if (!(buf instanceof Buffer) || buf.length === 0) {
              throw new Error('ASN1 syntax error: invalid Generalized Time');
            }
            const gentime = buf.toString('utf8');
            /* The following formats can be used:
        
              YYYYMMDDHHMMSS
              YYYYMMDDHHMMSS.fff
              YYYYMMDDHHMMSSZ
              YYYYMMDDHHMMSS.fffZ
              YYYYMMDDHHMMSS+hh'mm'
              YYYYMMDDHHMMSS.fff+hh'mm'
              YYYYMMDDHHMMSS-hh'mm'
              YYYYMMDDHHMMSS.fff-hh'mm'
        
              Where:
        
              YYYY is the year
              MM is the month (01 to 12)
              DD is the day (01 to 31)
              hh is the hour (00 to 23)
              mm are the minutes (00 to 59)
              ss are the seconds (00 to 59)
              .fff is the second fraction, accurate to three decimal places
              Z indicates that local time is GMT, + indicates that local time is
              later than GMT, and - indicates that local time is earlier than GMT
              hh' is the absolute value of the offset from GMT in hours
              mm' is the absolute value of the offset from GMT in minutes */
            const date = new Date();
            const YYYY = mustParseInt(gentime.substr(0, 4));
            const MM = mustParseInt(gentime.substr(4, 2)) - 1; // use 0-11 for month
            const DD = mustParseInt(gentime.substr(6, 2));
            const hh = mustParseInt(gentime.substr(8, 2));
            const mm = mustParseInt(gentime.substr(10, 2));
            const ss = mustParseInt(gentime.substr(12, 2));
            let fff = 0;
            let offset = 0;
            let isUTC = false;
            if (gentime.charAt(gentime.length - 1) === 'Z') {
              isUTC = true;
            }
            const end = gentime.length - 5;
            const c = gentime.charAt(end);
            if (c === '+' || c === '-') {
              // get hours+minutes offset
              const hhoffset = mustParseInt(gentime.substr(end + 1, 2));
              const mmoffset = mustParseInt(gentime.substr(end + 4, 2));
              // calculate offset in milliseconds
              offset = hhoffset * 60 + mmoffset;
              offset *= 60000;
              // apply offset
              if (c === '+') {
                offset *= -1;
              }
              isUTC = true;
            }
            // check for second fraction
            if (gentime.charAt(14) === '.') {
              fff = parseFloat(gentime.substr(14)) * 1000;
            }
            if (isUTC) {
              date.setUTCFullYear(YYYY, MM, DD);
              date.setUTCHours(hh, mm, ss, fff);
              // apply offset
              date.setTime(+date + offset);
            }
            else {
              date.setFullYear(YYYY, MM, DD);
              date.setHours(hh, mm, ss, fff);
            }
            return date;
          }
          /**
           * Parse a Tag.UTCTIME date of Tag.GENERALIZEDTIME date from ASN.1 object' value.
           * @param tag the type.
           * @param buf the buffer to parse.
           */
          static parseTime(tag, buf) {
            switch (tag) {
              case Tag.UTCTIME:
                return ASN1.parseUTCTime(buf);
              case Tag.GENERALIZEDTIME:
                return ASN1.parseGeneralizedTime(buf);
              default:
                throw new Error('Invalid ASN1 time tag');
            }
          }
          /**
           * Creates an Tag.SET ASN.1 object.
           * @param objs an array of ASN.1 objects.
           */
          static Set(objs) {
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.SET, Buffer.concat(objs.map((obj) => obj.toDER())));
            asn1._value = objs;
            return asn1;
          }
          /**
           * Creates an Tag.SEQUENCE ASN.1 object.
           * @param objs an array of ASN.1 objects.
           */
          static Seq(objs) {
            const asn1 = new ASN1(Class.UNIVERSAL, Tag.SEQUENCE, Buffer.concat(objs.map((obj) => obj.toDER())));
            asn1._value = objs;
            return asn1;
          }
          /**
           * Creates an Class.CONTEXT_SPECIFIC ASN.1 object.
           *
           * Note: the tag means nothing with Class.CONTEXT_SPECIFIC
           * @param tag number.
           * @param objs an array of ASN.1 objects or a ASN.1 object.
           * @param isCompound when objs is a array, the isCompound will be set to true.
           */
          static Spec(tag, objs, isCompound = true) {
            const bytes = Array.isArray(objs) ? Buffer.concat(objs.map((obj) => obj.toDER())) : objs.toDER();
            if (Array.isArray(objs)) {
              isCompound = true;
            }
            const asn1 = new ASN1(Class.CONTEXT_SPECIFIC, tag, bytes, isCompound);
            asn1._value = objs;
            return asn1;
          }
          /**
           * Parse a ASN.1 object from a buffer in DER format.
           *
           * @param buf the buffer to parse.
           * @param deepParse deeply parse or not.
           */
          static fromDER(buf, deepParse = false) {
            return ASN1._fromDER(new common_1.BufferVisitor(buf), deepParse);
          }
          /**
           * Parse a ASN.1 object from a buffer in DER format with given class and tag.
           * If class or tag is not match, it will throw a error.
           *
           * @param tagClass expect class to parse.
           * @param tag expect type to parse.
           * @param buf the buffer to parse.
           */
          static parseDER(buf, tagClass, tag) {
            const obj = ASN1._fromDER(new common_1.BufferVisitor(buf), false);
            if (obj.class !== tagClass && obj.tag !== tag) {
              throw new Error(`invalid ASN.1 DER for class ${tagClass} and tag ${tag}`);
            }
            return obj;
          }
          /**
           * Parse a ASN.1 object from a buffer in DER format with given Template object.
           * If template is not match, it will throw a error.
           *
           * @param buf the buffer to parse.
           * @param tpl expect template to parse.
           *
           * @return a Captures object with captured ASN.1 objects
           */
          static parseDERWithTemplate(buf, tpl) {
            const obj = ASN1._fromDER(new common_1.BufferVisitor(buf), true);
            const captures = {};
            const err = obj.validate(tpl, captures);
            if (err != null) {
              err.data = obj;
              throw err;
            }
            return captures;
          }
          static _parseCompound(buf, deepParse) {
            const values = [];
            const len = buf.length;
            const bufv = new common_1.BufferVisitor(buf);
            let readByteLen = 0;
            while (readByteLen < len) {
              const start = bufv.end;
              values.push(ASN1._fromDER(bufv, deepParse));
              readByteLen += bufv.end - start;
            }
            return values;
          }
          // Internal function to parse an asn1 object from a byte buffer in DER format.
          static _fromDER(bufv, deepParse) {
            if (!(bufv.buf instanceof Buffer) || bufv.length === 0) {
              throw new Error('ASN1 syntax error: invalid Generalized Time');
            }
            bufv.mustWalk(1, 'Too few bytes to read ASN.1 tag.');
            const start = bufv.start;
            const b1 = bufv.buf[start];
            const tagClass = b1 & 0xc0;
            const tag = b1 & 0x1f;
            // value storage
            const valueLen = getValueLength(bufv);
            bufv.mustHas(valueLen);
            if (valueLen !== 0 && tag === Tag.NULL) {
              throw new Error('invalid value length or NULL tag.');
            }
            bufv.mustWalk(valueLen);
            const isCompound = ((b1 & 0x20) === 0x20);
            const asn1 = new ASN1(tagClass, tag, bufv.buf.slice(bufv.start, bufv.end), isCompound);
            if (isCompound && deepParse) {
              asn1._value = ASN1._parseCompound(asn1.bytes, deepParse);
            }
            asn1._der = bufv.buf.slice(start, bufv.end);
            return asn1;
          }
          constructor(tagClass, tag, data, isCompound = false) {
            this.class = tagClass;
            this.tag = tag;
            this.bytes = data;
            // CONTEXT_SPECIFIC, SEQUENCE, SET, others...
            this.isCompound = isCompound || tag === Tag.SEQUENCE || tag === Tag.SET;
            this._value = undefined;
            this._der = null;
          }
          /**
           * the well parsed value of this ASN.1 object.
           * It will be boolean, number, string, BitString, Date, array of ASN.1 objects and so on.
           */
          get value() {
            if (this._value === undefined) {
              this._value = this.valueOf();
            }
            return this._value;
          }
          /**
           * the DER format Buffer of this ASN.1 object.
           */
          get DER() {
            if (this._der == null) {
              this._der = this.toDER();
            }
            return this._der;
          }
          /**
           * Expecting it is compound ASN.1 object and returns an array of sub ASN.1 objects.
           * @param msg error message to throw when it is not compound ASN.1 object.
           */
          mustCompound(msg = 'asn1 object value is not compound') {
            if (!this.isCompound || !Array.isArray(this.value)) {
              const err = new Error(msg);
              err.data = this.toJSON();
              throw err;
            }
            return this.value;
          }
          /**
           * Returns true if two ASN.1 objects equally.
           * @param obj another ASN.1 object.
           */
          equals(obj) {
            if (!(obj instanceof ASN1)) {
              return false;
            }
            if (this.class !== obj.class || this.tag !== obj.tag || this.isCompound !== obj.isCompound) {
              return false;
            }
            if (!this.bytes.equals(obj.bytes)) {
              return false;
            }
            return true;
          }
          /**
           * Converts this ASN.1 object to a buffer of bytes in DER format.
           */
          toDER() {
            // build the first byte
            let b1 = this.class | this.tag;
            if (this.isCompound) {
              b1 |= 0x20;
            }
            const valueLenBytes = getValueLengthByte(this.bytes.length);
            const buf = Buffer.allocUnsafe(2 + valueLenBytes + this.bytes.length);
            buf.writeInt8(b1, 0);
            if (valueLenBytes === 0) {
              buf.writeUInt8(this.bytes.length, 1);
              this.bytes.copy(buf, 2);
            }
            else {
              buf.writeUInt8(valueLenBytes | 0x80, 1);
              buf.writeUIntBE(this.bytes.length, 2, valueLenBytes);
              this.bytes.copy(buf, 2 + valueLenBytes);
            }
            return buf;
          }
          /**
           * Parse the value of this ASN.1 object when it is Class.UNIVERSAL.
           * The value will be boolean, number, string, BitString, Date, array of ASN.1 objects and so on.
           */
          valueOf() {
            if (this.isCompound) {
              return ASN1._parseCompound(this.bytes, false);
            }
            if (this.class !== Class.UNIVERSAL) {
              return this.bytes;
            }
            switch (this.tag) {
              case Tag.BOOLEAN:
                return ASN1.parseBool(this.bytes);
              case Tag.INTEGER:
                return ASN1.parseInteger(this.bytes);
              case Tag.BITSTRING:
                return ASN1.parseBitString(this.bytes);
              case Tag.NULL:
                return ASN1.parseNull(this.bytes);
              case Tag.OID:
                return ASN1.parseOID(this.bytes);
              case Tag.UTF8:
                return ASN1.parseUTF8(this.bytes);
              case Tag.NUMERICSTRING:
                return ASN1.parseNumericString(this.bytes);
              case Tag.PRINTABLESTRING:
                return ASN1.parsePrintableString(this.bytes);
              case Tag.T61STRING:
                return ASN1.parseT61String(this.bytes);
              case Tag.IA5STRING:
                return ASN1.parseIA5String(this.bytes);
              case Tag.GENERALSTRING:
                return ASN1.parseGeneralString(this.bytes);
              case Tag.UTCTIME:
                return ASN1.parseUTCTime(this.bytes);
              case Tag.GENERALIZEDTIME:
                return ASN1.parseGeneralizedTime(this.bytes);
              default:
                return this.bytes;
            }
          }
          /**
           * Validates that the given ASN.1 object is at least a super set of the
           * given ASN.1 structure. Only tag classes and types are checked. An
           * optional map may also be provided to capture ASN.1 values while the
           * structure is checked.
           *
           * To capture an ASN.1 object, set an object in the validator's 'capture'
           * parameter to the key to use in the capture map.
           *
           * Objects in the validator may set a field 'optional' to true to indicate
           * that it isn't necessary to pass validation.
           *
           * @param tpl Template object to validate.
           * @param captures Captures object to capture ASN.1 object.
           */
          validate(tpl, captures = {}) {
            if (this.class !== tpl.class) {
              return new Error(`ASN.1 object validate failure for ${tpl.name} : error class ${Class[this.class]}`);
            }
            const tplTags = Array.isArray(tpl.tag) ? tpl.tag : [tpl.tag];
            if (!tplTags.includes(this.tag)) {
              return new Error(`ASN.1 object validate failure for ${tpl.name}: error tag ${Tag[this.tag]}`);
            }
            if (tpl.capture != null) {
              captures[tpl.capture] = this;
            }
            if (Array.isArray(tpl.value)) {
              const values = this.mustCompound(`${tpl.name} need compound ASN1 value`);
              for (let i = 0, j = 0; i < tpl.value.length; i++) {
                if (values[j] != null) {
                  const err = values[j].validate(tpl.value[i], captures);
                  if (err == null) {
                    j++;
                  }
                  else if (tpl.value[i].optional !== true) {
                    return err;
                  }
                }
                else if (tpl.value[i].optional !== true) {
                  return new Error(`ASN.1 object validate failure for ${tpl.value[i].name}: not exists`);
                }
              }
            }
            else if (tpl.value != null) {
              const buf = this.tag === Tag.BITSTRING ? this.bytes.slice(1) : this.bytes;
              return ASN1.fromDER(buf).validate(tpl.value, captures);
            }
            return null;
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            let value = this.value;
            if (Array.isArray(value)) {
              value = value.map((val) => val.toJSON());
            }
            return {
              class: Class[this.class],
              tag: this.class === Class.UNIVERSAL ? Tag[this.tag] : this.tag,
              value,
            };
          }
          [util_1.inspect.custom](_depth, options) {
            if (options.depth <= 2) {
              options.depth = 10;
            }
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        exports.ASN1 = ASN1;
        // Gets the length of a BER-encoded ASN.1 value.
        function getValueLength(bufv) {
          bufv.mustWalk(1, 'Too few bytes to read ASN.1 value length.');
          const byte = bufv.buf[bufv.start];
          // see if the length is "short form" or "long form" (bit 8 set)
          if ((byte & 0x80) === 0) {
            // if byte is 0, means asn1 object of indefinite length
            return byte;
          }
          const byteLen = byte & 0x7f;
          bufv.mustWalk(byteLen, 'Too few bytes to read ASN.1 value length.');
          return bufv.buf.readUIntBE(bufv.start, byteLen);
        }
        // Gets the length of a BER-encoded ASN.1 value length's bytes
        function getValueLengthByte(valueLen) {
          if (valueLen <= 127) {
            return 0;
          }
          else if (valueLen <= 0xff) {
            return 1;
          }
          else if (valueLen <= 0xffff) {
            return 2;
          }
          else if (valueLen <= 0xffffff) {
            return 3;
          }
          else if (valueLen <= 0xffffffff) {
            return 4;
          }
          else if (valueLen <= 0xffffffffff) {
            return 5;
          }
          else if (valueLen <= 0xffffffffffff) {
            return 6;
          }
          else {
            throw new Error('invalid value length');
          }
        }
        function isNumericString(str) {
          for (const s of str) {
            const n = s.charCodeAt(0);
            if (n !== 32 && (n < 48 || n > 57)) { // '0' to '9', and ' '
              return false;
            }
          }
          return true;
        }
        function isIA5String(str) {
          for (const s of str) {
            if (s.charCodeAt(0) >= 0x80) {
              return false;
            }
          }
          return true;
        }
        function mustParseInt(str, radix = 10) {
          const val = parseInt(str, radix);
          if (Number.isNaN(val)) {
            throw new Error(`Invalid numeric string "${str}" in radix ${radix}.`);
          }
          return val;
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./common": 16, "buffer": 96, "util": 319 }], 16: [function (require, module, exports) {
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    // **Github:** https://github.com/fidm/x509
    //
    // **License:** MIT
    /**
     * BufferVisitor is a visit tool to manipulate buffer.
     */
    class BufferVisitor {
      constructor(buf, start = 0, end = 0) {
        this.start = start;
        this.end = end > start ? end : start;
        this.buf = buf;
      }
      /**
       * return the underlying buffer length
       */
      get length() {
        return this.buf.length;
      }
      /**
       * Reset visitor' start and end value.
       * @param start
       * @param end
       */
      reset(start = 0, end = 0) {
        this.start = start;
        if (end >= this.start) {
          this.end = end;
        }
        else if (this.end < this.start) {
          this.end = this.start;
        }
        return this;
      }
      /**
       * consume some bytes.
       * @param steps steps to walk
       */
      walk(steps) {
        this.start = this.end;
        this.end += steps;
        return this;
      }
      /**
       * The buffer should have remaining the "steps" of bytes to consume,
       * otherwise it will throw an error with given message.
       * @param steps steps to consume.
       * @param message message to throw.
       */
      mustHas(steps, message = 'Too few bytes to parse.') {
        const requested = this.end + steps;
        if (requested > this.buf.length) {
          const error = new Error(message);
          error.available = this.buf.length;
          error.requested = requested;
          throw error;
        }
        this.walk(0);
        return this;
      }
      /**
       * Check the remaining bytes with bufferVisitor.mustHas method and then walk.
       * @param steps steps to consume.
       * @param message message to throw.
       */
      mustWalk(steps, message) {
        this.mustHas(steps, message);
        this.walk(steps);
        return this;
      }
    }
    exports.BufferVisitor = BufferVisitor;

  }, {}], 17: [function (require, module, exports) {
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    // **Github:** https://github.com/fidm/asn1
    //
    // **License:** MIT
    var common_1 = require("./common");
    exports.BufferVisitor = common_1.BufferVisitor;
    var pem_1 = require("./pem");
    exports.PEM = pem_1.PEM;
    var asn1_1 = require("./asn1");
    exports.ASN1 = asn1_1.ASN1;
    exports.Class = asn1_1.Class;
    exports.Tag = asn1_1.Tag;
    exports.BitString = asn1_1.BitString;

  }, { "./asn1": 15, "./common": 16, "./pem": 18 }], 18: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict';
        Object.defineProperty(exports, "__esModule", { value: true });
        // **Github:** https://github.com/fidm/asn1
        //
        // **License:** MIT
        const util_1 = require("util");
        const pemLineLength = 64;
        const pemStart = '-----BEGIN ';
        const pemEnd = '-----END ';
        const pemEndOfLine = '-----';
        const procType = 'Proc-Type';
        /**
         * Implements the PEM data encoding, which originated in Privacy
         * Enhanced Mail. The most common use of PEM encoding today is in TLS keys and
         * certificates. See RFC 1421.
         *
         * A PEM represents a PEM encoded structure.
         *
         * The encoded form is:
         * ```
         * -----BEGIN Type-----
         * Headers
         * base64-encoded Bytes
         * -----END Type-----
         * ```
         *
         * Headers like:
         * ```
         * Proc-Type: 4,ENCRYPTED
         * DEK-Info: DES-EDE3-CBC,29DE8F99F382D122
         * ```
         */
        class PEM {
          /**
           * Parse PEM formatted buffer, returns one or more PEM object.
           * If there is no PEM object, it will throw error.
           * @param data buffer to parse.
           */
          static parse(data) {
            const res = [];
            const lines = data.toString('utf8').split('\n')
              .map((s) => s.trim())
              .filter((s) => s !== '' && !s.startsWith('#'));
            while (lines.length > 0) {
              res.push(parse(lines));
            }
            if (res.length === 0) {
              throw new Error('PEM: no block');
            }
            return res;
          }
          constructor(type, body) {
            this.type = type;
            this.body = body;
            this.headers = Object.create(null);
          }
          /**
           * Return exists Proc-Type header or empty string
           */
          get procType() {
            return this.getHeader(procType);
          }
          /**
           * Return a header or empty string with given key.
           */
          getHeader(key) {
            const val = this.headers[key];
            return val == null ? '' : val;
          }
          /**
           * Set a header with given key/value.
           */
          setHeader(key, val) {
            if (key.includes(':')) {
              throw new Error('pem: cannot encode a header key that contains a colon');
            }
            if (key === '' || val === '') {
              throw new Error('pem: invalid header key or value');
            }
            this.headers[key] = val;
          }
          /**
           * Encode to PEM formatted string.
           */
          toString() {
            let rVal = pemStart + this.type + pemEndOfLine + '\n';
            const headers = Object.keys(this.headers);
            if (headers.length > 0) {
              // The Proc-Type header must be written first. See RFC 1421, section 4.6.1.1
              const type = this.procType;
              if (type !== '') {
                rVal += `${procType}: ${type}\n`;
              }
              // For consistency of output, write other headers sorted by key.
              headers.sort();
              for (const key of headers) {
                if (key !== procType) {
                  rVal += `${key}: ${this.headers[key]}\n`;
                }
              }
              rVal += '\n';
            }
            const body = this.body.toString('base64');
            let offset = 0;
            while (offset < body.length) {
              rVal += body.slice(offset, offset + pemLineLength) + '\n';
              offset += pemLineLength;
            }
            rVal += pemEnd + this.type + pemEndOfLine + '\n';
            return rVal;
          }
          /**
           * Encode to PEM formatted buffer.
           */
          toBuffer() {
            return Buffer.from(this.toString(), 'utf8');
          }
          /**
           * Returns the body.
           */
          valueOf() {
            return this.body;
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            return {
              type: this.type,
              body: this.body,
              headers: this.headers,
            };
          }
          [util_1.inspect.custom](_depth, options) {
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        exports.PEM = PEM;
        function parse(lines) {
          let line = lines.shift();
          if (line == null || !line.startsWith(pemStart) || !line.endsWith(pemEndOfLine)) {
            throw new Error('pem: invalid BEGIN line');
          }
          const type = line.slice(pemStart.length, line.length - pemEndOfLine.length);
          if (type === '') {
            throw new Error('pem: invalid type');
          }
          const headers = [];
          line = lines.shift();
          while (line != null && line.includes(': ')) {
            const header = line.split(': ');
            if (header.length !== 2 || header[0] === '' || header[1] === '') {
              throw new Error('pem: invalid Header line');
            }
            headers.push(header);
            line = lines.shift();
          }
          let body = '';
          while (line != null && !line.startsWith(pemEnd)) {
            body += line;
            line = lines.shift();
          }
          if (line == null || line !== `${pemEnd}${type}${pemEndOfLine}`) {
            throw new Error('pem: invalid END line');
          }
          const pem = new PEM(type, Buffer.from(body, 'base64'));
          if (body === '' || pem.body.toString('base64') !== body) {
            throw new Error('pem: invalid base64 body');
          }
          for (const header of headers) {
            pem.setHeader(header[0], header[1]);
          }
          return pem;
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96, "util": 319 }], 19: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict';
        Object.defineProperty(exports, "__esModule", { value: true });
        // **Github:** https://github.com/fidm/x509
        //
        // **License:** MIT
        const net_1 = require("net");
        /**
         * Converts IP string into buffer, 4 bytes for IPv4, and 16 bytes for IPv6.
         * It will return null when IP string invalid.
         *
         * ```js
         * console.log(bytesFromIP('::1')) // <Buffer 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01>
         * ```
         * @param ip IP string to convert
         */
        function bytesFromIP(ip) {
          switch (net_1.isIP(ip)) {
            case 4:
              return Buffer.from(ip.split('.').map((val) => parseInt(val, 10)));
            case 6:
              const vals = ip.split(':');
              const buf = Buffer.alloc(16);
              let offset = 0;
              if (vals[vals.length - 1] === '') {
                vals[vals.length - 1] = '0';
              }
              for (let i = 0; i < vals.length; i++) {
                if (vals[i] === '') {
                  if (i + 1 < vals.length && vals[i + 1] !== '') {
                    // reset offset for non-zero values
                    offset = 16 - (vals.length - i - 1) * 2;
                  }
                  // skip zero bytes
                  continue;
                }
                buf.writeUInt16BE(parseInt(vals[i], 16), offset);
                offset += 2;
              }
              return buf;
            default:
              return null;
          }
        }
        exports.bytesFromIP = bytesFromIP;
        /**
         * Converts 4-bytes into an IPv4 string representation or 16-bytes into
         * an IPv6 string representation. The bytes must be in network order.
         *
         * ```js
         * console.log(bytesToIP(Buffer.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]))) // '::1'
         * ```
         * @param bytes buffer to convert
         */
        function bytesToIP(bytes) {
          switch (bytes.length) {
            case 4:
              return [bytes[0], bytes[1], bytes[2], bytes[3]].join('.');
            case 16:
              const ip = [];
              let zeroAt = -1;
              let zeroLen = 0;
              let maxAt = -1;
              let maxLen = 0;
              for (let i = 0; i < bytes.length; i += 2) {
                const hex = (bytes[i] << 8) | bytes[i + 1];
                if (hex === 0) {
                  zeroLen++;
                  if (zeroAt === -1) {
                    zeroAt = ip.length;
                  }
                  if (zeroLen > maxLen) {
                    maxLen = zeroLen;
                    maxAt = zeroAt;
                  }
                }
                else {
                  zeroAt = -1;
                  zeroLen = 0;
                }
                ip.push(hex.toString(16));
              }
              if (maxLen > 0) {
                let padding = '';
                const rest = ip.slice(maxAt + maxLen);
                ip.length = maxAt;
                if (ip.length === 0) {
                  padding += ':';
                }
                if (rest.length === 0) {
                  padding += ':';
                }
                ip.push(padding, ...rest);
              }
              return ip.join(':');
            default:
              return '';
          }
        }
        exports.bytesToIP = bytesToIP;
        const oids = Object.create(null);
        const oidReg = /^[0-9.]+$/;
        /**
         * Returns Object Identifier (dot-separated numeric string) that registered by initOID function.
         * It will return empty string if not exists.
         * @param nameOrId OID name or OID
         */
        function getOID(nameOrId) {
          if (oidReg.test(nameOrId) && oids[nameOrId] !== '') {
            return nameOrId;
          }
          return oids[nameOrId] == null ? '' : oids[nameOrId];
        }
        exports.getOID = getOID;
        /**
         * Returns Object Identifier name that registered by initOID function.
         * It will return the argument nameOrId if not exists.
         * @param nameOrId OID name or OID
         */
        function getOIDName(nameOrId) {
          if (!oidReg.test(nameOrId) && oids[nameOrId] !== '') {
            return nameOrId;
          }
          return oids[nameOrId] == null ? nameOrId : oids[nameOrId];
        }
        exports.getOIDName = getOIDName;
        /**
         * Register OID and name
         * @param oid Object Identifier
         * @param name Object Identifier name
         */
        function initOID(oid, name) {
          oids[oid] = name;
          oids[name] = oid;
        }
        // algorithm OIDs
        initOID('1.2.840.113549.1.1.1', 'rsaEncryption');
        initOID('1.2.840.113549.1.1.4', 'md5WithRsaEncryption');
        initOID('1.2.840.113549.1.1.5', 'sha1WithRsaEncryption');
        initOID('1.2.840.113549.1.1.8', 'mgf1');
        initOID('1.2.840.113549.1.1.10', 'RSASSA-PSS');
        initOID('1.2.840.113549.1.1.11', 'sha256WithRsaEncryption');
        initOID('1.2.840.113549.1.1.12', 'sha384WithRsaEncryption');
        initOID('1.2.840.113549.1.1.13', 'sha512WithRsaEncryption');
        initOID('1.2.840.10045.2.1', 'ecEncryption'); // ECDSA and ECDH Public Key
        initOID('1.2.840.10045.4.1', 'ecdsaWithSha1');
        initOID('1.2.840.10045.4.3.2', 'ecdsaWithSha256');
        initOID('1.2.840.10045.4.3.3', 'ecdsaWithSha384');
        initOID('1.2.840.10045.4.3.4', 'ecdsaWithSha512');
        initOID('1.2.840.10040.4.3', 'dsaWithSha1');
        initOID('2.16.840.1.101.3.4.3.2', 'dsaWithSha256');
        initOID('1.3.14.3.2.7', 'desCBC');
        initOID('1.3.14.3.2.26', 'sha1');
        initOID('2.16.840.1.101.3.4.2.1', 'sha256');
        initOID('2.16.840.1.101.3.4.2.2', 'sha384');
        initOID('2.16.840.1.101.3.4.2.3', 'sha512');
        initOID('1.2.840.113549.2.5', 'md5');
        // Algorithm Identifiers for Ed25519, Ed448, X25519 and X448 for use in the Internet X.509 Public Key Infrastructure
        // https://tools.ietf.org/html/draft-ietf-curdle-pkix-10
        initOID('1.3.101.110', 'X25519');
        initOID('1.3.101.111', 'X448');
        initOID('1.3.101.112', 'Ed25519');
        initOID('1.3.101.113', 'Ed448');
        // pkcs#7 content types
        initOID('1.2.840.113549.1.7.1', 'data');
        initOID('1.2.840.113549.1.7.2', 'signedData');
        initOID('1.2.840.113549.1.7.3', 'envelopedData');
        initOID('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');
        initOID('1.2.840.113549.1.7.5', 'digestedData');
        initOID('1.2.840.113549.1.7.6', 'encryptedData');
        // pkcs#9 oids
        initOID('1.2.840.113549.1.9.1', 'emailAddress');
        initOID('1.2.840.113549.1.9.2', 'unstructuredName');
        initOID('1.2.840.113549.1.9.3', 'contentType');
        initOID('1.2.840.113549.1.9.4', 'messageDigest');
        initOID('1.2.840.113549.1.9.5', 'signingTime');
        initOID('1.2.840.113549.1.9.6', 'counterSignature');
        initOID('1.2.840.113549.1.9.7', 'challengePassword');
        initOID('1.2.840.113549.1.9.8', 'unstructuredAddress');
        initOID('1.2.840.113549.1.9.14', 'extensionRequest');
        initOID('1.2.840.113549.1.9.20', 'friendlyName');
        initOID('1.2.840.113549.1.9.21', 'localKeyId');
        initOID('1.2.840.113549.1.9.22.1', 'x509Certificate');
        // pkcs#12 safe bags
        initOID('1.2.840.113549.1.12.10.1.1', 'keyBag');
        initOID('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');
        initOID('1.2.840.113549.1.12.10.1.3', 'certBag');
        initOID('1.2.840.113549.1.12.10.1.4', 'crlBag');
        initOID('1.2.840.113549.1.12.10.1.5', 'secretBag');
        initOID('1.2.840.113549.1.12.10.1.6', 'safeContentsBag');
        // password-based-encryption for pkcs#12
        initOID('1.2.840.113549.1.5.13', 'pkcs5PBES2');
        initOID('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');
        // hmac OIDs
        initOID('1.2.840.113549.2.7', 'hmacWithSha1');
        initOID('1.2.840.113549.2.9', 'hmacWithSha256');
        initOID('1.2.840.113549.2.10', 'hmacWithSha384');
        initOID('1.2.840.113549.2.11', 'hmacWithSha512');
        // symmetric key algorithm oids
        initOID('1.2.840.113549.3.7', '3desCBC');
        initOID('2.16.840.1.101.3.4.1.2', 'aesCBC128');
        initOID('2.16.840.1.101.3.4.1.42', 'aesCBC256');
        // certificate issuer/subject OIDs
        initOID('2.5.4.3', 'commonName');
        initOID('2.5.4.5', 'serialName');
        initOID('2.5.4.6', 'countryName');
        initOID('2.5.4.7', 'localityName');
        initOID('2.5.4.8', 'stateOrProvinceName');
        initOID('2.5.4.10', 'organizationName');
        initOID('2.5.4.11', 'organizationalUnitName');
        initOID('2.5.4.15', 'businessCategory');
        // X.509 extension OIDs
        initOID('2.16.840.1.113730.1.1', 'nsCertType');
        initOID('2.5.29.2', 'keyAttributes'); // obsolete, use .37 or .15
        initOID('2.5.29.4', 'keyUsageRestriction'); // obsolete, use .37 or .15
        initOID('2.5.29.6', 'subtreesConstraint'); // obsolete, use .30
        initOID('2.5.29.9', 'subjectDirectoryAttributes');
        initOID('2.5.29.14', 'subjectKeyIdentifier');
        initOID('2.5.29.15', 'keyUsage');
        initOID('2.5.29.16', 'privateKeyUsagePeriod');
        initOID('2.5.29.17', 'subjectAltName');
        initOID('2.5.29.18', 'issuerAltName');
        initOID('2.5.29.19', 'basicConstraints');
        initOID('2.5.29.20', 'cRLNumber');
        initOID('2.5.29.21', 'cRLReason');
        initOID('2.5.29.22', 'expirationDate');
        initOID('2.5.29.23', 'instructionCode');
        initOID('2.5.29.24', 'invalidityDate');
        initOID('2.5.29.27', 'deltaCRLIndicator');
        initOID('2.5.29.28', 'issuingDistributionPoint');
        initOID('2.5.29.29', 'certificateIssuer');
        initOID('2.5.29.30', 'nameConstraints');
        initOID('2.5.29.31', 'cRLDistributionPoints');
        initOID('2.5.29.32', 'certificatePolicies');
        initOID('2.5.29.33', 'policyMappings');
        initOID('2.5.29.35', 'authorityKeyIdentifier');
        initOID('2.5.29.36', 'policyConstraints');
        initOID('2.5.29.37', 'extKeyUsage');
        initOID('2.5.29.46', 'freshestCRL');
        initOID('2.5.29.54', 'inhibitAnyPolicy');
        // extKeyUsage purposes
        initOID('1.3.6.1.4.1.311.60.2.1.2', 'jurisdictionST');
        initOID('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionC');
        initOID('1.3.6.1.4.1.11129.2.4.2', 'timestampList');
        initOID('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');
        initOID('1.3.6.1.5.5.7.3.1', 'serverAuth');
        initOID('1.3.6.1.5.5.7.3.2', 'clientAuth');
        initOID('1.3.6.1.5.5.7.3.3', 'codeSigning');
        initOID('1.3.6.1.5.5.7.3.4', 'emailProtection');
        initOID('1.3.6.1.5.5.7.3.8', 'timeStamping');
        initOID('1.3.6.1.5.5.7.48.1', 'authorityInfoAccessOcsp');
        initOID('1.3.6.1.5.5.7.48.2', 'authorityInfoAccessIssuers');

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96, "net": 94 }], 20: [function (require, module, exports) {
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    // **Github:** https://github.com/fidm/x509
    //
    // **License:** MIT
    var common_1 = require("./common");
    exports.bytesFromIP = common_1.bytesFromIP;
    exports.bytesToIP = common_1.bytesToIP;
    exports.getOID = common_1.getOID;
    exports.getOIDName = common_1.getOIDName;
    var pki_1 = require("./pki");
    exports.PublicKey = pki_1.PublicKey;
    exports.PrivateKey = pki_1.PrivateKey;
    exports.RSAPublicKey = pki_1.RSAPublicKey;
    exports.RSAPrivateKey = pki_1.RSAPrivateKey;
    var x509_1 = require("./x509");
    exports.Certificate = x509_1.Certificate;
    exports.DistinguishedName = x509_1.DistinguishedName;

  }, { "./common": 19, "./pki": 21, "./x509": 22 }], 21: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict';
        Object.defineProperty(exports, "__esModule", { value: true });
        // **Github:** https://github.com/fidm/x509
        //
        // **License:** MIT
        const util_1 = require("util");
        const crypto_1 = require("crypto");
        const tweetnacl_1 = require("tweetnacl");
        const asn1_1 = require("@fidm/asn1");
        const common_1 = require("./common");
        /**
         * ASN.1 Template for PKCS#8 Public Key.
         */
        exports.publicKeyValidator = {
          name: 'PublicKeyInfo',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          capture: 'publicKeyInfo',
          value: [{
            name: 'PublicKeyInfo.AlgorithmIdentifier',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.SEQUENCE,
            value: [{
              name: 'PublicKeyAlgorithmIdentifier.algorithm',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.OID,
              capture: 'publicKeyOID',
            }],
          }, {
            name: 'PublicKeyInfo.PublicKey',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.BITSTRING,
            capture: 'publicKey',
          }],
        };
        /**
         * ASN.1 Template for PKCS#8 Private Key. https://tools.ietf.org/html/rfc5208
         */
        exports.privateKeyValidator = {
          name: 'PrivateKeyInfo',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          capture: 'privateKeyInfo',
          value: [{
            name: 'PrivateKeyInfo.Version',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyVersion',
          }, {
            name: 'PrivateKeyInfo.AlgorithmIdentifier',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.SEQUENCE,
            value: [{
              name: 'PrivateKeyAlgorithmIdentifier.algorithm',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.OID,
              capture: 'privateKeyOID',
            }],
          }, {
            name: 'PrivateKeyInfo.PrivateKey',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.OCTETSTRING,
            capture: 'privateKey',
          }],
        };
        // validator for an RSA public key
        const rsaPublicKeyValidator = {
          // RSAPublicKey
          name: 'RSAPublicKey',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          value: [{
            // modulus (n)
            name: 'RSAPublicKey.modulus',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'publicKeyModulus',
          }, {
            // publicExponent (e)
            name: 'RSAPublicKey.exponent',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'publicKeyExponent',
          }],
        };
        const rsaPrivateKeyValidator = {
          // RSAPrivateKey
          name: 'RSAPrivateKey',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          value: [{
            // Version (INTEGER)
            name: 'RSAPrivateKey.version',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyVersion',
          }, {
            // modulus (n)
            name: 'RSAPrivateKey.modulus',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyModulus',
          }, {
            // publicExponent (e)
            name: 'RSAPrivateKey.publicExponent',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyPublicExponent',
          }, {
            // privateExponent (d)
            name: 'RSAPrivateKey.privateExponent',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyPrivateExponent',
          }, {
            // prime1 (p)
            name: 'RSAPrivateKey.prime1',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyPrime1',
          }, {
            // prime2 (q)
            name: 'RSAPrivateKey.prime2',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyPrime2',
          }, {
            // exponent1 (d mod (p-1))
            name: 'RSAPrivateKey.exponent1',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyExponent1',
          }, {
            // exponent2 (d mod (q-1))
            name: 'RSAPrivateKey.exponent2',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyExponent2',
          }, {
            // coefficient ((inverse of q) mod p)
            name: 'RSAPrivateKey.coefficient',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.INTEGER,
            capture: 'privateKeyCoefficient',
          }],
        };
        const EdDSAPrivateKeyOIDs = [
          // https://tools.ietf.org/html/draft-ietf-curdle-pkix-10
          common_1.getOID('X25519'),
          common_1.getOID('X448'),
          common_1.getOID('Ed25519'),
          common_1.getOID('Ed448'),
        ];
        /**
         * PKCS#8 Public Key
         */
        class PublicKey {
          constructor(obj) {
            const captures = {};
            const err = obj.validate(exports.publicKeyValidator, captures);
            if (err != null) {
              throw new Error('Cannot read X.509 public key: ' + err.message);
            }
            this.oid = asn1_1.ASN1.parseOID(captures.publicKeyOID.bytes);
            this.algo = common_1.getOIDName(this.oid);
            this._pkcs8 = obj;
            this._keyRaw = asn1_1.ASN1.parseBitString(captures.publicKey.bytes).buf;
            this._finalKey = this._keyRaw;
            this._finalPEM = '';
          }
          /**
           * Parse an PublicKey for X.509 certificate from PKCS#8 PEM formatted buffer or PKCS#1 RSA PEM formatted buffer.
           * @param pem PEM formatted buffer
           */
          static fromPEM(pem) {
            const msg = asn1_1.PEM.parse(pem)[0];
            if (msg.procType.includes('ENCRYPTED')) {
              throw new Error('Could not convert public key from PEM, PEM is encrypted.');
            }
            const obj = asn1_1.ASN1.fromDER(msg.body, true);
            switch (msg.type) {
              case 'PUBLIC KEY': // PKCS#8
                return new PublicKey(obj);
              case 'RSA PUBLIC KEY': // PKCS#1
                const _pkcs8 = asn1_1.ASN1.Seq([
                  // AlgorithmIdentifier
                  asn1_1.ASN1.Seq([
                    // algorithm
                    asn1_1.ASN1.OID(common_1.getOID('rsaEncryption')),
                    // optional parameters
                    asn1_1.ASN1.Null(),
                  ]),
                  // PublicKey
                  asn1_1.ASN1.BitString(obj.DER),
                ]);
                return new PublicKey(_pkcs8);
              default:
                throw new Error('Could not convert public key from PEM, recommend PKCS#8 PEM');
            }
          }
          /**
           * Registers an external Verifier with object identifier.
           * Built-in verifiers: Ed25519, RSA, others see https://nodejs.org/api/crypto.html#crypto_class_verify
           * ```js
           * PublicKey.addVerifier(getOID('Ed25519'), function (this: PublicKey, data: Buffer, signature: Buffer): boolean {
           *   return ed25519.detached.verify(data, signature, this.keyRaw)
           * })
           * ```
           * @param oid algorithm object identifier
           * @param fn Verifier function
           */
          static addVerifier(oid, fn) {
            oid = common_1.getOID(oid);
            if (oid === '') {
              throw new Error(`Invalid object identifier: ${oid}`);
            }
            if (PublicKey._verifiers[oid] != null) {
              throw new Error(`Verifier ${oid} exists`);
            }
            PublicKey._verifiers[oid] = fn;
          }
          /**
           * underlying key buffer
           */
          get keyRaw() {
            return this._finalKey;
          }
          /**
           * Returns true if the provided data and the given signature matched.
           * ```js
           * certificate.publicKey.verify(data, signature, 'sha256') // => true or false
           * ```
           * @param data data to verify
           * @param signature signature that signed by private key
           * @param hashAlgorithm hash algorithm, such as 'sha256', 'sha1'
           */
          verify(data, signature, hashAlgorithm) {
            const verifier = PublicKey._verifiers[this.oid];
            if (verifier != null) {
              const sum = crypto_1.createHash(hashAlgorithm).update(data).digest();
              return verifier.call(this, sum, signature);
            }
            const verify = crypto_1.createVerify(hashAlgorithm);
            verify.update(data);
            return verify.verify(this.toPEM(), signature);
          }
          /**
           * Returns the digest of the PublicKey with given hash algorithm.
           * ```js
           * certificate.publicKey.getFingerprint('sha1', 'PublicKey') // => Buffer
           * ```
           * @param hashAlgorithm hash algorithm, such as 'sha256', 'sha1'
           * @param type 'PublicKey' or 'PublicKeyInfo'
           */
          getFingerprint(hashAlgorithm, type = 'PublicKey') {
            let bytes;
            switch (type) {
              case 'PublicKeyInfo':
                bytes = this._pkcs8.DER;
                break;
              case 'PublicKey':
                bytes = this._keyRaw;
                break;
              default:
                throw new Error(`Unknown fingerprint type "${type}".`);
            }
            const hasher = crypto_1.createHash(hashAlgorithm);
            hasher.update(bytes);
            return hasher.digest();
          }
          /**
           * Returns an ASN.1 object of this PublicKey
           */
          toASN1() {
            return this._pkcs8;
          }
          /**
           * Returns an DER formatted buffer of this PublicKey
           */
          toDER() {
            return this._pkcs8.DER;
          }
          /**
           * Returns an PEM formatted string of this PublicKey
           */
          toPEM() {
            if (this._finalPEM === '') {
              this._finalPEM = new asn1_1.PEM('PUBLIC KEY', this._pkcs8.DER).toString();
            }
            return this._finalPEM;
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            return {
              oid: this.oid,
              algo: this.algo,
              publicKey: this._keyRaw,
            };
          }
          [util_1.inspect.custom](_depth, options) {
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        PublicKey._verifiers = Object.create(null);
        exports.PublicKey = PublicKey;
        /**
         * PKCS#8 Private Key
         */
        class PrivateKey {
          constructor(obj) {
            // get RSA params
            const captures = Object.create(null);
            const err = obj.validate(exports.privateKeyValidator, captures);
            if (err != null) {
              throw new Error('Cannot read X.509 private key: ' + err.message);
            }
            this.version = asn1_1.ASN1.parseIntegerNum(captures.privateKeyVersion.bytes) + 1;
            this.oid = asn1_1.ASN1.parseOID(captures.privateKeyOID.bytes);
            this.algo = common_1.getOIDName(this.oid);
            this._pkcs8 = obj;
            this._keyRaw = captures.privateKey.bytes;
            this._publicKeyRaw = null;
            this._finalKey = this._keyRaw;
            this._finalPEM = '';
            if (EdDSAPrivateKeyOIDs.includes(this.oid)) {
              this._finalKey = this._keyRaw = asn1_1.ASN1.parseDER(this._keyRaw, asn1_1.Class.UNIVERSAL, asn1_1.Tag.OCTETSTRING).bytes;
              if (this.oid === '1.3.101.112') {
                const keypair = tweetnacl_1.sign.keyPair.fromSeed(this._keyRaw);
                this._publicKeyRaw = Buffer.from(keypair.publicKey);
                this._finalKey = Buffer.from(keypair.secretKey);
              }
              else if (this.version === 2) {
                for (const val of obj.mustCompound()) {
                  if (val.class === asn1_1.Class.CONTEXT_SPECIFIC && val.tag === 1) {
                    this._publicKeyRaw = asn1_1.ASN1.parseBitString(val.bytes).buf;
                    this._finalKey = Buffer.concat([this._keyRaw, this._publicKeyRaw]);
                  }
                }
              }
            }
          }
          /**
           * Parse an PrivateKey for X.509 certificate from PKCS#8 PEM formatted buffer or PKCS#1 RSA PEM formatted buffer.
           * @param pem PEM formatted buffer
           */
          static fromPEM(pem) {
            const msg = asn1_1.PEM.parse(pem)[0];
            if (msg.procType.includes('ENCRYPTED')) {
              throw new Error('Could not convert private key from PEM, PEM is encrypted.');
            }
            let obj = asn1_1.ASN1.fromDER(msg.body, true);
            switch (msg.type) {
              case 'PRIVATE KEY': // PKCS#8
                return new PrivateKey(obj);
              case 'RSA PRIVATE KEY': // PKCS#1
                obj = asn1_1.ASN1.Seq([
                  // Version (INTEGER)
                  obj.value[0],
                  // AlgorithmIdentifier
                  asn1_1.ASN1.Seq([
                    // algorithm
                    asn1_1.ASN1.OID(common_1.getOID('rsaEncryption')),
                    // optional parameters
                    asn1_1.ASN1.Null(),
                  ]),
                  // PrivateKey
                  new asn1_1.ASN1(asn1_1.Class.UNIVERSAL, asn1_1.Tag.OCTETSTRING, obj.DER),
                ]);
                return new PrivateKey(obj);
              default:
                throw new Error('Could not convert private key from PEM, recommend PKCS#8 PEM');
            }
          }
          /**
           * Registers an external Signer with object identifier.
           * Built-in verifiers: Ed25519, RSA, others see https://nodejs.org/api/crypto.html#crypto_class_sign
           * ```js
           * PrivateKey.addSigner(getOID('Ed25519'), function (this: PrivateKey, data: Buffer): Buffer {
           *   const key = this.keyRaw
           *   if (key.length !== 64) {
           *     throw new Error('Invalid signing key.')
           *   }
           *   return Buffer.from(ed25519.detached(data, key))
           * })
           * ```
           * @param oid algorithm object identifier
           * @param fn Verifier function
           */
          static addSigner(oid, fn) {
            oid = common_1.getOID(oid);
            if (oid === '') {
              throw new Error(`Invalid object identifier: ${oid}`);
            }
            if (PrivateKey._signers[oid] != null) {
              throw new Error(`Signer ${oid} exists`);
            }
            PrivateKey._signers[oid] = fn;
          }
          /**
           * underlying key buffer
           */
          get keyRaw() {
            return this._finalKey;
          }
          /**
           * Returns publicKey buffer, it is used for Ed25519/Ed448.
           */
          get publicKeyRaw() {
            return this._publicKeyRaw;
          }
          /**
           * Returns signature for the given data and hash algorithm.
           * @param data
           * @param hashAlgorithm
           */
          sign(data, hashAlgorithm) {
            const signer = PrivateKey._signers[this.oid];
            if (signer != null) {
              const sum = crypto_1.createHash(hashAlgorithm).update(data).digest();
              return signer.call(this, sum);
            }
            const sign = crypto_1.createSign(hashAlgorithm);
            sign.update(data);
            return sign.sign(this.toPEM());
          }
          /**
           * Returns an ASN.1 object of this PrivateKey
           */
          toASN1() {
            return this._pkcs8;
          }
          /**
           * Returns an DER formatted buffer of this PrivateKey
           */
          toDER() {
            return this._pkcs8.DER;
          }
          /**
           * Returns an PEM formatted string of this PrivateKey
           */
          toPEM() {
            if (this._finalPEM === '') {
              this._finalPEM = new asn1_1.PEM('PRIVATE KEY', this._pkcs8.DER).toString();
            }
            return this._finalPEM;
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            return {
              version: this.version,
              oid: this.oid,
              algo: this.algo,
              privateKey: this._keyRaw,
              publicKey: this._publicKeyRaw,
            };
          }
          [util_1.inspect.custom](_depth, options) {
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        PrivateKey._signers = Object.create(null);
        exports.PrivateKey = PrivateKey;
        /**
         * PKCS#1 RSA Public Key
         */
        class RSAPublicKey extends PublicKey {
          static fromPublicKey(publicKey) {
            return new RSAPublicKey(publicKey.toASN1());
          }
          constructor(obj) {
            super(obj);
            if (common_1.getOID(this.oid) !== common_1.getOID('rsaEncryption')) {
              throw new Error(`Invalid RSA public key, unknown OID: ${this.oid}`);
            }
            // get RSA params
            const captures = Object.create(null);
            this._pkcs1 = asn1_1.ASN1.fromDER(this._keyRaw, true);
            const err = this._pkcs1.validate(rsaPublicKeyValidator, captures);
            if (err != null) {
              throw new Error('Cannot read RSA public key: ' + err.message);
            }
            this.modulus = asn1_1.ASN1.parseIntegerStr(captures.publicKeyModulus.bytes);
            this.exponent = asn1_1.ASN1.parseIntegerNum(captures.publicKeyExponent.bytes);
          }
          /**
           * Returns an PKCS#1 ASN.1 object of this RSAPublicKey
           */
          toASN1() {
            return this._pkcs1;
          }
          /**
           * Returns an PKCS#1 DER formatted buffer of this RSAPublicKey
           */
          toDER() {
            return this._keyRaw;
          }
          /**
           * Returns an PKCS#1 PEM formatted string of this RSAPublicKey
           */
          toPEM() {
            if (this._finalPEM === '') {
              this._finalPEM = new asn1_1.PEM('RSA PUBLIC KEY', this._keyRaw).toString();
            }
            return this._finalPEM;
          }
          /**
           * Returns an PKCS#8 PEM formatted string of this RSAPublicKey
           */
          toPublicKeyPEM() {
            return new asn1_1.PEM('PUBLIC KEY', this._pkcs8.DER).toString();
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            return {
              oid: this.oid,
              algo: this.algo,
              modulus: trimLeadingZeroByte(this.modulus),
              exponent: this.exponent,
            };
          }
          [util_1.inspect.custom](_depth, options) {
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        exports.RSAPublicKey = RSAPublicKey;
        /**
         * PKCS#1 RSA Private Key
         */
        class RSAPrivateKey extends PrivateKey {
          static fromPrivateKey(privateKey) {
            return new RSAPrivateKey(privateKey.toASN1());
          }
          constructor(obj) {
            super(obj);
            if (common_1.getOID(this.oid) !== common_1.getOID('rsaEncryption')) {
              throw new Error(`Invalid RSA private key, unknown OID: ${this.oid}`);
            }
            // get RSA params
            const captures = Object.create(null);
            this._pkcs1 = asn1_1.ASN1.fromDER(this._keyRaw, true);
            const err = this._pkcs1.validate(rsaPrivateKeyValidator, captures);
            if (err != null) {
              throw new Error('Cannot read RSA private key: ' + err.message);
            }
            this.publicExponent = asn1_1.ASN1.parseIntegerNum(captures.privateKeyPublicExponent.bytes);
            this.privateExponent = asn1_1.ASN1.parseIntegerStr(captures.privateKeyPrivateExponent.bytes);
            this.modulus = asn1_1.ASN1.parseIntegerStr(captures.privateKeyModulus.bytes);
            this.prime1 = asn1_1.ASN1.parseIntegerStr(captures.privateKeyPrime1.bytes);
            this.prime2 = asn1_1.ASN1.parseIntegerStr(captures.privateKeyPrime2.bytes);
            this.exponent1 = asn1_1.ASN1.parseIntegerStr(captures.privateKeyExponent1.bytes);
            this.exponent2 = asn1_1.ASN1.parseIntegerStr(captures.privateKeyExponent2.bytes);
            this.coefficient = asn1_1.ASN1.parseIntegerStr(captures.privateKeyCoefficient.bytes);
          }
          /**
           * Returns an PKCS#1 ASN.1 object of this RSAPrivateKey
           */
          toASN1() {
            return this._pkcs1;
          }
          /**
           * Returns an PKCS#1 DER formatted buffer of this RSAPrivateKey
           */
          toDER() {
            return this._keyRaw;
          }
          /**
           * Returns an PKCS#1 PEM formatted string of this RSAPrivateKey
           */
          toPEM() {
            if (this._finalPEM === '') {
              this._finalPEM = new asn1_1.PEM('RSA PRIVATE KEY', this._keyRaw).toString();
            }
            return this._finalPEM;
          }
          /**
           * Returns an PKCS#8 PEM formatted string of this RSAPrivateKey
           */
          toPrivateKeyPEM() {
            return new asn1_1.PEM('PRIVATE KEY', this._pkcs8.DER).toString();
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            return {
              version: this.version,
              oid: this.oid,
              algo: this.algo,
              publicExponent: this.publicExponent,
              privateExponent: trimLeadingZeroByte(this.privateExponent),
              modulus: trimLeadingZeroByte(this.modulus),
              prime1: trimLeadingZeroByte(this.prime1),
              prime2: trimLeadingZeroByte(this.prime2),
              exponent1: trimLeadingZeroByte(this.exponent1),
              exponent2: trimLeadingZeroByte(this.exponent2),
              coefficient: trimLeadingZeroByte(this.coefficient),
            };
          }
          [util_1.inspect.custom](_depth, options) {
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        exports.RSAPrivateKey = RSAPrivateKey;
        // leading 00 byte is signed representation for BigInteger
        // https://stackoverflow.com/questions/8515691/getting-1-byte-extra-in-the-modulus-rsa-key-and-sometimes-for-exponents-also
        function trimLeadingZeroByte(hex) {
          return (hex.length % 8 !== 0) && hex.startsWith('00') ? hex.slice(2) : hex;
        }
        PublicKey.addVerifier(common_1.getOID('Ed25519'), function (data, signature) {
          return tweetnacl_1.sign.detached.verify(data, signature, this.keyRaw);
        });
        PrivateKey.addSigner(common_1.getOID('Ed25519'), function (data) {
          const key = this.keyRaw;
          if (key.length !== 64) {
            throw new Error('Invalid signing key.');
          }
          return Buffer.from(tweetnacl_1.sign.detached(data, key));
        });

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./common": 19, "@fidm/asn1": 17, "buffer": 96, "crypto": 132, "tweetnacl": 313, "util": 319 }], 22: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict';
        Object.defineProperty(exports, "__esModule", { value: true });
        // **Github:** https://github.com/fidm/x509
        //
        // **License:** MIT
        const util_1 = require("util");
        const crypto_1 = require("crypto");
        const asn1_1 = require("@fidm/asn1");
        const common_1 = require("./common");
        const pki_1 = require("./pki");
        // short name OID mappings
        const shortNames = Object.create(null);
        shortNames.CN = common_1.getOID('commonName');
        shortNames.commonName = 'CN';
        shortNames.C = common_1.getOID('countryName');
        shortNames.countryName = 'C';
        shortNames.L = common_1.getOID('localityName');
        shortNames.localityName = 'L';
        shortNames.ST = common_1.getOID('stateOrProvinceName');
        shortNames.stateOrProvinceName = 'ST';
        shortNames.O = common_1.getOID('organizationName');
        shortNames.organizationName = 'O';
        shortNames.OU = common_1.getOID('organizationalUnitName');
        shortNames.organizationalUnitName = 'OU';
        shortNames.E = common_1.getOID('emailAddress');
        shortNames.emailAddress = 'E';
        function getShortName(name) {
          return shortNames[name] == null ? '' : shortNames[name];
        }
        // validator for an X.509v3 certificate
        const x509CertificateValidator = {
          name: 'Certificate',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          value: [{
            name: 'Certificate.TBSCertificate',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.SEQUENCE,
            capture: 'tbsCertificate',
            value: [{
              name: 'Certificate.TBSCertificate.version',
              class: asn1_1.Class.CONTEXT_SPECIFIC,
              tag: asn1_1.Tag.NONE,
              optional: true,
              value: [{
                name: 'Certificate.TBSCertificate.version.integer',
                class: asn1_1.Class.UNIVERSAL,
                tag: asn1_1.Tag.INTEGER,
                capture: 'certVersion',
              }],
            }, {
              name: 'Certificate.TBSCertificate.serialNumber',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.INTEGER,
              capture: 'certSerialNumber',
            }, {
              name: 'Certificate.TBSCertificate.signature',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.SEQUENCE,
              value: [{
                name: 'Certificate.TBSCertificate.signature.algorithm',
                class: asn1_1.Class.UNIVERSAL,
                tag: asn1_1.Tag.OID,
                capture: 'certinfoSignatureOID',
              }, {
                name: 'Certificate.TBSCertificate.signature.parameters',
                class: asn1_1.Class.UNIVERSAL,
                tag: asn1_1.Tag.OCTETSTRING,
                optional: true,
                capture: 'certinfoSignatureParams',
              }],
            }, {
              name: 'Certificate.TBSCertificate.issuer',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.SEQUENCE,
              capture: 'certIssuer',
            }, {
              name: 'Certificate.TBSCertificate.validity',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.SEQUENCE,
              value: [{
                name: 'Certificate.TBSCertificate.validity.notBefore',
                class: asn1_1.Class.UNIVERSAL,
                tag: [asn1_1.Tag.UTCTIME, asn1_1.Tag.GENERALIZEDTIME],
                capture: 'certValidityNotBefore',
              }, {
                name: 'Certificate.TBSCertificate.validity.notAfter',
                class: asn1_1.Class.UNIVERSAL,
                tag: [asn1_1.Tag.UTCTIME, asn1_1.Tag.GENERALIZEDTIME],
                capture: 'certValidityNotAfter',
              }],
            }, {
              // Name (subject) (RDNSequence)
              name: 'Certificate.TBSCertificate.subject',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.SEQUENCE,
              capture: 'certSubject',
            },
            // SubjectPublicKeyInfo
            pki_1.publicKeyValidator,
            {
              // issuerUniqueID (optional)
              name: 'Certificate.TBSCertificate.issuerUniqueID',
              class: asn1_1.Class.CONTEXT_SPECIFIC,
              tag: asn1_1.Tag.BOOLEAN,
              optional: true,
              value: [{
                name: 'Certificate.TBSCertificate.issuerUniqueID.id',
                class: asn1_1.Class.UNIVERSAL,
                tag: asn1_1.Tag.BITSTRING,
                capture: 'certIssuerUniqueId',
              }],
            }, {
              // subjectUniqueID (optional)
              name: 'Certificate.TBSCertificate.subjectUniqueID',
              class: asn1_1.Class.CONTEXT_SPECIFIC,
              tag: asn1_1.Tag.INTEGER,
              optional: true,
              value: [{
                name: 'Certificate.TBSCertificate.subjectUniqueID.id',
                class: asn1_1.Class.UNIVERSAL,
                tag: asn1_1.Tag.BITSTRING,
                capture: 'certSubjectUniqueId',
              }],
            }, {
              // Extensions (optional)
              name: 'Certificate.TBSCertificate.extensions',
              class: asn1_1.Class.CONTEXT_SPECIFIC,
              tag: asn1_1.Tag.BITSTRING,
              capture: 'certExtensions',
              optional: true,
            }],
          }, {
            // AlgorithmIdentifier (signature algorithm)
            name: 'Certificate.signatureAlgorithm',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.SEQUENCE,
            value: [{
              // algorithm
              name: 'Certificate.signatureAlgorithm.algorithm',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.OID,
              capture: 'certSignatureOID',
            }, {
              name: 'Certificate.TBSCertificate.signature.parameters',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.OCTETSTRING,
              optional: true,
              capture: 'certSignatureParams',
            }],
          }, {
            name: 'Certificate.signatureValue',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.BITSTRING,
            capture: 'certSignature',
          }],
        };
        /**
         * DistinguishedName for X.509v3 certificate.
         */
        class DistinguishedName {
          constructor() {
            this.attributes = [];
            this.uniqueId = null;
          }
          get commonName() {
            return this.getFieldValue('commonName');
          }
          get organizationName() {
            return this.getFieldValue('organizationName');
          }
          get organizationalUnitName() {
            return this.getFieldValue('organizationalUnitName');
          }
          get countryName() {
            return this.getFieldValue('countryName');
          }
          get localityName() {
            return this.getFieldValue('localityName');
          }
          get serialName() {
            return this.getFieldValue('serialName');
          }
          getHash() {
            const hasher = crypto_1.createHash('sha1');
            for (const attr of this.attributes) {
              hasher.update(attr.oid);
              hasher.update(attr.value);
            }
            return hasher.digest();
          }
          getField(key) {
            for (const attr of this.attributes) {
              if (key === attr.oid || key === attr.name || key === attr.shortName) {
                return attr;
              }
            }
            return null;
          }
          addField(attr) {
            fillMissingFields([attr]);
            this.attributes.push(attr);
          }
          setAttrs(attrs) {
            // set new attributes, clear hash
            fillMissingFields(attrs);
            this.attributes = attrs;
          }
          toJSON() {
            const obj = {};
            for (const attr of this.attributes) {
              const key = attr.shortName;
              if (typeof key === 'string' && key !== '') {
                obj[key] = attr.value;
              }
            }
            obj.uniqueId = this.uniqueId;
            obj.attributes = this.attributes;
            return obj;
          }
          getFieldValue(key) {
            const val = this.getField(key);
            if (val != null) {
              return val.value;
            }
            return '';
          }
        }
        exports.DistinguishedName = DistinguishedName;
        /**
         * X.509v3 Certificate.
         */
        class Certificate {
          /**
           * Parse one or more X.509 certificates from PEM formatted buffer.
           * If there is no certificate, it will throw error.
           * @param data PEM formatted buffer
           */
          static fromPEMs(data) {
            const certs = [];
            const pems = asn1_1.PEM.parse(data);
            for (const pem of pems) {
              if (pem.type !== 'CERTIFICATE' &&
                pem.type !== 'X509 CERTIFICATE' &&
                pem.type !== 'TRUSTED CERTIFICATE') {
                throw new Error('Could not convert certificate from PEM: invalid type');
              }
              if (pem.procType.includes('ENCRYPTED')) {
                throw new Error('Could not convert certificate from PEM: PEM is encrypted.');
              }
              const obj = asn1_1.ASN1.fromDER(pem.body);
              certs.push(new Certificate(obj));
            }
            if (certs.length === 0) {
              throw new Error('No Certificate');
            }
            return certs;
          }
          /**
           * Parse an X.509 certificate from PEM formatted buffer.
           * @param data PEM formatted buffer
           */
          static fromPEM(data) {
            return Certificate.fromPEMs(data)[0];
          }
          /**
           * Creates an X.509 certificate from an ASN.1 object
           * @param obj an ASN.1 object
           */
          constructor(obj) {
            // validate certificate and capture data
            const captures = Object.create(null);
            const err = obj.validate(x509CertificateValidator, captures);
            if (err != null) {
              throw new Error('Cannot read X.509 certificate: ' + err.message);
            }
            this.raw = obj.DER;
            this.version = captures.certVersion == null ? 0 : (asn1_1.ASN1.parseIntegerNum(captures.certVersion.bytes) + 1);
            this.serialNumber = asn1_1.ASN1.parseIntegerStr(captures.certSerialNumber.bytes);
            this.signatureOID = asn1_1.ASN1.parseOID(captures.certSignatureOID.bytes);
            this.signatureAlgorithm = common_1.getOIDName(this.signatureOID);
            this.infoSignatureOID = asn1_1.ASN1.parseOID(captures.certinfoSignatureOID.bytes);
            this.signature = asn1_1.ASN1.parseBitString(captures.certSignature.bytes).buf;
            this.validFrom = asn1_1.ASN1.parseTime(captures.certValidityNotBefore.tag, captures.certValidityNotBefore.bytes);
            this.validTo = asn1_1.ASN1.parseTime(captures.certValidityNotAfter.tag, captures.certValidityNotAfter.bytes);
            this.issuer = new DistinguishedName();
            this.issuer.setAttrs(RDNAttributesAsArray(captures.certIssuer));
            if (captures.certIssuerUniqueId != null) {
              this.issuer.uniqueId = asn1_1.ASN1.parseBitString(captures.certIssuerUniqueId.bytes);
            }
            this.subject = new DistinguishedName();
            this.subject.setAttrs(RDNAttributesAsArray(captures.certSubject));
            if (captures.certSubjectUniqueId != null) {
              this.subject.uniqueId = asn1_1.ASN1.parseBitString(captures.certSubjectUniqueId.bytes);
            }
            this.extensions = [];
            this.subjectKeyIdentifier = '';
            this.authorityKeyIdentifier = '';
            this.ocspServer = '';
            this.issuingCertificateURL = '';
            this.isCA = false;
            this.maxPathLen = -1;
            this.basicConstraintsValid = false;
            this.keyUsage = 0;
            this.dnsNames = [];
            this.emailAddresses = [];
            this.ipAddresses = [];
            this.uris = [];
            if (captures.certExtensions != null) {
              this.extensions = certificateExtensionsFromAsn1(captures.certExtensions);
              for (const ext of this.extensions) {
                if (typeof ext.subjectKeyIdentifier === 'string') {
                  this.subjectKeyIdentifier = ext.subjectKeyIdentifier;
                }
                if (typeof ext.authorityKeyIdentifier === 'string') {
                  this.authorityKeyIdentifier = ext.authorityKeyIdentifier;
                }
                if (typeof ext.authorityInfoAccessOcsp === 'string') {
                  this.ocspServer = ext.authorityInfoAccessOcsp;
                }
                if (typeof ext.authorityInfoAccessIssuers === 'string') {
                  this.issuingCertificateURL = ext.authorityInfoAccessIssuers;
                }
                if (typeof ext.basicConstraintsValid === 'boolean') {
                  this.isCA = ext.isCA;
                  this.maxPathLen = ext.maxPathLen;
                  this.basicConstraintsValid = ext.basicConstraintsValid;
                }
                if (typeof ext.keyUsage === 'number') {
                  this.keyUsage = ext.keyUsage;
                }
                if (Array.isArray(ext.altNames)) {
                  for (const item of ext.altNames) {
                    if (item.dnsName != null) {
                      this.dnsNames.push(item.dnsName);
                    }
                    if (item.email != null) {
                      this.emailAddresses.push(item.email);
                    }
                    if (item.ip != null) {
                      this.ipAddresses.push(item.ip);
                    }
                    if (item.uri != null) {
                      this.uris.push(item.uri);
                    }
                  }
                }
              }
            }
            this.publicKey = new pki_1.PublicKey(captures.publicKeyInfo);
            this.publicKeyRaw = this.publicKey.toDER();
            this.tbsCertificate = captures.tbsCertificate;
          }
          /**
           * Gets an extension by its name or oid.
           * If extension exists and a key provided, it will return extension[key].
           * ```js
           * certificate.getExtension('keyUsage')
           * certificate.getExtension('2.5.29.15')
           * // => { oid: '2.5.29.15',
           * //      critical: true,
           * //      value: <Buffer 03 02 05 a0>,
           * //      name: 'keyUsage',
           * //      digitalSignature: true,
           * //      nonRepudiation: false,
           * //      keyEncipherment: true,
           * //      dataEncipherment: false,
           * //      keyAgreement: false,
           * //      keyCertSign: false,
           * //      cRLSign: false,
           * //      encipherOnly: false,
           * //      decipherOnly: false }
           * certificate.getExtension('keyUsage', 'keyCertSign') // => false
           * ```
           * @param name extension name or OID
           * @param key key in extension
           */
          getExtension(name, key = '') {
            for (const ext of this.extensions) {
              if (name === ext.oid || name === ext.name) {
                return key === '' ? ext : ext[key];
              }
            }
            return null;
          }
          /**
           * Returns null if a subject certificate is valid, or error if invalid.
           * Note that it does not check validity time, DNS name, ip or others.
           * @param child subject's Certificate
           */
          checkSignature(child) {
            // RFC 5280, 4.2.1.9:
            // "If the basic constraints extension is not present in a version 3
            // certificate, or the extension is present but the cA boolean is not
            // asserted, then the certified public key MUST NOT be used to verify
            // certificate signatures."
            // (not handler entrust broken SPKI, See http://www.entrust.net/knowledge-base/technote.cfm?tn=7869)
            if (this.version === 3 && !this.basicConstraintsValid || (this.basicConstraintsValid && !this.isCA)) {
              return new Error('The parent constraint violation error');
            }
            if (this.getExtension('keyUsage', 'keyCertSign') !== true) {
              return new Error('The parent constraint violation error');
            }
            if (!child.isIssuer(this)) {
              return new Error('The parent certificate did not issue the given child certificate');
            }
            const agl = getHashAgl(child.signatureOID);
            if (agl === '') {
              return new Error('Unknown child signature OID.');
            }
            const res = this.publicKey.verify(child.tbsCertificate.DER, child.signature, agl);
            if (res === false) {
              return new Error('Child signature not matched');
            }
            return null;
          }
          /**
           * Returns true if this certificate's issuer matches the passed
           * certificate's subject. Note that no signature check is performed.
           * @param parent issuer's Certificate
           */
          isIssuer(parent) {
            return this.issuer.getHash().equals(parent.subject.getHash());
          }
          /**
           * Verifies the subjectKeyIdentifier extension value for this certificate
           * against its public key.
           */
          verifySubjectKeyIdentifier() {
            const ski = this.publicKey.getFingerprint('sha1', 'PublicKey');
            return ski.toString('hex') === this.subjectKeyIdentifier;
          }
          /**
           * Return a friendly JSON object for debuging.
           */
          toJSON() {
            const obj = {};
            for (const key of Object.keys(this)) {
              obj[key] = toJSONify(this[key]);
            }
            delete obj.tbsCertificate;
            return obj;
          }
          [util_1.inspect.custom](_depth, options) {
            if (options.depth <= 2) {
              options.depth = 10;
            }
            return `<${this.constructor.name} ${util_1.inspect(this.toJSON(), options)}>`;
          }
        }
        exports.Certificate = Certificate;
        function certificateExtensionsFromAsn1(exts) {
          const res = [];
          for (const val of exts.mustCompound()) {
            for (const ext of val.mustCompound()) {
              res.push(certificateExtensionFromAsn1(ext));
            }
          }
          return res;
        }
        function certificateExtensionFromAsn1(ext) {
          // an extension has:
          // [0] extnID      OBJECT IDENTIFIER
          // [1] critical    BOOLEAN DEFAULT FALSE
          // [2] extnValue   OCTET STRING
          const e = {};
          e.oid = asn1_1.ASN1.parseOID(ext.value[0].bytes);
          e.critical = false;
          if (ext.value[1].tag === asn1_1.Tag.BOOLEAN) {
            e.critical = asn1_1.ASN1.parseBool(ext.value[1].bytes);
            e.value = ext.value[2].bytes;
          }
          else {
            e.value = ext.value[1].bytes;
          }
          // if the oid is known, get its name
          e.name = common_1.getOIDName(e.oid);
          switch (e.name) {
            // handle key usage
            case 'keyUsage':
              decodeExtKeyUsage(e);
              break;
            case 'basicConstraints':
              decodeExtBasicConstraints(e);
              break;
            case 'extKeyUsage':
              decodeExtExtKeyUsage(e);
              break;
            case 'nsCertType':
              decodeExtNsCertType(e);
              break;
            case 'subjectAltName':
              decodeExtAltName(e);
              break;
            case 'issuerAltName':
              decodeExtAltName(e);
              break;
            case 'subjectKeyIdentifier':
              decodeExtSubjectKeyIdentifier(e);
              break;
            case 'authorityKeyIdentifier':
              decodeExtAuthorityKeyIdentifier(e);
              break;
            case 'authorityInfoAccess':
              decodeExtAuthorityInfoAccess(e);
              break;
          }
          return e;
        }
        function decodeExtKeyUsage(e) {
          // ev is a BITSTRING
          const ev = asn1_1.ASN1.parseBitString(asn1_1.ASN1.fromDER(e.value).bytes);
          let b2 = 0x00;
          let b3 = 0x00;
          e.keyUsage = 0;
          for (let i = 0; i < 9; i++) {
            if (ev.at(i) !== 0) {
              e.keyUsage |= 1 << i;
            }
          }
          if (ev.buf.length > 0) {
            b2 = ev.buf[0];
            b3 = ev.buf.length > 1 ? ev.buf[1] : 0;
          }
          // set flags
          e.digitalSignature = (b2 & 0x80) === 0x80;
          e.nonRepudiation = (b2 & 0x40) === 0x40;
          e.keyEncipherment = (b2 & 0x20) === 0x20;
          e.dataEncipherment = (b2 & 0x10) === 0x10;
          e.keyAgreement = (b2 & 0x08) === 0x08;
          e.keyCertSign = (b2 & 0x04) === 0x04;
          e.cRLSign = (b2 & 0x02) === 0x02;
          e.encipherOnly = (b2 & 0x01) === 0x01;
          e.decipherOnly = (b3 & 0x80) === 0x80;
        }
        function decodeExtBasicConstraints(e) {
          // handle basic constraints
          // get value as SEQUENCE
          const ev = asn1_1.ASN1.fromDER(e.value);
          const vals = ev.mustCompound();
          // get cA BOOLEAN flag (defaults to false)
          if (vals.length > 0 && vals[0].tag === asn1_1.Tag.BOOLEAN) {
            e.isCA = asn1_1.ASN1.parseBool(vals[0].bytes);
          }
          else {
            e.isCA = false;
          }
          // get path length constraint
          let value = null;
          if (vals.length > 0 && vals[0].tag === asn1_1.Tag.INTEGER) {
            value = vals[0].bytes;
          }
          else if (vals.length > 1) {
            value = vals[1].bytes;
          }
          if (value !== null) {
            e.maxPathLen = asn1_1.ASN1.parseInteger(value);
          }
          else {
            e.maxPathLen = -1;
          }
          e.basicConstraintsValid = true;
        }
        function decodeExtExtKeyUsage(e) {
          // handle extKeyUsage
          // value is a SEQUENCE of OIDs
          const ev = asn1_1.ASN1.fromDER(e.value);
          const vals = ev.mustCompound();
          for (const val of vals) {
            e[common_1.getOIDName(asn1_1.ASN1.parseOID(val.bytes))] = true;
          }
        }
        function decodeExtNsCertType(e) {
          // ev is a BITSTRING
          const ev = asn1_1.ASN1.parseBitString(asn1_1.ASN1.fromDER(e.value).bytes);
          let b2 = 0x00;
          if (ev.buf.length > 0) {
            b2 = ev.buf[0];
          }
          // set flags
          e.client = (b2 & 0x80) === 0x80;
          e.server = (b2 & 0x40) === 0x40;
          e.email = (b2 & 0x20) === 0x20;
          e.objsign = (b2 & 0x10) === 0x10;
          e.reserved = (b2 & 0x08) === 0x08;
          e.sslCA = (b2 & 0x04) === 0x04;
          e.emailCA = (b2 & 0x02) === 0x02;
          e.objCA = (b2 & 0x01) === 0x01;
        }
        function decodeExtAltName(e) {
          // handle subjectAltName/issuerAltName
          e.altNames = [];
          // ev is a SYNTAX SEQUENCE
          const ev = asn1_1.ASN1.fromDER(e.value);
          const vals = ev.mustCompound();
          for (const gn of vals) {
            // get GeneralName
            const item = {
              tag: gn.tag,
              value: gn.bytes,
            };
            e.altNames.push(item);
            switch (gn.tag) {
              // rfc822Name, emailAddresses
              case 1:
                item.email = gn.bytes.toString();
                break;
              // dNSName
              case 2:
                item.dnsName = gn.bytes.toString();
                break;
              // uniformResourceIdentifier (URI)
              case 6:
                item.uri = gn.bytes.toString();
                break;
              // IPAddress
              case 7:
                // convert to IPv4/IPv6 string representation
                item.ip = common_1.bytesToIP(gn.bytes);
                break;
              // registeredID
              case 8:
                item.oid = asn1_1.ASN1.parseOID(gn.bytes);
                break;
              default:
              // unsupported
            }
          }
        }
        const subjectKeyIdentifierValidator = {
          name: 'subjectKeyIdentifier',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.OCTETSTRING,
          capture: 'subjectKeyIdentifier',
        };
        function decodeExtSubjectKeyIdentifier(e) {
          const captures = asn1_1.ASN1.parseDERWithTemplate(e.value, subjectKeyIdentifierValidator);
          e.subjectKeyIdentifier = captures.subjectKeyIdentifier.bytes.toString('hex');
        }
        const authorityKeyIdentifierValidator = {
          name: 'authorityKeyIdentifier',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          value: [{
            name: 'authorityKeyIdentifier.value',
            class: asn1_1.Class.CONTEXT_SPECIFIC,
            tag: asn1_1.Tag.NONE,
            capture: 'authorityKeyIdentifier',
          }],
        };
        function decodeExtAuthorityKeyIdentifier(e) {
          const captures = asn1_1.ASN1.parseDERWithTemplate(e.value, authorityKeyIdentifierValidator);
          e.authorityKeyIdentifier = captures.authorityKeyIdentifier.bytes.toString('hex');
        }
        const authorityInfoAccessValidator = {
          name: 'authorityInfoAccess',
          class: asn1_1.Class.UNIVERSAL,
          tag: asn1_1.Tag.SEQUENCE,
          value: [{
            name: 'authorityInfoAccess.authorityInfoAccessOcsp',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.SEQUENCE,
            optional: true,
            value: [{
              name: 'authorityInfoAccess.authorityInfoAccessOcsp.oid',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.OID,
            }, {
              name: 'authorityInfoAccess.authorityInfoAccessOcsp.value',
              class: asn1_1.Class.CONTEXT_SPECIFIC,
              tag: asn1_1.Tag.OID,
              capture: 'authorityInfoAccessOcsp',
            }],
          }, {
            name: 'authorityInfoAccess.authorityInfoAccessIssuers',
            class: asn1_1.Class.UNIVERSAL,
            tag: asn1_1.Tag.SEQUENCE,
            optional: true,
            value: [{
              name: 'authorityInfoAccess.authorityInfoAccessIssuers.oid',
              class: asn1_1.Class.UNIVERSAL,
              tag: asn1_1.Tag.OID,
            }, {
              name: 'authorityInfoAccess.authorityInfoAccessIssuers.value',
              class: asn1_1.Class.CONTEXT_SPECIFIC,
              tag: asn1_1.Tag.OID,
              capture: 'authorityInfoAccessIssuers',
            }],
          }],
        };
        function decodeExtAuthorityInfoAccess(e) {
          const captures = asn1_1.ASN1.parseDERWithTemplate(e.value, authorityInfoAccessValidator);
          if (captures.authorityInfoAccessOcsp != null) {
            e.authorityInfoAccessOcsp = captures.authorityInfoAccessOcsp.bytes.toString();
          }
          if (captures.authorityInfoAccessIssuers != null) {
            e.authorityInfoAccessIssuers = captures.authorityInfoAccessIssuers.bytes.toString();
          }
        }
        // Fills in missing fields in attributes.
        function fillMissingFields(attrs) {
          for (const attr of attrs) {
            // populate missing name
            if (attr.name == null || attr.name === '') {
              if (attr.oid != null) {
                attr.name = common_1.getOIDName(attr.oid);
              }
              if (attr.name === '' && attr.shortName != null) {
                attr.name = common_1.getOIDName(shortNames[attr.shortName]);
              }
            }
            // populate missing type (OID)
            if (attr.oid == null || attr.oid === '') {
              if (attr.name !== '') {
                attr.oid = common_1.getOID(attr.name);
              }
              else {
                throw new Error('Attribute oid not specified.');
              }
            }
            // populate missing shortname
            if (attr.shortName == null || attr.shortName === '') {
              attr.shortName = shortNames[attr.name] == null ? '' : shortNames[attr.name];
            }
            if (attr.value == null) {
              throw new Error('Attribute value not specified.');
            }
          }
        }
        // Only support RSA and ECDSA
        function getHashAgl(oid) {
          switch (common_1.getOIDName(oid)) {
            case 'sha1WithRsaEncryption':
              return 'sha1';
            case 'md5WithRsaEncryption':
              return 'md5';
            case 'sha256WithRsaEncryption':
              return 'sha256';
            case 'sha384WithRsaEncryption':
              return 'sha384';
            case 'sha512WithRsaEncryption':
              return 'sha512';
            case 'RSASSA-PSS':
              return 'sha256';
            case 'ecdsaWithSha1':
              return 'sha1';
            case 'ecdsaWithSha256':
              return 'sha256';
            case 'ecdsaWithSha384':
              return 'sha384';
            case 'ecdsaWithSha512':
              return 'sha512';
            case 'dsaWithSha1':
              return 'sha1';
            case 'dsaWithSha256':
              return 'sha256';
            default:
              return '';
          }
        }
        // Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
        // sets into an array with objects that have type and value properties.
        function RDNAttributesAsArray(rdn) {
          const rval = [];
          // each value in 'rdn' in is a SET of RelativeDistinguishedName
          // var set, attr, obj
          for (const set of rdn.mustCompound()) {
            // each value in the SET is an AttributeTypeAndValue sequence
            // containing first a type (an OID) and second a value (defined by the OID)
            for (const attr of set.mustCompound()) {
              const values = attr.mustCompound();
              const obj = {};
              obj.oid = asn1_1.ASN1.parseOID(values[0].bytes);
              obj.value = values[1].value;
              obj.valueTag = values[1].tag;
              obj.name = common_1.getOIDName(obj.oid);
              obj.shortName = getShortName(obj.name);
              rval.push(obj);
            }
          }
          return rval;
        }
        function toJSONify(val) {
          if (val != null && !(val instanceof Buffer) && typeof val.toJSON === 'function') {
            return val.toJSON();
          }
          return val;
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./common": 19, "./pki": 21, "@fidm/asn1": 17, "buffer": 96, "crypto": 132, "util": 319 }], 23: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /* jshint esversion: 6 */
        /* jslint node: true */
        'use strict';

        const crypto = require('crypto');

        const toAlg = {
          16: 'aes-128-cbc',
          32: 'aes-256-cbc'
        };

        const supportedLen = {
          8: true,
          16: true
        };

        const iv = Buffer.alloc(16, 0); // Initialization vector.

        exports.create = function (key, msg, len) {
          if (!Buffer.isBuffer(key)) {
            throw new Error('Key must be of type Buffer');
          }
          if (!Buffer.isBuffer(msg)) {
            throw new Error('Msg must be of type Buffer');
          }
          if (!supportedLen[len]) {
            throw new Error('Len must be 8 or 16');
          }

          const algorithm = toAlg[key.length];

          if (!algorithm) {
            throw new Error('Unsupported key length ' + key.length);
          }

          const msgLen = msg.length;
          const padLen = 16 - (msgLen % 16);
          const padding = (padLen === 16) ? Buffer.alloc(0, 0) : Buffer.alloc(padLen, 0);
          const paddedMsg = Buffer.concat([msg, padding]);

          const cipher = crypto.createCipheriv(algorithm, key, iv);
          const enc = cipher.update(paddedMsg);
          const tagStart = enc.length - 16;
          const tag = enc.slice(tagStart, tagStart + len);

          return tag;
        };

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96, "crypto": 132 }], 24: [function (require, module, exports) {
    module.exports = require('./register')().Promise

  }, { "./register": 26 }], 25: [function (require, module, exports) {
    "use strict"
    // global key for user preferred registration
    var REGISTRATION_KEY = '@@any-promise/REGISTRATION',
      // Prior registration (preferred or detected)
      registered = null

    /**
     * Registers the given implementation.  An implementation must
     * be registered prior to any call to `require("any-promise")`,
     * typically on application load.
     *
     * If called with no arguments, will return registration in
     * following priority:
     *
     * For Node.js:
     *
     * 1. Previous registration
     * 2. global.Promise if node.js version >= 0.12
     * 3. Auto detected promise based on first sucessful require of
     *    known promise libraries. Note this is a last resort, as the
     *    loaded library is non-deterministic. node.js >= 0.12 will
     *    always use global.Promise over this priority list.
     * 4. Throws error.
     *
     * For Browser:
     *
     * 1. Previous registration
     * 2. window.Promise
     * 3. Throws error.
     *
     * Options:
     *
     * Promise: Desired Promise constructor
     * global: Boolean - Should the registration be cached in a global variable to
     * allow cross dependency/bundle registration?  (default true)
     */
    module.exports = function (root, loadImplementation) {
      return function register(implementation, opts) {
        implementation = implementation || null
        opts = opts || {}
        // global registration unless explicitly  {global: false} in options (default true)
        var registerGlobal = opts.global !== false;

        // load any previous global registration
        if (registered === null && registerGlobal) {
          registered = root[REGISTRATION_KEY] || null
        }

        if (registered !== null
          && implementation !== null
          && registered.implementation !== implementation) {
          // Throw error if attempting to redefine implementation
          throw new Error('any-promise already defined as "' + registered.implementation +
            '".  You can only register an implementation before the first ' +
            ' call to require("any-promise") and an implementation cannot be changed')
        }

        if (registered === null) {
          // use provided implementation
          if (implementation !== null && typeof opts.Promise !== 'undefined') {
            registered = {
              Promise: opts.Promise,
              implementation: implementation
            }
          } else {
            // require implementation if implementation is specified but not provided
            registered = loadImplementation(implementation)
          }

          if (registerGlobal) {
            // register preference globally in case multiple installations
            root[REGISTRATION_KEY] = registered
          }
        }

        return registered
      }
    }

  }, {}], 26: [function (require, module, exports) {
    "use strict";
    module.exports = require('./loader')(window, loadImplementation)

    /**
     * Browser specific loadImplementation.  Always uses `window.Promise`
     *
     * To register a custom implementation, must register with `Promise` option.
     */
    function loadImplementation() {
      if (typeof window.Promise === 'undefined') {
        throw new Error("any-promise browser requires a polyfill or explicit registration" +
          " e.g: require('any-promise/register/bluebird')")
      }
      return {
        Promise: window.Promise,
        implementation: 'window.Promise'
      }
    }

  }, { "./loader": 25 }], 27: [function (require, module, exports) {
    'use strict';

    const asn1 = exports;

    asn1.bignum = require('bn.js');

    asn1.define = require('./asn1/api').define;
    asn1.base = require('./asn1/base');
    asn1.constants = require('./asn1/constants');
    asn1.decoders = require('./asn1/decoders');
    asn1.encoders = require('./asn1/encoders');

  }, { "./asn1/api": 28, "./asn1/base": 30, "./asn1/constants": 34, "./asn1/decoders": 36, "./asn1/encoders": 39, "bn.js": 46 }], 28: [function (require, module, exports) {
    'use strict';

    const encoders = require('./encoders');
    const decoders = require('./decoders');
    const inherits = require('inherits');

    const api = exports;

    api.define = function define(name, body) {
      return new Entity(name, body);
    };

    function Entity(name, body) {
      this.name = name;
      this.body = body;

      this.decoders = {};
      this.encoders = {};
    }

    Entity.prototype._createNamed = function createNamed(Base) {
      const name = this.name;

      function Generated(entity) {
        this._initNamed(entity, name);
      }
      inherits(Generated, Base);
      Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
      };

      return new Generated(this);
    };

    Entity.prototype._getDecoder = function _getDecoder(enc) {
      enc = enc || 'der';
      // Lazily create decoder
      if (!this.decoders.hasOwnProperty(enc))
        this.decoders[enc] = this._createNamed(decoders[enc]);
      return this.decoders[enc];
    };

    Entity.prototype.decode = function decode(data, enc, options) {
      return this._getDecoder(enc).decode(data, options);
    };

    Entity.prototype._getEncoder = function _getEncoder(enc) {
      enc = enc || 'der';
      // Lazily create encoder
      if (!this.encoders.hasOwnProperty(enc))
        this.encoders[enc] = this._createNamed(encoders[enc]);
      return this.encoders[enc];
    };

    Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
      return this._getEncoder(enc).encode(data, reporter);
    };

  }, { "./decoders": 36, "./encoders": 39, "inherits": 203 }], 29: [function (require, module, exports) {
    'use strict';

    const inherits = require('inherits');
    const Reporter = require('../base/reporter').Reporter;
    const Buffer = require('safer-buffer').Buffer;

    function DecoderBuffer(base, options) {
      Reporter.call(this, options);
      if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
      }

      this.base = base;
      this.offset = 0;
      this.length = base.length;
    }
    inherits(DecoderBuffer, Reporter);
    exports.DecoderBuffer = DecoderBuffer;

    DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
      if (data instanceof DecoderBuffer) {
        return true;
      }

      // Or accept compatible API
      const isCompatible = typeof data === 'object' &&
        Buffer.isBuffer(data.base) &&
        data.constructor.name === 'DecoderBuffer' &&
        typeof data.offset === 'number' &&
        typeof data.length === 'number' &&
        typeof data.save === 'function' &&
        typeof data.restore === 'function' &&
        typeof data.isEmpty === 'function' &&
        typeof data.readUInt8 === 'function' &&
        typeof data.skip === 'function' &&
        typeof data.raw === 'function';

      return isCompatible;
    };

    DecoderBuffer.prototype.save = function save() {
      return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
    };

    DecoderBuffer.prototype.restore = function restore(save) {
      // Return skipped data
      const res = new DecoderBuffer(this.base);
      res.offset = save.offset;
      res.length = this.offset;

      this.offset = save.offset;
      Reporter.prototype.restore.call(this, save.reporter);

      return res;
    };

    DecoderBuffer.prototype.isEmpty = function isEmpty() {
      return this.offset === this.length;
    };

    DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
      if (this.offset + 1 <= this.length)
        return this.base.readUInt8(this.offset++, true);
      else
        return this.error(fail || 'DecoderBuffer overrun');
    };

    DecoderBuffer.prototype.skip = function skip(bytes, fail) {
      if (!(this.offset + bytes <= this.length))
        return this.error(fail || 'DecoderBuffer overrun');

      const res = new DecoderBuffer(this.base);

      // Share reporter state
      res._reporterState = this._reporterState;

      res.offset = this.offset;
      res.length = this.offset + bytes;
      this.offset += bytes;
      return res;
    };

    DecoderBuffer.prototype.raw = function raw(save) {
      return this.base.slice(save ? save.offset : this.offset, this.length);
    };

    function EncoderBuffer(value, reporter) {
      if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function (item) {
          if (!EncoderBuffer.isEncoderBuffer(item))
            item = new EncoderBuffer(item, reporter);
          this.length += item.length;
          return item;
        }, this);
      } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 0xff))
          return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
      } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
      } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
      } else {
        return reporter.error('Unsupported type: ' + typeof value);
      }
    }
    exports.EncoderBuffer = EncoderBuffer;

    EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
      if (data instanceof EncoderBuffer) {
        return true;
      }

      // Or accept compatible API
      const isCompatible = typeof data === 'object' &&
        data.constructor.name === 'EncoderBuffer' &&
        typeof data.length === 'number' &&
        typeof data.join === 'function';

      return isCompatible;
    };

    EncoderBuffer.prototype.join = function join(out, offset) {
      if (!out)
        out = Buffer.alloc(this.length);
      if (!offset)
        offset = 0;

      if (this.length === 0)
        return out;

      if (Array.isArray(this.value)) {
        this.value.forEach(function (item) {
          item.join(out, offset);
          offset += item.length;
        });
      } else {
        if (typeof this.value === 'number')
          out[offset] = this.value;
        else if (typeof this.value === 'string')
          out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value))
          this.value.copy(out, offset);
        offset += this.length;
      }

      return out;
    };

  }, { "../base/reporter": 32, "inherits": 203, "safer-buffer": 287 }], 30: [function (require, module, exports) {
    'use strict';

    const base = exports;

    base.Reporter = require('./reporter').Reporter;
    base.DecoderBuffer = require('./buffer').DecoderBuffer;
    base.EncoderBuffer = require('./buffer').EncoderBuffer;
    base.Node = require('./node');

  }, { "./buffer": 29, "./node": 31, "./reporter": 32 }], 31: [function (require, module, exports) {
    'use strict';

    const Reporter = require('../base/reporter').Reporter;
    const EncoderBuffer = require('../base/buffer').EncoderBuffer;
    const DecoderBuffer = require('../base/buffer').DecoderBuffer;
    const assert = require('minimalistic-assert');

    // Supported tags
    const tags = [
      'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
      'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
      'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
      'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
    ];

    // Public methods list
    const methods = [
      'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
      'any', 'contains'
    ].concat(tags);

    // Overrided methods list
    const overrided = [
      '_peekTag', '_decodeTag', '_use',
      '_decodeStr', '_decodeObjid', '_decodeTime',
      '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

      '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
      '_encodeNull', '_encodeInt', '_encodeBool'
    ];

    function Node(enc, parent, name) {
      const state = {};
      this._baseState = state;

      state.name = name;
      state.enc = enc;

      state.parent = parent || null;
      state.children = null;

      // State
      state.tag = null;
      state.args = null;
      state.reverseArgs = null;
      state.choice = null;
      state.optional = false;
      state.any = false;
      state.obj = false;
      state.use = null;
      state.useDecoder = null;
      state.key = null;
      state['default'] = null;
      state.explicit = null;
      state.implicit = null;
      state.contains = null;

      // Should create new instance on each method
      if (!state.parent) {
        state.children = [];
        this._wrap();
      }
    }
    module.exports = Node;

    const stateProps = [
      'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
      'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
      'implicit', 'contains'
    ];

    Node.prototype.clone = function clone() {
      const state = this._baseState;
      const cstate = {};
      stateProps.forEach(function (prop) {
        cstate[prop] = state[prop];
      });
      const res = new this.constructor(cstate.parent);
      res._baseState = cstate;
      return res;
    };

    Node.prototype._wrap = function wrap() {
      const state = this._baseState;
      methods.forEach(function (method) {
        this[method] = function _wrappedMethod() {
          const clone = new this.constructor(this);
          state.children.push(clone);
          return clone[method].apply(clone, arguments);
        };
      }, this);
    };

    Node.prototype._init = function init(body) {
      const state = this._baseState;

      assert(state.parent === null);
      body.call(this);

      // Filter children
      state.children = state.children.filter(function (child) {
        return child._baseState.parent === this;
      }, this);
      assert.equal(state.children.length, 1, 'Root node can have only one child');
    };

    Node.prototype._useArgs = function useArgs(args) {
      const state = this._baseState;

      // Filter children and args
      const children = args.filter(function (arg) {
        return arg instanceof this.constructor;
      }, this);
      args = args.filter(function (arg) {
        return !(arg instanceof this.constructor);
      }, this);

      if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;

        // Replace parent to maintain backward link
        children.forEach(function (child) {
          child._baseState.parent = this;
        }, this);
      }
      if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function (arg) {
          if (typeof arg !== 'object' || arg.constructor !== Object)
            return arg;

          const res = {};
          Object.keys(arg).forEach(function (key) {
            if (key == (key | 0))
              key |= 0;
            const value = arg[key];
            res[value] = key;
          });
          return res;
        });
      }
    };

    //
    // Overrided methods
    //

    overrided.forEach(function (method) {
      Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
      };
    });

    //
    // Public methods
    //

    tags.forEach(function (tag) {
      Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);

        assert(state.tag === null);
        state.tag = tag;

        this._useArgs(args);

        return this;
      };
    });

    Node.prototype.use = function use(item) {
      assert(item);
      const state = this._baseState;

      assert(state.use === null);
      state.use = item;

      return this;
    };

    Node.prototype.optional = function optional() {
      const state = this._baseState;

      state.optional = true;

      return this;
    };

    Node.prototype.def = function def(val) {
      const state = this._baseState;

      assert(state['default'] === null);
      state['default'] = val;
      state.optional = true;

      return this;
    };

    Node.prototype.explicit = function explicit(num) {
      const state = this._baseState;

      assert(state.explicit === null && state.implicit === null);
      state.explicit = num;

      return this;
    };

    Node.prototype.implicit = function implicit(num) {
      const state = this._baseState;

      assert(state.explicit === null && state.implicit === null);
      state.implicit = num;

      return this;
    };

    Node.prototype.obj = function obj() {
      const state = this._baseState;
      const args = Array.prototype.slice.call(arguments);

      state.obj = true;

      if (args.length !== 0)
        this._useArgs(args);

      return this;
    };

    Node.prototype.key = function key(newKey) {
      const state = this._baseState;

      assert(state.key === null);
      state.key = newKey;

      return this;
    };

    Node.prototype.any = function any() {
      const state = this._baseState;

      state.any = true;

      return this;
    };

    Node.prototype.choice = function choice(obj) {
      const state = this._baseState;

      assert(state.choice === null);
      state.choice = obj;
      this._useArgs(Object.keys(obj).map(function (key) {
        return obj[key];
      }));

      return this;
    };

    Node.prototype.contains = function contains(item) {
      const state = this._baseState;

      assert(state.use === null);
      state.contains = item;

      return this;
    };

    //
    // Decoding
    //

    Node.prototype._decode = function decode(input, options) {
      const state = this._baseState;

      // Decode root node
      if (state.parent === null)
        return input.wrapResult(state.children[0]._decode(input, options));

      let result = state['default'];
      let present = true;

      let prevKey = null;
      if (state.key !== null)
        prevKey = input.enterKey(state.key);

      // Check if tag is there
      if (state.optional) {
        let tag = null;
        if (state.explicit !== null)
          tag = state.explicit;
        else if (state.implicit !== null)
          tag = state.implicit;
        else if (state.tag !== null)
          tag = state.tag;

        if (tag === null && !state.any) {
          // Trial and Error
          const save = input.save();
          try {
            if (state.choice === null)
              this._decodeGeneric(state.tag, input, options);
            else
              this._decodeChoice(input, options);
            present = true;
          } catch (e) {
            present = false;
          }
          input.restore(save);
        } else {
          present = this._peekTag(input, tag, state.any);

          if (input.isError(present))
            return present;
        }
      }

      // Push object on stack
      let prevObj;
      if (state.obj && present)
        prevObj = input.enterObject();

      if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
          const explicit = this._decodeTag(input, state.explicit);
          if (input.isError(explicit))
            return explicit;
          input = explicit;
        }

        const start = input.offset;

        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
          let save;
          if (state.any)
            save = input.save();
          const body = this._decodeTag(
            input,
            state.implicit !== null ? state.implicit : state.tag,
            state.any
          );
          if (input.isError(body))
            return body;

          if (state.any)
            result = input.raw(save);
          else
            input = body;
        }

        if (options && options.track && state.tag !== null)
          options.track(input.path(), start, input.length, 'tagged');

        if (options && options.track && state.tag !== null)
          options.track(input.path(), input.offset, input.length, 'content');

        // Select proper method for tag
        if (state.any) {
          // no-op
        } else if (state.choice === null) {
          result = this._decodeGeneric(state.tag, input, options);
        } else {
          result = this._decodeChoice(input, options);
        }

        if (input.isError(result))
          return result;

        // Decode children
        if (!state.any && state.choice === null && state.children !== null) {
          state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
          });
        }

        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
          const data = new DecoderBuffer(result);
          result = this._getUse(state.contains, input._reporterState.obj)
            ._decode(data, options);
        }
      }

      // Pop object
      if (state.obj && present)
        result = input.leaveObject(prevObj);

      // Set key
      if (state.key !== null && (result !== null || present === true))
        input.leaveKey(prevKey, state.key, result);
      else if (prevKey !== null)
        input.exitKey(prevKey);

      return result;
    };

    Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
      const state = this._baseState;

      if (tag === 'seq' || tag === 'set')
        return null;
      if (tag === 'seqof' || tag === 'setof')
        return this._decodeList(input, tag, state.args[0], options);
      else if (/str$/.test(tag))
        return this._decodeStr(input, tag, options);
      else if (tag === 'objid' && state.args)
        return this._decodeObjid(input, state.args[0], state.args[1], options);
      else if (tag === 'objid')
        return this._decodeObjid(input, null, null, options);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._decodeTime(input, tag, options);
      else if (tag === 'null_')
        return this._decodeNull(input, options);
      else if (tag === 'bool')
        return this._decodeBool(input, options);
      else if (tag === 'objDesc')
        return this._decodeStr(input, tag, options);
      else if (tag === 'int' || tag === 'enum')
        return this._decodeInt(input, state.args && state.args[0], options);

      if (state.use !== null) {
        return this._getUse(state.use, input._reporterState.obj)
          ._decode(input, options);
      } else {
        return input.error('unknown tag: ' + tag);
      }
    };

    Node.prototype._getUse = function _getUse(entity, obj) {

      const state = this._baseState;
      // Create altered use decoder if implicit is set
      state.useDecoder = this._use(entity, obj);
      assert(state.useDecoder._baseState.parent === null);
      state.useDecoder = state.useDecoder._baseState.children[0];
      if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
      }
      return state.useDecoder;
    };

    Node.prototype._decodeChoice = function decodeChoice(input, options) {
      const state = this._baseState;
      let result = null;
      let match = false;

      Object.keys(state.choice).some(function (key) {
        const save = input.save();
        const node = state.choice[key];
        try {
          const value = node._decode(input, options);
          if (input.isError(value))
            return false;

          result = { type: key, value: value };
          match = true;
        } catch (e) {
          input.restore(save);
          return false;
        }
        return true;
      }, this);

      if (!match)
        return input.error('Choice not matched');

      return result;
    };

    //
    // Encoding
    //

    Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
      return new EncoderBuffer(data, this.reporter);
    };

    Node.prototype._encode = function encode(data, reporter, parent) {
      const state = this._baseState;
      if (state['default'] !== null && state['default'] === data)
        return;

      const result = this._encodeValue(data, reporter, parent);
      if (result === undefined)
        return;

      if (this._skipDefault(result, reporter, parent))
        return;

      return result;
    };

    Node.prototype._encodeValue = function encode(data, reporter, parent) {
      const state = this._baseState;

      // Decode root node
      if (state.parent === null)
        return state.children[0]._encode(data, reporter || new Reporter());

      let result = null;

      // Set reporter to share it with a child class
      this.reporter = reporter;

      // Check if data is there
      if (state.optional && data === undefined) {
        if (state['default'] !== null)
          data = state['default'];
        else
          return;
      }

      // Encode children first
      let content = null;
      let primitive = false;
      if (state.any) {
        // Anything that was given is translated to buffer
        result = this._createEncoderBuffer(data);
      } else if (state.choice) {
        result = this._encodeChoice(data, reporter);
      } else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
      } else if (state.children) {
        content = state.children.map(function (child) {
          if (child._baseState.tag === 'null_')
            return child._encode(null, reporter, data);

          if (child._baseState.key === null)
            return reporter.error('Child should have a key');
          const prevKey = reporter.enterKey(child._baseState.key);

          if (typeof data !== 'object')
            return reporter.error('Child expected, but input is not object');

          const res = child._encode(data[child._baseState.key], reporter, data);
          reporter.leaveKey(prevKey);

          return res;
        }, this).filter(function (child) {
          return child;
        });
        content = this._createEncoderBuffer(content);
      } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
          // TODO(indutny): this should be thrown on DSL level
          if (!(state.args && state.args.length === 1))
            return reporter.error('Too many args for : ' + state.tag);

          if (!Array.isArray(data))
            return reporter.error('seqof/setof, but data is not Array');

          const child = this.clone();
          child._baseState.implicit = null;
          content = this._createEncoderBuffer(data.map(function (item) {
            const state = this._baseState;

            return this._getUse(state.args[0], data)._encode(item, reporter);
          }, child));
        } else if (state.use !== null) {
          result = this._getUse(state.use, parent)._encode(data, reporter);
        } else {
          content = this._encodePrimitive(state.tag, data);
          primitive = true;
        }
      }

      // Encode data itself
      if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? 'universal' : 'context';

        if (tag === null) {
          if (state.use === null)
            reporter.error('Tag could be omitted only for .use()');
        } else {
          if (state.use === null)
            result = this._encodeComposite(tag, primitive, cls, content);
        }
      }

      // Wrap in explicit
      if (state.explicit !== null)
        result = this._encodeComposite(state.explicit, false, 'context', result);

      return result;
    };

    Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
      const state = this._baseState;

      const node = state.choice[data.type];
      if (!node) {
        assert(
          false,
          data.type + ' not found in ' +
          JSON.stringify(Object.keys(state.choice)));
      }
      return node._encode(data.value, reporter);
    };

    Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
      const state = this._baseState;

      if (/str$/.test(tag))
        return this._encodeStr(data, tag);
      else if (tag === 'objid' && state.args)
        return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
      else if (tag === 'objid')
        return this._encodeObjid(data, null, null);
      else if (tag === 'gentime' || tag === 'utctime')
        return this._encodeTime(data, tag);
      else if (tag === 'null_')
        return this._encodeNull();
      else if (tag === 'int' || tag === 'enum')
        return this._encodeInt(data, state.args && state.reverseArgs[0]);
      else if (tag === 'bool')
        return this._encodeBool(data);
      else if (tag === 'objDesc')
        return this._encodeStr(data, tag);
      else
        throw new Error('Unsupported tag: ' + tag);
    };

    Node.prototype._isNumstr = function isNumstr(str) {
      return /^[0-9 ]*$/.test(str);
    };

    Node.prototype._isPrintstr = function isPrintstr(str) {
      return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
    };

  }, { "../base/buffer": 29, "../base/reporter": 32, "minimalistic-assert": 212 }], 32: [function (require, module, exports) {
    'use strict';

    const inherits = require('inherits');

    function Reporter(options) {
      this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
      };
    }
    exports.Reporter = Reporter;

    Reporter.prototype.isError = function isError(obj) {
      return obj instanceof ReporterError;
    };

    Reporter.prototype.save = function save() {
      const state = this._reporterState;

      return { obj: state.obj, pathLen: state.path.length };
    };

    Reporter.prototype.restore = function restore(data) {
      const state = this._reporterState;

      state.obj = data.obj;
      state.path = state.path.slice(0, data.pathLen);
    };

    Reporter.prototype.enterKey = function enterKey(key) {
      return this._reporterState.path.push(key);
    };

    Reporter.prototype.exitKey = function exitKey(index) {
      const state = this._reporterState;

      state.path = state.path.slice(0, index - 1);
    };

    Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
      const state = this._reporterState;

      this.exitKey(index);
      if (state.obj !== null)
        state.obj[key] = value;
    };

    Reporter.prototype.path = function path() {
      return this._reporterState.path.join('/');
    };

    Reporter.prototype.enterObject = function enterObject() {
      const state = this._reporterState;

      const prev = state.obj;
      state.obj = {};
      return prev;
    };

    Reporter.prototype.leaveObject = function leaveObject(prev) {
      const state = this._reporterState;

      const now = state.obj;
      state.obj = prev;
      return now;
    };

    Reporter.prototype.error = function error(msg) {
      let err;
      const state = this._reporterState;

      const inherited = msg instanceof ReporterError;
      if (inherited) {
        err = msg;
      } else {
        err = new ReporterError(state.path.map(function (elem) {
          return '[' + JSON.stringify(elem) + ']';
        }).join(''), msg.message || msg, msg.stack);
      }

      if (!state.options.partial)
        throw err;

      if (!inherited)
        state.errors.push(err);

      return err;
    };

    Reporter.prototype.wrapResult = function wrapResult(result) {
      const state = this._reporterState;
      if (!state.options.partial)
        return result;

      return {
        result: this.isError(result) ? null : result,
        errors: state.errors
      };
    };

    function ReporterError(path, msg) {
      this.path = path;
      this.rethrow(msg);
    }
    inherits(ReporterError, Error);

    ReporterError.prototype.rethrow = function rethrow(msg) {
      this.message = msg + ' at: ' + (this.path || '(shallow)');
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ReporterError);

      if (!this.stack) {
        try {
          // IE only adds stack when thrown
          throw new Error(this.message);
        } catch (e) {
          this.stack = e.stack;
        }
      }
      return this;
    };

  }, { "inherits": 203 }], 33: [function (require, module, exports) {
    'use strict';

    // Helper
    function reverse(map) {
      const res = {};

      Object.keys(map).forEach(function (key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;

        const value = map[key];
        res[value] = key;
      });

      return res;
    }

    exports.tagClass = {
      0: 'universal',
      1: 'application',
      2: 'context',
      3: 'private'
    };
    exports.tagClassByName = reverse(exports.tagClass);

    exports.tag = {
      0x00: 'end',
      0x01: 'bool',
      0x02: 'int',
      0x03: 'bitstr',
      0x04: 'octstr',
      0x05: 'null_',
      0x06: 'objid',
      0x07: 'objDesc',
      0x08: 'external',
      0x09: 'real',
      0x0a: 'enum',
      0x0b: 'embed',
      0x0c: 'utf8str',
      0x0d: 'relativeOid',
      0x10: 'seq',
      0x11: 'set',
      0x12: 'numstr',
      0x13: 'printstr',
      0x14: 't61str',
      0x15: 'videostr',
      0x16: 'ia5str',
      0x17: 'utctime',
      0x18: 'gentime',
      0x19: 'graphstr',
      0x1a: 'iso646str',
      0x1b: 'genstr',
      0x1c: 'unistr',
      0x1d: 'charstr',
      0x1e: 'bmpstr'
    };
    exports.tagByName = reverse(exports.tag);

  }, {}], 34: [function (require, module, exports) {
    'use strict';

    const constants = exports;

    // Helper
    constants._reverse = function reverse(map) {
      const res = {};

      Object.keys(map).forEach(function (key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key)
          key = key | 0;

        const value = map[key];
        res[value] = key;
      });

      return res;
    };

    constants.der = require('./der');

  }, { "./der": 33 }], 35: [function (require, module, exports) {
    'use strict';

    const inherits = require('inherits');

    const bignum = require('bn.js');
    const DecoderBuffer = require('../base/buffer').DecoderBuffer;
    const Node = require('../base/node');

    // Import DER constants
    const der = require('../constants/der');

    function DERDecoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;

      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DERDecoder;

    DERDecoder.prototype.decode = function decode(data, options) {
      if (!DecoderBuffer.isDecoderBuffer(data)) {
        data = new DecoderBuffer(data, options);
      }

      return this.tree._decode(data, options);
    };

    // Tree methods

    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }
    inherits(DERNode, Node);

    DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
      if (buffer.isEmpty())
        return false;

      const state = buffer.save();
      const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;

      buffer.restore(state);

      return decodedTag.tag === tag || decodedTag.tagStr === tag ||
        (decodedTag.tagStr + 'of') === tag || any;
    };

    DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
      const decodedTag = derDecodeTag(buffer,
        'Failed to decode tag of "' + tag + '"');
      if (buffer.isError(decodedTag))
        return decodedTag;

      let len = derDecodeLen(buffer,
        decodedTag.primitive,
        'Failed to get length of "' + tag + '"');

      // Failure
      if (buffer.isError(len))
        return len;

      if (!any &&
        decodedTag.tag !== tag &&
        decodedTag.tagStr !== tag &&
        decodedTag.tagStr + 'of' !== tag) {
        return buffer.error('Failed to match tag: "' + tag + '"');
      }

      if (decodedTag.primitive || len !== null)
        return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

      // Indefinite length... find END tag
      const state = buffer.save();
      const res = this._skipUntilEnd(
        buffer,
        'Failed to skip indefinite length body: "' + this.tag + '"');
      if (buffer.isError(res))
        return res;

      len = buffer.offset - state.offset;
      buffer.restore(state);
      return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    };

    DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
      for (; ;) {
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag))
          return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len))
          return len;

        let res;
        if (tag.primitive || len !== null)
          res = buffer.skip(len);
        else
          res = this._skipUntilEnd(buffer, fail);

        // Failure
        if (buffer.isError(res))
          return res;

        if (tag.tagStr === 'end')
          break;
      }
    };

    DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
      options) {
      const result = [];
      while (!buffer.isEmpty()) {
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd))
          return possibleEnd;

        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd)
          break;
        result.push(res);
      }
      return result;
    };

    DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
      if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused))
          return unused;
        return { unused: unused, data: buffer.raw() };
      } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1)
          return buffer.error('Decoding of string type: bmpstr length mismatch');

        let str = '';
        for (let i = 0; i < raw.length / 2; i++) {
          str += String.fromCharCode(raw.readUInt16BE(i * 2));
        }
        return str;
      } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) {
          return buffer.error('Decoding of string type: ' +
            'numstr unsupported characters');
        }
        return numstr;
      } else if (tag === 'octstr') {
        return buffer.raw();
      } else if (tag === 'objDesc') {
        return buffer.raw();
      } else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) {
          return buffer.error('Decoding of string type: ' +
            'printstr unsupported characters');
        }
        return printstr;
      } else if (/str$/.test(tag)) {
        return buffer.raw().toString();
      } else {
        return buffer.error('Decoding of string type: ' + tag + ' unsupported');
      }
    };

    DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
      let result;
      const identifiers = [];
      let ident = 0;
      let subident = 0;
      while (!buffer.isEmpty()) {
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
          identifiers.push(ident);
          ident = 0;
        }
      }
      if (subident & 0x80)
        identifiers.push(ident);

      const first = (identifiers[0] / 40) | 0;
      const second = identifiers[0] % 40;

      if (relative)
        result = identifiers;
      else
        result = [first, second].concat(identifiers.slice(1));

      if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined)
          tmp = values[result.join('.')];
        if (tmp !== undefined)
          result = tmp;
      }

      return result;
    };

    DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
      const str = buffer.raw().toString();

      let year;
      let mon;
      let day;
      let hour;
      let min;
      let sec;
      if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
      } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70)
          year = 2000 + year;
        else
          year = 1900 + year;
      } else {
        return buffer.error('Decoding ' + tag + ' time is not supported yet');
      }

      return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
    };

    DERNode.prototype._decodeNull = function decodeNull() {
      return null;
    };

    DERNode.prototype._decodeBool = function decodeBool(buffer) {
      const res = buffer.readUInt8();
      if (buffer.isError(res))
        return res;
      else
        return res !== 0;
    };

    DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
      // Bigint, return as it is (assume big endian)
      const raw = buffer.raw();
      let res = new bignum(raw);

      if (values)
        res = values[res.toString(10)] || res;

      return res;
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getDecoder('der').tree;
    };

    // Utility methods

    function derDecodeTag(buf, fail) {
      let tag = buf.readUInt8(fail);
      if (buf.isError(tag))
        return tag;

      const cls = der.tagClass[tag >> 6];
      const primitive = (tag & 0x20) === 0;

      // Multi-octet tag - load
      if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while ((oct & 0x80) === 0x80) {
          oct = buf.readUInt8(fail);
          if (buf.isError(oct))
            return oct;

          tag <<= 7;
          tag |= oct & 0x7f;
        }
      } else {
        tag &= 0x1f;
      }
      const tagStr = der.tag[tag];

      return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
      };
    }

    function derDecodeLen(buf, primitive, fail) {
      let len = buf.readUInt8(fail);
      if (buf.isError(len))
        return len;

      // Indefinite form
      if (!primitive && len === 0x80)
        return null;

      // Definite form
      if ((len & 0x80) === 0) {
        // Short form
        return len;
      }

      // Long form
      const num = len & 0x7f;
      if (num > 4)
        return buf.error('length octect is too long');

      len = 0;
      for (let i = 0; i < num; i++) {
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j))
          return j;
        len |= j;
      }

      return len;
    }

  }, { "../base/buffer": 29, "../base/node": 31, "../constants/der": 33, "bn.js": 46, "inherits": 203 }], 36: [function (require, module, exports) {
    'use strict';

    const decoders = exports;

    decoders.der = require('./der');
    decoders.pem = require('./pem');

  }, { "./der": 35, "./pem": 37 }], 37: [function (require, module, exports) {
    'use strict';

    const inherits = require('inherits');
    const Buffer = require('safer-buffer').Buffer;

    const DERDecoder = require('./der');

    function PEMDecoder(entity) {
      DERDecoder.call(this, entity);
      this.enc = 'pem';
    }
    inherits(PEMDecoder, DERDecoder);
    module.exports = PEMDecoder;

    PEMDecoder.prototype.decode = function decode(data, options) {
      const lines = data.toString().split(/[\r\n]+/g);

      const label = options.label.toUpperCase();

      const re = /^-----(BEGIN|END) ([^-]+)-----$/;
      let start = -1;
      let end = -1;
      for (let i = 0; i < lines.length; i++) {
        const match = lines[i].match(re);
        if (match === null)
          continue;

        if (match[2] !== label)
          continue;

        if (start === -1) {
          if (match[1] !== 'BEGIN')
            break;
          start = i;
        } else {
          if (match[1] !== 'END')
            break;
          end = i;
          break;
        }
      }
      if (start === -1 || end === -1)
        throw new Error('PEM section not found for: ' + label);

      const base64 = lines.slice(start + 1, end).join('');
      // Remove excessive symbols
      base64.replace(/[^a-z0-9+/=]+/gi, '');

      const input = Buffer.from(base64, 'base64');
      return DERDecoder.prototype.decode.call(this, input, options);
    };

  }, { "./der": 35, "inherits": 203, "safer-buffer": 287 }], 38: [function (require, module, exports) {
    'use strict';

    const inherits = require('inherits');
    const Buffer = require('safer-buffer').Buffer;
    const Node = require('../base/node');

    // Import DER constants
    const der = require('../constants/der');

    function DEREncoder(entity) {
      this.enc = 'der';
      this.name = entity.name;
      this.entity = entity;

      // Construct base tree
      this.tree = new DERNode();
      this.tree._init(entity.body);
    }
    module.exports = DEREncoder;

    DEREncoder.prototype.encode = function encode(data, reporter) {
      return this.tree._encode(data, reporter).join();
    };

    // Tree methods

    function DERNode(parent) {
      Node.call(this, 'der', parent);
    }
    inherits(DERNode, Node);

    DERNode.prototype._encodeComposite = function encodeComposite(tag,
      primitive,
      cls,
      content) {
      const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

      // Short form
      if (content.length < 0x80) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([header, content]);
      }

      // Long form
      // Count octets required to store length
      let lenOctets = 1;
      for (let i = content.length; i >= 0x100; i >>= 8)
        lenOctets++;

      const header = Buffer.alloc(1 + 1 + lenOctets);
      header[0] = encodedTag;
      header[1] = 0x80 | lenOctets;

      for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
        header[i] = j & 0xff;

      return this._createEncoderBuffer([header, content]);
    };

    DERNode.prototype._encodeStr = function encodeStr(str, tag) {
      if (tag === 'bitstr') {
        return this._createEncoderBuffer([str.unused | 0, str.data]);
      } else if (tag === 'bmpstr') {
        const buf = Buffer.alloc(str.length * 2);
        for (let i = 0; i < str.length; i++) {
          buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        }
        return this._createEncoderBuffer(buf);
      } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) {
          return this.reporter.error('Encoding of string type: numstr supports ' +
            'only digits and space');
        }
        return this._createEncoderBuffer(str);
      } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) {
          return this.reporter.error('Encoding of string type: printstr supports ' +
            'only latin upper and lower case letters, ' +
            'digits, space, apostrophe, left and rigth ' +
            'parenthesis, plus sign, comma, hyphen, ' +
            'dot, slash, colon, equal sign, ' +
            'question mark');
        }
        return this._createEncoderBuffer(str);
      } else if (/str$/.test(tag)) {
        return this._createEncoderBuffer(str);
      } else if (tag === 'objDesc') {
        return this._createEncoderBuffer(str);
      } else {
        return this.reporter.error('Encoding of string type: ' + tag +
          ' unsupported');
      }
    };

    DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
      if (typeof id === 'string') {
        if (!values)
          return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id))
          return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      } else if (Array.isArray(id)) {
        id = id.slice();
        for (let i = 0; i < id.length; i++)
          id[i] |= 0;
      }

      if (!Array.isArray(id)) {
        return this.reporter.error('objid() should be either array or string, ' +
          'got: ' + JSON.stringify(id));
      }

      if (!relative) {
        if (id[1] >= 40)
          return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
      }

      // Count number of octets
      let size = 0;
      for (let i = 0; i < id.length; i++) {
        let ident = id[i];
        for (size++; ident >= 0x80; ident >>= 7)
          size++;
      }

      const objid = Buffer.alloc(size);
      let offset = objid.length - 1;
      for (let i = id.length - 1; i >= 0; i--) {
        let ident = id[i];
        objid[offset--] = ident & 0x7f;
        while ((ident >>= 7) > 0)
          objid[offset--] = 0x80 | (ident & 0x7f);
      }

      return this._createEncoderBuffer(objid);
    };

    function two(num) {
      if (num < 10)
        return '0' + num;
      else
        return num;
    }

    DERNode.prototype._encodeTime = function encodeTime(time, tag) {
      let str;
      const date = new Date(time);

      if (tag === 'gentime') {
        str = [
          two(date.getUTCFullYear()),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else if (tag === 'utctime') {
        str = [
          two(date.getUTCFullYear() % 100),
          two(date.getUTCMonth() + 1),
          two(date.getUTCDate()),
          two(date.getUTCHours()),
          two(date.getUTCMinutes()),
          two(date.getUTCSeconds()),
          'Z'
        ].join('');
      } else {
        this.reporter.error('Encoding ' + tag + ' time is not supported yet');
      }

      return this._encodeStr(str, 'octstr');
    };

    DERNode.prototype._encodeNull = function encodeNull() {
      return this._createEncoderBuffer('');
    };

    DERNode.prototype._encodeInt = function encodeInt(num, values) {
      if (typeof num === 'string') {
        if (!values)
          return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) {
          return this.reporter.error('Values map doesn\'t contain: ' +
            JSON.stringify(num));
        }
        num = values[num];
      }

      // Bignum, assume big endian
      if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) {
          numArray.unshift(0);
        }
        num = Buffer.from(numArray);
      }

      if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0)
          size++;

        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0)
          out[0] = 0;
        return this._createEncoderBuffer(out);
      }

      if (num < 0x80)
        return this._createEncoderBuffer(num);

      if (num < 0x100)
        return this._createEncoderBuffer([0, num]);

      let size = 1;
      for (let i = num; i >= 0x100; i >>= 8)
        size++;

      const out = new Array(size);
      for (let i = out.length - 1; i >= 0; i--) {
        out[i] = num & 0xff;
        num >>= 8;
      }
      if (out[0] & 0x80) {
        out.unshift(0);
      }

      return this._createEncoderBuffer(Buffer.from(out));
    };

    DERNode.prototype._encodeBool = function encodeBool(value) {
      return this._createEncoderBuffer(value ? 0xff : 0);
    };

    DERNode.prototype._use = function use(entity, obj) {
      if (typeof entity === 'function')
        entity = entity(obj);
      return entity._getEncoder('der').tree;
    };

    DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
      const state = this._baseState;
      let i;
      if (state['default'] === null)
        return false;

      const data = dataBuffer.join();
      if (state.defaultBuffer === undefined)
        state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

      if (data.length !== state.defaultBuffer.length)
        return false;

      for (i = 0; i < data.length; i++)
        if (data[i] !== state.defaultBuffer[i])
          return false;

      return true;
    };

    // Utility methods

    function encodeTag(tag, primitive, cls, reporter) {
      let res;

      if (tag === 'seqof')
        tag = 'seq';
      else if (tag === 'setof')
        tag = 'set';

      if (der.tagByName.hasOwnProperty(tag))
        res = der.tagByName[tag];
      else if (typeof tag === 'number' && (tag | 0) === tag)
        res = tag;
      else
        return reporter.error('Unknown tag: ' + tag);

      if (res >= 0x1f)
        return reporter.error('Multi-octet tag encoding unsupported');

      if (!primitive)
        res |= 0x20;

      res |= (der.tagClassByName[cls || 'universal'] << 6);

      return res;
    }

  }, { "../base/node": 31, "../constants/der": 33, "inherits": 203, "safer-buffer": 287 }], 39: [function (require, module, exports) {
    'use strict';

    const encoders = exports;

    encoders.der = require('./der');
    encoders.pem = require('./pem');

  }, { "./der": 38, "./pem": 40 }], 40: [function (require, module, exports) {
    'use strict';

    const inherits = require('inherits');

    const DEREncoder = require('./der');

    function PEMEncoder(entity) {
      DEREncoder.call(this, entity);
      this.enc = 'pem';
    }
    inherits(PEMEncoder, DEREncoder);
    module.exports = PEMEncoder;

    PEMEncoder.prototype.encode = function encode(data, options) {
      const buf = DEREncoder.prototype.encode.call(this, data);

      const p = buf.toString('base64');
      const out = ['-----BEGIN ' + options.label + '-----'];
      for (let i = 0; i < p.length; i += 64)
        out.push(p.slice(i, i + 64));
      out.push('-----END ' + options.label + '-----');
      return out.join('\n');
    };

  }, { "./der": 38, "inherits": 203 }], 41: [function (require, module, exports) {
    (function (global) {
      (function () {
        'use strict';

        var possibleNames = [
          'BigInt64Array',
          'BigUint64Array',
          'Float32Array',
          'Float64Array',
          'Int16Array',
          'Int32Array',
          'Int8Array',
          'Uint16Array',
          'Uint32Array',
          'Uint8Array',
          'Uint8ClampedArray'
        ];

        var g = typeof globalThis === 'undefined' ? global : globalThis;

        module.exports = function availableTypedArrays() {
          var out = [];
          for (var i = 0; i < possibleNames.length; i++) {
            if (typeof g[possibleNames[i]] === 'function') {
              out[out.length] = possibleNames[i];
            }
          }
          return out;
        };

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, {}], 42: [function (require, module, exports) {
    module.exports = require('./lib/base45')

  }, { "./lib/base45": 43 }], 43: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'
        const divmod = (x, y) => [Math.floor(x / y), x % y]

        // Encode a buffer (or uint8array) to base45-encoded string
        const encode = (buffer) => {
          if (typeof (buffer) === 'string') buffer = Buffer.from(buffer)
          let res = ''
          for (let i = 0; i < buffer.length; i = i + 2) {
            if (buffer.length - i > 1) {
              const x = (buffer[i] << 8) + buffer[i + 1]
              const [e, rest] = divmod(x, 45 * 45)
              const [d, c] = divmod(rest, 45)
              res += charset[c] + charset[d] + charset[e]
            } else {
              const [d, c] = divmod(buffer[i], 45)
              res += charset[c] + charset[d]
            }
          }
          return res
        }

        // Decode base45-encoded input
        const decode = (input) => {
          const buffer = Array.from(input).map(c => charset.indexOf(c))
          const res = []
          for (let i = 0; i < buffer.length; i = i + 3) {
            if (buffer.length - i >= 3) {
              const x = buffer[i] + buffer[i + 1] * 45 + buffer[i + 2] * 45 * 45
              res.push(...divmod(x, 256))
            } else {
              const x = buffer[i] + buffer[i + 1] * 45
              res.push(x)
            }
          }
          return Buffer.from(res)
        }

        module.exports = {
          encode,
          decode
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96 }], 44: [function (require, module, exports) {
    'use strict'

    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray

    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63

    function getLens(b64) {
      var len = b64.length

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=')
      if (validLen === -1) validLen = len

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4)

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength(b64) {
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray(b64) {
      var tmp
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

      var curByte = 0

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen

      var i
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)]
        arr[curByte++] = (tmp >> 16) & 0xFF
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[curByte++] = tmp & 0xFF
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }

      return arr
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk(uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF)
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }

    function fromByteArray(uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      var parts = []
      var maxChunkLength = 16383 // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        )
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1]
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        )
      }

      return parts.join('')
    }

  }, {}], 45: [function (require, module, exports) {
    /*! bignumber.js v4.1.0 https://github.com/MikeMcl/bignumber.js/LICENCE */

    ; (function (globalObj) {
      'use strict';

      /*
        bignumber.js v4.1.0
        A JavaScript library for arbitrary-precision arithmetic.
        https://github.com/MikeMcl/bignumber.js
        Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>
        MIT Expat Licence
      */


      var BigNumber,
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        mathceil = Math.ceil,
        mathfloor = Math.floor,
        notBool = ' not a boolean or binary digit',
        roundingMode = 'rounding mode',
        tooManyDigits = 'number type has more than 15 significant digits',
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,

        /*
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
         * exception is thrown (if ERRORS is true).
         */
        MAX = 1E9;                                   // 0 to MAX_INT32


      /*
       * Create and return a BigNumber constructor.
       */
      function constructorFactory(config) {
        var div, parseNumeric,

          // id tracks the caller function, so its name can be included in error messages.
          id = 0,
          P = BigNumber.prototype,
          ONE = new BigNumber(1),


          /********************************* EDITABLE DEFAULTS **********************************/


          /*
           * The default values below must be integers within the inclusive ranges stated.
           * The values can also be changed at run-time using BigNumber.config.
           */

          // The maximum number of decimal places for operations involving division.
          DECIMAL_PLACES = 20,                     // 0 to MAX

          /*
           * The rounding mode used when rounding to the above decimal places, and when using
           * toExponential, toFixed, toFormat and toPrecision, and round (default value).
           * UP         0 Away from zero.
           * DOWN       1 Towards zero.
           * CEIL       2 Towards +Infinity.
           * FLOOR      3 Towards -Infinity.
           * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
           * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
           * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
           * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
           * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
           */
          ROUNDING_MODE = 4,                       // 0 to 8

          // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

          // The exponent value at and beneath which toString returns exponential notation.
          // Number type: -7
          TO_EXP_NEG = -7,                         // 0 to -MAX

          // The exponent value at and above which toString returns exponential notation.
          // Number type: 21
          TO_EXP_POS = 21,                         // 0 to MAX

          // RANGE : [MIN_EXP, MAX_EXP]

          // The minimum exponent value, beneath which underflow to zero occurs.
          // Number type: -324  (5e-324)
          MIN_EXP = -1e7,                          // -1 to -MAX

          // The maximum exponent value, above which overflow to Infinity occurs.
          // Number type:  308  (1.7976931348623157e+308)
          // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
          MAX_EXP = 1e7,                           // 1 to MAX

          // Whether BigNumber Errors are ever thrown.
          ERRORS = true,                           // true or false

          // Change to intValidatorNoErrors if ERRORS is false.
          isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors

          // Whether to use cryptographically-secure random number generation, if available.
          CRYPTO = false,                          // true or false

          /*
           * The modulo mode used when calculating the modulus: a mod n.
           * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
           * The remainder (r) is calculated as: r = a - n * q.
           *
           * UP        0 The remainder is positive if the dividend is negative, else is negative.
           * DOWN      1 The remainder has the same sign as the dividend.
           *             This modulo mode is commonly known as 'truncated division' and is
           *             equivalent to (a % n) in JavaScript.
           * FLOOR     3 The remainder has the same sign as the divisor (Python %).
           * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
           * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
           *             The remainder is always positive.
           *
           * The truncated division, floored division, Euclidian division and IEEE 754 remainder
           * modes are commonly used for the modulus operation.
           * Although the other rounding modes can also be used, they may not give useful results.
           */
          MODULO_MODE = 1,                         // 0 to 9

          // The maximum number of significant digits of the result of the toPower operation.
          // If POW_PRECISION is 0, there will be unlimited significant digits.
          POW_PRECISION = 0,                       // 0 to MAX

          // The format specification used by the BigNumber.prototype.toFormat method.
          FORMAT = {
            decimalSeparator: '.',
            groupSeparator: ',',
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: '\xA0',      // non-breaking space
            fractionGroupSize: 0
          };


        /******************************************************************************************/


        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */
        function BigNumber(n, b) {
          var c, e, i, num, len, str,
            x = this;

          // Enable constructor usage without new.
          if (!(x instanceof BigNumber)) {

            // 'BigNumber() constructor call without new: {n}'
            if (ERRORS) raise(26, 'constructor call without new', n);
            return new BigNumber(n, b);
          }

          // 'new BigNumber() base not an integer: {b}'
          // 'new BigNumber() base out of range: {b}'
          if (b == null || !isValidInt(b, 2, 64, id, 'base')) {

            // Duplicate.
            if (n instanceof BigNumber) {
              x.s = n.s;
              x.e = n.e;
              x.c = (n = n.c) ? n.slice() : n;
              id = 0;
              return;
            }

            if ((num = typeof n == 'number') && n * 0 == 0) {
              x.s = 1 / n < 0 ? (n = -n, -1) : 1;

              // Fast path for integers.
              if (n === ~~n) {
                for (e = 0, i = n; i >= 10; i /= 10, e++);
                x.e = e;
                x.c = [n];
                id = 0;
                return;
              }

              str = n + '';
            } else {
              if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
          } else {
            b = b | 0;
            str = n + '';

            // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
            // Allow exponential notation to be used with base 10 argument.
            if (b == 10) {
              x = new BigNumber(n instanceof BigNumber ? n : str);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }

            // Avoid potential interpretation of Infinity and NaN as base 44+ values.
            // Any number in exponential form will fail due to the [Ee][+-].
            if ((num = typeof n == 'number') && n * 0 != 0 ||
              !(new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') +
                '(?:\\.' + c + ')?$', b < 37 ? 'i' : '')).test(str)) {
              return parseNumeric(x, str, num, b);
            }

            if (num) {
              x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

              if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) {

                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                raise(id, tooManyDigits, n);
              }

              // Prevent later check for length on converted number.
              num = false;
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }

            str = convertBase(str, 10, b, x.s);
          }

          // Decimal point?
          if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

          // Exponential form?
          if ((i = str.search(/e/i)) > 0) {

            // Determine exponent.
            if (e < 0) e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {

            // Integer.
            e = str.length;
          }

          // Determine leading zeros.
          for (i = 0; str.charCodeAt(i) === 48; i++);

          // Determine trailing zeros.
          for (len = str.length; str.charCodeAt(--len) === 48;);
          str = str.slice(i, len + 1);

          if (str) {
            len = str.length;

            // Disallow numbers with over 15 significant digits if number type.
            // 'new BigNumber() number type has more than 15 significant digits: {n}'
            if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {
              raise(id, tooManyDigits, x.s * n);
            }

            e = e - i - 1;

            // Overflow?
            if (e > MAX_EXP) {

              // Infinity.
              x.c = x.e = null;

              // Underflow?
            } else if (e < MIN_EXP) {

              // Zero.
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];

              // Transform base

              // e is the base 10 exponent.
              // i is where to slice str to get the first element of the coefficient array.
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;

              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));

                for (len -= LOG_BASE; i < len;) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }

                str = str.slice(i);
                i = LOG_BASE - str.length;
              } else {
                i -= len;
              }

              for (; i--; str += '0');
              x.c.push(+str);
            }
          } else {

            // Zero.
            x.c = [x.e = 0];
          }

          id = 0;
        }


        // CONSTRUCTOR PROPERTIES


        BigNumber.another = constructorFactory;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;


        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */
        BigNumber.config = BigNumber.set = function () {
          var v, p,
            i = 0,
            r = {},
            a = arguments,
            o = a[0],
            has = o && typeof o == 'object'
              ? function () { if (o.hasOwnProperty(p)) return (v = o[p]) != null; }
              : function () { if (a.length > i) return (v = a[i++]) != null; };

          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
          // 'config() DECIMAL_PLACES not an integer: {v}'
          // 'config() DECIMAL_PLACES out of range: {v}'
          if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {
            DECIMAL_PLACES = v | 0;
          }
          r[p] = DECIMAL_PLACES;

          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
          // 'config() ROUNDING_MODE not an integer: {v}'
          // 'config() ROUNDING_MODE out of range: {v}'
          if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {
            ROUNDING_MODE = v | 0;
          }
          r[p] = ROUNDING_MODE;

          // EXPONENTIAL_AT {number|number[]}
          // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
          // 'config() EXPONENTIAL_AT not an integer: {v}'
          // 'config() EXPONENTIAL_AT out of range: {v}'
          if (has(p = 'EXPONENTIAL_AT')) {

            if (isArray(v)) {
              if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                TO_EXP_NEG = v[0] | 0;
                TO_EXP_POS = v[1] | 0;
              }
            } else if (isValidInt(v, -MAX, MAX, 2, p)) {
              TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
            }
          }
          r[p] = [TO_EXP_NEG, TO_EXP_POS];

          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
          // 'config() RANGE not an integer: {v}'
          // 'config() RANGE cannot be zero: {v}'
          // 'config() RANGE out of range: {v}'
          if (has(p = 'RANGE')) {

            if (isArray(v)) {
              if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                MIN_EXP = v[0] | 0;
                MAX_EXP = v[1] | 0;
              }
            } else if (isValidInt(v, -MAX, MAX, 2, p)) {
              if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);
              else if (ERRORS) raise(2, p + ' cannot be zero', v);
            }
          }
          r[p] = [MIN_EXP, MAX_EXP];

          // ERRORS {boolean|number} true, false, 1 or 0.
          // 'config() ERRORS not a boolean or binary digit: {v}'
          if (has(p = 'ERRORS')) {

            if (v === !!v || v === 1 || v === 0) {
              id = 0;
              isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
            } else if (ERRORS) {
              raise(2, p + notBool, v);
            }
          }
          r[p] = ERRORS;

          // CRYPTO {boolean|number} true, false, 1 or 0.
          // 'config() CRYPTO not a boolean or binary digit: {v}'
          // 'config() crypto unavailable: {crypto}'
          if (has(p = 'CRYPTO')) {

            if (v === true || v === false || v === 1 || v === 0) {
              if (v) {
                v = typeof crypto == 'undefined';
                if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = true;
                } else if (ERRORS) {
                  raise(2, 'crypto unavailable', v ? void 0 : crypto);
                } else {
                  CRYPTO = false;
                }
              } else {
                CRYPTO = false;
              }
            } else if (ERRORS) {
              raise(2, p + notBool, v);
            }
          }
          r[p] = CRYPTO;

          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
          // 'config() MODULO_MODE not an integer: {v}'
          // 'config() MODULO_MODE out of range: {v}'
          if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {
            MODULO_MODE = v | 0;
          }
          r[p] = MODULO_MODE;

          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
          // 'config() POW_PRECISION not an integer: {v}'
          // 'config() POW_PRECISION out of range: {v}'
          if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {
            POW_PRECISION = v | 0;
          }
          r[p] = POW_PRECISION;

          // FORMAT {object}
          // 'config() FORMAT not an object: {v}'
          if (has(p = 'FORMAT')) {

            if (typeof v == 'object') {
              FORMAT = v;
            } else if (ERRORS) {
              raise(2, p + ' not an object', v);
            }
          }
          r[p] = FORMAT;

          return r;
        };


        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.max = function () { return maxOrMin(arguments, P.lt); };


        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.min = function () { return maxOrMin(arguments, P.gt); };


        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */
        BigNumber.random = (function () {
          var pow2_53 = 0x20000000000000;

          // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
          // Check if Math.random() produces more than 32 bits of randomness.
          // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
          // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
          var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
            ? function () { return mathfloor(Math.random() * pow2_53); }
            : function () {
              return ((Math.random() * 0x40000000 | 0) * 0x800000) +
                (Math.random() * 0x800000 | 0);
            };

          return function (dp) {
            var a, b, e, k, v,
              i = 0,
              c = [],
              rand = new BigNumber(ONE);

            dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
            k = mathceil(dp / LOG_BASE);

            if (CRYPTO) {

              // Browsers supporting crypto.getRandomValues.
              if (crypto.getRandomValues) {

                a = crypto.getRandomValues(new Uint32Array(k *= 2));

                for (; i < k;) {

                  // 53 bits:
                  // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                  // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                  // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                  //                                     11111 11111111 11111111
                  // 0x20000 is 2^21.
                  v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                  // Rejection sampling:
                  // 0 <= v < 9007199254740992
                  // Probability that v >= 9e15, is
                  // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {

                    // 0 <= v <= 8999999999999999
                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;

                // Node.js supporting crypto.randomBytes.
              } else if (crypto.randomBytes) {

                // buffer
                a = crypto.randomBytes(k *= 7);

                for (; i < k;) {

                  // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                  // 0x100000000 is 2^32, 0x1000000 is 2^24
                  // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                  // 0 <= v < 9007199254740992
                  v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
                    (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
                    (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {

                    // 0 <= (v % 1e14) <= 99999999999999
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                if (ERRORS) raise(14, 'crypto unavailable', crypto);
              }
            }

            // Use Math.random.
            if (!CRYPTO) {

              for (; i < k;) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }

            k = c[--i];
            dp %= LOG_BASE;

            // Convert trailing digits to zeros according to dp.
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }

            // Remove trailing elements which are zero.
            for (; c[i] === 0; c.pop(), i--);

            // Zero?
            if (i < 0) {
              c = [e = 0];
            } else {

              // Remove leading elements which are zero and adjust exponent accordingly.
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

              // Count the digits of the first element of c to determine leading zeros, and...
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

              // adjust the exponent accordingly.
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }

            rand.e = e;
            rand.c = c;
            return rand;
          };
        })();


        // PRIVATE FUNCTIONS


        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
          var d, e, k, r, x, xc, y,
            i = str.indexOf('.'),
            dp = DECIMAL_PLACES,
            rm = ROUNDING_MODE;

          if (baseIn < 37) str = str.toLowerCase();

          // Non-integer.
          if (i >= 0) {
            k = POW_PRECISION;

            // Unlimited precision.
            POW_PRECISION = 0;
            str = str.replace('.', '');
            y = new BigNumber(baseIn);
            x = y.pow(str.length - i);
            POW_PRECISION = k;

            // Convert str as if an integer, then restore the fraction part by dividing the
            // result by its base raised to a power.
            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
            y.e = y.c.length;
          }

          // Convert the number as integer.
          xc = toBaseOut(str, baseIn, baseOut);
          e = k = xc.length;

          // Remove trailing zeros.
          for (; xc[--k] == 0; xc.pop());
          if (!xc[0]) return '0';

          if (i < 0) {
            --e;
          } else {
            x.c = xc;
            x.e = e;

            // sign is needed for correct rounding.
            x.s = sign;
            x = div(x, y, dp, rm, baseOut);
            xc = x.c;
            r = x.r;
            e = x.e;
          }

          d = e + dp + 1;

          // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
          i = xc[d];
          k = baseOut / 2;
          r = r || d < 0 || xc[d + 1] != null;

          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
              rm == (x.s < 0 ? 8 : 7));

          if (d < 1 || !xc[0]) {

            // 1^-dp or 0.
            str = r ? toFixedPoint('1', -dp) : '0';
          } else {
            xc.length = d;

            if (r) {

              // Rounding up may mean the previous digit has to be rounded up and so on.
              for (--baseOut; ++xc[--d] > baseOut;) {
                xc[d] = 0;

                if (!d) {
                  ++e;
                  xc = [1].concat(xc);
                }
              }
            }

            // Determine trailing zeros.
            for (k = xc.length; !xc[--k];);

            // E.g. [4, 11, 15] becomes 4bf.
            for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));
            str = toFixedPoint(str, e);
          }

          // The caller will add the sign.
          return str;
        }


        // Perform division in the specified base. Called by div and convertBase.
        div = (function () {

          // Assume non-zero x and k.
          function multiply(x, k, base) {
            var m, temp, xlo, xhi,
              carry = 0,
              i = x.length,
              klo = k % SQRT_BASE,
              khi = k / SQRT_BASE | 0;

            for (x = x.slice(); i--;) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }

            if (carry) x = [carry].concat(x);

            return x;
          }

          function compare(a, b, aL, bL) {
            var i, cmp;

            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {

              for (i = cmp = 0; i < aL; i++) {

                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }

          function subtract(a, b, aL, base) {
            var i = 0;

            // Subtract b from a.
            for (; aL--;) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }

            // Remove leading zeros.
            for (; !a[0] && a.length > 1; a.splice(0, 1));
          }

          // x: dividend, y: divisor.
          return function (x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
              yL, yz,
              s = x.s == y.s ? 1 : -1,
              xc = x.c,
              yc = y.c;

            // Either NaN, Infinity or 0?
            if (!xc || !xc[0] || !yc || !yc[0]) {

              return new BigNumber(

                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
              );
            }

            q = new BigNumber(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;

            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }

            // Result exponent may be one less then the current value of e.
            // The coefficients of the BigNumbers from convertBase may have trailing zeros.
            for (i = 0; yc[i] == (xc[i] || 0); i++);
            if (yc[i] > (xc[i] || 0)) e--;

            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;

              // Normalise xc and yc so highest order digit of yc is >= base / 2.

              n = mathfloor(base / (yc[0] + 1));

              // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
              // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }

              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;

              // Add zeros to make remainder as long as divisor.
              for (; remL < yL; rem[remL++] = 0);
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              // Not necessary, but to prevent trial digit n > base, when using base 3.
              // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

              do {
                n = 0;

                // Compare divisor and remainder.
                cmp = compare(yc, rem, yL, remL);

                // If divisor < remainder.
                if (cmp < 0) {

                  // Calculate trial digit, n.

                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                  // n is how many times the divisor goes into the current remainder.
                  n = mathfloor(rem0 / yc0);

                  //  Algorithm:
                  //  1. product = divisor * trial digit (n)
                  //  2. if product > remainder: product -= divisor, n--
                  //  3. remainder -= product
                  //  4. if product was < remainder at 2:
                  //    5. compare new remainder and divisor
                  //    6. If remainder > divisor: remainder -= divisor, n++

                  if (n > 1) {

                    // n may be > base only when base is 3.
                    if (n >= base) n = base - 1;

                    // product = divisor * trial digit.
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;

                    // Compare product and remainder.
                    // If product > remainder.
                    // Trial digit n too high.
                    // n is 1 too high about 5% of the time, and is not known to have
                    // ever been more than 1 too high.
                    while (compare(prod, rem, prodL, remL) == 1) {
                      n--;

                      // Subtract divisor from product.
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {

                    // n is 0 or 1, cmp is -1.
                    // If n is 0, there is no need to compare yc and rem again below,
                    // so change cmp to 1 to avoid it.
                    // If n is 1, leave cmp as -1, so yc and rem are compared again.
                    if (n == 0) {

                      // divisor < remainder, so n must be at least 1.
                      cmp = n = 1;
                    }

                    // product = divisor
                    prod = yc.slice();
                    prodL = prod.length;
                  }

                  if (prodL < remL) prod = [0].concat(prod);

                  // Subtract product from remainder.
                  subtract(rem, prod, remL, base);
                  remL = rem.length;

                  // If product was < remainder.
                  if (cmp == -1) {

                    // Compare divisor and new remainder.
                    // If divisor < new remainder, subtract divisor from remainder.
                    // Trial digit n too low.
                    // n is 1 too low about 5% of the time, and very rarely 2 too low.
                    while (compare(yc, rem, yL, remL) < 1) {
                      n++;

                      // Subtract divisor from remainder.
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                } // else cmp === 1 and n will be 0

                // Add the next digit, n, to the result array.
                qc[i++] = n;

                // Update the remainder.
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);

              more = rem[0] != null;

              // Leading zero?
              if (!qc[0]) qc.splice(0, 1);
            }

            if (base == BASE) {

              // To calculate q.e, first get the number of digits of qc[0].
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

              // Caller is convertBase.
            } else {
              q.e = e;
              q.r = +more;
            }

            return q;
          };
        })();


        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */
        function format(n, i, rm, caller) {
          var c0, e, ne, len, str;

          rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode)
            ? rm | 0 : ROUNDING_MODE;

          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne = n.e;

          if (i == null) {
            str = coeffToString(n.c);
            str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG
              ? toExponential(str, ne)
              : toFixedPoint(str, ne);
          } else {
            n = round(new BigNumber(n), i, rm);

            // n.e may have changed if the value was rounded up.
            e = n.e;

            str = coeffToString(n.c);
            len = str.length;

            // toPrecision returns exponential notation if the number of significant digits
            // specified is less than the number of digits necessary to represent the integer
            // part of the value in fixed-point notation.

            // Exponential notation.
            if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {

              // Append zeros?
              for (; len < i; str += '0', len++);
              str = toExponential(str, e);

              // Fixed-point notation.
            } else {
              i -= ne;
              str = toFixedPoint(str, e);

              // Append zeros?
              if (e + 1 > len) {
                if (--i > 0) for (str += '.'; i--; str += '0');
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += '.';
                  for (; i--; str += '0');
                }
              }
            }
          }

          return n.s < 0 && c0 ? '-' + str : str;
        }


        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
          var m, n,
            i = 0;

          if (isArray(args[0])) args = args[0];
          m = new BigNumber(args[0]);

          for (; ++i < args.length;) {
            n = new BigNumber(args[i]);

            // If any number is NaN, return NaN.
            if (!n.s) {
              m = n;
              break;
            } else if (method.call(m, n)) {
              m = n;
            }
          }

          return m;
        }


        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */
        function intValidatorWithErrors(n, min, max, caller, name) {
          if (n < min || n > max || n != truncate(n)) {
            raise(caller, (name || 'decimal places') +
              (n < min || n > max ? ' out of range' : ' not an integer'), n);
          }

          return true;
        }


        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
          var i = 1,
            j = c.length;

          // Remove trailing zeros.
          for (; !c[--j]; c.pop());

          // Calculate the base 10 exponent. First get the number of digits of c[0].
          for (j = c[0]; j >= 10; j /= 10, i++);

          // Overflow?
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

            // Infinity.
            n.c = n.e = null;

            // Underflow?
          } else if (e < MIN_EXP) {

            // Zero.
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }

          return n;
        }


        // Handle values that fail the validity test in BigNumber.
        parseNumeric = (function () {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
            dotAfter = /^([^.]+)\.$/,
            dotBefore = /^\.([^.]+)$/,
            isInfinityOrNaN = /^-?(Infinity|NaN)$/,
            whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

          return function (x, str, num, b) {
            var base,
              s = num ? str : str.replace(whitespaceOrPlus, '');

            // No exception on ±Infinity or NaN.
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!num) {

                // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                s = s.replace(basePrefix, function (m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });

                if (b) {
                  base = b;

                  // E.g. '1.' to '1', '.1' to '0.1'
                  s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                }

                if (str != s) return new BigNumber(s, base);
              }

              // 'new BigNumber() not a number: {n}'
              // 'new BigNumber() not a base {b} number: {n}'
              if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);
              x.s = null;
            }

            x.c = x.e = null;
            id = 0;
          }
        })();


        // Throw a BigNumber Error.
        function raise(caller, msg, val) {
          var error = new Error([
            'new BigNumber',     // 0
            'cmp',               // 1
            'config',            // 2
            'div',               // 3
            'divToInt',          // 4
            'eq',                // 5
            'gt',                // 6
            'gte',               // 7
            'lt',                // 8
            'lte',               // 9
            'minus',             // 10
            'mod',               // 11
            'plus',              // 12
            'precision',         // 13
            'random',            // 14
            'round',             // 15
            'shift',             // 16
            'times',             // 17
            'toDigits',          // 18
            'toExponential',     // 19
            'toFixed',           // 20
            'toFormat',          // 21
            'toFraction',        // 22
            'pow',               // 23
            'toPrecision',       // 24
            'toString',          // 25
            'BigNumber'          // 26
          ][caller] + '() ' + msg + ': ' + val);

          error.name = 'BigNumber Error';
          id = 0;
          throw error;
        }


        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd,
            xc = x.c,
            pows10 = POWS_TEN;

          // if x is not Infinity or NaN...
          if (xc) {

            // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
            // n is a base 1e14 number, the value of the element of array x.c containing rd.
            // ni is the index of n within x.c.
            // d is the number of digits of n.
            // i is the index of rd within n including leading zeros.
            // j is the actual index of rd within n (if < 0, rd is a leading zero).
            out: {

              // Get the number of digits of the first element of xc.
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
              i = sd - d;

              // If the rounding digit is in the first element of xc...
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];

                // Get the rounding digit at index j of n.
                rd = n / pows10[d - j - 1] % 10 | 0;
              } else {
                ni = mathceil((i + 1) / LOG_BASE);

                if (ni >= xc.length) {

                  if (r) {

                    // Needed by sqrt.
                    for (; xc.length <= ni; xc.push(0));
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];

                  // Get the number of digits of n.
                  for (d = 1; k >= 10; k /= 10, d++);

                  // Get the index of rd within n.
                  i %= LOG_BASE;

                  // Get the index of rd within n, adjusted for leading zeros.
                  // The number of leading zeros of n is given by LOG_BASE - d.
                  j = i - LOG_BASE + d;

                  // Get the rounding digit at index j of n.
                  rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                }
              }

              r = r || sd < 0 ||

                // Are there any non-zero digits after the rounding digit?
                // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

              r = rm < 4
                ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                  // Check whether the digit to the left of the rounding digit is odd.
                  ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
                  rm == (x.s < 0 ? 8 : 7));

              if (sd < 1 || !xc[0]) {
                xc.length = 0;

                if (r) {

                  // Convert sd to decimal places.
                  sd -= x.e + 1;

                  // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {

                  // Zero.
                  xc[0] = x.e = 0;
                }

                return x;
              }

              // Remove excess digits.
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];

                // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                // j > 0 means i > number of leading zeros of n.
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }

              // Round up?
              if (r) {

                for (; ;) {

                  // If the digit to be rounded up is in the first element of xc...
                  if (ni == 0) {

                    // i will be the length of xc[0] before k is added.
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++);

                    // if i != k the length has increased.
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }

                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }

              // Remove trailing zeros.
              for (i = xc.length; xc[--i] === 0; xc.pop());
            }

            // Overflow? Infinity.
            if (x.e > MAX_EXP) {
              x.c = x.e = null;

              // Underflow? Zero.
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }

          return x;
        }


        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
          var x = new BigNumber(this);
          if (x.s < 0) x.s = 1;
          return x;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */
        P.ceil = function () {
          return round(new BigNumber(this), this.e + 1, 2);
        };


        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */
        P.comparedTo = P.cmp = function (y, b) {
          id = 1;
          return compare(this, new BigNumber(y, b));
        };


        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */
        P.decimalPlaces = P.dp = function () {
          var n, v,
            c = this.c;

          if (!c) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

          // Subtract the number of trailing zeros of the last number.
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
          if (n < 0) n = 0;

          return n;
        };


        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
          id = 3;
          return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };


        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.divToInt = function (y, b) {
          id = 4;
          return div(this, new BigNumber(y, b), 0, 1);
        };


        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.equals = P.eq = function (y, b) {
          id = 5;
          return compare(this, new BigNumber(y, b)) === 0;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */
        P.floor = function () {
          return round(new BigNumber(this), this.e + 1, 3);
        };


        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.greaterThan = P.gt = function (y, b) {
          id = 6;
          return compare(this, new BigNumber(y, b)) > 0;
        };


        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.greaterThanOrEqualTo = P.gte = function (y, b) {
          id = 7;
          return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

        };


        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */
        P.isFinite = function () {
          return !!this.c;
        };


        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = P.isInt = function () {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };


        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */
        P.isNaN = function () {
          return !this.s;
        };


        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */
        P.isNegative = P.isNeg = function () {
          return this.s < 0;
        };


        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */
        P.isZero = function () {
          return !!this.c && this.c[0] == 0;
        };


        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.lessThan = P.lt = function (y, b) {
          id = 8;
          return compare(this, new BigNumber(y, b)) < 0;
        };


        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.lessThanOrEqualTo = P.lte = function (y, b) {
          id = 9;
          return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };


        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = P.sub = function (y, b) {
          var i, j, t, xLTy,
            x = this,
            a = x.s;

          id = 10;
          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }

          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

          if (!xe || !ye) {

            // Either Infinity?
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

            // Either zero?
            if (!xc[0] || !yc[0]) {

              // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
              return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Determine which is the bigger number.
          if (a = xe - ye) {

            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }

            t.reverse();

            // Prepend zeros to equalise exponents.
            for (b = a; b--; t.push(0));
            t.reverse();
          } else {

            // Exponents equal. Check digit by digit.
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

            for (a = b = 0; b < j; b++) {

              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }

          // x < y? Point xc to the array of the bigger number.
          if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

          b = (j = yc.length) - (i = xc.length);

          // Append zeros to xc if shorter.
          // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
          if (b > 0) for (; b--; xc[i++] = 0);
          b = BASE - 1;

          // Subtract yc from xc.
          for (; j > a;) {

            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b);
              --xc[i];
              xc[j] += BASE;
            }

            xc[j] -= yc[j];
          }

          // Remove leading zeros and adjust exponent accordingly.
          for (; xc[0] == 0; xc.splice(0, 1), --ye);

          // Zero?
          if (!xc[0]) {

            // Following IEEE 754 (2008) 6.3,
            // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }

          // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
          // for finite x and y.
          return normalise(y, xc, ye);
        };


        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
          var q, s,
            x = this;

          id = 11;
          y = new BigNumber(y, b);

          // Return NaN if x is Infinity or NaN, or y is NaN or zero.
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber(NaN);

            // Return x if y is Infinity or x is zero.
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber(x);
          }

          if (MODULO_MODE == 9) {

            // Euclidian division: q = sign(y) * floor(x / abs(y))
            // r = x - qy    where  0 <= r < abs(y)
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }

          return x.minus(q.times(y));
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = P.neg = function () {
          var x = new BigNumber(this);
          x.s = -x.s || null;
          return x;
        };


        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = P.add = function (y, b) {
          var t,
            x = this,
            a = x.s;

          id = 12;
          y = new BigNumber(y, b);
          b = y.s;

          // Either NaN?
          if (!a || !b) return new BigNumber(NaN);

          // Signs differ?
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }

          var xe = x.e / LOG_BASE,
            ye = y.e / LOG_BASE,
            xc = x.c,
            yc = y.c;

          if (!xe || !ye) {

            // Return ±Infinity if either ±Infinity.
            if (!xc || !yc) return new BigNumber(a / 0);

            // Either zero?
            // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
          }

          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();

          // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }

            t.reverse();
            for (; a--; t.push(0));
            t.reverse();
          }

          a = xc.length;
          b = yc.length;

          // Point xc to the longer array, and b to the shorter length.
          if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

          // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
          for (a = 0; b;) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }

          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }

          // No need to check for zero, as +x + +y != 0 && -x + -y != 0
          // ye = MAX_EXP + 1 possible
          return normalise(y, xc, ye);
        };


        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */
        P.precision = P.sd = function (z) {
          var n, v,
            x = this,
            c = x.c;

          // 'precision() argument not a boolean or binary digit: {z}'
          if (z != null && z !== !!z && z !== 1 && z !== 0) {
            if (ERRORS) raise(13, 'argument' + notBool, z);
            if (z != !!z) z = null;
          }

          if (!c) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;

          if (v = c[v]) {

            // Subtract the number of trailing zeros of the last element.
            for (; v % 10 == 0; v /= 10, n--);

            // Add the number of digits of the first element.
            for (v = c[0]; v >= 10; v /= 10, n++);
          }

          if (z && x.e + 1 > n) n = x.e + 1;

          return n;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */
        P.round = function (dp, rm) {
          var n = new BigNumber(this);

          if (dp == null || isValidInt(dp, 0, MAX, 15)) {
            round(n, ~~dp + this.e + 1, rm == null ||
              !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
          }

          return n;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */
        P.shift = function (k) {
          var n = this;
          return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')

            // k < 1e+21, or truncate(k) will produce exponential notation.
            ? n.times('1e' + truncate(k))
            : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER)
              ? n.s * (k < 0 ? 0 : 1 / 0)
              : n);
        };


        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
          var m, n, r, rep, t,
            x = this,
            c = x.c,
            s = x.s,
            e = x.e,
            dp = DECIMAL_PLACES + 4,
            half = new BigNumber('0.5');

          // Negative/NaN/Infinity/zero?
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }

          // Initial estimate.
          s = Math.sqrt(+x);

          // Math.sqrt underflow/overflow?
          // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += '0';
            s = Math.sqrt(n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

            if (s == 1 / 0) {
              n = '1e' + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf('e') + 1) + e;
            }

            r = new BigNumber(n);
          } else {
            r = new BigNumber(s + '');
          }

          // Check for zero.
          // r could be zero if MIN_EXP is changed after the this value was created.
          // This would cause a division by zero (x/t) and hence Infinity below, which would cause
          // coeffToString to throw.
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3) s = 0;

            // Newton-Raphson iteration.
            for (; ;) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));

              if (coeffToString(t.c).slice(0, s) === (n =
                coeffToString(r.c)).slice(0, s)) {

                // The exponent of r may here be one less than the final result exponent,
                // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                // are indexed correctly.
                if (r.e < e) --s;
                n = n.slice(s - 3, s + 1);

                // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                // iteration.
                if (n == '9999' || !rep && n == '4999') {

                  // On the first iteration only, check to see if rounding up gives the
                  // exact result as the nines may infinitely repeat.
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);

                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }

                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {

                  // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                  // result. If not, then there are further digits and m will be truthy.
                  if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                    // Truncate to the first rounding digit.
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }

                  break;
                }
              }
            }
          }

          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };


        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */
        P.times = P.mul = function (y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
            base, sqrtBase,
            x = this,
            xc = x.c,
            yc = (id = 17, y = new BigNumber(y, b)).c;

          // Either NaN, ±Infinity or ±0?
          if (!xc || !yc || !xc[0] || !yc[0]) {

            // Return NaN if either is NaN, or one is 0 and the other is Infinity.
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;

              // Return ±Infinity if either is ±Infinity.
              if (!xc || !yc) {
                y.c = y.e = null;

                // Return ±0 if either is ±0.
              } else {
                y.c = [0];
                y.e = 0;
              }
            }

            return y;
          }

          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;

          // Ensure xc points to longer array and xcL to its length.
          if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

          // Initialise the result array with zeros.
          for (i = xcL + ycL, zc = []; i--; zc.push(0));

          base = BASE;
          sqrtBase = SQRT_BASE;

          for (i = ycL; --i >= 0;) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;

            for (k = xcL, j = i + k; j > i;) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }

            zc[j] = c;
          }

          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }

          return normalise(y, zc, e);
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */
        P.toDigits = function (sd, rm) {
          var n = new BigNumber(this);
          sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;
          rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
          return sd ? round(n, sd, rm) : n;
        };


        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */
        P.toExponential = function (dp, rm) {
          return format(this,
            dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */
        P.toFixed = function (dp, rm) {
          return format(this, dp != null && isValidInt(dp, 0, MAX, 20)
            ? ~~dp + this.e + 1 : null, rm, 20);
        };


        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */
        P.toFormat = function (dp, rm) {
          var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21)
            ? ~~dp + this.e + 1 : null, rm, 21);

          if (this.c) {
            var i,
              arr = str.split('.'),
              g1 = +FORMAT.groupSize,
              g2 = +FORMAT.secondaryGroupSize,
              groupSeparator = FORMAT.groupSeparator,
              intPart = arr[0],
              fractionPart = arr[1],
              isNeg = this.s < 0,
              intDigits = isNeg ? intPart.slice(1) : intPart,
              len = intDigits.length;

            if (g2) i = g1, g1 = g2, g2 = i, len -= i;

            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);

              for (; i < len; i += g1) {
                intPart += groupSeparator + intDigits.substr(i, g1);
              }

              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = '-' + intPart;
            }

            str = fractionPart
              ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)
                ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
                  '$&' + FORMAT.fractionGroupSeparator)
                : fractionPart)
              : intPart;
          }

          return str;
        };


        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */
        P.toFraction = function (md) {
          var arr, d0, d2, e, exp, n, n0, q, s,
            k = ERRORS,
            x = this,
            xc = x.c,
            d = new BigNumber(ONE),
            n1 = d0 = new BigNumber(ONE),
            d1 = n0 = new BigNumber(ONE);

          if (md != null) {
            ERRORS = false;
            n = new BigNumber(md);
            ERRORS = k;

            if (!(k = n.isInt()) || n.lt(ONE)) {

              if (ERRORS) {
                raise(22,
                  'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
              }

              // ERRORS is false:
              // If md is a finite non-integer >= 1, round it to an integer and use it.
              md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
            }
          }

          if (!xc) return x.toString();
          s = coeffToString(xc);

          // Determine initial denominator.
          // d is a power of 10 and the minimum max denominator that specifies the value exactly.
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.cmp(d) > 0 ? (e > 0 ? d : n1) : n;

          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber(s);

          // n0 = d1 = 0
          n0.c[0] = 0;

          for (; ;) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.cmp(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }

          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e *= 2;

          // Determine which fraction is closer to x, n0/d0 or n1/d1
          arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1
            ? [n1.toString(), d1.toString()]
            : [n0.toString(), d0.toString()];

          MAX_EXP = exp;
          return arr;
        };


        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
          return +this;
        };


        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
         * ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are positive integers,
         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
         *
         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         * [m] {number|string|BigNumber} The modulus.
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         *
         * Performs 54 loop iterations for n of 9007199254740991.
         */
        P.toPower = P.pow = function (n, m) {
          var k, y, z,
            i = mathfloor(n < 0 ? -n : +n),
            x = this;

          if (m != null) {
            id = 23;
            m = new BigNumber(m);
          }

          // Pass ±Infinity to Math.pow if exponent is out of range.
          if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') &&
            (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) ||
              parseFloat(n) != n && !(n = NaN)) || n == 0) {
            k = Math.pow(+x, n);
            return new BigNumber(m ? k % m : k);
          }

          if (m) {
            if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {
              x = x.mod(m);
            } else {
              z = m;

              // Nullify m so only a single mod operation is performed at the end.
              m = null;
            }
          } else if (POW_PRECISION) {

            // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            // (Using + 1.5 would give [9, 21] guard digits.)
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }

          y = new BigNumber(ONE);

          for (; ;) {
            if (i % 2) {
              y = y.times(x);
              if (!y.c) break;
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (m) {
                y = y.mod(m);
              }
            }

            i = mathfloor(i / 2);
            if (!i) break;
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (m) {
              x = x.mod(m);
            }
          }

          if (m) return y;
          if (n < 0) y = ONE.div(y);

          return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        };


        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */
        P.toPrecision = function (sd, rm) {
          return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision')
            ? sd | 0 : null, rm, 24);
        };


        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */
        P.toString = function (b) {
          var str,
            n = this,
            s = n.s,
            e = n.e;

          // Infinity or NaN?
          if (e === null) {

            if (s) {
              str = 'Infinity';
              if (s < 0) str = '-' + str;
            } else {
              str = 'NaN';
            }
          } else {
            str = coeffToString(n.c);

            if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS
                ? toExponential(str, e)
                : toFixedPoint(str, e);
            } else {
              str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
            }

            if (s < 0 && n.c[0]) str = '-' + str;
          }

          return str;
        };


        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */
        P.truncated = P.trunc = function () {
          return round(new BigNumber(this), this.e + 1, 1);
        };


        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */
        P.valueOf = P.toJSON = function () {
          var str,
            n = this,
            e = n.e;

          if (e === null) return n.toString();

          str = coeffToString(n.c);

          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
            ? toExponential(str, e)
            : toFixedPoint(str, e);

          return n.s < 0 ? '-' + str : str;
        };


        P.isBigNumber = true;

        if (config != null) BigNumber.config(config);

        return BigNumber;
      }


      // PRIVATE HELPER FUNCTIONS


      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }


      // Return a coefficient array as a string of base 10 digits.
      function coeffToString(a) {
        var s, z,
          i = 1,
          j = a.length,
          r = a[0] + '';

        for (; i < j;) {
          s = a[i++] + '';
          z = LOG_BASE - s.length;
          for (; z--; s = '0' + s);
          r += s;
        }

        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
      }


      // Compare the value of BigNumbers x and y.
      function compare(x, y) {
        var a, b,
          xc = x.c,
          yc = y.c,
          i = x.s,
          j = y.s,
          k = x.e,
          l = y.e;

        // Either NaN?
        if (!i || !j) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }


      /*
       * Return true if n is a valid number in range, otherwise false.
       * Use for argument validation when ERRORS is false.
       * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
       */
      function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
      }


      function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
      }


      /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. convertBase('255', 10, 16) returns [15, 15].
       * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
       */
      function toBaseOut(str, baseIn, baseOut) {
        var j,
          arr = [0],
          arrL,
          i = 0,
          len = str.length;

        for (; i < len;) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);
          arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));

          for (; j < arr.length; j++) {

            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }

        return arr.reverse();
      }


      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
          (e < 0 ? 'e' : 'e+') + e;
      }


      function toFixedPoint(str, e) {
        var len, z;

        // Negative exponent?
        if (e < 0) {

          // Prepend zeros.
          for (z = '0.'; ++e; z += '0');
          str = z + str;

          // Positive exponent
        } else {
          len = str.length;

          // Append zeros.
          if (++e > len) {
            for (z = '0', e -= len; --e; z += '0');
            str += z;
          } else if (e < len) {
            str = str.slice(0, e) + '.' + str.slice(e);
          }
        }

        return str;
      }


      function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
      }


      // EXPORT


      BigNumber = constructorFactory();
      BigNumber['default'] = BigNumber.BigNumber = BigNumber;


      // AMD.
      if (typeof define == 'function' && define.amd) {
        define(function () { return BigNumber; });

        // Node.js and other environments that support module.exports.
      } else if (typeof module != 'undefined' && module.exports) {
        module.exports = BigNumber;

        // Browser.
      } else {
        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();
        globalObj.BigNumber = BigNumber;
      }
    })(this);

  }, {}], 46: [function (require, module, exports) {
    (function (module, exports) {
      'use strict';

      // Utils
      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () { };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require('buffer').Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };

      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) {
          return c - 55;
          // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
          // '0' - '9'
        } else {
          return (c - 48) & 0xf;
        }
      }

      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this.strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            r += c - 49 + 0xa;

            // 'A'
          } else if (c >= 17) {
            r += c - 17 + 0xa;

            // '0' - '9'
          } else {
            r += c;
          }
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this.strip();
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      };

      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };

      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
      };

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);

        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          // Assume big-endian
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }

          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(0xff);
            q.iushrn(8);

            res[i] = b;
          }

          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }

        return res;
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this.strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this.strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this.strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this.strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this.strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd(num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

          // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
          // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

          // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this.strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out.strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out.strip();
      }

      function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this.strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this.strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this.strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this.strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this.strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this.strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return acc;
      };

      // In-place division by number
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        return this.strip();
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this.strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is BN v4 instance
            r.strip();
          } else {
            // r is BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224() {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192() {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);

  }, { "buffer": 48 }], 47: [function (require, module, exports) {
    var r;

    module.exports = function rand(len) {
      if (!r)
        r = new Rand(null);

      return r.generate(len);
    };

    function Rand(rand) {
      this.rand = rand;
    }
    module.exports.Rand = Rand;

    Rand.prototype.generate = function generate(len) {
      return this._rand(len);
    };

    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);

      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };

    if (typeof self === 'object') {
      if (self.crypto && self.crypto.getRandomValues) {
        // Modern browsers
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        // IE
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };

        // Safari's WebWorkers do not have `crypto`
      } else if (typeof window === 'object') {
        // Old junk
        Rand.prototype._rand = function () {
          throw new Error('Not implemented yet');
        };
      }
    } else {
      // Node.js or Web worker with no crypto support
      try {
        var crypto = require('crypto');
        if (typeof crypto.randomBytes !== 'function')
          throw new Error('Not supported');

        Rand.prototype._rand = function _rand(n) {
          return crypto.randomBytes(n);
        };
      } catch (e) {
      }
    }

  }, { "crypto": 48 }], 48: [function (require, module, exports) {

  }, {}], 49: [function (require, module, exports) {
    // based on the aes implimentation in triple sec
    // https://github.com/keybase/triplesec
    // which is in turn based on the one from crypto-js
    // https://code.google.com/p/crypto-js/

    var Buffer = require('safe-buffer').Buffer

    function asUInt32Array(buf) {
      if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

      var len = (buf.length / 4) | 0
      var out = new Array(len)

      for (var i = 0; i < len; i++) {
        out[i] = buf.readUInt32BE(i * 4)
      }

      return out
    }

    function scrubVec(v) {
      for (var i = 0; i < v.length; v++) {
        v[i] = 0
      }
    }

    function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
      var SUB_MIX0 = SUB_MIX[0]
      var SUB_MIX1 = SUB_MIX[1]
      var SUB_MIX2 = SUB_MIX[2]
      var SUB_MIX3 = SUB_MIX[3]

      var s0 = M[0] ^ keySchedule[0]
      var s1 = M[1] ^ keySchedule[1]
      var s2 = M[2] ^ keySchedule[2]
      var s3 = M[3] ^ keySchedule[3]
      var t0, t1, t2, t3
      var ksRow = 4

      for (var round = 1; round < nRounds; round++) {
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
        s0 = t0
        s1 = t1
        s2 = t2
        s3 = t3
      }

      t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
      t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
      t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
      t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
      t0 = t0 >>> 0
      t1 = t1 >>> 0
      t2 = t2 >>> 0
      t3 = t3 >>> 0

      return [t0, t1, t2, t3]
    }

    // AES constants
    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
    var G = (function () {
      // Compute double table
      var d = new Array(256)
      for (var j = 0; j < 256; j++) {
        if (j < 128) {
          d[j] = j << 1
        } else {
          d[j] = (j << 1) ^ 0x11b
        }
      }

      var SBOX = []
      var INV_SBOX = []
      var SUB_MIX = [[], [], [], []]
      var INV_SUB_MIX = [[], [], [], []]

      // Walk GF(2^8)
      var x = 0
      var xi = 0
      for (var i = 0; i < 256; ++i) {
        // Compute sbox
        var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
        sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
        SBOX[x] = sx
        INV_SBOX[sx] = x

        // Compute multiplication
        var x2 = d[x]
        var x4 = d[x2]
        var x8 = d[x4]

        // Compute sub bytes, mix columns tables
        var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
        SUB_MIX[0][x] = (t << 24) | (t >>> 8)
        SUB_MIX[1][x] = (t << 16) | (t >>> 16)
        SUB_MIX[2][x] = (t << 8) | (t >>> 24)
        SUB_MIX[3][x] = t

        // Compute inv sub bytes, inv mix columns tables
        t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
        INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
        INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
        INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
        INV_SUB_MIX[3][sx] = t

        if (x === 0) {
          x = xi = 1
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]]
          xi ^= d[d[xi]]
        }
      }

      return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
      }
    })()

    function AES(key) {
      this._key = asUInt32Array(key)
      this._reset()
    }

    AES.blockSize = 4 * 4
    AES.keySize = 256 / 8
    AES.prototype.blockSize = AES.blockSize
    AES.prototype.keySize = AES.keySize
    AES.prototype._reset = function () {
      var keyWords = this._key
      var keySize = keyWords.length
      var nRounds = keySize + 6
      var ksRows = (nRounds + 1) * 4

      var keySchedule = []
      for (var k = 0; k < keySize; k++) {
        keySchedule[k] = keyWords[k]
      }

      for (k = keySize; k < ksRows; k++) {
        var t = keySchedule[k - 1]

        if (k % keySize === 0) {
          t = (t << 8) | (t >>> 24)
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff])

          t ^= RCON[(k / keySize) | 0] << 24
        } else if (keySize > 6 && k % keySize === 4) {
          t =
            (G.SBOX[t >>> 24] << 24) |
            (G.SBOX[(t >>> 16) & 0xff] << 16) |
            (G.SBOX[(t >>> 8) & 0xff] << 8) |
            (G.SBOX[t & 0xff])
        }

        keySchedule[k] = keySchedule[k - keySize] ^ t
      }

      var invKeySchedule = []
      for (var ik = 0; ik < ksRows; ik++) {
        var ksR = ksRows - ik
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

        if (ik < 4 || ksR <= 4) {
          invKeySchedule[ik] = tt
        } else {
          invKeySchedule[ik] =
            G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
            G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
            G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
            G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
        }
      }

      this._nRounds = nRounds
      this._keySchedule = keySchedule
      this._invKeySchedule = invKeySchedule
    }

    AES.prototype.encryptBlockRaw = function (M) {
      M = asUInt32Array(M)
      return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
    }

    AES.prototype.encryptBlock = function (M) {
      var out = this.encryptBlockRaw(M)
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0], 0)
      buf.writeUInt32BE(out[1], 4)
      buf.writeUInt32BE(out[2], 8)
      buf.writeUInt32BE(out[3], 12)
      return buf
    }

    AES.prototype.decryptBlock = function (M) {
      M = asUInt32Array(M)

      // swap
      var m1 = M[1]
      M[1] = M[3]
      M[3] = m1

      var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0], 0)
      buf.writeUInt32BE(out[3], 4)
      buf.writeUInt32BE(out[2], 8)
      buf.writeUInt32BE(out[1], 12)
      return buf
    }

    AES.prototype.scrub = function () {
      scrubVec(this._keySchedule)
      scrubVec(this._invKeySchedule)
      scrubVec(this._key)
    }

    module.exports.AES = AES

  }, { "safe-buffer": 286 }], 50: [function (require, module, exports) {
    var aes = require('./aes')
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('cipher-base')
    var inherits = require('inherits')
    var GHASH = require('./ghash')
    var xor = require('buffer-xor')
    var incr32 = require('./incr32')

    function xorTest(a, b) {
      var out = 0
      if (a.length !== b.length) out++

      var len = Math.min(a.length, b.length)
      for (var i = 0; i < len; ++i) {
        out += (a[i] ^ b[i])
      }

      return out
    }

    function calcIv(self, iv, ck) {
      if (iv.length === 12) {
        self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
        return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
      }
      var ghash = new GHASH(ck)
      var len = iv.length
      var toPad = len % 16
      ghash.update(iv)
      if (toPad) {
        toPad = 16 - toPad
        ghash.update(Buffer.alloc(toPad, 0))
      }
      ghash.update(Buffer.alloc(8, 0))
      var ivBits = len * 8
      var tail = Buffer.alloc(8)
      tail.writeUIntBE(ivBits, 0, 8)
      ghash.update(tail)
      self._finID = ghash.state
      var out = Buffer.from(self._finID)
      incr32(out)
      return out
    }
    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this)

      var h = Buffer.alloc(4, 0)

      this._cipher = new aes.AES(key)
      var ck = this._cipher.encryptBlock(h)
      this._ghash = new GHASH(ck)
      iv = calcIv(this, iv, ck)

      this._prev = Buffer.from(iv)
      this._cache = Buffer.allocUnsafe(0)
      this._secCache = Buffer.allocUnsafe(0)
      this._decrypt = decrypt
      this._alen = 0
      this._len = 0
      this._mode = mode

      this._authTag = null
      this._called = false
    }

    inherits(StreamCipher, Transform)

    StreamCipher.prototype._update = function (chunk) {
      if (!this._called && this._alen) {
        var rump = 16 - (this._alen % 16)
        if (rump < 16) {
          rump = Buffer.alloc(rump, 0)
          this._ghash.update(rump)
        }
      }

      this._called = true
      var out = this._mode.encrypt(this, chunk)
      if (this._decrypt) {
        this._ghash.update(chunk)
      } else {
        this._ghash.update(out)
      }
      this._len += chunk.length
      return out
    }

    StreamCipher.prototype._final = function () {
      if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

      var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
      if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

      this._authTag = tag
      this._cipher.scrub()
    }

    StreamCipher.prototype.getAuthTag = function getAuthTag() {
      if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

      return this._authTag
    }

    StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
      if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

      this._authTag = tag
    }

    StreamCipher.prototype.setAAD = function setAAD(buf) {
      if (this._called) throw new Error('Attempting to set AAD in unsupported state')

      this._ghash.update(buf)
      this._alen += buf.length
    }

    module.exports = StreamCipher

  }, { "./aes": 49, "./ghash": 54, "./incr32": 55, "buffer-xor": 95, "cipher-base": 110, "inherits": 203, "safe-buffer": 286 }], 51: [function (require, module, exports) {
    var ciphers = require('./encrypter')
    var deciphers = require('./decrypter')
    var modes = require('./modes/list.json')

    function getCiphers() {
      return Object.keys(modes)
    }

    exports.createCipher = exports.Cipher = ciphers.createCipher
    exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
    exports.createDecipher = exports.Decipher = deciphers.createDecipher
    exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
    exports.listCiphers = exports.getCiphers = getCiphers

  }, { "./decrypter": 52, "./encrypter": 53, "./modes/list.json": 63 }], 52: [function (require, module, exports) {
    var AuthCipher = require('./authCipher')
    var Buffer = require('safe-buffer').Buffer
    var MODES = require('./modes')
    var StreamCipher = require('./streamCipher')
    var Transform = require('cipher-base')
    var aes = require('./aes')
    var ebtk = require('evp_bytestokey')
    var inherits = require('inherits')

    function Decipher(mode, key, iv) {
      Transform.call(this)

      this._cache = new Splitter()
      this._last = void 0
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._mode = mode
      this._autopadding = true
    }

    inherits(Decipher, Transform)

    Decipher.prototype._update = function (data) {
      this._cache.add(data)
      var chunk
      var thing
      var out = []
      while ((chunk = this._cache.get(this._autopadding))) {
        thing = this._mode.decrypt(this, chunk)
        out.push(thing)
      }
      return Buffer.concat(out)
    }

    Decipher.prototype._final = function () {
      var chunk = this._cache.flush()
      if (this._autopadding) {
        return unpad(this._mode.decrypt(this, chunk))
      } else if (chunk) {
        throw new Error('data not multiple of block length')
      }
    }

    Decipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo
      return this
    }

    function Splitter() {
      this.cache = Buffer.allocUnsafe(0)
    }

    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data])
    }

    Splitter.prototype.get = function (autoPadding) {
      var out
      if (autoPadding) {
        if (this.cache.length > 16) {
          out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
      } else {
        if (this.cache.length >= 16) {
          out = this.cache.slice(0, 16)
          this.cache = this.cache.slice(16)
          return out
        }
      }

      return null
    }

    Splitter.prototype.flush = function () {
      if (this.cache.length) return this.cache
    }

    function unpad(last) {
      var padded = last[15]
      if (padded < 1 || padded > 16) {
        throw new Error('unable to decrypt data')
      }
      var i = -1
      while (++i < padded) {
        if (last[(i + (16 - padded))] !== padded) {
          throw new Error('unable to decrypt data')
        }
      }
      if (padded === 16) return

      return last.slice(0, 16 - padded)
    }

    function createDecipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')

      if (typeof iv === 'string') iv = Buffer.from(iv)
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

      if (typeof password === 'string') password = Buffer.from(password)
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv, true)
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv, true)
      }

      return new Decipher(config.module, password, iv)
    }

    function createDecipher(suite, password) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')

      var keys = ebtk(password, false, config.key, config.iv)
      return createDecipheriv(suite, keys.key, keys.iv)
    }

    exports.createDecipher = createDecipher
    exports.createDecipheriv = createDecipheriv

  }, { "./aes": 49, "./authCipher": 50, "./modes": 62, "./streamCipher": 65, "cipher-base": 110, "evp_bytestokey": 163, "inherits": 203, "safe-buffer": 286 }], 53: [function (require, module, exports) {
    var MODES = require('./modes')
    var AuthCipher = require('./authCipher')
    var Buffer = require('safe-buffer').Buffer
    var StreamCipher = require('./streamCipher')
    var Transform = require('cipher-base')
    var aes = require('./aes')
    var ebtk = require('evp_bytestokey')
    var inherits = require('inherits')

    function Cipher(mode, key, iv) {
      Transform.call(this)

      this._cache = new Splitter()
      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._mode = mode
      this._autopadding = true
    }

    inherits(Cipher, Transform)

    Cipher.prototype._update = function (data) {
      this._cache.add(data)
      var chunk
      var thing
      var out = []

      while ((chunk = this._cache.get())) {
        thing = this._mode.encrypt(this, chunk)
        out.push(thing)
      }

      return Buffer.concat(out)
    }

    var PADDING = Buffer.alloc(16, 0x10)

    Cipher.prototype._final = function () {
      var chunk = this._cache.flush()
      if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk)
        this._cipher.scrub()
        return chunk
      }

      if (!chunk.equals(PADDING)) {
        this._cipher.scrub()
        throw new Error('data not multiple of block length')
      }
    }

    Cipher.prototype.setAutoPadding = function (setTo) {
      this._autopadding = !!setTo
      return this
    }

    function Splitter() {
      this.cache = Buffer.allocUnsafe(0)
    }

    Splitter.prototype.add = function (data) {
      this.cache = Buffer.concat([this.cache, data])
    }

    Splitter.prototype.get = function () {
      if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        return out
      }
      return null
    }

    Splitter.prototype.flush = function () {
      var len = 16 - this.cache.length
      var padBuff = Buffer.allocUnsafe(len)

      var i = -1
      while (++i < len) {
        padBuff.writeUInt8(len, i)
      }

      return Buffer.concat([this.cache, padBuff])
    }

    function createCipheriv(suite, password, iv) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')

      if (typeof password === 'string') password = Buffer.from(password)
      if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

      if (typeof iv === 'string') iv = Buffer.from(iv)
      if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

      if (config.type === 'stream') {
        return new StreamCipher(config.module, password, iv)
      } else if (config.type === 'auth') {
        return new AuthCipher(config.module, password, iv)
      }

      return new Cipher(config.module, password, iv)
    }

    function createCipher(suite, password) {
      var config = MODES[suite.toLowerCase()]
      if (!config) throw new TypeError('invalid suite type')

      var keys = ebtk(password, false, config.key, config.iv)
      return createCipheriv(suite, keys.key, keys.iv)
    }

    exports.createCipheriv = createCipheriv
    exports.createCipher = createCipher

  }, { "./aes": 49, "./authCipher": 50, "./modes": 62, "./streamCipher": 65, "cipher-base": 110, "evp_bytestokey": 163, "inherits": 203, "safe-buffer": 286 }], 54: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer
    var ZEROES = Buffer.alloc(16, 0)

    function toArray(buf) {
      return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
      ]
    }

    function fromArray(out) {
      var buf = Buffer.allocUnsafe(16)
      buf.writeUInt32BE(out[0] >>> 0, 0)
      buf.writeUInt32BE(out[1] >>> 0, 4)
      buf.writeUInt32BE(out[2] >>> 0, 8)
      buf.writeUInt32BE(out[3] >>> 0, 12)
      return buf
    }

    function GHASH(key) {
      this.h = key
      this.state = Buffer.alloc(16, 0)
      this.cache = Buffer.allocUnsafe(0)
    }

    // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
    // by Juho Vähä-Herttua
    GHASH.prototype.ghash = function (block) {
      var i = -1
      while (++i < block.length) {
        this.state[i] ^= block[i]
      }
      this._multiply()
    }

    GHASH.prototype._multiply = function () {
      var Vi = toArray(this.h)
      var Zi = [0, 0, 0, 0]
      var j, xi, lsbVi
      var i = -1
      while (++i < 128) {
        xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
        if (xi) {
          // Z_i+1 = Z_i ^ V_i
          Zi[0] ^= Vi[0]
          Zi[1] ^= Vi[1]
          Zi[2] ^= Vi[2]
          Zi[3] ^= Vi[3]
        }

        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0

        // V_i+1 = V_i >> 1
        for (j = 3; j > 0; j--) {
          Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
        }
        Vi[0] = Vi[0] >>> 1

        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) {
          Vi[0] = Vi[0] ^ (0xe1 << 24)
        }
      }
      this.state = fromArray(Zi)
    }

    GHASH.prototype.update = function (buf) {
      this.cache = Buffer.concat([this.cache, buf])
      var chunk
      while (this.cache.length >= 16) {
        chunk = this.cache.slice(0, 16)
        this.cache = this.cache.slice(16)
        this.ghash(chunk)
      }
    }

    GHASH.prototype.final = function (abl, bl) {
      if (this.cache.length) {
        this.ghash(Buffer.concat([this.cache, ZEROES], 16))
      }

      this.ghash(fromArray([0, abl, 0, bl]))
      return this.state
    }

    module.exports = GHASH

  }, { "safe-buffer": 286 }], 55: [function (require, module, exports) {
    function incr32(iv) {
      var len = iv.length
      var item
      while (len--) {
        item = iv.readUInt8(len)
        if (item === 255) {
          iv.writeUInt8(0, len)
        } else {
          item++
          iv.writeUInt8(item, len)
          break
        }
      }
    }
    module.exports = incr32

  }, {}], 56: [function (require, module, exports) {
    var xor = require('buffer-xor')

    exports.encrypt = function (self, block) {
      var data = xor(block, self._prev)

      self._prev = self._cipher.encryptBlock(data)
      return self._prev
    }

    exports.decrypt = function (self, block) {
      var pad = self._prev

      self._prev = block
      var out = self._cipher.decryptBlock(block)

      return xor(out, pad)
    }

  }, { "buffer-xor": 95 }], 57: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer
    var xor = require('buffer-xor')

    function encryptStart(self, data, decrypt) {
      var len = data.length
      var out = xor(data, self._cache)
      self._cache = self._cache.slice(len)
      self._prev = Buffer.concat([self._prev, decrypt ? data : out])
      return out
    }

    exports.encrypt = function (self, data, decrypt) {
      var out = Buffer.allocUnsafe(0)
      var len

      while (data.length) {
        if (self._cache.length === 0) {
          self._cache = self._cipher.encryptBlock(self._prev)
          self._prev = Buffer.allocUnsafe(0)
        }

        if (self._cache.length <= data.length) {
          len = self._cache.length
          out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
          data = data.slice(len)
        } else {
          out = Buffer.concat([out, encryptStart(self, data, decrypt)])
          break
        }
      }

      return out
    }

  }, { "buffer-xor": 95, "safe-buffer": 286 }], 58: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer

    function encryptByte(self, byteParam, decrypt) {
      var pad
      var i = -1
      var len = 8
      var out = 0
      var bit, value
      while (++i < len) {
        pad = self._cipher.encryptBlock(self._prev)
        bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
        value = pad[0] ^ bit
        out += ((value & 0x80) >> (i % 8))
        self._prev = shiftIn(self._prev, decrypt ? bit : value)
      }
      return out
    }

    function shiftIn(buffer, value) {
      var len = buffer.length
      var i = -1
      var out = Buffer.allocUnsafe(buffer.length)
      buffer = Buffer.concat([buffer, Buffer.from([value])])

      while (++i < len) {
        out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
      }

      return out
    }

    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length
      var out = Buffer.allocUnsafe(len)
      var i = -1

      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt)
      }

      return out
    }

  }, { "safe-buffer": 286 }], 59: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer

    function encryptByte(self, byteParam, decrypt) {
      var pad = self._cipher.encryptBlock(self._prev)
      var out = pad[0] ^ byteParam

      self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([decrypt ? byteParam : out])
      ])

      return out
    }

    exports.encrypt = function (self, chunk, decrypt) {
      var len = chunk.length
      var out = Buffer.allocUnsafe(len)
      var i = -1

      while (++i < len) {
        out[i] = encryptByte(self, chunk[i], decrypt)
      }

      return out
    }

  }, { "safe-buffer": 286 }], 60: [function (require, module, exports) {
    var xor = require('buffer-xor')
    var Buffer = require('safe-buffer').Buffer
    var incr32 = require('../incr32')

    function getBlock(self) {
      var out = self._cipher.encryptBlockRaw(self._prev)
      incr32(self._prev)
      return out
    }

    var blockSize = 16
    exports.encrypt = function (self, chunk) {
      var chunkNum = Math.ceil(chunk.length / blockSize)
      var start = self._cache.length
      self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
      ])
      for (var i = 0; i < chunkNum; i++) {
        var out = getBlock(self)
        var offset = start + i * blockSize
        self._cache.writeUInt32BE(out[0], offset + 0)
        self._cache.writeUInt32BE(out[1], offset + 4)
        self._cache.writeUInt32BE(out[2], offset + 8)
        self._cache.writeUInt32BE(out[3], offset + 12)
      }
      var pad = self._cache.slice(0, chunk.length)
      self._cache = self._cache.slice(chunk.length)
      return xor(chunk, pad)
    }

  }, { "../incr32": 55, "buffer-xor": 95, "safe-buffer": 286 }], 61: [function (require, module, exports) {
    exports.encrypt = function (self, block) {
      return self._cipher.encryptBlock(block)
    }

    exports.decrypt = function (self, block) {
      return self._cipher.decryptBlock(block)
    }

  }, {}], 62: [function (require, module, exports) {
    var modeModules = {
      ECB: require('./ecb'),
      CBC: require('./cbc'),
      CFB: require('./cfb'),
      CFB8: require('./cfb8'),
      CFB1: require('./cfb1'),
      OFB: require('./ofb'),
      CTR: require('./ctr'),
      GCM: require('./ctr')
    }

    var modes = require('./list.json')

    for (var key in modes) {
      modes[key].module = modeModules[modes[key].mode]
    }

    module.exports = modes

  }, { "./cbc": 56, "./cfb": 57, "./cfb1": 58, "./cfb8": 59, "./ctr": 60, "./ecb": 61, "./list.json": 63, "./ofb": 64 }], 63: [function (require, module, exports) {
    module.exports = {
      "aes-128-ecb": {
        "cipher": "AES",
        "key": 128,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-192-ecb": {
        "cipher": "AES",
        "key": 192,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-256-ecb": {
        "cipher": "AES",
        "key": 256,
        "iv": 0,
        "mode": "ECB",
        "type": "block"
      },
      "aes-128-cbc": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-192-cbc": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-256-cbc": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes128": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes192": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes256": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CBC",
        "type": "block"
      },
      "aes-128-cfb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-192-cfb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-256-cfb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB",
        "type": "stream"
      },
      "aes-128-cfb8": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-192-cfb8": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-256-cfb8": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB8",
        "type": "stream"
      },
      "aes-128-cfb1": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-192-cfb1": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-256-cfb1": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CFB1",
        "type": "stream"
      },
      "aes-128-ofb": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-192-ofb": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-256-ofb": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "OFB",
        "type": "stream"
      },
      "aes-128-ctr": {
        "cipher": "AES",
        "key": 128,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-192-ctr": {
        "cipher": "AES",
        "key": 192,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-256-ctr": {
        "cipher": "AES",
        "key": 256,
        "iv": 16,
        "mode": "CTR",
        "type": "stream"
      },
      "aes-128-gcm": {
        "cipher": "AES",
        "key": 128,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-192-gcm": {
        "cipher": "AES",
        "key": 192,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      },
      "aes-256-gcm": {
        "cipher": "AES",
        "key": 256,
        "iv": 12,
        "mode": "GCM",
        "type": "auth"
      }
    }

  }, {}], 64: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var xor = require('buffer-xor')

        function getBlock(self) {
          self._prev = self._cipher.encryptBlock(self._prev)
          return self._prev
        }

        exports.encrypt = function (self, chunk) {
          while (self._cache.length < chunk.length) {
            self._cache = Buffer.concat([self._cache, getBlock(self)])
          }

          var pad = self._cache.slice(0, chunk.length)
          self._cache = self._cache.slice(chunk.length)
          return xor(chunk, pad)
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96, "buffer-xor": 95 }], 65: [function (require, module, exports) {
    var aes = require('./aes')
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('cipher-base')
    var inherits = require('inherits')

    function StreamCipher(mode, key, iv, decrypt) {
      Transform.call(this)

      this._cipher = new aes.AES(key)
      this._prev = Buffer.from(iv)
      this._cache = Buffer.allocUnsafe(0)
      this._secCache = Buffer.allocUnsafe(0)
      this._decrypt = decrypt
      this._mode = mode
    }

    inherits(StreamCipher, Transform)

    StreamCipher.prototype._update = function (chunk) {
      return this._mode.encrypt(this, chunk, this._decrypt)
    }

    StreamCipher.prototype._final = function () {
      this._cipher.scrub()
    }

    module.exports = StreamCipher

  }, { "./aes": 49, "cipher-base": 110, "inherits": 203, "safe-buffer": 286 }], 66: [function (require, module, exports) {
    var DES = require('browserify-des')
    var aes = require('browserify-aes/browser')
    var aesModes = require('browserify-aes/modes')
    var desModes = require('browserify-des/modes')
    var ebtk = require('evp_bytestokey')

    function createCipher(suite, password) {
      suite = suite.toLowerCase()

      var keyLen, ivLen
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key
        ivLen = aesModes[suite].iv
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8
        ivLen = desModes[suite].iv
      } else {
        throw new TypeError('invalid suite type')
      }

      var keys = ebtk(password, false, keyLen, ivLen)
      return createCipheriv(suite, keys.key, keys.iv)
    }

    function createDecipher(suite, password) {
      suite = suite.toLowerCase()

      var keyLen, ivLen
      if (aesModes[suite]) {
        keyLen = aesModes[suite].key
        ivLen = aesModes[suite].iv
      } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8
        ivLen = desModes[suite].iv
      } else {
        throw new TypeError('invalid suite type')
      }

      var keys = ebtk(password, false, keyLen, ivLen)
      return createDecipheriv(suite, keys.key, keys.iv)
    }

    function createCipheriv(suite, key, iv) {
      suite = suite.toLowerCase()
      if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
      if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

      throw new TypeError('invalid suite type')
    }

    function createDecipheriv(suite, key, iv) {
      suite = suite.toLowerCase()
      if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
      if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

      throw new TypeError('invalid suite type')
    }

    function getCiphers() {
      return Object.keys(desModes).concat(aes.getCiphers())
    }

    exports.createCipher = exports.Cipher = createCipher
    exports.createCipheriv = exports.Cipheriv = createCipheriv
    exports.createDecipher = exports.Decipher = createDecipher
    exports.createDecipheriv = exports.Decipheriv = createDecipheriv
    exports.listCiphers = exports.getCiphers = getCiphers

  }, { "browserify-aes/browser": 51, "browserify-aes/modes": 62, "browserify-des": 67, "browserify-des/modes": 68, "evp_bytestokey": 163 }], 67: [function (require, module, exports) {
    var CipherBase = require('cipher-base')
    var des = require('des.js')
    var inherits = require('inherits')
    var Buffer = require('safe-buffer').Buffer

    var modes = {
      'des-ede3-cbc': des.CBC.instantiate(des.EDE),
      'des-ede3': des.EDE,
      'des-ede-cbc': des.CBC.instantiate(des.EDE),
      'des-ede': des.EDE,
      'des-cbc': des.CBC.instantiate(des.DES),
      'des-ecb': des.DES
    }
    modes.des = modes['des-cbc']
    modes.des3 = modes['des-ede3-cbc']
    module.exports = DES
    inherits(DES, CipherBase)
    function DES(opts) {
      CipherBase.call(this)
      var modeName = opts.mode.toLowerCase()
      var mode = modes[modeName]
      var type
      if (opts.decrypt) {
        type = 'decrypt'
      } else {
        type = 'encrypt'
      }
      var key = opts.key
      if (!Buffer.isBuffer(key)) {
        key = Buffer.from(key)
      }
      if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
        key = Buffer.concat([key, key.slice(0, 8)])
      }
      var iv = opts.iv
      if (!Buffer.isBuffer(iv)) {
        iv = Buffer.from(iv)
      }
      this._des = mode.create({
        key: key,
        iv: iv,
        type: type
      })
    }
    DES.prototype._update = function (data) {
      return Buffer.from(this._des.update(data))
    }
    DES.prototype._final = function () {
      return Buffer.from(this._des.final())
    }

  }, { "cipher-base": 110, "des.js": 133, "inherits": 203, "safe-buffer": 286 }], 68: [function (require, module, exports) {
    exports['des-ecb'] = {
      key: 8,
      iv: 0
    }
    exports['des-cbc'] = exports.des = {
      key: 8,
      iv: 8
    }
    exports['des-ede3-cbc'] = exports.des3 = {
      key: 24,
      iv: 8
    }
    exports['des-ede3'] = {
      key: 24,
      iv: 0
    }
    exports['des-ede-cbc'] = {
      key: 16,
      iv: 8
    }
    exports['des-ede'] = {
      key: 16,
      iv: 0
    }

  }, {}], 69: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var BN = require('bn.js')
        var randomBytes = require('randombytes')

        function blind(priv) {
          var r = getr(priv)
          var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
          return { blinder: blinder, unblinder: r.invm(priv.modulus) }
        }

        function getr(priv) {
          var len = priv.modulus.byteLength()
          var r
          do {
            r = new BN(randomBytes(len))
          } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
          return r
        }

        function crt(msg, priv) {
          var blinds = blind(priv)
          var len = priv.modulus.byteLength()
          var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
          var c1 = blinded.toRed(BN.mont(priv.prime1))
          var c2 = blinded.toRed(BN.mont(priv.prime2))
          var qinv = priv.coefficient
          var p = priv.prime1
          var q = priv.prime2
          var m1 = c1.redPow(priv.exponent1).fromRed()
          var m2 = c2.redPow(priv.exponent2).fromRed()
          var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
          return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
        }
        crt.getr = getr

        module.exports = crt

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "bn.js": 70, "buffer": 96, "randombytes": 283 }], 70: [function (require, module, exports) {
    (function (module, exports) {
      'use strict';

      // Utils
      function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () { };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require('buffer').Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
          // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
          // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

            // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

            // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*
    
      var zeros = [];
      var groupSizes = [];
      var groupBases = [];
    
      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }
    
      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray(num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd(num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

          // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
          // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

          // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };

      function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Cooley-Tukey algorithm for FFT
      // slightly revisited to rely on looping instead of recursion

      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }

      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }

        return t;
      };

      // Returns binary-reversed representation of `x`
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;

        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << (l - i - 1);
          x >>= 1;
        }

        return rb;
      };

      // Performs "tweedling" phase, therefore 'emulating'
      // behaviour of the recursive algorithm
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };

      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);

        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;

          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);

          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;

            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];

              var ro = rtws[p + j + s];
              var io = itws[p + j + s];

              var rx = rtwdf_ * ro - itwdf_ * io;

              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;

              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;

              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;

              /* jshint maxdepth : false */
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };

      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }

        return 1 << i + 1 + odd;
      };

      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;

        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];

          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;

          t = iws[i];

          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };

      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
            Math.round(ws[2 * i] / N) +
            carry;

          ws[i] = w & 0x3ffffff;

          if (w < 0x4000000) {
            carry = 0;
          } else {
            carry = w / 0x4000000 | 0;
          }
        }

        return ws;
      };

      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);

          rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
          rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
        }

        // Pad with zeroes
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }

        assert(carry === 0);
        assert((carry & ~0x1fff) === 0);
      };

      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }

        return ph;
      };

      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);

        var rbt = this.makeRBT(N);

        var _ = this.stub(N);

        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);

        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);

        var rmws = out.words;
        rmws.length = N;

        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);

        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);

        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }

        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);

        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) {
          // No-op, we should not move anything at all
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs() {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red(num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };

      function K256() {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224() {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192() {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red(m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont(num) {
        return new Mont(num);
      };

      function Mont(m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === 'undefined' || module, this);

  }, { "buffer": 48 }], 71: [function (require, module, exports) {
    module.exports = require('./browser/algorithms.json')

  }, { "./browser/algorithms.json": 72 }], 72: [function (require, module, exports) {
    module.exports = {
      "sha224WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "RSA-SHA224": {
        "sign": "ecdsa/rsa",
        "hash": "sha224",
        "id": "302d300d06096086480165030402040500041c"
      },
      "sha256WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "RSA-SHA256": {
        "sign": "ecdsa/rsa",
        "hash": "sha256",
        "id": "3031300d060960864801650304020105000420"
      },
      "sha384WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "RSA-SHA384": {
        "sign": "ecdsa/rsa",
        "hash": "sha384",
        "id": "3041300d060960864801650304020205000430"
      },
      "sha512WithRSAEncryption": {
        "sign": "rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA512": {
        "sign": "ecdsa/rsa",
        "hash": "sha512",
        "id": "3051300d060960864801650304020305000440"
      },
      "RSA-SHA1": {
        "sign": "rsa",
        "hash": "sha1",
        "id": "3021300906052b0e03021a05000414"
      },
      "ecdsa-with-SHA1": {
        "sign": "ecdsa",
        "hash": "sha1",
        "id": ""
      },
      "sha256": {
        "sign": "ecdsa",
        "hash": "sha256",
        "id": ""
      },
      "sha224": {
        "sign": "ecdsa",
        "hash": "sha224",
        "id": ""
      },
      "sha384": {
        "sign": "ecdsa",
        "hash": "sha384",
        "id": ""
      },
      "sha512": {
        "sign": "ecdsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-SHA1": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA": {
        "sign": "dsa",
        "hash": "sha1",
        "id": ""
      },
      "DSA-WITH-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-SHA224": {
        "sign": "dsa",
        "hash": "sha224",
        "id": ""
      },
      "DSA-WITH-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-SHA256": {
        "sign": "dsa",
        "hash": "sha256",
        "id": ""
      },
      "DSA-WITH-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-SHA384": {
        "sign": "dsa",
        "hash": "sha384",
        "id": ""
      },
      "DSA-WITH-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-SHA512": {
        "sign": "dsa",
        "hash": "sha512",
        "id": ""
      },
      "DSA-RIPEMD160": {
        "sign": "dsa",
        "hash": "rmd160",
        "id": ""
      },
      "ripemd160WithRSA": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "RSA-RIPEMD160": {
        "sign": "rsa",
        "hash": "rmd160",
        "id": "3021300906052b2403020105000414"
      },
      "md5WithRSAEncryption": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      },
      "RSA-MD5": {
        "sign": "rsa",
        "hash": "md5",
        "id": "3020300c06082a864886f70d020505000410"
      }
    }

  }, {}], 73: [function (require, module, exports) {
    module.exports = {
      "1.3.132.0.10": "secp256k1",
      "1.3.132.0.33": "p224",
      "1.2.840.10045.3.1.1": "p192",
      "1.2.840.10045.3.1.7": "p256",
      "1.3.132.0.34": "p384",
      "1.3.132.0.35": "p521"
    }

  }, {}], 74: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer
    var createHash = require('create-hash')
    var stream = require('readable-stream')
    var inherits = require('inherits')
    var sign = require('./sign')
    var verify = require('./verify')

    var algorithms = require('./algorithms.json')
    Object.keys(algorithms).forEach(function (key) {
      algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
      algorithms[key.toLowerCase()] = algorithms[key]
    })

    function Sign(algorithm) {
      stream.Writable.call(this)

      var data = algorithms[algorithm]
      if (!data) throw new Error('Unknown message digest')

      this._hashType = data.hash
      this._hash = createHash(data.hash)
      this._tag = data.id
      this._signType = data.sign
    }
    inherits(Sign, stream.Writable)

    Sign.prototype._write = function _write(data, _, done) {
      this._hash.update(data)
      done()
    }

    Sign.prototype.update = function update(data, enc) {
      if (typeof data === 'string') data = Buffer.from(data, enc)

      this._hash.update(data)
      return this
    }

    Sign.prototype.sign = function signMethod(key, enc) {
      this.end()
      var hash = this._hash.digest()
      var sig = sign(hash, key, this._hashType, this._signType, this._tag)

      return enc ? sig.toString(enc) : sig
    }

    function Verify(algorithm) {
      stream.Writable.call(this)

      var data = algorithms[algorithm]
      if (!data) throw new Error('Unknown message digest')

      this._hash = createHash(data.hash)
      this._tag = data.id
      this._signType = data.sign
    }
    inherits(Verify, stream.Writable)

    Verify.prototype._write = function _write(data, _, done) {
      this._hash.update(data)
      done()
    }

    Verify.prototype.update = function update(data, enc) {
      if (typeof data === 'string') data = Buffer.from(data, enc)

      this._hash.update(data)
      return this
    }

    Verify.prototype.verify = function verifyMethod(key, sig, enc) {
      if (typeof sig === 'string') sig = Buffer.from(sig, enc)

      this.end()
      var hash = this._hash.digest()
      return verify(sig, hash, key, this._signType, this._tag)
    }

    function createSign(algorithm) {
      return new Sign(algorithm)
    }

    function createVerify(algorithm) {
      return new Verify(algorithm)
    }

    module.exports = {
      Sign: createSign,
      Verify: createVerify,
      createSign: createSign,
      createVerify: createVerify
    }

  }, { "./algorithms.json": 72, "./sign": 75, "./verify": 76, "create-hash": 128, "inherits": 203, "readable-stream": 92, "safe-buffer": 93 }], 75: [function (require, module, exports) {
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer = require('safe-buffer').Buffer
    var createHmac = require('create-hmac')
    var crt = require('browserify-rsa')
    var EC = require('elliptic').ec
    var BN = require('bn.js')
    var parseKeys = require('parse-asn1')
    var curves = require('./curves.json')

    function sign(hash, key, hashType, signType, tag) {
      var priv = parseKeys(key)
      if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
        return ecSign(hash, priv)
      } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type')
        return dsaSign(hash, priv, hashType)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
      }
      hash = Buffer.concat([tag, hash])
      var len = priv.modulus.byteLength()
      var pad = [0, 1]
      while (hash.length + pad.length + 1 < len) pad.push(0xff)
      pad.push(0x00)
      var i = -1
      while (++i < hash.length) pad.push(hash[i])

      var out = crt(pad, priv)
      return out
    }

    function ecSign(hash, priv) {
      var curveId = curves[priv.curve.join('.')]
      if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

      var curve = new EC(curveId)
      var key = curve.keyFromPrivate(priv.privateKey)
      var out = key.sign(hash)

      return Buffer.from(out.toDER())
    }

    function dsaSign(hash, priv, algo) {
      var x = priv.params.priv_key
      var p = priv.params.p
      var q = priv.params.q
      var g = priv.params.g
      var r = new BN(0)
      var k
      var H = bits2int(hash, q).mod(q)
      var s = false
      var kv = getKey(x, q, hash, algo)
      while (s === false) {
        k = makeKey(q, kv, algo)
        r = makeR(g, k, p, q)
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
        if (s.cmpn(0) === 0) {
          s = false
          r = new BN(0)
        }
      }
      return toDER(r, s)
    }

    function toDER(r, s) {
      r = r.toArray()
      s = s.toArray()

      // Pad values
      if (r[0] & 0x80) r = [0].concat(r)
      if (s[0] & 0x80) s = [0].concat(s)

      var total = r.length + s.length + 4
      var res = [0x30, total, 0x02, r.length]
      res = res.concat(r, [0x02, s.length], s)
      return Buffer.from(res)
    }

    function getKey(x, q, hash, algo) {
      x = Buffer.from(x.toArray())
      if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length)
        x = Buffer.concat([zeros, x])
      }
      var hlen = hash.length
      var hbits = bits2octets(hash, q)
      var v = Buffer.alloc(hlen)
      v.fill(1)
      var k = Buffer.alloc(hlen)
      k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
      v = createHmac(algo, k).update(v).digest()
      k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
      v = createHmac(algo, k).update(v).digest()
      return { k: k, v: v }
    }

    function bits2int(obits, q) {
      var bits = new BN(obits)
      var shift = (obits.length << 3) - q.bitLength()
      if (shift > 0) bits.ishrn(shift)
      return bits
    }

    function bits2octets(bits, q) {
      bits = bits2int(bits, q)
      bits = bits.mod(q)
      var out = Buffer.from(bits.toArray())
      if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length)
        out = Buffer.concat([zeros, out])
      }
      return out
    }

    function makeKey(q, kv, algo) {
      var t
      var k

      do {
        t = Buffer.alloc(0)

        while (t.length * 8 < q.bitLength()) {
          kv.v = createHmac(algo, kv.k).update(kv.v).digest()
          t = Buffer.concat([t, kv.v])
        }

        k = bits2int(t, q)
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      } while (k.cmp(q) !== -1)

      return k
    }

    function makeR(g, k, p, q) {
      return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
    }

    module.exports = sign
    module.exports.getKey = getKey
    module.exports.makeKey = makeKey

  }, { "./curves.json": 73, "bn.js": 77, "browserify-rsa": 69, "create-hmac": 130, "elliptic": 144, "parse-asn1": 237, "safe-buffer": 93 }], 76: [function (require, module, exports) {
    // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
    var Buffer = require('safe-buffer').Buffer
    var BN = require('bn.js')
    var EC = require('elliptic').ec
    var parseKeys = require('parse-asn1')
    var curves = require('./curves.json')

    function verify(sig, hash, key, signType, tag) {
      var pub = parseKeys(key)
      if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
        return ecVerify(sig, hash, pub)
      } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type')
        return dsaVerify(sig, hash, pub)
      } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
      }
      hash = Buffer.concat([tag, hash])
      var len = pub.modulus.byteLength()
      var pad = [1]
      var padNum = 0
      while (hash.length + pad.length + 2 < len) {
        pad.push(0xff)
        padNum++
      }
      pad.push(0x00)
      var i = -1
      while (++i < hash.length) {
        pad.push(hash[i])
      }
      pad = Buffer.from(pad)
      var red = BN.mont(pub.modulus)
      sig = new BN(sig).toRed(red)

      sig = sig.redPow(new BN(pub.publicExponent))
      sig = Buffer.from(sig.fromRed().toArray())
      var out = padNum < 8 ? 1 : 0
      len = Math.min(sig.length, pad.length)
      if (sig.length !== pad.length) out = 1

      i = -1
      while (++i < len) out |= sig[i] ^ pad[i]
      return out === 0
    }

    function ecVerify(sig, hash, pub) {
      var curveId = curves[pub.data.algorithm.curve.join('.')]
      if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

      var curve = new EC(curveId)
      var pubkey = pub.data.subjectPrivateKey.data

      return curve.verify(hash, sig, pubkey)
    }

    function dsaVerify(sig, hash, pub) {
      var p = pub.data.p
      var q = pub.data.q
      var g = pub.data.g
      var y = pub.data.pub_key
      var unpacked = parseKeys.signature.decode(sig, 'der')
      var s = unpacked.s
      var r = unpacked.r
      checkValue(s, q)
      checkValue(r, q)
      var montp = BN.mont(p)
      var w = s.invm(q)
      var v = g.toRed(montp)
        .redPow(new BN(hash).mul(w).mod(q))
        .fromRed()
        .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
        .mod(p)
        .mod(q)
      return v.cmp(r) === 0
    }

    function checkValue(b, q) {
      if (b.cmpn(0) <= 0) throw new Error('invalid sig')
      if (b.cmp(q) >= q) throw new Error('invalid sig')
    }

    module.exports = verify

  }, { "./curves.json": 73, "bn.js": 77, "elliptic": 144, "parse-asn1": 237, "safe-buffer": 93 }], 77: [function (require, module, exports) {
    arguments[4][70][0].apply(exports, arguments)
  }, { "buffer": 48, "dup": 70 }], 78: [function (require, module, exports) {
    'use strict';

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

    var codes = {};

    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }

      var NodeError =
        /*#__PURE__*/
        function (_Base) {
          _inheritsLoose(NodeError, _Base);

          function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
          }

          return NodeError;
        }(Base);

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function (i) {
          return String(i);
        });

        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


    function endsWith(str, search, this_len) {
      if (this_len === undefined || this_len > str.length) {
        this_len = str.length;
      }

      return str.substring(this_len - search.length, this_len) === search;
    } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      var determiner;

      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      var msg;

      if (endsWith(name, ' argument')) {
        // For cases like 'first argument'
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      } else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
      }

      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented';
    });
    createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg;
    }, TypeError);
    createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
    module.exports.codes = codes;

  }, {}], 79: [function (require, module, exports) {
    (function (process) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.
        'use strict';
        /*<replacement>*/

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            keys.push(key);
          }

          return keys;
        };
        /*</replacement>*/


        module.exports = Duplex;

        var Readable = require('./_stream_readable');

        var Writable = require('./_stream_writable');

        require('inherits')(Duplex, Readable);

        {
          // Allow the keys array to be GC'ed.
          var keys = objectKeys(Writable.prototype);

          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
          }
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);
          Readable.call(this, options);
          Writable.call(this, options);
          this.allowHalfOpen = true;

          if (options) {
            if (options.readable === false) this.readable = false;
            if (options.writable === false) this.writable = false;

            if (options.allowHalfOpen === false) {
              this.allowHalfOpen = false;
              this.once('end', onend);
            }
          }
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        }); // the no-half-open enforcer

        function onend() {
          // If the writable side ended, then we're ok.
          if (this._writableState.ended) return; // no more data can be written.
          // But allow more writes to happen in this tick.

          process.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined || this._writableState === undefined) {
              return false;
            }

            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (this._readableState === undefined || this._writableState === undefined) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });
      }).call(this)
    }).call(this, require('_process'))

  }, { "./_stream_readable": 81, "./_stream_writable": 83, "_process": 244, "inherits": 203 }], 80: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a passthrough stream.
    // basically just the most minimal sort of Transform stream.
    // Every written chunk gets output as-is.
    'use strict';

    module.exports = PassThrough;

    var Transform = require('./_stream_transform');

    require('inherits')(PassThrough, Transform);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };
  }, { "./_stream_transform": 82, "inherits": 203 }], 81: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        'use strict';

        module.exports = Readable;
        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = require('events').EventEmitter;

        var EElistenerCount = function EElistenerCount(emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () { };

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*<replacement>*/


        var debugUtil = require('util');

        var debug;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function debug() { };
        }
        /*</replacement>*/


        var BufferList = require('./internal/streams/buffer_list');

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
          getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
          ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
          ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


        var StringDecoder;
        var createReadableStreamAsyncIterator;
        var from;

        require('inherits')(Readable, Stream);

        var errorOrDestroy = destroyImpl.errorOrDestroy;
        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.

          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;
          this.paused = true; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

          this.autoDestroy = !!options.autoDestroy; // has it been destroyed

          this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || require('./_stream_duplex');
          if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
          // the ReadableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          this._readableState = new ReadableState(options, this, isDuplex); // legacy

          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined) {
              return false;
            }

            return this._readableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;

        Readable.prototype._destroy = function (err, cb) {
          cb(err);
        }; // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;

              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }

              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          debug('readableAddChunk', chunk);
          var state = stream._readableState;

          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);

            if (er) {
              errorOrDestroy(stream, er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()); else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
              } else if (state.destroyed) {
                return false;
              } else {
                state.reading = false;

                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
              maybeReadMore(stream, state);
            }
          } // We can push more data if we are below the highWaterMark.
          // Also, if we have no data yet, we can stand some more bytes.
          // This is to work around cases where hwm=0, such as the repl.


          return !state.ended && (state.length < state.highWaterMark || state.length === 0);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            state.awaitDrain = 0;
            stream.emit('data', chunk);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }

          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;

          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
          }

          return er;
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        }; // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          var decoder = new StringDecoder(enc);
          this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

          this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

          var p = this._readableState.buffer.head;
          var content = '';

          while (p !== null) {
            content += decoder.write(p.data);
            p = p.next;
          }

          this._readableState.buffer.clear();

          if (content !== '') this._readableState.buffer.push(content);
          this._readableState.length = content.length;
          return this;
        }; // Don't raise the hwm > 1GB


        var MAX_HWM = 0x40000000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state); else ret = null;

          if (ret === null) {
            state.needReadable = state.length <= state.highWaterMark;
            n = 0;
          } else {
            state.length -= n;
            state.awaitDrain = 0;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function onEofChunk(stream, state) {
          debug('onEofChunk');
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true;

          if (state.sync) {
            // if we are sync, wait until next tick to emit the data.
            // Otherwise we risk emitting data in the flow()
            // the readable code triggers during a read() call
            emitReadable(stream);
          } else {
            // emit 'readable' now to make sure it gets picked up.
            state.needReadable = false;

            if (!state.emittedReadable) {
              state.emittedReadable = true;
              emitReadable_(stream);
            }
          }
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          debug('emitReadable', state.needReadable, state.emittedReadable);
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            process.nextTick(emitReadable_, stream);
          }
        }

        function emitReadable_(stream) {
          var state = stream._readableState;
          debug('emitReadable_', state.destroyed, state.length, state.ended);

          if (!state.destroyed && (state.length || state.ended)) {
            stream.emit('readable');
            state.emittedReadable = false;
          } // The stream needs another readable event if
          // 1. It is not flowing, as the flow mechanism will take
          //    care of it.
          // 2. It is not ended.
          // 3. It is below the highWaterMark, so we can schedule
          //    another readable later.


          state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            process.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          // Attempt to read more data if we should.
          //
          // The conditions for reading more data are (one of):
          // - Not enough data buffered (state.length < state.highWaterMark). The loop
          //   is responsible for filling the buffer with enough data if such data
          //   is available. If highWaterMark is 0 and we are not in the flowing mode
          //   we should _not_ attempt to buffer any extra data. We'll get more data
          //   when the stream consumer calls read() instead.
          // - No data in the buffer, and the stream is in flowing mode. In this mode
          //   the loop below is responsible for ensuring read() is called. Failing to
          //   call read here would abort the flow and there's no other mechanism for
          //   continuing the flow if the stream consumer has just subscribed to the
          //   'data' event.
          //
          // In addition to the above conditions to keep reading data, the following
          // conditions prevent the data from being read:
          // - The stream has ended (state.ended).
          // - There is already a pending 'read' operation (state.reading). This is a
          //   case where the the stream has called the implementation defined _read()
          //   method, but they are processing the call asynchronously and have _not_
          //   called push() with new data. In this case we skip performing more
          //   read()s. The execution ends in this method again after the _read() ends
          //   up calling push() with more data.
          while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
            var len = state.length;
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) process.nextTick(endFn); else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');

            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          }

          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            var ret = dest.write(chunk);
            debug('dest.write', ret);

            if (ret === false) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function pipeOnDrainFunctionResult() {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          }; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, {
                hasUnpiped: false
              });
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this, unpipeInfo);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);
          var state = this._readableState;

          if (ev === 'data') {
            // update readableListening so that resume() may be a no-op
            // a few lines down. This is needed to support once('readable').
            state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

            if (state.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.flowing = false;
              state.emittedReadable = false;
              debug('on readable', state.length, state.reading);

              if (state.length) {
                emitReadable(this);
              } else if (!state.reading) {
                process.nextTick(nReadingNextTick, this);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        Readable.prototype.removeListener = function (ev, fn) {
          var res = Stream.prototype.removeListener.call(this, ev, fn);

          if (ev === 'readable') {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        Readable.prototype.removeAllListeners = function (ev) {
          var res = Stream.prototype.removeAllListeners.apply(this, arguments);

          if (ev === 'readable' || ev === undefined) {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        function updateReadableListening(self) {
          var state = self._readableState;
          state.readableListening = self.listenerCount('readable') > 0;

          if (state.resumeScheduled && !state.paused) {
            // flowing needs to be set to true now, otherwise
            // the upcoming resume will not flow.
            state.flowing = true; // crude way to check if we should resume
          } else if (self.listenerCount('data') > 0) {
            self.resume();
          }
        }

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume'); // we flow only if there is no one listening
            // for readable, but we still have to call
            // resume()

            state.flowing = !state.readableListening;
            resume(this, state);
          }

          state.paused = false;
          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            process.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          debug('resume', state.reading);

          if (!state.reading) {
            stream.read(0);
          }

          state.resumeScheduled = false;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (this._readableState.flowing !== false) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          this._readableState.paused = true;
          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {
            ;
          }
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function methodWrap(method) {
                return function methodWrapReturnFunction() {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          } // when we try to consume some more bytes, simply unpause the
          // underlying stream.


          this._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        if (typeof Symbol === 'function') {
          Readable.prototype[Symbol.asyncIterator] = function () {
            if (createReadableStreamAsyncIterator === undefined) {
              createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
            }

            return createReadableStreamAsyncIterator(this);
          };
        }

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState && this._readableState.buffer;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableFlowing', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.flowing;
          },
          set: function set(state) {
            if (this._readableState) {
              this._readableState.flowing = state;
            }
          }
        }); // exposed for testing purposes only.

        Readable._fromList = fromList;
        Object.defineProperty(Readable.prototype, 'readableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.length;
          }
        }); // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.first(); else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = state.buffer.consume(n, state.decoder);
          }
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState;
          debug('endReadable', state.endEmitted);

          if (!state.endEmitted) {
            state.ended = true;
            process.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');

            if (state.autoDestroy) {
              // In case of duplex streams we need a way to detect
              // if the writable side is ready for autoDestroy as well
              var wState = stream._writableState;

              if (!wState || wState.autoDestroy && wState.finished) {
                stream.destroy();
              }
            }
          }
        }

        if (typeof Symbol === 'function') {
          Readable.from = function (iterable, opts) {
            if (from === undefined) {
              from = require('./internal/streams/from');
            }

            return from(Readable, iterable, opts);
          };
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "../errors": 78, "./_stream_duplex": 79, "./internal/streams/async_iterator": 84, "./internal/streams/buffer_list": 85, "./internal/streams/destroy": 86, "./internal/streams/from": 88, "./internal/streams/state": 90, "./internal/streams/stream": 91, "_process": 244, "buffer": 96, "events": 162, "inherits": 203, "string_decoder/": 311, "util": 48 }], 82: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    // a transform stream is a readable/writable stream where you do
    // something with the data.  Sometimes it's called a "filter",
    // but that's not a great name for it, since that implies a thing where
    // some bits pass through, and others are simply ignored.  (That would
    // be a valid example of a transform, of course.)
    //
    // While the output is causally related to the input, it's not a
    // necessarily symmetric or synchronous transformation.  For example,
    // a zlib stream might take multiple plain-text writes(), and then
    // emit a single compressed chunk some time in the future.
    //
    // Here's how this works:
    //
    // The Transform stream has all the aspects of the readable and writable
    // stream classes.  When you write(chunk), that calls _write(chunk,cb)
    // internally, and returns false if there's a lot of pending writes
    // buffered up.  When you call read(), that calls _read(n) until
    // there's enough pending readable data buffered up.
    //
    // In a transform stream, the written data is placed in a buffer.  When
    // _read(n) is called, it transforms the queued up data, calling the
    // buffered _write cb's as it consumes chunks.  If consuming a single
    // written chunk would result in multiple output chunks, then the first
    // outputted bit calls the readcb, and subsequent chunks just go into
    // the read buffer, and will cause it to emit 'readable' if necessary.
    //
    // This way, back-pressure is actually determined by the reading side,
    // since _read has to be called to start processing a new chunk.  However,
    // a pathological inflate type of transform can cause excessive buffering
    // here.  For example, imagine a stream where every byte of input is
    // interpreted as an integer from 0-255, and then results in that many
    // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
    // 1kb of data being output.  In this case, you could write a very small
    // amount of input, and end up with a very large amount of output.  In
    // such a pathological inflating mechanism, there'd be no way to tell
    // the system to stop doing the transform.  A single 4MB write could
    // cause the system to run out of memory.
    //
    // However, even in such a pathological case, only a single written chunk
    // would be consumed, and then the rest would wait (un-transformed) until
    // the results of the previous transformed chunk were consumed.
    'use strict';

    module.exports = Transform;

    var _require$codes = require('../errors').codes,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
      ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
      ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

    var Duplex = require('./_stream_duplex');

    require('inherits')(Transform, Duplex);

    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK());
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish);
    }

    function prefinish() {
      var _this = this;

      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform.prototype._destroy = function (err, cb) {
      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };

    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }, { "../errors": 78, "./_stream_duplex": 79, "inherits": 203 }], 83: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';

        module.exports = Writable;
        /* <replacement> */

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var internalUtil = {
          deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () { };

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
          getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
          ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
          ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
          ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
          ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
          ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
          ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

        var errorOrDestroy = destroyImpl.errorOrDestroy;

        require('inherits')(Writable, Stream);

        function nop() { }

        function WritableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream,
          // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

          this.finalCalled = false; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // has it been destroyed

          this.destroyed = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

          this.autoDestroy = !!options.autoDestroy; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) { }
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance(object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.
          // Checking for a Stream.Duplex instance is faster here instead of inside
          // the WritableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
          this._writableState = new WritableState(options, this, isDuplex); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
        };

        function writeAfterEnd(stream, cb) {
          var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var er;

          if (chunk === null) {
            er = new ERR_STREAM_NULL_VALUES();
          } else if (typeof chunk !== 'string' && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
          }

          if (er) {
            errorOrDestroy(stream, er);
            process.nextTick(cb, er);
            return false;
          }

          return true;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;

          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ending) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          this._writableState.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }

          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }); // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.

        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);

            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write')); else if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            process.nextTick(cb, er); // this can emit finish, and it will always happen
            // after error

            process.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er); // this can emit finish, but finish must
            // always follow error

            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb); else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state) || stream.destroyed;

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              process.nextTick(afterWrite, stream, state, finished, cb);
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;

            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }

            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }

            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending) endWritable(this, state, cb);
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        });

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;

            if (err) {
              errorOrDestroy(stream, err);
            }

            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }

        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function' && !state.destroyed) {
              state.pendingcb++;
              state.finalCalled = true;
              process.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            prefinish(stream, state);

            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');

              if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;

                if (!rState || rState.autoDestroy && rState.endEmitted) {
                  stream.destroy();
                }
              }
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) process.nextTick(cb); else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;

          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          } // reuse the free corkReq.


          state.corkedRequestsFree.next = corkReq;
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._writableState === undefined) {
              return false;
            }

            return this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;

        Writable.prototype._destroy = function (err, cb) {
          cb(err);
        };
      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "../errors": 78, "./_stream_duplex": 79, "./internal/streams/destroy": 86, "./internal/streams/state": 90, "./internal/streams/stream": 91, "_process": 244, "buffer": 96, "inherits": 203, "util-deprecate": 316 }], 84: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict';

        var _Object$setPrototypeO;

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        var finished = require('./end-of-stream');

        var kLastResolve = Symbol('lastResolve');
        var kLastReject = Symbol('lastReject');
        var kError = Symbol('error');
        var kEnded = Symbol('ended');
        var kLastPromise = Symbol('lastPromise');
        var kHandlePromise = Symbol('handlePromise');
        var kStream = Symbol('stream');

        function createIterResult(value, done) {
          return {
            value: value,
            done: done
          };
        }

        function readAndResolve(iter) {
          var resolve = iter[kLastResolve];

          if (resolve !== null) {
            var data = iter[kStream].read(); // we defer if data is null
            // we can be expecting either 'end' or
            // 'error'

            if (data !== null) {
              iter[kLastPromise] = null;
              iter[kLastResolve] = null;
              iter[kLastReject] = null;
              resolve(createIterResult(data, false));
            }
          }
        }

        function onReadable(iter) {
          // we wait for the next tick, because it might
          // emit an error with process.nextTick
          process.nextTick(readAndResolve, iter);
        }

        function wrapForNext(lastPromise, iter) {
          return function (resolve, reject) {
            lastPromise.then(function () {
              if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
              }

              iter[kHandlePromise](resolve, reject);
            }, reject);
          };
        }

        var AsyncIteratorPrototype = Object.getPrototypeOf(function () { });
        var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },

          next: function next() {
            var _this = this;

            // if we have detected an error in the meanwhile
            // reject straight away
            var error = this[kError];

            if (error !== null) {
              return Promise.reject(error);
            }

            if (this[kEnded]) {
              return Promise.resolve(createIterResult(undefined, true));
            }

            if (this[kStream].destroyed) {
              // We need to defer via nextTick because if .destroy(err) is
              // called, the error will be emitted via nextTick, and
              // we cannot guarantee that there is no error lingering around
              // waiting to be emitted.
              return new Promise(function (resolve, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve(createIterResult(undefined, true));
                  }
                });
              });
            } // if we have multiple next() calls
            // we will wait for the previous Promise to finish
            // this logic is optimized to support for await loops,
            // where next() is only called once at a time


            var lastPromise = this[kLastPromise];
            var promise;

            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              // fast path needed to support multiple this.push()
              // without triggering the next() queue
              var data = this[kStream].read();

              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }

              promise = new Promise(this[kHandlePromise]);
            }

            this[kLastPromise] = promise;
            return promise;
          }
        }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
          return this;
        }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this;

          // destroy(err, cb) is a private API
          // we can guarantee we have that here, because we control the
          // Readable class this is attached to
          return new Promise(function (resolve, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err);
                return;
              }

              resolve(createIterResult(undefined, true));
            });
          });
        }), _Object$setPrototypeO), AsyncIteratorPrototype);

        var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
          var _Object$create;

          var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true
          }), _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kError, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true
          }), _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read();

              if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
              } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
              }
            },
            writable: true
          }), _Object$create));
          iterator[kLastPromise] = null;
          finished(stream, function (err) {
            if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
              var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
              // returned by next() and store the error

              if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
              }

              iterator[kError] = err;
              return;
            }

            var resolve = iterator[kLastResolve];

            if (resolve !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(undefined, true));
            }

            iterator[kEnded] = true;
          });
          stream.on('readable', onReadable.bind(null, iterator));
          return iterator;
        };

        module.exports = createReadableStreamAsyncIterator;
      }).call(this)
    }).call(this, require('_process'))

  }, { "./end-of-stream": 87, "_process": 244 }], 85: [function (require, module, exports) {
    'use strict';

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var _require = require('buffer'),
      Buffer = _require.Buffer;

    var _require2 = require('util'),
      inspect = _require2.inspect;

    var custom = inspect && inspect.custom || 'inspect';

    function copyBuffer(src, target, offset) {
      Buffer.prototype.copy.call(src, target, offset);
    }

    module.exports =
      /*#__PURE__*/
      function () {
        function BufferList() {
          _classCallCheck(this, BufferList);

          this.head = null;
          this.tail = null;
          this.length = 0;
        }

        _createClass(BufferList, [{
          key: "push",
          value: function push(v) {
            var entry = {
              data: v,
              next: null
            };
            if (this.length > 0) this.tail.next = entry; else this.head = entry;
            this.tail = entry;
            ++this.length;
          }
        }, {
          key: "unshift",
          value: function unshift(v) {
            var entry = {
              data: v,
              next: this.head
            };
            if (this.length === 0) this.tail = entry;
            this.head = entry;
            ++this.length;
          }
        }, {
          key: "shift",
          value: function shift() {
            if (this.length === 0) return;
            var ret = this.head.data;
            if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
            --this.length;
            return ret;
          }
        }, {
          key: "clear",
          value: function clear() {
            this.head = this.tail = null;
            this.length = 0;
          }
        }, {
          key: "join",
          value: function join(s) {
            if (this.length === 0) return '';
            var p = this.head;
            var ret = '' + p.data;

            while (p = p.next) {
              ret += s + p.data;
            }

            return ret;
          }
        }, {
          key: "concat",
          value: function concat(n) {
            if (this.length === 0) return Buffer.alloc(0);
            var ret = Buffer.allocUnsafe(n >>> 0);
            var p = this.head;
            var i = 0;

            while (p) {
              copyBuffer(p.data, ret, i);
              i += p.data.length;
              p = p.next;
            }

            return ret;
          } // Consumes a specified amount of bytes or characters from the buffered data.

        }, {
          key: "consume",
          value: function consume(n, hasStrings) {
            var ret;

            if (n < this.head.data.length) {
              // `slice` is the same for buffers and strings.
              ret = this.head.data.slice(0, n);
              this.head.data = this.head.data.slice(n);
            } else if (n === this.head.data.length) {
              // First chunk is a perfect match.
              ret = this.shift();
            } else {
              // Result spans more than one buffer.
              ret = hasStrings ? this._getString(n) : this._getBuffer(n);
            }

            return ret;
          }
        }, {
          key: "first",
          value: function first() {
            return this.head.data;
          } // Consumes a specified amount of characters from the buffered data.

        }, {
          key: "_getString",
          value: function _getString(n) {
            var p = this.head;
            var c = 1;
            var ret = p.data;
            n -= ret.length;

            while (p = p.next) {
              var str = p.data;
              var nb = n > str.length ? str.length : n;
              if (nb === str.length) ret += str; else ret += str.slice(0, n);
              n -= nb;

              if (n === 0) {
                if (nb === str.length) {
                  ++c;
                  if (p.next) this.head = p.next; else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = str.slice(nb);
                }

                break;
              }

              ++c;
            }

            this.length -= c;
            return ret;
          } // Consumes a specified amount of bytes from the buffered data.

        }, {
          key: "_getBuffer",
          value: function _getBuffer(n) {
            var ret = Buffer.allocUnsafe(n);
            var p = this.head;
            var c = 1;
            p.data.copy(ret);
            n -= p.data.length;

            while (p = p.next) {
              var buf = p.data;
              var nb = n > buf.length ? buf.length : n;
              buf.copy(ret, ret.length - n, 0, nb);
              n -= nb;

              if (n === 0) {
                if (nb === buf.length) {
                  ++c;
                  if (p.next) this.head = p.next; else this.head = this.tail = null;
                } else {
                  this.head = p;
                  p.data = buf.slice(nb);
                }

                break;
              }

              ++c;
            }

            this.length -= c;
            return ret;
          } // Make sure the linked list only shows the minimal necessary information.

        }, {
          key: custom,
          value: function value(_, options) {
            return inspect(this, _objectSpread({}, options, {
              // Only inspect one level.
              depth: 0,
              // It should not recurse.
              customInspect: false
            }));
          }
        }]);

        return BufferList;
      }();
  }, { "buffer": 96, "util": 48 }], 86: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict'; // undocumented cb() API, needed for core, not for public API

        function destroy(err, cb) {
          var _this = this;

          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;

          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err) {
              if (!this._writableState) {
                process.nextTick(emitErrorNT, this, err);
              } else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
              }
            }

            return this;
          } // we set destroyed to true before firing error callbacks in order
          // to make it re-entrance safe in case destroy() is called within callbacks


          if (this._readableState) {
            this._readableState.destroyed = true;
          } // if this is a duplex stream mark the writable part as destroyed as well


          if (this._writableState) {
            this._writableState.destroyed = true;
          }

          this._destroy(err || null, function (err) {
            if (!cb && err) {
              if (!_this._writableState) {
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else {
                process.nextTick(emitCloseNT, _this);
              }
            } else if (cb) {
              process.nextTick(emitCloseNT, _this);
              cb(err);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          });

          return this;
        }

        function emitErrorAndCloseNT(self, err) {
          emitErrorNT(self, err);
          emitCloseNT(self);
        }

        function emitCloseNT(self) {
          if (self._writableState && !self._writableState.emitClose) return;
          if (self._readableState && !self._readableState.emitClose) return;
          self.emit('close');
        }

        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }

          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }

        function emitErrorNT(self, err) {
          self.emit('error', err);
        }

        function errorOrDestroy(stream, err) {
          // We have tests that rely on errors being emitted
          // in the same tick, so changing this is semver major.
          // For now when you opt-in to autoDestroy we allow
          // the error to be emitted nextTick. In a future
          // semver major update we should change the default to this.
          var rState = stream._readableState;
          var wState = stream._writableState;
          if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err); else stream.emit('error', err);
        }

        module.exports = {
          destroy: destroy,
          undestroy: undestroy,
          errorOrDestroy: errorOrDestroy
        };
      }).call(this)
    }).call(this, require('_process'))

  }, { "_process": 244 }], 87: [function (require, module, exports) {
    // Ported from https://github.com/mafintosh/end-of-stream with
    // permission from the author, Mathias Buus (@mafintosh).
    'use strict';

    var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);
      };
    }

    function noop() { }

    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function eos(stream, opts, callback) {
      if (typeof opts === 'function') return eos(stream, null, opts);
      if (!opts) opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;

      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };

      var writableEnded = stream._writableState && stream._writableState.finished;

      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };

      var readableEnded = stream._readableState && stream._readableState.endEmitted;

      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };

      var onerror = function onerror(err) {
        callback.call(stream, err);
      };

      var onclose = function onclose() {
        var err;

        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }

        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };

      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };

      if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest(); else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }

      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }

    module.exports = eos;
  }, { "../../../errors": 78 }], 88: [function (require, module, exports) {
    module.exports = function () {
      throw new Error('Readable.from is not available in the browser')
    };

  }, {}], 89: [function (require, module, exports) {
    // Ported from https://github.com/mafintosh/pump with
    // permission from the author, Mathias Buus (@mafintosh).
    'use strict';

    var eos;

    function once(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }

    var _require$codes = require('../../../errors').codes,
      ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

    function noop(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }

    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos === undefined) eos = require('./end-of-stream');
      eos(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want

        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
      };
    }

    function call(fn) {
      fn();
    }

    function pipe(from, to) {
      return from.pipe(to);
    }

    function popCallback(streams) {
      if (!streams.length) return noop;
      if (typeof streams[streams.length - 1] !== 'function') return noop;
      return streams.pop();
    }

    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }

      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];

      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }

      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }

    module.exports = pipeline;
  }, { "../../../errors": 78, "./end-of-stream": 87 }], 90: [function (require, module, exports) {
    'use strict';

    var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }

    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }

        return Math.floor(hwm);
      } // Default value


      return state.objectMode ? 16 : 16 * 1024;
    }

    module.exports = {
      getHighWaterMark: getHighWaterMark
    };
  }, { "../../../errors": 78 }], 91: [function (require, module, exports) {
    module.exports = require('events').EventEmitter;

  }, { "events": 162 }], 92: [function (require, module, exports) {
    exports = module.exports = require('./lib/_stream_readable.js');
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require('./lib/_stream_writable.js');
    exports.Duplex = require('./lib/_stream_duplex.js');
    exports.Transform = require('./lib/_stream_transform.js');
    exports.PassThrough = require('./lib/_stream_passthrough.js');
    exports.finished = require('./lib/internal/streams/end-of-stream.js');
    exports.pipeline = require('./lib/internal/streams/pipeline.js');

  }, { "./lib/_stream_duplex.js": 79, "./lib/_stream_passthrough.js": 80, "./lib/_stream_readable.js": 81, "./lib/_stream_transform.js": 82, "./lib/_stream_writable.js": 83, "./lib/internal/streams/end-of-stream.js": 87, "./lib/internal/streams/pipeline.js": 89 }], 93: [function (require, module, exports) {
    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer')
    var Buffer = buffer.Buffer

    // alternative to using Object.keys for old browsers
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key]
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports)
      exports.Buffer = SafeBuffer
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype)

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer)

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size)
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
      } else {
        buf.fill(0)
      }
      return buf
    }

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    }

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    }

  }, { "buffer": 96 }], 94: [function (require, module, exports) {
    arguments[4][48][0].apply(exports, arguments)
  }, { "dup": 48 }], 95: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        module.exports = function xor(a, b) {
          var length = Math.min(a.length, b.length)
          var buffer = new Buffer(length)

          for (var i = 0; i < length; ++i) {
            buffer[i] = a[i] ^ b[i]
          }

          return buffer
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96 }], 96: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */
        /* eslint-disable no-proto */

        'use strict'

        var base64 = require('base64-js')
        var ieee754 = require('ieee754')

        exports.Buffer = Buffer
        exports.SlowBuffer = SlowBuffer
        exports.INSPECT_MAX_BYTES = 50

        var K_MAX_LENGTH = 0x7fffffff
        exports.kMaxLength = K_MAX_LENGTH

        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */
        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
          typeof console.error === 'function') {
          console.error(
            'This browser lacks typed array (Uint8Array) support which is required by ' +
            '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
          )
        }

        function typedArraySupport() {
          // Can typed array instances can be augmented?
          try {
            var arr = new Uint8Array(1)
            arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
            return arr.foo() === 42
          } catch (e) {
            return false
          }
        }

        Object.defineProperty(Buffer.prototype, 'parent', {
          enumerable: true,
          get: function () {
            if (!Buffer.isBuffer(this)) return undefined
            return this.buffer
          }
        })

        Object.defineProperty(Buffer.prototype, 'offset', {
          enumerable: true,
          get: function () {
            if (!Buffer.isBuffer(this)) return undefined
            return this.byteOffset
          }
        })

        function createBuffer(length) {
          if (length > K_MAX_LENGTH) {
            throw new RangeError('The value "' + length + '" is invalid for option "size"')
          }
          // Return an augmented `Uint8Array` instance
          var buf = new Uint8Array(length)
          buf.__proto__ = Buffer.prototype
          return buf
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
          // Common case.
          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new TypeError(
                'The "string" argument must be of type string. Received type number'
              )
            }
            return allocUnsafe(arg)
          }
          return from(arg, encodingOrOffset, length)
        }

        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        if (typeof Symbol !== 'undefined' && Symbol.species != null &&
          Buffer[Symbol.species] === Buffer) {
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true,
            enumerable: false,
            writable: false
          })
        }

        Buffer.poolSize = 8192 // not used by this implementation

        function from(value, encodingOrOffset, length) {
          if (typeof value === 'string') {
            return fromString(value, encodingOrOffset)
          }

          if (ArrayBuffer.isView(value)) {
            return fromArrayLike(value)
          }

          if (value == null) {
            throw TypeError(
              'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
              'or Array-like Object. Received type ' + (typeof value)
            )
          }

          if (isInstance(value, ArrayBuffer) ||
            (value && isInstance(value.buffer, ArrayBuffer))) {
            return fromArrayBuffer(value, encodingOrOffset, length)
          }

          if (typeof value === 'number') {
            throw new TypeError(
              'The "value" argument must not be of type number. Received type number'
            )
          }

          var valueOf = value.valueOf && value.valueOf()
          if (valueOf != null && valueOf !== value) {
            return Buffer.from(valueOf, encodingOrOffset, length)
          }

          var b = fromObject(value)
          if (b) return b

          if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
            typeof value[Symbol.toPrimitive] === 'function') {
            return Buffer.from(
              value[Symbol.toPrimitive]('string'), encodingOrOffset, length
            )
          }

          throw new TypeError(
            'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
            'or Array-like Object. Received type ' + (typeof value)
          )
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
          return from(value, encodingOrOffset, length)
        }

        // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
        // https://github.com/feross/buffer/pull/148
        Buffer.prototype.__proto__ = Uint8Array.prototype
        Buffer.__proto__ = Uint8Array

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be of type number')
          } else if (size < 0) {
            throw new RangeError('The value "' + size + '" is invalid for option "size"')
          }
        }

        function alloc(size, fill, encoding) {
          assertSize(size)
          if (size <= 0) {
            return createBuffer(size)
          }
          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string'
              ? createBuffer(size).fill(fill, encoding)
              : createBuffer(size).fill(fill)
          }
          return createBuffer(size)
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
          return alloc(size, fill, encoding)
        }

        function allocUnsafe(size) {
          assertSize(size)
          return createBuffer(size < 0 ? 0 : checked(size) | 0)
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(size)
        }
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(size)
        }

        function fromString(string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8'
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding)
          }

          var length = byteLength(string, encoding) | 0
          var buf = createBuffer(length)

          var actual = buf.write(string, encoding)

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual)
          }

          return buf
        }

        function fromArrayLike(array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0
          var buf = createBuffer(length)
          for (var i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255
          }
          return buf
        }

        function fromArrayBuffer(array, byteOffset, length) {
          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('"offset" is outside of buffer bounds')
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('"length" is outside of buffer bounds')
          }

          var buf
          if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array)
          } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset)
          } else {
            buf = new Uint8Array(array, byteOffset, length)
          }

          // Return an augmented `Uint8Array` instance
          buf.__proto__ = Buffer.prototype
          return buf
        }

        function fromObject(obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0
            var buf = createBuffer(len)

            if (buf.length === 0) {
              return buf
            }

            obj.copy(buf, 0, 0, len)
            return buf
          }

          if (obj.length !== undefined) {
            if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
              return createBuffer(0)
            }
            return fromArrayLike(obj)
          }

          if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
            return fromArrayLike(obj.data)
          }
        }

        function checked(length) {
          // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= K_MAX_LENGTH) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
              'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
          }
          return length | 0
        }

        function SlowBuffer(length) {
          if (+length != length) { // eslint-disable-line eqeqeq
            length = 0
          }
          return Buffer.alloc(+length)
        }

        Buffer.isBuffer = function isBuffer(b) {
          return b != null && b._isBuffer === true &&
            b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
        }

        Buffer.compare = function compare(a, b) {
          if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
          if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError(
              'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
            )
          }

          if (a === b) return 0

          var x = a.length
          var y = b.length

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i]
              y = b[i]
              break
            }
          }

          if (x < y) return -1
          if (y < x) return 1
          return 0
        }

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true
            default:
              return false
          }
        }

        Buffer.concat = function concat(list, length) {
          if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers')
          }

          if (list.length === 0) {
            return Buffer.alloc(0)
          }

          var i
          if (length === undefined) {
            length = 0
            for (i = 0; i < list.length; ++i) {
              length += list[i].length
            }
          }

          var buffer = Buffer.allocUnsafe(length)
          var pos = 0
          for (i = 0; i < list.length; ++i) {
            var buf = list[i]
            if (isInstance(buf, Uint8Array)) {
              buf = Buffer.from(buf)
            }
            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }
            buf.copy(buffer, pos)
            pos += buf.length
          }
          return buffer
        }

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length
          }
          if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
            return string.byteLength
          }
          if (typeof string !== 'string') {
            throw new TypeError(
              'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
              'Received type ' + typeof string
            )
          }

          var len = string.length
          var mustMatch = (arguments.length > 2 && arguments[2] === true)
          if (!mustMatch && len === 0) return 0

          // Use a for loop to avoid recursion
          var loweredCase = false
          for (; ;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len
              case 'utf8':
              case 'utf-8':
                return utf8ToBytes(string).length
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2
              case 'hex':
                return len >>> 1
              case 'base64':
                return base64ToBytes(string).length
              default:
                if (loweredCase) {
                  return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                }
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
            }
          }
        }
        Buffer.byteLength = byteLength

        function slowToString(encoding, start, end) {
          var loweredCase = false

          // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.

          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
          if (start === undefined || start < 0) {
            start = 0
          }
          // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.
          if (start > this.length) {
            return ''
          }

          if (end === undefined || end > this.length) {
            end = this.length
          }

          if (end <= 0) {
            return ''
          }

          // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
          end >>>= 0
          start >>>= 0

          if (end <= start) {
            return ''
          }

          if (!encoding) encoding = 'utf8'

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end)

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end)

              case 'ascii':
                return asciiSlice(this, start, end)

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end)

              case 'base64':
                return base64Slice(this, start, end)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = (encoding + '').toLowerCase()
                loweredCase = true
            }
          }
        }

        // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
        // reliably in a browserify context because there could be multiple different
        // copies of the 'buffer' package in use. This method works even for Buffer
        // instances that were created from another copy of the `buffer` package.
        // See: https://github.com/feross/buffer/issues/154
        Buffer.prototype._isBuffer = true

        function swap(b, n, m) {
          var i = b[n]
          b[n] = b[m]
          b[m] = i
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length
          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits')
          }
          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1)
          }
          return this
        }

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length
          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits')
          }
          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3)
            swap(this, i + 1, i + 2)
          }
          return this
        }

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length
          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits')
          }
          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7)
            swap(this, i + 1, i + 6)
            swap(this, i + 2, i + 5)
            swap(this, i + 3, i + 4)
          }
          return this
        }

        Buffer.prototype.toString = function toString() {
          var length = this.length
          if (length === 0) return ''
          if (arguments.length === 0) return utf8Slice(this, 0, length)
          return slowToString.apply(this, arguments)
        }

        Buffer.prototype.toLocaleString = Buffer.prototype.toString

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
          if (this === b) return true
          return Buffer.compare(this, b) === 0
        }

        Buffer.prototype.inspect = function inspect() {
          var str = ''
          var max = exports.INSPECT_MAX_BYTES
          str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
          if (this.length > max) str += ' ... '
          return '<Buffer ' + str + '>'
        }

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (isInstance(target, Uint8Array)) {
            target = Buffer.from(target, target.offset, target.byteLength)
          }
          if (!Buffer.isBuffer(target)) {
            throw new TypeError(
              'The "target" argument must be one of type Buffer or Uint8Array. ' +
              'Received type ' + (typeof target)
            )
          }

          if (start === undefined) {
            start = 0
          }
          if (end === undefined) {
            end = target ? target.length : 0
          }
          if (thisStart === undefined) {
            thisStart = 0
          }
          if (thisEnd === undefined) {
            thisEnd = this.length
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index')
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0
          }
          if (thisStart >= thisEnd) {
            return -1
          }
          if (start >= end) {
            return 1
          }

          start >>>= 0
          end >>>= 0
          thisStart >>>= 0
          thisEnd >>>= 0

          if (this === target) return 0

          var x = thisEnd - thisStart
          var y = end - start
          var len = Math.min(x, y)

          var thisCopy = this.slice(thisStart, thisEnd)
          var targetCopy = target.slice(start, end)

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i]
              y = targetCopy[i]
              break
            }
          }

          if (x < y) return -1
          if (y < x) return 1
          return 0
        }

        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1

          // Normalize byteOffset
          if (typeof byteOffset === 'string') {
            encoding = byteOffset
            byteOffset = 0
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000
          }
          byteOffset = +byteOffset // Coerce to Number.
          if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : (buffer.length - 1)
          }

          // Normalize byteOffset: negative offsets start from the end of the buffer
          if (byteOffset < 0) byteOffset = buffer.length + byteOffset
          if (byteOffset >= buffer.length) {
            if (dir) return -1
            else byteOffset = buffer.length - 1
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0
            else return -1
          }

          // Normalize val
          if (typeof val === 'string') {
            val = Buffer.from(val, encoding)
          }

          // Finally, search either indexOf (if dir is true) or lastIndexOf
          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
          } else if (typeof val === 'number') {
            val = val & 0xFF // Search for a byte value [0-255]
            if (typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
              }
            }
            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
          }

          throw new TypeError('val must be string, number or Buffer')
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1
          var arrLength = arr.length
          var valLength = val.length

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase()
            if (encoding === 'ucs2' || encoding === 'ucs-2' ||
              encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1
              }
              indexSize = 2
              arrLength /= 2
              valLength /= 2
              byteOffset /= 2
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i]
            } else {
              return buf.readUInt16BE(i * indexSize)
            }
          }

          var i
          if (dir) {
            var foundIndex = -1
            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
              } else {
                if (foundIndex !== -1) i -= i - foundIndex
                foundIndex = -1
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
            for (i = byteOffset; i >= 0; i--) {
              var found = true
              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false
                  break
                }
              }
              if (found) return i
            }
          }

          return -1
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1
        }

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
        }

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
        }

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0
          var remaining = buf.length - offset
          if (!length) {
            length = remaining
          } else {
            length = Number(length)
            if (length > remaining) {
              length = remaining
            }
          }

          var strLen = string.length

          if (length > strLen / 2) {
            length = strLen / 2
          }
          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16)
            if (numberIsNaN(parsed)) return i
            buf[offset + i] = parsed
          }
          return i
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length)
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length)
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length)
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8'
            length = this.length
            offset = 0
            // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset
            length = this.length
            offset = 0
            // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset >>> 0
            if (isFinite(length)) {
              length = length >>> 0
              if (encoding === undefined) encoding = 'utf8'
            } else {
              encoding = length
              length = undefined
            }
          } else {
            throw new Error(
              'Buffer.write(string, encoding, offset[, length]) is no longer supported'
            )
          }

          var remaining = this.length - offset
          if (length === undefined || length > remaining) length = remaining

          if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds')
          }

          if (!encoding) encoding = 'utf8'

          var loweredCase = false
          for (; ;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length)

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length)

              case 'ascii':
                return asciiWrite(this, string, offset, length)

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length)

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
            }
          }
        }

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          }
        }

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf)
          } else {
            return base64.fromByteArray(buf.slice(start, end))
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end)
          var res = []

          var i = start
          while (i < end) {
            var firstByte = buf[i]
            var codePoint = null
            var bytesPerSequence = (firstByte > 0xEF) ? 4
              : (firstByte > 0xDF) ? 3
                : (firstByte > 0xBF) ? 2
                  : 1

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte
                  }
                  break
                case 2:
                  secondByte = buf[i + 1]
                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 3:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 4:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  fourthByte = buf[i + 3]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint
                    }
                  }
              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD
              bytesPerSequence = 1
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000
              res.push(codePoint >>> 10 & 0x3FF | 0xD800)
              codePoint = 0xDC00 | codePoint & 0x3FF
            }

            res.push(codePoint)
            i += bytesPerSequence
          }

          return decodeCodePointsArray(res)
        }

        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length
          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
          }

          // Decode in chunks to avoid "call stack size exceeded".
          var res = ''
          var i = 0
          while (i < len) {
            res += String.fromCharCode.apply(
              String,
              codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
            )
          }
          return res
        }

        function asciiSlice(buf, start, end) {
          var ret = ''
          end = Math.min(buf.length, end)

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F)
          }
          return ret
        }

        function latin1Slice(buf, start, end) {
          var ret = ''
          end = Math.min(buf.length, end)

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i])
          }
          return ret
        }

        function hexSlice(buf, start, end) {
          var len = buf.length

          if (!start || start < 0) start = 0
          if (!end || end < 0 || end > len) end = len

          var out = ''
          for (var i = start; i < end; ++i) {
            out += toHex(buf[i])
          }
          return out
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end)
          var res = ''
          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
          }
          return res
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length
          start = ~~start
          end = end === undefined ? len : ~~end

          if (start < 0) {
            start += len
            if (start < 0) start = 0
          } else if (start > len) {
            start = len
          }

          if (end < 0) {
            end += len
            if (end < 0) end = 0
          } else if (end > len) {
            end = len
          }

          if (end < start) end = start

          var newBuf = this.subarray(start, end)
          // Return an augmented `Uint8Array` instance
          newBuf.__proto__ = Buffer.prototype
          return newBuf
        }

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset(offset, ext, length) {
          if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var val = this[offset]
          var mul = 1
          var i = 0
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
          }

          return val
        }

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length)
          }

          var val = this[offset + --byteLength]
          var mul = 1
          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul
          }

          return val
        }

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 1, this.length)
          return this[offset]
        }

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          return this[offset] | (this[offset + 1] << 8)
        }

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          return (this[offset] << 8) | this[offset + 1]
        }

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return ((this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16)) +
            (this[offset + 3] * 0x1000000)
        }

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset] * 0x1000000) +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
        }

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var val = this[offset]
          var mul = 1
          var i = 0
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
          }
          mul *= 0x80

          if (val >= mul) val -= Math.pow(2, 8 * byteLength)

          return val
        }

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var i = byteLength
          var mul = 1
          var val = this[offset + --i]
          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul
          }
          mul *= 0x80

          if (val >= mul) val -= Math.pow(2, 8 * byteLength)

          return val
        }

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 1, this.length)
          if (!(this[offset] & 0x80)) return (this[offset])
          return ((0xff - this[offset] + 1) * -1)
        }

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          var val = this[offset] | (this[offset + 1] << 8)
          return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          var val = this[offset + 1] | (this[offset] << 8)
          return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
        }

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            (this[offset + 3])
        }

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)
          return ieee754.read(this, offset, true, 23, 4)
        }

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)
          return ieee754.read(this, offset, false, 23, 4)
        }

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 8, this.length)
          return ieee754.read(this, offset, true, 52, 8)
        }

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 8, this.length)
          return ieee754.read(this, offset, false, 52, 8)
        }

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
          if (offset + ext > buf.length) throw new RangeError('Index out of range')
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
          }

          var mul = 1
          var i = 0
          this[offset] = value & 0xFF
          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
          }

          var i = byteLength - 1
          var mul = 1
          this[offset + i] = value & 0xFF
          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
          this[offset] = (value & 0xff)
          return offset + 1
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
          this[offset] = (value & 0xff)
          this[offset + 1] = (value >>> 8)
          return offset + 2
        }

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
          this[offset] = (value >>> 8)
          this[offset + 1] = (value & 0xff)
          return offset + 2
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
          this[offset + 3] = (value >>> 24)
          this[offset + 2] = (value >>> 16)
          this[offset + 1] = (value >>> 8)
          this[offset] = (value & 0xff)
          return offset + 4
        }

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
          this[offset] = (value >>> 24)
          this[offset + 1] = (value >>> 16)
          this[offset + 2] = (value >>> 8)
          this[offset + 3] = (value & 0xff)
          return offset + 4
        }

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            var limit = Math.pow(2, (8 * byteLength) - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
          }

          var i = 0
          var mul = 1
          var sub = 0
          this[offset] = value & 0xFF
          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            var limit = Math.pow(2, (8 * byteLength) - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
          }

          var i = byteLength - 1
          var mul = 1
          var sub = 0
          this[offset + i] = value & 0xFF
          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
          if (value < 0) value = 0xff + value + 1
          this[offset] = (value & 0xff)
          return offset + 1
        }

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
          this[offset] = (value & 0xff)
          this[offset + 1] = (value >>> 8)
          return offset + 2
        }

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
          this[offset] = (value >>> 8)
          this[offset + 1] = (value & 0xff)
          return offset + 2
        }

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
          this[offset] = (value & 0xff)
          this[offset + 1] = (value >>> 8)
          this[offset + 2] = (value >>> 16)
          this[offset + 3] = (value >>> 24)
          return offset + 4
        }

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
          if (value < 0) value = 0xffffffff + value + 1
          this[offset] = (value >>> 24)
          this[offset + 1] = (value >>> 16)
          this[offset + 2] = (value >>> 8)
          this[offset + 3] = (value & 0xff)
          return offset + 4
        }

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range')
          if (offset < 0) throw new RangeError('Index out of range')
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
          }
          ieee754.write(buf, value, offset, littleEndian, 23, 4)
          return offset + 4
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert)
        }

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
          }
          ieee754.write(buf, value, offset, littleEndian, 52, 8)
          return offset + 8
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert)
        }

        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
          if (!start) start = 0
          if (!end && end !== 0) end = this.length
          if (targetStart >= target.length) targetStart = target.length
          if (!targetStart) targetStart = 0
          if (end > 0 && end < start) end = start

          // Copy 0 bytes; we're done
          if (end === start) return 0
          if (target.length === 0 || this.length === 0) return 0

          // Fatal error conditions
          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds')
          }
          if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
          if (end < 0) throw new RangeError('sourceEnd out of bounds')

          // Are we oob?
          if (end > this.length) end = this.length
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start
          }

          var len = end - start

          if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
            // Use built-in when available, missing from IE11
            this.copyWithin(targetStart, start, end)
          } else if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (var i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start]
            }
          } else {
            Uint8Array.prototype.set.call(
              target,
              this.subarray(start, end),
              targetStart
            )
          }

          return len
        }

        // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start
              start = 0
              end = this.length
            } else if (typeof end === 'string') {
              encoding = end
              end = this.length
            }
            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string')
            }
            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding)
            }
            if (val.length === 1) {
              var code = val.charCodeAt(0)
              if ((encoding === 'utf8' && code < 128) ||
                encoding === 'latin1') {
                // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code
              }
            }
          } else if (typeof val === 'number') {
            val = val & 255
          }

          // Invalid ranges are not set to a default, so can range check early.
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index')
          }

          if (end <= start) {
            return this
          }

          start = start >>> 0
          end = end === undefined ? this.length : end >>> 0

          if (!val) val = 0

          var i
          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val
            }
          } else {
            var bytes = Buffer.isBuffer(val)
              ? val
              : Buffer.from(val, encoding)
            var len = bytes.length
            if (len === 0) {
              throw new TypeError('The value "' + val +
                '" is invalid for argument "value"')
            }
            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len]
            }
          }

          return this
        }

        // HELPER FUNCTIONS
        // ================

        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

        function base64clean(str) {
          // Node takes equal signs as end of the Base64 encoding
          str = str.split('=')[0]
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = str.trim().replace(INVALID_BASE64_RE, '')
          // Node converts strings with length < 2 to ''
          if (str.length < 2) return ''
          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
          while (str.length % 4 !== 0) {
            str = str + '='
          }
          return str
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16)
          return n.toString(16)
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity
          var codePoint
          var length = string.length
          var leadSurrogate = null
          var bytes = []

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i)

            // is surrogate component
            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  continue
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  continue
                }

                // valid lead
                leadSurrogate = codePoint

                continue
              }

              // 2 leads in a row
              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                leadSurrogate = codePoint
                continue
              }

              // valid surrogate pair
              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            }

            leadSurrogate = null

            // encode utf8
            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break
              bytes.push(codePoint)
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break
              bytes.push(
                codePoint >> 0x6 | 0xC0,
                codePoint & 0x3F | 0x80
              )
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break
              bytes.push(
                codePoint >> 0xC | 0xE0,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
              )
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break
              bytes.push(
                codePoint >> 0x12 | 0xF0,
                codePoint >> 0xC & 0x3F | 0x80,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
              )
            } else {
              throw new Error('Invalid code point')
            }
          }

          return bytes
        }

        function asciiToBytes(str) {
          var byteArray = []
          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF)
          }
          return byteArray
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo
          var byteArray = []
          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break

            c = str.charCodeAt(i)
            hi = c >> 8
            lo = c % 256
            byteArray.push(lo)
            byteArray.push(hi)
          }

          return byteArray
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str))
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if ((i + offset >= dst.length) || (i >= src.length)) break
            dst[i + offset] = src[i]
          }
          return i
        }

        // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
        // the `instanceof` check but they should be treated as of that type.
        // See: https://github.com/feross/buffer/issues/166
        function isInstance(obj, type) {
          return obj instanceof type ||
            (obj != null && obj.constructor != null && obj.constructor.name != null &&
              obj.constructor.name === type.name)
        }
        function numberIsNaN(obj) {
          // For IE11 support
          return obj !== obj // eslint-disable-line no-self-compare
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "base64-js": 44, "buffer": 96, "ieee754": 202 }], 97: [function (require, module, exports) {
    'use strict';

    var GetIntrinsic = require('get-intrinsic');

    var callBind = require('./');

    var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };

  }, { "./": 98, "get-intrinsic": 167 }], 98: [function (require, module, exports) {
    'use strict';

    var bind = require('function-bind');
    var GetIntrinsic = require('get-intrinsic');

    var $apply = GetIntrinsic('%Function.prototype.apply%');
    var $call = GetIntrinsic('%Function.prototype.call%');
    var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

    var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
    var $max = GetIntrinsic('%Math.max%');

    if ($defineProperty) {
      try {
        $defineProperty({}, 'a', { value: 1 });
      } catch (e) {
        // IE 8 has a broken defineProperty
        $defineProperty = null;
      }
    }

    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, 'length');
        if (desc.configurable) {
          // original length, plus the receiver, minus any additional arguments (after the receiver)
          $defineProperty(
            func,
            'length',
            { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
          );
        }
      }
      return func;
    };

    var applyBind = function applyBind() {
      return $reflectApply(bind, $apply, arguments);
    };

    if ($defineProperty) {
      $defineProperty(module.exports, 'apply', { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }

  }, { "function-bind": 166, "get-intrinsic": 167 }], 99: [function (require, module, exports) {
    'use strict'

    exports.Commented = require('./commented')
    exports.Diagnose = require('./diagnose')
    exports.Decoder = require('./decoder')
    exports.Encoder = require('./encoder')
    exports.Simple = require('./simple')
    exports.Tagged = require('./tagged')
    exports.Map = require('./map')

    /**
     * Convenience name for {@linkcode Commented.comment}.
     */
    exports.comment = exports.Commented.comment

    /**
     * Convenience name for {@linkcode Decoder.decodeAll}.
     */
    exports.decodeAll = exports.Decoder.decodeAll

    /**
     * Convenience name for {@linkcode Decoder.decodeFirst}.
     */
    exports.decodeFirst = exports.Decoder.decodeFirst

    /**
     * Convenience name for {@linkcode Decoder.decodeAllSync}.
     */
    exports.decodeAllSync = exports.Decoder.decodeAllSync

    /**
     * Convenience name for {@linkcode Decoder.decodeFirstSync}.
     */
    exports.decodeFirstSync = exports.Decoder.decodeFirstSync

    /**
     * Convenience name for {@linkcode Diagnose.diagnose}.
     */
    exports.diagnose = exports.Diagnose.diagnose

    /**
     * Convenience name for {@linkcode Encoder.encode}.
     */
    exports.encode = exports.Encoder.encode

    /**
     * Convenience name for {@linkcode Encoder.encodeCanonical}.
     */
    exports.encodeCanonical = exports.Encoder.encodeCanonical

    /**
     * Convenience name for {@linkcode Encoder.encodeOne}.
     */
    exports.encodeOne = exports.Encoder.encodeOne

    /**
     * Convenience name for {@linkcode Encoder.encodeAsync}.
     */
    exports.encodeAsync = exports.Encoder.encodeAsync

    /**
     * Convenience name for {@linkcode Decoder.decodeFirstSync}.
     */
    exports.decode = exports.Decoder.decodeFirstSync

    /**
     * The codec information for
     * {@link https://github.com/Level/encoding-down encoding-down}, which is a
     * codec framework for leveldb.  CBOR is a particularly convenient format for
     * both keys and values, as it can deal with a lot of types that JSON can't
     * handle without losing type information.
     *
     * @example
     * const level = require('level')
     * const cbor = require('cbor')
     *
     * async function putget() {
     *   const db = level('./db', {
     *     keyEncoding: cbor.leveldb,
     *     valueEncoding: cbor.leveldb,
     *   })
     *
     *   await db.put({a: 1}, 9857298342094820394820394820398234092834n)
     *   const val = await db.get({a: 1})
     * }
     */
    exports.leveldb = {
      decode: exports.Decoder.decodeFirstSync,
      encode: exports.Encoder.encode,
      buffer: true,
      name: 'cbor',
    }

    /**
     * Reset everything that we can predict a plugin might have altered in good
     * faith.  For now that includes the default set of tags that decoding and
     * encoding will use.
     */
    exports.reset = function reset() {
      exports.Encoder.reset()
      exports.Tagged.reset()
    }

  }, { "./commented": 100, "./decoder": 102, "./diagnose": 103, "./encoder": 104, "./map": 105, "./simple": 106, "./tagged": 107 }], 100: [function (require, module, exports) {
    'use strict'

    const stream = require('stream')
    const utils = require('./utils')
    const Decoder = require('./decoder')
    const NoFilter = require('nofilter')
    const { MT, NUMBYTES, SYMS } = require('./constants')
    const { Buffer } = require('buffer')

    function plural(c) {
      if (c > 1) {
        return 's'
      }
      return ''
    }

    /**
     * @typedef CommentOptions
     * @property {number} [max_depth=10] How many times to indent
     *   the dashes.
     * @property {number} [depth=1] Initial indentation depth.
     * @property {boolean} [no_summary=false] If true, omit the summary
     *   of the full bytes read at the end.
     * @property {object} [tags] Mapping from tag number to function(v),
     *   where v is the decoded value that comes after the tag, and where the
     *   function returns the correctly-created value for that tag.
     * @property {boolean} [preferWeb=false] If true, prefer Uint8Arrays to
     *   be generated instead of node Buffers.  This might turn on some more
     *   changes in the future, so forward-compatibility is not guaranteed yet.
     * @property {BufferEncoding} [encoding='hex'] Encoding to use for input, if it
     *   is a string.
     */
    /**
     * @callback commentCallback
     * @param {Error} [error] If one was generated.
     * @param {string} [commented] The comment string.
     * @returns {void}
     */
    /**
     * Normalize inputs to the static functions.
     *
     * @param {CommentOptions|commentCallback|string|number} opts Encoding,
     *   max_depth, or callback.
     * @param {commentCallback} [cb] Called on completion.
     * @returns {{options: CommentOptions, cb: commentCallback}} Normalized value.
     * @throws {TypeError} Unknown option type.
     * @private
     */
    function normalizeOptions(opts, cb) {
      switch (typeof opts) {
        case 'function':
          return { options: {}, cb: /** @type {commentCallback} */ (opts) }
        case 'string':
          return { options: { encoding: /** @type {BufferEncoding} */ (opts) }, cb }
        case 'number':
          return { options: { max_depth: opts }, cb }
        case 'object':
          return { options: opts || {}, cb }
        default:
          throw new TypeError('Unknown option type')
      }
    }

    /**
     * Generate the expanded format of RFC 8949, section 3.2.2.
     *
     * @extends stream.Transform
     */
    class Commented extends stream.Transform {
      /**
       * Create a CBOR commenter.
       *
       * @param {CommentOptions} [options={}] Stream options.
       */
      constructor(options = {}) {
        const {
          depth = 1,
          max_depth = 10,
          no_summary = false,
          // Decoder options
          tags = {},
          preferWeb,
          encoding,
          // Stream.Transform options
          ...superOpts
        } = options

        super({
          ...superOpts,
          readableObjectMode: false,
          writableObjectMode: false,
        })

        this.depth = depth
        this.max_depth = max_depth
        this.all = new NoFilter()

        if (!tags[24]) {
          tags[24] = this._tag_24.bind(this)
        }
        this.parser = new Decoder({
          tags,
          max_depth,
          preferWeb,
          encoding,
        })
        this.parser.on('value', this._on_value.bind(this))
        this.parser.on('start', this._on_start.bind(this))
        this.parser.on('start-string', this._on_start_string.bind(this))
        this.parser.on('stop', this._on_stop.bind(this))
        this.parser.on('more-bytes', this._on_more.bind(this))
        this.parser.on('error', this._on_error.bind(this))
        if (!no_summary) {
          this.parser.on('data', this._on_data.bind(this))
        }
        this.parser.bs.on('read', this._on_read.bind(this))
      }

      /**
       * @param {Buffer} v Descend into embedded CBOR.
       * @private
       */
      _tag_24(v) {
        const c = new Commented({ depth: this.depth + 1, no_summary: true })

        c.on('data', b => this.push(b))
        c.on('error', er => this.emit('error', er))
        c.end(v)
      }

      _transform(fresh, encoding, cb) {
        this.parser.write(fresh, encoding, cb)
      }

      _flush(cb) {
        // TODO: find the test that covers this, and look at the return value
        return this.parser._flush(cb)
      }

      /**
       * Comment on an input Buffer or string, creating a string passed to the
       * callback.  If callback not specified, a promise is returned.
       *
       * @static
       * @param {string|Buffer|ArrayBuffer|Uint8Array|Uint8ClampedArray
       *   |DataView|stream.Readable} input Something to parse.
       * @param {CommentOptions|commentCallback|string|number} [options={}]
       *   Encoding, max_depth, or callback.
       * @param {commentCallback} [cb] If specified, called on completion.
       * @returns {Promise} If cb not specified.
       * @throws {Error} Input required.
       */
      static comment(input, options = {}, cb = null) {
        if (input == null) {
          throw new Error('input required')
        }
        ({ options, cb } = normalizeOptions(options, cb))
        const bs = new NoFilter()
        const { encoding = 'hex', ...opts } = options
        const d = new Commented(opts)
        let p = null

        if (typeof cb === 'function') {
          d.on('end', () => {
            cb(null, bs.toString('utf8'))
          })
          d.on('error', cb)
        } else {
          p = new Promise((resolve, reject) => {
            d.on('end', () => {
              resolve(bs.toString('utf8'))
            })
            d.on('error', reject)
          })
        }
        d.pipe(bs)
        utils.guessEncoding(input, encoding).pipe(d)
        return p
      }

      /**
       * @ignore
       */
      _on_error(er) {
        this.push('ERROR: ')
        this.push(er.toString())
        this.push('\n')
      }

      /**
       * @ignore
       */
      _on_read(buf) {
        this.all.write(buf)
        const hex = buf.toString('hex')

        this.push(new Array(this.depth + 1).join('  '))
        this.push(hex)

        let ind = ((this.max_depth - this.depth) * 2) - hex.length
        if (ind < 1) {
          ind = 1
        }
        this.push(new Array(ind + 1).join(' '))
        this.push('-- ')
      }

      /**
       * @ignore
       */
      _on_more(mt, len, parent_mt, pos) {
        let desc = ''

        this.depth++
        switch (mt) {
          case MT.POS_INT:
            desc = 'Positive number,'
            break
          case MT.NEG_INT:
            desc = 'Negative number,'
            break
          case MT.ARRAY:
            desc = 'Array, length'
            break
          case MT.MAP:
            desc = 'Map, count'
            break
          case MT.BYTE_STRING:
            desc = 'Bytes, length'
            break
          case MT.UTF8_STRING:
            desc = 'String, length'
            break
          case MT.SIMPLE_FLOAT:
            if (len === 1) {
              desc = 'Simple value,'
            } else {
              desc = 'Float,'
            }
            break
        }
        this.push(`${desc} next ${len} byte${plural(len)}\n`)
      }

      /**
       * @ignore
       */
      _on_start_string(mt, len, parent_mt, pos) {
        let desc = ''

        this.depth++
        switch (mt) {
          case MT.BYTE_STRING:
            desc = `Bytes, length: ${len}`
            break
          case MT.UTF8_STRING:
            desc = `String, length: ${len.toString()}`
            break
        }
        this.push(`${desc}\n`)
      }

      /**
       * @ignore
       */
      _on_start(mt, tag, parent_mt, pos) {
        this.depth++
        switch (parent_mt) {
          case MT.ARRAY:
            this.push(`[${pos}], `)
            break
          case MT.MAP:
            if (pos % 2) {
              this.push(`{Val:${Math.floor(pos / 2)}}, `)
            } else {
              this.push(`{Key:${Math.floor(pos / 2)}}, `)
            }
            break
        }
        switch (mt) {
          case MT.TAG:
            this.push(`Tag #${tag}`)
            if (tag === 24) {
              this.push(' Encoded CBOR data item')
            }
            break
          case MT.ARRAY:
            if (tag === SYMS.STREAM) {
              this.push('Array (streaming)')
            } else {
              this.push(`Array, ${tag} item${plural(tag)}`)
            }
            break
          case MT.MAP:
            if (tag === SYMS.STREAM) {
              this.push('Map (streaming)')
            } else {
              this.push(`Map, ${tag} pair${plural(tag)}`)
            }
            break
          case MT.BYTE_STRING:
            this.push('Bytes (streaming)')
            break
          case MT.UTF8_STRING:
            this.push('String (streaming)')
            break
        }
        this.push('\n')
      }

      /**
       * @ignore
       */
      _on_stop(mt) {
        this.depth--
      }

      /**
       * @private
       */
      _on_value(val, parent_mt, pos, ai) {
        if (val !== SYMS.BREAK) {
          switch (parent_mt) {
            case MT.ARRAY:
              this.push(`[${pos}], `)
              break
            case MT.MAP:
              if (pos % 2) {
                this.push(`{Val:${Math.floor(pos / 2)}}, `)
              } else {
                this.push(`{Key:${Math.floor(pos / 2)}}, `)
              }
              break
          }
        }
        const str = utils.cborValueToString(val, -Infinity)

        if ((typeof val === 'string') ||
          (Buffer.isBuffer(val))) {
          if (val.length > 0) {
            this.push(str)
            this.push('\n')
          }
          this.depth--
        } else {
          this.push(str)
          this.push('\n')
        }

        switch (ai) {
          case NUMBYTES.ONE:
          case NUMBYTES.TWO:
          case NUMBYTES.FOUR:
          case NUMBYTES.EIGHT:
            this.depth--
        }
      }

      /**
       * @ignore
       */
      _on_data() {
        this.push('0x')
        this.push(this.all.read().toString('hex'))
        this.push('\n')
      }
    }

    module.exports = Commented

  }, { "./constants": 101, "./decoder": 102, "./utils": 108, "buffer": 96, "nofilter": 216, "stream": 296 }], 101: [function (require, module, exports) {
    'use strict'

    /**
     * @enum {number}
     */
    exports.MT = {
      POS_INT: 0,
      NEG_INT: 1,
      BYTE_STRING: 2,
      UTF8_STRING: 3,
      ARRAY: 4,
      MAP: 5,
      TAG: 6,
      SIMPLE_FLOAT: 7,
    }

    /**
     * @enum {number}
     */
    exports.TAG = {
      DATE_STRING: 0,
      DATE_EPOCH: 1,
      POS_BIGINT: 2,
      NEG_BIGINT: 3,
      DECIMAL_FRAC: 4,
      BIGFLOAT: 5,
      BASE64URL_EXPECTED: 21,
      BASE64_EXPECTED: 22,
      BASE16_EXPECTED: 23,
      CBOR: 24,
      URI: 32,
      BASE64URL: 33,
      BASE64: 34,
      REGEXP: 35,
      MIME: 36,
      // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
      SET: 258,
    }

    /**
     * @enum {number}
     */
    exports.NUMBYTES = {
      ZERO: 0,
      ONE: 24,
      TWO: 25,
      FOUR: 26,
      EIGHT: 27,
      INDEFINITE: 31,
    }

    /**
     * @enum {number}
     */
    exports.SIMPLE = {
      FALSE: 20,
      TRUE: 21,
      NULL: 22,
      UNDEFINED: 23,
    }

    exports.SYMS = {
      NULL: Symbol.for('github.com/hildjj/node-cbor/null'),
      UNDEFINED: Symbol.for('github.com/hildjj/node-cbor/undef'),
      PARENT: Symbol.for('github.com/hildjj/node-cbor/parent'),
      BREAK: Symbol.for('github.com/hildjj/node-cbor/break'),
      STREAM: Symbol.for('github.com/hildjj/node-cbor/stream'),
    }

    exports.SHIFT32 = 0x100000000

    exports.BI = {
      MINUS_ONE: BigInt(-1),
      NEG_MAX: BigInt(-1) - BigInt(Number.MAX_SAFE_INTEGER),
      MAXINT32: BigInt('0xffffffff'),
      MAXINT64: BigInt('0xffffffffffffffff'),
      SHIFT32: BigInt(exports.SHIFT32),
    }


  }, {}], 102: [function (require, module, exports) {
    'use strict'

    const BinaryParseStream = require('../vendor/binary-parse-stream')
    const Tagged = require('./tagged')
    const Simple = require('./simple')
    const utils = require('./utils')
    const NoFilter = require('nofilter')
    const stream = require('stream')
    const constants = require('./constants')
    const { MT, NUMBYTES, SYMS, BI } = constants
    const { Buffer } = require('buffer')

    const COUNT = Symbol('count')
    const MAJOR = Symbol('major type')
    const ERROR = Symbol('error')
    const NOT_FOUND = Symbol('not found')

    function parentArray(parent, typ, count) {
      const a = []

      a[COUNT] = count
      a[SYMS.PARENT] = parent
      a[MAJOR] = typ
      return a
    }

    function parentBufferStream(parent, typ) {
      const b = new NoFilter()

      b[COUNT] = -1
      b[SYMS.PARENT] = parent
      b[MAJOR] = typ
      return b
    }

    class UnexpectedDataError extends Error {
      constructor(byte, value) {
        super(`Unexpected data: 0x${byte.toString(16)}`)
        this.name = 'UnexpectedDataError'
        this.byte = byte
        this.value = value
      }
    }

    /**
     * Things that can act as inputs, from which a NoFilter can be created.
     *
     * @typedef {string|Buffer|ArrayBuffer|Uint8Array|Uint8ClampedArray
     *   |DataView|stream.Readable} BufferLike
     */
    /**
     * @typedef ExtendedResults
     * @property {any} value The value that was found.
     * @property {number} length The number of bytes of the original input that
     *   were read.
     * @property {Buffer} bytes The bytes of the original input that were used
     *   to produce the value.
     * @property {Buffer} [unused] The bytes that were left over from the original
     *   input.  This property only exists if {@linkcode Decoder.decodeFirst} or
     *   {@linkcode Decoder.decodeFirstSync} was called.
     */
    /**
     * @typedef DecoderOptions
     * @property {number} [max_depth=-1] The maximum depth to parse.
     *   Use -1 for "until you run out of memory".  Set this to a finite
     *   positive number for un-trusted inputs.  Most standard inputs won't nest
     *   more than 100 or so levels; I've tested into the millions before
     *   running out of memory.
     * @property {Tagged.TagMap} [tags] Mapping from tag number to function(v),
     *   where v is the decoded value that comes after the tag, and where the
     *   function returns the correctly-created value for that tag.
     * @property {boolean} [preferWeb=false] If true, prefer Uint8Arrays to
     *   be generated instead of node Buffers.  This might turn on some more
     *   changes in the future, so forward-compatibility is not guaranteed yet.
     * @property {BufferEncoding} [encoding='hex'] The encoding of the input.
     *   Ignored if input is a Buffer.
     * @property {boolean} [required=false] Should an error be thrown when no
     *   data is in the input?
     * @property {boolean} [extendedResults=false] If true, emit extended
     *   results, which will be an object with shape {@link ExtendedResults}.
     *   The value will already have been null-checked.
     * @property {boolean} [preventDuplicateKeys=false] If true, error is
     *   thrown if a map has duplicate keys.
     */
    /**
     * @callback decodeCallback
     * @param {Error} [error] If one was generated.
     * @param {any} [value] The decoded value.
     * @returns {void}
     */
    /**
     * @param {DecoderOptions|decodeCallback|string} opts Options,
     *   the callback, or input incoding.
     * @param {decodeCallback} [cb] Called on completion.
     * @returns {{options: DecoderOptions, cb: decodeCallback}} Normalized.
     * @throws {TypeError} On unknown option type.
     * @private
     */
    function normalizeOptions(opts, cb) {
      switch (typeof opts) {
        case 'function':
          return { options: {}, cb: /** @type {decodeCallback} */ (opts) }
        case 'string':
          return { options: { encoding: /** @type {BufferEncoding} */ (opts) }, cb }
        case 'object':
          return { options: opts || {}, cb }
        default:
          throw new TypeError('Unknown option type')
      }
    }

    /**
     * Decode a stream of CBOR bytes by transforming them into equivalent
     * JavaScript data.  Because of the limitations of Node object streams,
     * special symbols are emitted instead of NULL or UNDEFINED.  Fix those
     * up by calling {@link Decoder.nullcheck}.
     *
     * @extends BinaryParseStream
     */
    class Decoder extends BinaryParseStream {
      /**
       * Create a parsing stream.
       *
       * @param {DecoderOptions} [options={}] Options.
       */
      constructor(options = {}) {
        const {
          tags = {},
          max_depth = -1,
          preferWeb = false,
          required = false,
          encoding = 'hex',
          extendedResults = false,
          preventDuplicateKeys = false,
          ...superOpts
        } = options

        super({ defaultEncoding: encoding, ...superOpts })

        this.running = true
        this.max_depth = max_depth
        this.tags = tags
        this.preferWeb = preferWeb
        this.extendedResults = extendedResults
        this.required = required
        this.preventDuplicateKeys = preventDuplicateKeys

        if (extendedResults) {
          this.bs.on('read', this._onRead.bind(this))
          this.valueBytes = /** @type {NoFilter} */ (new NoFilter())
        }
      }

      /**
       * Check the given value for a symbol encoding a NULL or UNDEFINED value in
       * the CBOR stream.
       *
       * @static
       * @param {any} val The value to check.
       * @returns {any} The corrected value.
       * @throws {Error} Nothing was found.
       * @example
       * myDecoder.on('data', val => {
       *   val = Decoder.nullcheck(val)
       *   // ...
       * })
       */
      static nullcheck(val) {
        switch (val) {
          case SYMS.NULL:
            return null
          case SYMS.UNDEFINED:
            return undefined
          // Leaving this in for now as belt-and-suspenders, but I'm pretty sure
          // it can't happen.
          /* istanbul ignore next */
          case NOT_FOUND:
            /* istanbul ignore next */
            throw new Error('Value not found')
          default:
            return val
        }
      }

      /**
       * Decode the first CBOR item in the input, synchronously.  This will throw
       * an exception if the input is not valid CBOR, or if there are more bytes
       * left over at the end (if options.extendedResults is not true).
       *
       * @static
       * @param {BufferLike} input If a Readable stream, must have
       *   received the `readable` event already, or you will get an error
       *   claiming "Insufficient data".
       * @param {DecoderOptions|string} [options={}] Options or encoding for input.
       * @returns {ExtendedResults|any} The decoded value.
       * @throws {UnexpectedDataError} Data is left over after decoding.
       * @throws {Error} Insufficient data.
       */
      static decodeFirstSync(input, options = {}) {
        if (input == null) {
          throw new TypeError('input required')
        }
        ({ options } = normalizeOptions(options))
        const { encoding = 'hex', ...opts } = options
        const c = new Decoder(opts)
        const s = utils.guessEncoding(input, encoding)

        // For/of doesn't work when you need to call next() with a value
        // generator created by parser will be "done" after each CBOR entity
        // parser will yield numbers of bytes that it wants
        const parser = c._parse()
        let state = parser.next()

        while (!state.done) {
          const b = s.read(state.value)

          if ((b == null) || (b.length !== state.value)) {
            throw new Error('Insufficient data')
          }
          if (c.extendedResults) {
            c.valueBytes.write(b)
          }
          state = parser.next(b)
        }

        let val = null
        if (c.extendedResults) {
          val = state.value
          val.unused = s.read()
        } else {
          val = Decoder.nullcheck(state.value)
          if (s.length > 0) {
            const nextByte = s.read(1)

            s.unshift(nextByte)
            throw new UnexpectedDataError(nextByte[0], val)
          }
        }
        return val
      }

      /**
       * Decode all of the CBOR items in the input into an array.  This will throw
       * an exception if the input is not valid CBOR; a zero-length input will
       * return an empty array.
       *
       * @static
       * @param {BufferLike} input What to parse?
       * @param {DecoderOptions|string} [options={}] Options or encoding
       *   for input.
       * @returns {Array<ExtendedResults>|Array<any>} Array of all found items.
       * @throws {TypeError} No input provided.
       * @throws {Error} Insufficient data provided.
       */
      static decodeAllSync(input, options = {}) {
        if (input == null) {
          throw new TypeError('input required')
        }
        ({ options } = normalizeOptions(options))
        const { encoding = 'hex', ...opts } = options
        const c = new Decoder(opts)
        const s = utils.guessEncoding(input, encoding)
        const res = []

        while (s.length > 0) {
          const parser = c._parse()
          let state = parser.next()

          while (!state.done) {
            const b = s.read(state.value)

            if ((b == null) || (b.length !== state.value)) {
              throw new Error('Insufficient data')
            }
            if (c.extendedResults) {
              c.valueBytes.write(b)
            }
            state = parser.next(b)
          }
          res.push(Decoder.nullcheck(state.value))
        }
        return res
      }

      /**
       * Decode the first CBOR item in the input.  This will error if there are
       * more bytes left over at the end (if options.extendedResults is not true),
       * and optionally if there were no valid CBOR bytes in the input.  Emits the
       * {Decoder.NOT_FOUND} Symbol in the callback if no data was found and the
       * `required` option is false.
       *
       * @static
       * @param {BufferLike} input What to parse?
       * @param {DecoderOptions|decodeCallback|string} [options={}] Options, the
       *   callback, or input encoding.
       * @param {decodeCallback} [cb] Callback.
       * @returns {Promise<ExtendedResults|any>} Returned even if callback is
       *   specified.
       * @throws {TypeError} No input provided.
       */
      static decodeFirst(input, options = {}, cb = null) {
        if (input == null) {
          throw new TypeError('input required')
        }
        ({ options, cb } = normalizeOptions(options, cb))
        const { encoding = 'hex', required = false, ...opts } = options

        const c = new Decoder(opts)
        let v = /** @type {any} */ (NOT_FOUND)
        const s = utils.guessEncoding(input, encoding)
        const p = new Promise((resolve, reject) => {
          c.on('data', val => {
            v = Decoder.nullcheck(val)
            c.close()
          })
          c.once('error', er => {
            if (c.extendedResults && (er instanceof UnexpectedDataError)) {
              v.unused = c.bs.slice()
              return resolve(v)
            }
            if (v !== NOT_FOUND) {
              // Typescript work-around
              // eslint-disable-next-line dot-notation
              er['value'] = v
            }
            v = ERROR
            c.close()
            return reject(er)
          })
          c.once('end', () => {
            switch (v) {
              case NOT_FOUND:
                if (required) {
                  return reject(new Error('No CBOR found'))
                }
                return resolve(v)
              // Pretty sure this can't happen, but not *certain*.
              /* istanbul ignore next */
              case ERROR:
                /* istanbul ignore next */
                return undefined
              default:
                return resolve(v)
            }
          })
        })

        if (typeof cb === 'function') {
          p.then(val => cb(null, val), cb)
        }
        s.pipe(c)
        return p
      }

      /**
       * @callback decodeAllCallback
       * @param {Error} error If one was generated.
       * @param {Array<ExtendedResults>|Array<any>} value All of the decoded
       *   values, wrapped in an Array.
       */

      /**
       * Decode all of the CBOR items in the input.  This will error if there are
       * more bytes left over at the end.
       *
       * @static
       * @param {BufferLike} input What to parse?
       * @param {DecoderOptions|decodeAllCallback|string} [options={}]
       *   Decoding options, the callback, or the input encoding.
       * @param {decodeAllCallback} [cb] Callback.
       * @returns {Promise<Array<ExtendedResults>|Array<any>>} Even if callback
       *   is specified.
       * @throws {TypeError} No input specified.
       */
      static decodeAll(input, options = {}, cb = null) {
        if (input == null) {
          throw new TypeError('input required')
        }
        ({ options, cb } = normalizeOptions(options, cb))
        const { encoding = 'hex', ...opts } = options

        const c = new Decoder(opts)
        const vals = []

        c.on('data', val => vals.push(Decoder.nullcheck(val)))

        const p = new Promise((resolve, reject) => {
          c.on('error', reject)
          c.on('end', () => resolve(vals))
        })

        if (typeof cb === 'function') {
          p.then(v => cb(undefined, v), er => cb(er, undefined))
        }
        utils.guessEncoding(input, encoding).pipe(c)
        return p
      }

      /**
       * Stop processing.
       */
      close() {
        this.running = false
        this.__fresh = true
      }

      /**
       * Only called if extendedResults is true.
       *
       * @ignore
       */
      _onRead(data) {
        this.valueBytes.write(data)
      }

      /**
       * @yields {number} Number of bytes to read.
       * @returns {Generator<number, any, Buffer>} Yields a number of bytes,
       *   returns anything, next returns a Buffer.
       * @throws {Error} Maximum depth exceeded.
       * @ignore
       */
      *_parse() {
        let parent = null
        let depth = 0
        let val = null

        while (true) {
          if ((this.max_depth >= 0) && (depth > this.max_depth)) {
            throw new Error(`Maximum depth ${this.max_depth} exceeded`)
          }

          const [octet] = yield 1
          if (!this.running) {
            this.bs.unshift(Buffer.from([octet]))
            throw new UnexpectedDataError(octet)
          }
          const mt = octet >> 5
          const ai = octet & 0x1f
          const parent_major = (parent == null) ? undefined : parent[MAJOR]
          const parent_length = (parent == null) ? undefined : parent.length

          switch (ai) {
            case NUMBYTES.ONE:
              this.emit('more-bytes', mt, 1, parent_major, parent_length)
                ;[val] = yield 1
              break
            case NUMBYTES.TWO:
            case NUMBYTES.FOUR:
            case NUMBYTES.EIGHT: {
              const numbytes = 1 << (ai - 24)

              this.emit('more-bytes', mt, numbytes, parent_major, parent_length)
              const buf = yield numbytes
              val = (mt === MT.SIMPLE_FLOAT) ?
                buf :
                utils.parseCBORint(ai, buf)
              break
            }
            case 28:
            case 29:
            case 30:
              this.running = false
              throw new Error(`Additional info not implemented: ${ai}`)
            case NUMBYTES.INDEFINITE:
              switch (mt) {
                case MT.POS_INT:
                case MT.NEG_INT:
                case MT.TAG:
                  throw new Error(`Invalid indefinite encoding for MT ${mt}`)
              }
              val = -1
              break
            default:
              val = ai
          }
          switch (mt) {
            case MT.POS_INT:
              // Val already decoded
              break
            case MT.NEG_INT:
              if (val === Number.MAX_SAFE_INTEGER) {
                val = BI.NEG_MAX
              } else {
                val = (typeof val === 'bigint') ? BI.MINUS_ONE - val : -1 - val
              }
              break
            case MT.BYTE_STRING:
            case MT.UTF8_STRING:
              switch (val) {
                case 0:
                  this.emit('start-string', mt, val, parent_major, parent_length)
                  if (mt === MT.UTF8_STRING) {
                    val = ''
                  } else {
                    val = this.preferWeb ? new Uint8Array(0) : Buffer.allocUnsafe(0)
                  }
                  break
                case -1:
                  this.emit('start', mt, SYMS.STREAM, parent_major, parent_length)
                  parent = parentBufferStream(parent, mt)
                  depth++
                  continue
                default:
                  this.emit('start-string', mt, val, parent_major, parent_length)
                  val = yield val
                  if (mt === MT.UTF8_STRING) {
                    val = utils.utf8(val)
                  } else if (this.preferWeb) {
                    val = new Uint8Array(val.buffer, val.byteOffset, val.length)
                  }
              }
              break
            case MT.ARRAY:
            case MT.MAP:
              switch (val) {
                case 0:
                  val = (mt === MT.MAP) ? {} : []
                  break
                case -1:
                  this.emit('start', mt, SYMS.STREAM, parent_major, parent_length)
                  parent = parentArray(parent, mt, -1)
                  depth++
                  continue
                default:
                  this.emit('start', mt, val, parent_major, parent_length)
                  parent = parentArray(parent, mt, val * (mt - 3))
                  depth++
                  continue
              }
              break
            case MT.TAG:
              this.emit('start', mt, val, parent_major, parent_length)
              parent = parentArray(parent, mt, 1)
              parent.push(val)
              depth++
              continue
            case MT.SIMPLE_FLOAT:
              if (typeof val === 'number') {
                if ((ai === NUMBYTES.ONE) && (val < 32)) {
                  throw new Error(
                    `Invalid two-byte encoding of simple value ${val}`
                  )
                }
                const hasParent = (parent != null)
                val = Simple.decode(
                  val,
                  hasParent,
                  hasParent && (parent[COUNT] < 0)
                )
              } else {
                val = utils.parseCBORfloat(val)
              }
          }
          this.emit('value', val, parent_major, parent_length, ai)
          let again = false
          while (parent != null) {
            if (val === SYMS.BREAK) {
              parent[COUNT] = 1
            } else if (Array.isArray(parent)) {
              parent.push(val)
            } else {
              // Assert: parent instanceof NoFilter
              const pm = parent[MAJOR]

              if ((pm != null) && (pm !== mt)) {
                this.running = false
                throw new Error('Invalid major type in indefinite encoding')
              }
              parent.write(val)
            }

            if ((--parent[COUNT]) !== 0) {
              again = true
              break
            }
            --depth
            delete parent[COUNT]

            if (Array.isArray(parent)) {
              switch (parent[MAJOR]) {
                case MT.ARRAY:
                  val = parent
                  break
                case MT.MAP: {
                  let allstrings = true

                  if ((parent.length % 2) !== 0) {
                    throw new Error(`Invalid map length: ${parent.length}`)
                  }
                  for (let i = 0, len = parent.length; i < len; i += 2) {
                    if ((typeof parent[i] !== 'string') ||
                      (parent[i] === '__proto__')) {
                      allstrings = false
                      break
                    }
                  }
                  if (allstrings) {
                    val = {}
                    for (let i = 0, len = parent.length; i < len; i += 2) {
                      if (this.preventDuplicateKeys &&
                        Object.prototype.hasOwnProperty.call(val, parent[i])) {
                        throw new Error('Duplicate keys in a map')
                      }
                      val[parent[i]] = parent[i + 1]
                    }
                  } else {
                    val = new Map()
                    for (let i = 0, len = parent.length; i < len; i += 2) {
                      if (this.preventDuplicateKeys && val.has(parent[i])) {
                        throw new Error('Duplicate keys in a map')
                      }
                      val.set(parent[i], parent[i + 1])
                    }
                  }
                  break
                }
                case MT.TAG: {
                  const t = new Tagged(parent[0], parent[1])

                  val = t.convert(this.tags)
                  break
                }
              }
            } else /* istanbul ignore else */ if (parent instanceof NoFilter) {
              // Only parent types are Array and NoFilter for (Array/Map) and
              // (bytes/string) respectively.
              switch (parent[MAJOR]) {
                case MT.BYTE_STRING:
                  val = parent.slice()
                  if (this.preferWeb) {
                    val = new Uint8Array(
                  /** @type {Buffer} */(val).buffer,
                  /** @type {Buffer} */(val).byteOffset,
                  /** @type {Buffer} */(val).length
                    )
                  }
                  break
                case MT.UTF8_STRING:
                  val = parent.toString('utf-8')
                  break
              }
            }
            this.emit('stop', parent[MAJOR])

            const old = parent
            parent = parent[SYMS.PARENT]
            delete old[SYMS.PARENT]
            delete old[MAJOR]
          }
          if (!again) {
            if (this.extendedResults) {
              const bytes = this.valueBytes.slice()
              const ret = {
                value: Decoder.nullcheck(val),
                bytes,
                length: bytes.length,
              }

              this.valueBytes = new NoFilter()
              return ret
            }
            return val
          }
        }
      }
    }

    Decoder.NOT_FOUND = NOT_FOUND
    module.exports = Decoder

  }, { "../vendor/binary-parse-stream": 109, "./constants": 101, "./simple": 106, "./tagged": 107, "./utils": 108, "buffer": 96, "nofilter": 216, "stream": 296 }], 103: [function (require, module, exports) {
    'use strict'

    const stream = require('stream')
    const Decoder = require('./decoder')
    const utils = require('./utils')
    const NoFilter = require('nofilter')
    const { MT, SYMS } = require('./constants')

    /**
     * Things that can act as inputs, from which a NoFilter can be created.
     *
     * @typedef {string|Buffer|ArrayBuffer|Uint8Array|Uint8ClampedArray
     *   |DataView|stream.Readable} BufferLike
     */

    /**
     * @typedef DiagnoseOptions
     * @property {string} [separator='\n'] Output between detected objects.
     * @property {boolean} [stream_errors=false] Put error info into the
     *   output stream.
     * @property {number} [max_depth=-1] The maximum depth to parse.
     *   Use -1 for "until you run out of memory".  Set this to a finite
     *   positive number for un-trusted inputs.  Most standard inputs won't nest
     *   more than 100 or so levels; I've tested into the millions before
     *   running out of memory.
     * @property {object} [tags] Mapping from tag number to function(v),
     *   where v is the decoded value that comes after the tag, and where the
     *   function returns the correctly-created value for that tag.
     * @property {boolean} [preferWeb=false] If true, prefer Uint8Arrays to
     *   be generated instead of node Buffers.  This might turn on some more
     *   changes in the future, so forward-compatibility is not guaranteed yet.
     * @property {BufferEncoding} [encoding='hex'] The encoding of input, ignored if
     *   input is not string.
     */
    /**
     * @callback diagnoseCallback
     * @param {Error} [error] If one was generated.
     * @param {string} [value] The diagnostic value.
     * @returns {void}
     */
    /**
     * @param {DiagnoseOptions|diagnoseCallback|string} opts Options,
     *   the callback, or input incoding.
     * @param {diagnoseCallback} [cb] Called on completion.
     * @returns {{options: DiagnoseOptions, cb: diagnoseCallback}} Normalized.
     * @throws {TypeError} Unknown option type.
     * @private
     */
    function normalizeOptions(opts, cb) {
      switch (typeof opts) {
        case 'function':
          return { options: {}, cb: /** @type {diagnoseCallback} */ (opts) }
        case 'string':
          return { options: { encoding: /** @type {BufferEncoding} */ (opts) }, cb }
        case 'object':
          return { options: opts || {}, cb }
        default:
          throw new TypeError('Unknown option type')
      }
    }

    /**
     * Output the diagnostic format from a stream of CBOR bytes.
     *
     * @extends stream.Transform
     */
    class Diagnose extends stream.Transform {
      /**
       * Creates an instance of Diagnose.
       *
       * @param {DiagnoseOptions} [options={}] Options for creation.
       */
      constructor(options = {}) {
        const {
          separator = '\n',
          stream_errors = false,
          // Decoder options
          tags,
          max_depth,
          preferWeb,
          encoding,
          // Stream.Transform options
          ...superOpts
        } = options
        super({
          ...superOpts,
          readableObjectMode: false,
          writableObjectMode: false,
        })

        this.float_bytes = -1
        this.separator = separator
        this.stream_errors = stream_errors
        this.parser = new Decoder({
          tags,
          max_depth,
          preferWeb,
          encoding,
        })
        this.parser.on('more-bytes', this._on_more.bind(this))
        this.parser.on('value', this._on_value.bind(this))
        this.parser.on('start', this._on_start.bind(this))
        this.parser.on('stop', this._on_stop.bind(this))
        this.parser.on('data', this._on_data.bind(this))
        this.parser.on('error', this._on_error.bind(this))
      }

      _transform(fresh, encoding, cb) {
        return this.parser.write(fresh, encoding, cb)
      }

      _flush(cb) {
        return this.parser._flush(er => {
          if (this.stream_errors) {
            if (er) {
              this._on_error(er)
            }
            return cb()
          }
          return cb(er)
        })
      }

      /**
       * Convenience function to return a string in diagnostic format.
       *
       * @param {BufferLike} input The CBOR bytes to format.
       * @param {DiagnoseOptions |diagnoseCallback|string} [options={}]
       *   Options, the callback, or the input encoding.
       * @param {diagnoseCallback} [cb] Callback.
       * @throws {TypeError} Input not provided.
       * @returns {Promise} If callback not specified.
       */
      static diagnose(input, options = {}, cb = null) {
        if (input == null) {
          throw new TypeError('input required')
        }
        ({ options, cb } = normalizeOptions(options, cb))
        const { encoding = 'hex', ...opts } = options

        const bs = new NoFilter()
        const d = new Diagnose(opts)
        let p = null
        if (typeof cb === 'function') {
          d.on('end', () => cb(null, bs.toString('utf8')))
          d.on('error', cb)
        } else {
          p = new Promise((resolve, reject) => {
            d.on('end', () => resolve(bs.toString('utf8')))
            d.on('error', reject)
          })
        }
        d.pipe(bs)
        utils.guessEncoding(input, encoding).pipe(d)
        return p
      }

      /**
       * @ignore
       */
      _on_error(er) {
        if (this.stream_errors) {
          this.push(er.toString())
        } else {
          this.emit('error', er)
        }
      }

      /** @private */
      _on_more(mt, len, parent_mt, pos) {
        if (mt === MT.SIMPLE_FLOAT) {
          this.float_bytes = {
            2: 1,
            4: 2,
            8: 3,
          }[len]
        }
      }

      /** @private */
      _fore(parent_mt, pos) {
        switch (parent_mt) {
          case MT.BYTE_STRING:
          case MT.UTF8_STRING:
          case MT.ARRAY:
            if (pos > 0) {
              this.push(', ')
            }
            break
          case MT.MAP:
            if (pos > 0) {
              if (pos % 2) {
                this.push(': ')
              } else {
                this.push(', ')
              }
            }
        }
      }

      /** @private */
      _on_value(val, parent_mt, pos) {
        if (val === SYMS.BREAK) {
          return
        }
        this._fore(parent_mt, pos)
        const fb = this.float_bytes
        this.float_bytes = -1
        this.push(utils.cborValueToString(val, fb))
      }

      /** @private */
      _on_start(mt, tag, parent_mt, pos) {
        this._fore(parent_mt, pos)
        switch (mt) {
          case MT.TAG:
            this.push(`${tag}(`)
            break
          case MT.ARRAY:
            this.push('[')
            break
          case MT.MAP:
            this.push('{')
            break
          case MT.BYTE_STRING:
          case MT.UTF8_STRING:
            this.push('(')
            break
        }
        if (tag === SYMS.STREAM) {
          this.push('_ ')
        }
      }

      /** @private */
      _on_stop(mt) {
        switch (mt) {
          case MT.TAG:
            this.push(')')
            break
          case MT.ARRAY:
            this.push(']')
            break
          case MT.MAP:
            this.push('}')
            break
          case MT.BYTE_STRING:
          case MT.UTF8_STRING:
            this.push(')')
            break
        }
      }

      /** @private */
      _on_data() {
        this.push(this.separator)
      }
    }

    module.exports = Diagnose

  }, { "./constants": 101, "./decoder": 102, "./utils": 108, "nofilter": 216, "stream": 296 }], 104: [function (require, module, exports) {
    'use strict'

    const stream = require('stream')
    const NoFilter = require('nofilter')
    const utils = require('./utils')
    const constants = require('./constants')
    const {
      MT, NUMBYTES, SHIFT32, SIMPLE, SYMS, TAG, BI,
    } = constants
    const { Buffer } = require('buffer')

    const HALF = (MT.SIMPLE_FLOAT << 5) | NUMBYTES.TWO
    const FLOAT = (MT.SIMPLE_FLOAT << 5) | NUMBYTES.FOUR
    const DOUBLE = (MT.SIMPLE_FLOAT << 5) | NUMBYTES.EIGHT
    const TRUE = (MT.SIMPLE_FLOAT << 5) | SIMPLE.TRUE
    const FALSE = (MT.SIMPLE_FLOAT << 5) | SIMPLE.FALSE
    const UNDEFINED = (MT.SIMPLE_FLOAT << 5) | SIMPLE.UNDEFINED
    const NULL = (MT.SIMPLE_FLOAT << 5) | SIMPLE.NULL

    const BREAK = Buffer.from([0xff])
    const BUF_NAN = Buffer.from('f97e00', 'hex')
    const BUF_INF_NEG = Buffer.from('f9fc00', 'hex')
    const BUF_INF_POS = Buffer.from('f97c00', 'hex')
    const BUF_NEG_ZERO = Buffer.from('f98000', 'hex')

    /**
     * Generate the CBOR for a value.  If you are using this, you'll either need
     * to call {@link Encoder.write} with a Buffer, or look into the internals of
     * Encoder to reuse existing non-documented behavior.
     *
     * @callback EncodeFunction
     * @param {Encoder} enc The encoder to use.
     * @param {any} val The value to encode.
     * @returns {boolean} True on success.
     */

    /* eslint-disable jsdoc/check-types */
    /**
     * A mapping from tag number to a tag decoding function.
     *
     * @typedef {Object.<string, EncodeFunction>} SemanticMap
     */
    /* eslint-enable jsdoc/check-types */

    /**
     * @type {SemanticMap}
     * @private
     */
    const SEMANTIC_TYPES = {}

    /**
     * @type {SemanticMap}
     * @private
     */
    let current_SEMANTIC_TYPES = {}

    /**
     * @param {string} str String to normalize.
     * @returns {"number"|"float"|"int"|"string"} Normalized.
     * @throws {TypeError} Invalid input.
     * @private
     */
    function parseDateType(str) {
      if (!str) {
        return 'number'
      }
      switch (str.toLowerCase()) {
        case 'number':
          return 'number'
        case 'float':
          return 'float'
        case 'int':
        case 'integer':
          return 'int'
        case 'string':
          return 'string'
      }
      throw new TypeError(`dateType invalid, got "${str}"`)
    }

    /**
     * @typedef EncodingOptions
     * @property {any[]|object} [genTypes=[]] Array of pairs of
     *   `type`, `function(Encoder)` for semantic types to be encoded.  Not
     *   needed for Array, Date, Buffer, Map, RegExp, Set, or URL.
     *   If an object, the keys are the constructor names for the types.
     * @property {boolean} [canonical=false] Should the output be
     *   canonicalized.
     * @property {boolean|WeakSet} [detectLoops=false] Should object loops
     *   be detected?  This will currently add memory to track every part of the
     *   object being encoded in a WeakSet.  Do not encode
     *   the same object twice on the same encoder, without calling
     *   `removeLoopDetectors` in between, which will clear the WeakSet.
     *   You may pass in your own WeakSet to be used; this is useful in some
     *   recursive scenarios.
     * @property {("number"|"float"|"int"|"string")} [dateType="number"] -
     *   how should dates be encoded?  "number" means float or int, if no
     *   fractional seconds.
     * @property {any} [encodeUndefined=undefined] How should an
     *   "undefined" in the input be encoded.  By default, just encode a CBOR
     *   undefined.  If this is a buffer, use those bytes without re-encoding
     *   them.  If this is a function, the function will be called (which is a
     *   good time to throw an exception, if that's what you want), and the
     *   return value will be used according to these rules.  Anything else will
     *   be encoded as CBOR.
     * @property {boolean} [disallowUndefinedKeys=false] Should
     *   "undefined" be disallowed as a key in a Map that is serialized?  If
     *   this is true, encode(new Map([[undefined, 1]])) will throw an
     *   exception.  Note that it is impossible to get a key of undefined in a
     *   normal JS object.
     * @property {boolean} [collapseBigIntegers=false] Should integers
     *   that come in as ECMAscript bigint's be encoded
     *   as normal CBOR integers if they fit, discarding type information?
     * @property {number} [chunkSize=4096] Number of characters or bytes
     *   for each chunk, if obj is a string or Buffer, when indefinite encoding.
     * @property {boolean} [omitUndefinedProperties=false] When encoding
     *   objects or Maps, do not include a key if its corresponding value is
     *   `undefined`.
     */

    /**
     * Transform JavaScript values into CBOR bytes.  The `Writable` side of
     * the stream is in object mode.
     *
     * @extends stream.Transform
     */
    class Encoder extends stream.Transform {
      /**
       * Creates an instance of Encoder.
       *
       * @param {EncodingOptions} [options={}] Options for the encoder.
       */
      constructor(options = {}) {
        const {
          canonical = false,
          encodeUndefined,
          disallowUndefinedKeys = false,
          dateType = 'number',
          collapseBigIntegers = false,
          detectLoops = false,
          omitUndefinedProperties = false,
          genTypes = [],
          ...superOpts
        } = options

        super({
          ...superOpts,
          readableObjectMode: false,
          writableObjectMode: true,
        })

        this.canonical = canonical
        this.encodeUndefined = encodeUndefined
        this.disallowUndefinedKeys = disallowUndefinedKeys
        this.dateType = parseDateType(dateType)
        this.collapseBigIntegers = this.canonical ? true : collapseBigIntegers

        /** @type {WeakSet?} */
        this.detectLoops = undefined
        if (typeof detectLoops === 'boolean') {
          if (detectLoops) {
            this.detectLoops = new WeakSet()
          }
        } else if (detectLoops instanceof WeakSet) {
          this.detectLoops = detectLoops
        } else {
          throw new TypeError('detectLoops must be boolean or WeakSet')
        }
        this.omitUndefinedProperties = omitUndefinedProperties

        this.semanticTypes = { ...Encoder.SEMANTIC_TYPES }

        if (Array.isArray(genTypes)) {
          for (let i = 0, len = genTypes.length; i < len; i += 2) {
            this.addSemanticType(genTypes[i], genTypes[i + 1])
          }
        } else {
          for (const [k, v] of Object.entries(genTypes)) {
            this.addSemanticType(k, v)
          }
        }
      }

      _transform(fresh, encoding, cb) {
        const ret = this.pushAny(fresh)
        // Old transformers might not return bool.  undefined !== false
        return cb((ret === false) ? new Error('Push Error') : undefined)
      }

      // eslint-disable-next-line class-methods-use-this
      _flush(cb) {
        return cb()
      }

      /**
       * @param {number} val Number(0-255) to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushUInt8(val) {
        const b = Buffer.allocUnsafe(1)
        b.writeUInt8(val, 0)
        return this.push(b)
      }

      /**
       * @param {number} val Number(0-65535) to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushUInt16BE(val) {
        const b = Buffer.allocUnsafe(2)
        b.writeUInt16BE(val, 0)
        return this.push(b)
      }

      /**
       * @param {number} val Number(0..2**32-1) to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushUInt32BE(val) {
        const b = Buffer.allocUnsafe(4)
        b.writeUInt32BE(val, 0)
        return this.push(b)
      }

      /**
       * @param {number} val Number to encode as 4-byte float.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushFloatBE(val) {
        const b = Buffer.allocUnsafe(4)
        b.writeFloatBE(val, 0)
        return this.push(b)
      }

      /**
       * @param {number} val Number to encode as 8-byte double.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushDoubleBE(val) {
        const b = Buffer.allocUnsafe(8)
        b.writeDoubleBE(val, 0)
        return this.push(b)
      }

      /**
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushNaN() {
        return this.push(BUF_NAN)
      }

      /**
       * @param {number} obj Positive or negative infinity.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushInfinity(obj) {
        const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS
        return this.push(half)
      }

      /**
       * Choose the best float representation for a number and encode it.
       *
       * @param {number} obj A number that is known to be not-integer, but not
       *    how many bytes of precision it needs.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushFloat(obj) {
        if (this.canonical) {
          // TODO: is this enough slower to hide behind canonical?
          // It's certainly enough of a hack (see utils.parseHalf)

          // From section 3.9:
          // If a protocol allows for IEEE floats, then additional canonicalization
          // rules might need to be added.  One example rule might be to have all
          // floats start as a 64-bit float, then do a test conversion to a 32-bit
          // float; if the result is the same numeric value, use the shorter value
          // and repeat the process with a test conversion to a 16-bit float.  (This
          // rule selects 16-bit float for positive and negative Infinity as well.)

          // which seems pretty much backwards to me.
          const b2 = Buffer.allocUnsafe(2)
          if (utils.writeHalf(b2, obj)) {
            // I have convinced myself that there are no cases where writeHalf
            // will return true but `utils.parseHalf(b2) !== obj)`
            return this._pushUInt8(HALF) && this.push(b2)
          }
        }
        if (Math.fround(obj) === obj) {
          return this._pushUInt8(FLOAT) && this._pushFloatBE(obj)
        }

        return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)
      }

      /**
       * Choose the best integer representation for a postive number and encode
       * it.  If the number is over MAX_SAFE_INTEGER, fall back on float (but I
       * don't remember why).
       *
       * @param {number} obj A positive number that is known to be an integer,
       *    but not how many bytes of precision it needs.
       * @param {number} mt The Major Type number to combine with the integer.
       *    Not yet shifted.
       * @param {number} [orig] The number before it was transformed to positive.
       *    If the mt is NEG_INT, and the positive number is over MAX_SAFE_INT,
       *    then we'll encode this as a float rather than making the number
       *    negative again and losing precision.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushInt(obj, mt, orig) {
        const m = mt << 5

        if (obj < 24) {
          return this._pushUInt8(m | obj)
        }
        if (obj <= 0xff) {
          return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)
        }
        if (obj <= 0xffff) {
          return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)
        }
        if (obj <= 0xffffffff) {
          return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)
        }
        let max = Number.MAX_SAFE_INTEGER
        if (mt === MT.NEG_INT) {
          // Special case for Number.MIN_SAFE_INTEGER - 1
          max--
        }
        if (obj <= max) {
          return this._pushUInt8(m | NUMBYTES.EIGHT) &&
            this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&
            this._pushUInt32BE(obj % SHIFT32)
        }
        if (mt === MT.NEG_INT) {
          return this._pushFloat(orig)
        }
        return this._pushFloat(obj)
      }

      /**
       * Choose the best integer representation for a number and encode it.
       *
       * @param {number} obj A number that is known to be an integer,
       *    but not how many bytes of precision it needs.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushIntNum(obj) {
        if (Object.is(obj, -0)) {
          return this.push(BUF_NEG_ZERO)
        }

        if (obj < 0) {
          return this._pushInt(-obj - 1, MT.NEG_INT, obj)
        }
        return this._pushInt(obj, MT.POS_INT)
      }

      /**
       * @param {number} obj Plain JS number to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushNumber(obj) {
        if (isNaN(obj)) {
          return this._pushNaN()
        }
        if (!isFinite(obj)) {
          return this._pushInfinity(obj)
        }
        if (Math.round(obj) === obj) {
          return this._pushIntNum(obj)
        }
        return this._pushFloat(obj)
      }

      /**
       * @param {string} obj String to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushString(obj) {
        const len = Buffer.byteLength(obj, 'utf8')
        return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8')
      }

      /**
       * @param {boolean} obj Bool to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushBoolean(obj) {
        return this._pushUInt8(obj ? TRUE : FALSE)
      }

      /**
       * @param {undefined} obj Ignored.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushUndefined(obj) {
        switch (typeof this.encodeUndefined) {
          case 'undefined':
            return this._pushUInt8(UNDEFINED)
          case 'function':
            return this.pushAny(this.encodeUndefined(obj))
          case 'object': {
            const buf = utils.bufferishToBuffer(this.encodeUndefined)
            if (buf) {
              return this.push(buf)
            }
          }
        }
        return this.pushAny(this.encodeUndefined)
      }

      /**
       * @param {null} obj Ignored.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushNull(obj) {
        return this._pushUInt8(NULL)
      }

      /**
       * @param {number} tag Tag number to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushTag(tag) {
        return this._pushInt(tag, MT.TAG)
      }

      /**
       * @param {bigint} obj BigInt to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      _pushJSBigint(obj) {
        let m = MT.POS_INT
        let tag = TAG.POS_BIGINT
        // BigInt doesn't have -0
        if (obj < 0) {
          obj = -obj + BI.MINUS_ONE
          m = MT.NEG_INT
          tag = TAG.NEG_BIGINT
        }

        if (this.collapseBigIntegers &&
          (obj <= BI.MAXINT64)) {
          // Special handiling for 64bits
          if (obj <= 0xffffffff) {
            return this._pushInt(Number(obj), m)
          }
          return this._pushUInt8((m << 5) | NUMBYTES.EIGHT) &&
            this._pushUInt32BE(Number(obj / BI.SHIFT32)) &&
            this._pushUInt32BE(Number(obj % BI.SHIFT32))
        }

        let str = obj.toString(16)
        if (str.length % 2) {
          str = `0${str}`
        }
        const buf = Buffer.from(str, 'hex')
        return this._pushTag(tag) && Encoder._pushBuffer(this, buf)
      }

      /**
       * @param {object} obj Object to encode.
       * @returns {boolean} True on success.
       * @throws {Error} Loop detected.
       * @ignore
       */
      _pushObject(obj, opts) {
        if (!obj) {
          return this._pushNull(obj)
        }
        opts = {
          indefinite: false,
          skipTypes: false,
          ...opts,
        }
        if (!opts.indefinite) {
          // This will only happen the first time through for indefinite encoding
          if (this.detectLoops) {
            if (this.detectLoops.has(obj)) {
              throw new Error(`\
Loop detected while CBOR encoding.
Call removeLoopDetectors before resuming.`)
            } else {
              this.detectLoops.add(obj)
            }
          }
        }
        if (!opts.skipTypes) {
          const f = obj.encodeCBOR
          if (typeof f === 'function') {
            return f.call(obj, this)
          }
          const converter = this.semanticTypes[obj.constructor.name]
          if (converter) {
            return converter.call(obj, this, obj)
          }
        }
        const keys = Object.keys(obj).filter(k => {
          const tv = typeof obj[k]
          return (tv !== 'function') &&
            (!this.omitUndefinedProperties || (tv !== 'undefined'))
        })
        const cbor_keys = {}
        if (this.canonical) {
          // Note: this can't be a normal sort, because 'b' needs to sort before
          // 'aa'
          keys.sort((a, b) => {
            // Always strings, so don't bother to pass options.
            // hold on to the cbor versions, since there's no need
            // to encode more than once
            const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a))
            const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b))

            return a_cbor.compare(b_cbor)
          })
        }
        if (opts.indefinite) {
          if (!this._pushUInt8((MT.MAP << 5) | NUMBYTES.INDEFINITE)) {
            return false
          }
        } else if (!this._pushInt(keys.length, MT.MAP)) {
          return false
        }
        let ck = null
        for (let j = 0, len2 = keys.length; j < len2; j++) {
          const k = keys[j]
          if (this.canonical && ((ck = cbor_keys[k]))) {
            if (!this.push(ck)) { // Already a Buffer
              return false
            }
          } else if (!this._pushString(k)) {
            return false
          }
          if (!this.pushAny(obj[k])) {
            return false
          }
        }
        if (opts.indefinite) {
          if (!this.push(BREAK)) {
            return false
          }
        } else if (this.detectLoops) {
          this.detectLoops.delete(obj)
        }
        return true
      }

      /**
       * @param {any[]} objs Array of supported things.
       * @returns {Buffer} Concatenation of encodings for the supported things.
       * @ignore
       */
      _encodeAll(objs) {
        const bs = new NoFilter({ highWaterMark: this.readableHighWaterMark })
        this.pipe(bs)
        for (const o of objs) {
          this.pushAny(o)
        }
        this.end()
        return bs.read()
      }

      /**
       * Add an encoding function to the list of supported semantic types.  This
       * is useful for objects for which you can't add an encodeCBOR method.
       *
       * @param {string|Function} type The type to encode.
       * @param {EncodeFunction} fun The encoder to use.
       * @returns {EncodeFunction?} The previous encoder or undefined if there
       *   wasn't one.
       * @throws {TypeError} Invalid function.
       */
      addSemanticType(type, fun) {
        const typeName = (typeof type === 'string') ? type : type.name
        const old = this.semanticTypes[typeName]

        if (fun) {
          if (typeof fun !== 'function') {
            throw new TypeError('fun must be of type function')
          }
          this.semanticTypes[typeName] = fun
        } else if (old) {
          delete this.semanticTypes[typeName]
        }
        return old
      }

      /**
       * Push any supported type onto the encoded stream.
       *
       * @param {any} obj The thing to encode.
       * @returns {boolean} True on success.
       * @throws {TypeError} Unknown type for obj.
       */
      pushAny(obj) {
        switch (typeof obj) {
          case 'number':
            return this._pushNumber(obj)
          case 'bigint':
            return this._pushJSBigint(obj)
          case 'string':
            return this._pushString(obj)
          case 'boolean':
            return this._pushBoolean(obj)
          case 'undefined':
            return this._pushUndefined(obj)
          case 'object':
            return this._pushObject(obj)
          case 'symbol':
            switch (obj) {
              case SYMS.NULL:
                return this._pushNull(null)
              case SYMS.UNDEFINED:
                return this._pushUndefined(undefined)
              // TODO: Add pluggable support for other symbols
              default:
                throw new TypeError(`Unknown symbol: ${obj.toString()}`)
            }
          default:
            throw new TypeError(
              `Unknown type: ${typeof obj}, ${(typeof obj.toString === 'function') ? obj.toString() : ''}`
            )
        }
      }

      /**
       * Encode an array and all of its elements.
       *
       * @param {Encoder} gen Encoder to use.
       * @param {any[]} obj Array to encode.
       * @param {object} [opts] Options.
       * @param {boolean} [opts.indefinite=false] Use indefinite encoding?
       * @returns {boolean} True on success.
       */
      static pushArray(gen, obj, opts) {
        opts = {
          indefinite: false,
          ...opts,
        }
        const len = obj.length
        if (opts.indefinite) {
          if (!gen._pushUInt8((MT.ARRAY << 5) | NUMBYTES.INDEFINITE)) {
            return false
          }
        } else if (!gen._pushInt(len, MT.ARRAY)) {
          return false
        }
        for (let j = 0; j < len; j++) {
          if (!gen.pushAny(obj[j])) {
            return false
          }
        }
        if (opts.indefinite) {
          if (!gen.push(BREAK)) {
            return false
          }
        }
        return true
      }

      /**
       * Remove the loop detector WeakSet for this Encoder.
       *
       * @returns {boolean} True when the Encoder was reset, else false.
       */
      removeLoopDetectors() {
        if (!this.detectLoops) {
          return false
        }
        this.detectLoops = new WeakSet()
        return true
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {Date} obj Date to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushDate(gen, obj) {
        switch (gen.dateType) {
          case 'string':
            return gen._pushTag(TAG.DATE_STRING) &&
              gen._pushString(obj.toISOString())
          case 'int':
            return gen._pushTag(TAG.DATE_EPOCH) &&
              gen._pushIntNum(Math.round(obj.getTime() / 1000))
          case 'float':
            // Force float
            return gen._pushTag(TAG.DATE_EPOCH) &&
              gen._pushFloat(obj.getTime() / 1000)
          case 'number':
          default:
            // If we happen to have an integral number of seconds,
            // use integer.  Otherwise, use float.
            return gen._pushTag(TAG.DATE_EPOCH) &&
              gen.pushAny(obj.getTime() / 1000)
        }
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {Buffer} obj Buffer to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushBuffer(gen, obj) {
        return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {NoFilter} obj Buffer to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushNoFilter(gen, obj) {
        return Encoder._pushBuffer(gen, /** @type {Buffer} */(obj.slice()))
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {RegExp} obj RegExp to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushRegexp(gen, obj) {
        return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {Set} obj Set to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushSet(gen, obj) {
        if (!gen._pushTag(TAG.SET)) {
          return false
        }
        if (!gen._pushInt(obj.size, MT.ARRAY)) {
          return false
        }
        for (const x of obj) {
          if (!gen.pushAny(x)) {
            return false
          }
        }
        return true
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {URL} obj URL to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushURL(gen, obj) {
        return gen._pushTag(TAG.URI) && gen.pushAny(obj.toString())
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {object} obj Boxed String, Number, or Boolean object to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushBoxed(gen, obj) {
        return gen.pushAny(obj.valueOf())
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {Map} obj Map to encode.
       * @returns {boolean} True on success.
       * @throws {Error} Map key that is undefined.
       * @ignore
       */
      static _pushMap(gen, obj, opts) {
        opts = {
          indefinite: false,
          ...opts,
        }
        let entries = [...obj.entries()]
        if (gen.omitUndefinedProperties) {
          entries = entries.filter(([k, v]) => v !== undefined)
        }
        if (opts.indefinite) {
          if (!gen._pushUInt8((MT.MAP << 5) | NUMBYTES.INDEFINITE)) {
            return false
          }
        } else if (!gen._pushInt(entries.length, MT.MAP)) {
          return false
        }
        // Memoizing the cbor only helps in certain cases, and hurts in most
        // others.  Just avoid it.
        if (gen.canonical) {
          // Keep the key/value pairs together, so we don't have to do odd
          // gets with object keys later
          const enc = new Encoder({
            genTypes: gen.semanticTypes,
            canonical: gen.canonical,
            detectLoops: Boolean(gen.detectLoops), // Give enc its own loop detector
            dateType: gen.dateType,
            disallowUndefinedKeys: gen.disallowUndefinedKeys,
            collapseBigIntegers: gen.collapseBigIntegers,
          })
          const bs = new NoFilter({ highWaterMark: gen.readableHighWaterMark })
          enc.pipe(bs)
          entries.sort(([a], [b]) => {
            // Both a and b are the keys
            enc.pushAny(a)
            const a_cbor = bs.read()
            enc.pushAny(b)
            const b_cbor = bs.read()
            return a_cbor.compare(b_cbor)
          })
          for (const [k, v] of entries) {
            if (gen.disallowUndefinedKeys && (typeof k === 'undefined')) {
              throw new Error('Invalid Map key: undefined')
            }
            if (!(gen.pushAny(k) && gen.pushAny(v))) {
              return false
            }
          }
        } else {
          for (const [k, v] of entries) {
            if (gen.disallowUndefinedKeys && (typeof k === 'undefined')) {
              throw new Error('Invalid Map key: undefined')
            }
            if (!(gen.pushAny(k) && gen.pushAny(v))) {
              return false
            }
          }
        }
        if (opts.indefinite) {
          if (!gen.push(BREAK)) {
            return false
          }
        }
        return true
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param {NodeJS.TypedArray} obj Array to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushTypedArray(gen, obj) {
        // See https://tools.ietf.org/html/rfc8746

        let typ = 0b01000000
        let sz = obj.BYTES_PER_ELEMENT
        const { name } = obj.constructor

        if (name.startsWith('Float')) {
          typ |= 0b00010000
          sz /= 2
        } else if (!name.includes('U')) {
          typ |= 0b00001000
        }
        if (name.includes('Clamped') || ((sz !== 1) && !utils.isBigEndian())) {
          typ |= 0b00000100
        }
        typ |= {
          1: 0b00,
          2: 0b01,
          4: 0b10,
          8: 0b11,
        }[sz]
        if (!gen._pushTag(typ)) {
          return false
        }
        return Encoder._pushBuffer(
          gen,
          Buffer.from(obj.buffer, obj.byteOffset, obj.byteLength)
        )
      }

      /**
       * @param {Encoder} gen Encoder.
       * @param { ArrayBuffer } obj Array to encode.
       * @returns {boolean} True on success.
       * @ignore
       */
      static _pushArrayBuffer(gen, obj) {
        return Encoder._pushBuffer(gen, Buffer.from(obj))
      }

      /**
       * Encode the given object with indefinite length.  There are apparently
       * some (IMO) broken implementations of poorly-specified protocols that
       * REQUIRE indefinite-encoding.  See the example for how to add this as an
       * `encodeCBOR` function to an object or class to get indefinite encoding.
       *
       * @param {Encoder} gen The encoder to use.
       * @param {string|Buffer|Array|Map|object} [obj] The object to encode.  If
       *   null, use "this" instead.
       * @param {EncodingOptions} [options={}] Options for encoding.
       * @returns {boolean} True on success.
       * @throws {Error} No object to encode or invalid indefinite encoding.
       * @example <caption>Force indefinite encoding:</caption>
       * const o = {
       *   a: true,
       *   encodeCBOR: cbor.Encoder.encodeIndefinite,
       * }
       * const m = []
       * m.encodeCBOR = cbor.Encoder.encodeIndefinite
       * cbor.encodeOne([o, m])
       */
      static encodeIndefinite(gen, obj, options = {}) {
        if (obj == null) {
          if (this == null) {
            throw new Error('No object to encode')
          }
          obj = this
        }

        // TODO: consider other options
        const { chunkSize = 4096 } = options

        let ret = true
        const objType = typeof obj
        let buf = null
        if (objType === 'string') {
          // TODO: make sure not to split surrogate pairs at the edges of chunks,
          // since such half-surrogates cannot be legally encoded as UTF-8.
          ret = ret && gen._pushUInt8((MT.UTF8_STRING << 5) | NUMBYTES.INDEFINITE)
          let offset = 0
          while (offset < obj.length) {
            const endIndex = offset + chunkSize
            ret = ret && gen._pushString(obj.slice(offset, endIndex))
            offset = endIndex
          }
          ret = ret && gen.push(BREAK)
        } else if ((buf = utils.bufferishToBuffer(obj))) {
          ret = ret && gen._pushUInt8((MT.BYTE_STRING << 5) | NUMBYTES.INDEFINITE)
          let offset = 0
          while (offset < buf.length) {
            const endIndex = offset + chunkSize
            ret = ret && Encoder._pushBuffer(gen, buf.slice(offset, endIndex))
            offset = endIndex
          }
          ret = ret && gen.push(BREAK)
        } else if (Array.isArray(obj)) {
          ret = ret && Encoder.pushArray(gen, obj, {
            indefinite: true,
          })
        } else if (obj instanceof Map) {
          ret = ret && Encoder._pushMap(gen, obj, {
            indefinite: true,
          })
        } else {
          if (objType !== 'object') {
            throw new Error('Invalid indefinite encoding')
          }
          ret = ret && gen._pushObject(obj, {
            indefinite: true,
            skipTypes: true,
          })
        }
        return ret
      }

      /**
       * Encode one or more JavaScript objects, and return a Buffer containing the
       * CBOR bytes.
       *
       * @param {...any} objs The objects to encode.
       * @returns {Buffer} The encoded objects.
       */
      static encode(...objs) {
        return new Encoder()._encodeAll(objs)
      }

      /**
       * Encode one or more JavaScript objects canonically (slower!), and return
       * a Buffer containing the CBOR bytes.
       *
       * @param {...any} objs The objects to encode.
       * @returns {Buffer} The encoded objects.
       */
      static encodeCanonical(...objs) {
        return new Encoder({
          canonical: true,
        })._encodeAll(objs)
      }

      /**
       * Encode one JavaScript object using the given options.
       *
       * @static
       * @param {any} obj The object to encode.
       * @param {EncodingOptions} [options={}] Passed to the Encoder constructor.
       * @returns {Buffer} The encoded objects.
       */
      static encodeOne(obj, options) {
        return new Encoder(options)._encodeAll([obj])
      }

      /**
       * Encode one JavaScript object using the given options in a way that
       * is more resilient to objects being larger than the highWaterMark
       * number of bytes.  As with the other static encode functions, this
       * will still use a large amount of memory.  Use a stream-based approach
       * directly if you need to process large and complicated inputs.
       *
       * @param {any} obj The object to encode.
       * @param {EncodingOptions} [options={}] Passed to the Encoder constructor.
       * @returns {Promise<Buffer>} A promise for the encoded buffer.
       */
      static encodeAsync(obj, options) {
        return new Promise((resolve, reject) => {
          const bufs = []
          const enc = new Encoder(options)
          enc.on('data', buf => bufs.push(buf))
          enc.on('error', reject)
          enc.on('finish', () => resolve(Buffer.concat(bufs)))
          enc.pushAny(obj)
          enc.end()
        })
      }

      /**
       * The currently supported set of semantic types.  May be modified by plugins.
       *
       * @type {SemanticMap}
       */
      static get SEMANTIC_TYPES() {
        return current_SEMANTIC_TYPES
      }

      static set SEMANTIC_TYPES(val) {
        current_SEMANTIC_TYPES = val
      }

      /**
       * Reset the supported semantic types to the original set, before any
       * plugins modified the list.
       */
      static reset() {
        Encoder.SEMANTIC_TYPES = { ...SEMANTIC_TYPES }
      }
    }

    Object.assign(SEMANTIC_TYPES, {
      Array: Encoder.pushArray,
      Date: Encoder._pushDate,
      Buffer: Encoder._pushBuffer,
      [Buffer.name]: Encoder._pushBuffer, // Might be mangled
      Map: Encoder._pushMap,
      NoFilter: Encoder._pushNoFilter,
      [NoFilter.name]: Encoder._pushNoFilter, // Mßight be mangled
      RegExp: Encoder._pushRegexp,
      Set: Encoder._pushSet,
      ArrayBuffer: Encoder._pushArrayBuffer,
      Uint8ClampedArray: Encoder._pushTypedArray,
      Uint8Array: Encoder._pushTypedArray,
      Uint16Array: Encoder._pushTypedArray,
      Uint32Array: Encoder._pushTypedArray,
      Int8Array: Encoder._pushTypedArray,
      Int16Array: Encoder._pushTypedArray,
      Int32Array: Encoder._pushTypedArray,
      Float32Array: Encoder._pushTypedArray,
      Float64Array: Encoder._pushTypedArray,
      URL: Encoder._pushURL,
      Boolean: Encoder._pushBoxed,
      Number: Encoder._pushBoxed,
      String: Encoder._pushBoxed,
    })

    // Safari needs to get better.
    if (typeof BigUint64Array !== 'undefined') {
      SEMANTIC_TYPES[BigUint64Array.name] = Encoder._pushTypedArray
    }
    if (typeof BigInt64Array !== 'undefined') {
      SEMANTIC_TYPES[BigInt64Array.name] = Encoder._pushTypedArray
    }

    Encoder.reset()
    module.exports = Encoder

  }, { "./constants": 101, "./utils": 108, "buffer": 96, "nofilter": 216, "stream": 296 }], 105: [function (require, module, exports) {
    'use strict'

    const { Buffer } = require('buffer')
    const encoder = require('./encoder')
    const decoder = require('./decoder')
    const { MT } = require('./constants')

    /**
     * Wrapper around a JavaScript Map object that allows the keys to be
     * any complex type.  The base Map object allows this, but will only
     * compare the keys by identity, not by value.  CborMap translates keys
     * to CBOR first (and base64's them to ensure by-value comparison).
     *
     * This is not a subclass of Object, because it would be tough to get
     * the semantics to be an exact match.
     *
     * @extends Map
     */
    class CborMap extends Map {
      /**
       * Creates an instance of CborMap.
       *
       * @param {Iterable<any>} [iterable] An Array or other iterable
       *   object whose elements are key-value pairs (arrays with two elements, e.g.
       *   <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>). Each key-value pair is added
       *   to the new CborMap; null values are treated as undefined.
       */
      constructor(iterable) {
        super(iterable)
      }

      /**
       * @ignore
       */
      static _encode(key) {
        return encoder.encodeCanonical(key).toString('base64')
      }

      /**
       * @ignore
       */
      static _decode(key) {
        return decoder.decodeFirstSync(key, 'base64')
      }

      /**
       * Retrieve a specified element.
       *
       * @param {any} key The key identifying the element to retrieve.
       *   Can be any type, which will be serialized into CBOR and compared by
       *   value.
       * @returns {any} The element if it exists, or <code>undefined</code>.
       */
      get(key) {
        return super.get(CborMap._encode(key))
      }

      /**
       * Adds or updates an element with a specified key and value.
       *
       * @param {any} key The key identifying the element to store.
       *   Can be any type, which will be serialized into CBOR and compared by
       *   value.
       * @param {any} val The element to store.
       * @returns {this} This object.
       */
      set(key, val) {
        return super.set(CborMap._encode(key), val)
      }

      /**
       * Removes the specified element.
       *
       * @param {any} key The key identifying the element to delete. Can be any
       *   type, which will be serialized into CBOR and compared by value.
       * @returns {boolean} True if an element in the Map object existed and has
       *   been removed, or false if the element does not exist.
       */
      delete(key) {
        return super.delete(CborMap._encode(key))
      }

      /**
       * Does an element with the specified key exist?
       *
       * @param {any} key The key identifying the element to check.
       *   Can be any type, which will be serialized into CBOR and compared by
       *   value.
       * @returns {boolean} True if an element with the specified key exists in
       *   the Map object; otherwise false.
       */
      has(key) {
        return super.has(CborMap._encode(key))
      }

      /**
       * Returns a new Iterator object that contains the keys for each element
       * in the Map object in insertion order.  The keys are decoded into their
       * original format.
       *
       * @yields {any} The keys of the map.
       */
      *keys() {
        for (const k of super.keys()) {
          yield CborMap._decode(k)
        }
      }

      /* eslint-disable jsdoc/require-returns-check */
      /**
       * Returns a new Iterator object that contains the [key, value] pairs for
       * each element in the Map object in insertion order.
       *
       * @yields {any[]} Key value pairs.
       * @returns {IterableIterator<any, any>} Key value pairs.
       */
      *entries() {
        for (const kv of super.entries()) {
          yield [CborMap._decode(kv[0]), kv[1]]
        }
      }
      /* eslint-enable jsdoc/require-returns-check */

      /**
       * Returns a new Iterator object that contains the [key, value] pairs for
       * each element in the Map object in insertion order.
       *
       * @returns {IterableIterator} Key value pairs.
       */
      [Symbol.iterator]() {
        return this.entries()
      }

      /**
       * Executes a provided function once per each key/value pair in the Map
       * object, in insertion order.
       *
       * @param {function(any, any, Map): undefined} fun Function to execute for
       *  each element, which takes a value, a key, and the Map being traversed.
       * @param {any} thisArg Value to use as this when executing callback.
       * @throws {TypeError} Invalid function.
       */
      forEach(fun, thisArg) {
        if (typeof fun !== 'function') {
          throw new TypeError('Must be function')
        }
        for (const kv of super.entries()) {
          fun.call(this, kv[1], CborMap._decode(kv[0]), this)
        }
      }

      /**
       * Push the simple value onto the CBOR stream.
       *
       * @param {object} gen The generator to push onto.
       * @returns {boolean} True on success.
       */
      encodeCBOR(gen) {
        if (!gen._pushInt(this.size, MT.MAP)) {
          return false
        }
        if (gen.canonical) {
          const entries = Array.from(super.entries())
            .map(kv => [Buffer.from(kv[0], 'base64'), kv[1]])
          entries.sort((a, b) => a[0].compare(b[0]))
          for (const kv of entries) {
            if (!(gen.push(kv[0]) && gen.pushAny(kv[1]))) {
              return false
            }
          }
        } else {
          for (const kv of super.entries()) {
            if (!(gen.push(Buffer.from(kv[0], 'base64')) && gen.pushAny(kv[1]))) {
              return false
            }
          }
        }
        return true
      }
    }

    module.exports = CborMap

  }, { "./constants": 101, "./decoder": 102, "./encoder": 104, "buffer": 96 }], 106: [function (require, module, exports) {
    'use strict'

    const { MT, SIMPLE, SYMS } = require('./constants')

    /**
     * A CBOR Simple Value that does not map onto a known constant.
     */
    class Simple {
      /**
       * Creates an instance of Simple.
       *
       * @param {number} value The simple value's integer value.
       */
      constructor(value) {
        if (typeof value !== 'number') {
          throw new Error(`Invalid Simple type: ${typeof value}`)
        }
        if ((value < 0) || (value > 255) || ((value | 0) !== value)) {
          throw new Error(`value must be a small positive integer: ${value}`)
        }
        this.value = value
      }

      /**
       * Debug string for simple value.
       *
       * @returns {string} Formated string of `simple(value)`.
       */
      toString() {
        return `simple(${this.value})`
      }

      /**
       * Debug string for simple value.
       *
       * @param {number} depth How deep are we?
       * @param {object} opts Options.
       * @returns {string} Formatted string of `simple(value)`.
       */
      [Symbol.for('nodejs.util.inspect.custom')](depth, opts) {
        return `simple(${this.value})`
      }

      /**
       * Push the simple value onto the CBOR stream.
       *
       * @param {object} gen The generator to push onto.
       * @returns {boolean} True on success.
       */
      encodeCBOR(gen) {
        return gen._pushInt(this.value, MT.SIMPLE_FLOAT)
      }

      /**
       * Is the given object a Simple?
       *
       * @param {any} obj Object to test.
       * @returns {boolean} Is it Simple?
       */
      static isSimple(obj) {
        return obj instanceof Simple
      }

      /**
       * Decode from the CBOR additional information into a JavaScript value.
       * If the CBOR item has no parent, return a "safe" symbol instead of
       * `null` or `undefined`, so that the value can be passed through a
       * stream in object mode.
       *
       * @param {number} val The CBOR additional info to convert.
       * @param {boolean} [has_parent=true] Does the CBOR item have a parent?
       * @param {boolean} [parent_indefinite=false] Is the parent element
       *   indefinitely encoded?
       * @returns {(null|undefined|boolean|symbol|Simple)} The decoded value.
       * @throws {Error} Invalid BREAK.
       */
      static decode(val, has_parent = true, parent_indefinite = false) {
        switch (val) {
          case SIMPLE.FALSE:
            return false
          case SIMPLE.TRUE:
            return true
          case SIMPLE.NULL:
            if (has_parent) {
              return null
            }
            return SYMS.NULL
          case SIMPLE.UNDEFINED:
            if (has_parent) {
              return undefined
            }
            return SYMS.UNDEFINED
          case -1:
            if (!has_parent || !parent_indefinite) {
              throw new Error('Invalid BREAK')
            }
            return SYMS.BREAK
          default:
            return new Simple(val)
        }
      }
    }

    module.exports = Simple

  }, { "./constants": 101 }], 107: [function (require, module, exports) {
    'use strict'

    const constants = require('./constants')
    const utils = require('./utils')
    const INTERNAL_JSON = Symbol('INTERNAL_JSON')

    function setBuffersToJSON(obj, fn) {
      // The data item tagged can be a byte string or any other data item.  In the
      // latter case, the tag applies to all of the byte string data items
      // contained in the data item, except for those contained in a nested data
      // item tagged with an expected conversion.
      if (utils.isBufferish(obj)) {
        obj.toJSON = fn
      } else if (Array.isArray(obj)) {
        for (const v of obj) {
          setBuffersToJSON(v, fn)
        }
      } else if (obj && (typeof obj === 'object')) {
        // FFS, complexity in the protocol.

        // There's some circular dependency in here.
        // eslint-disable-next-line no-use-before-define
        if (!(obj instanceof Tagged) || (obj.tag < 21) || (obj.tag > 23)) {
          for (const v of Object.values(obj)) {
            setBuffersToJSON(v, fn)
          }
        }
      }
    }

    function b64this() {
      // eslint-disable-next-line no-invalid-this
      return utils.base64(this)
    }

    function b64urlThis() {
      // eslint-disable-next-line no-invalid-this
      return utils.base64url(this)
    }

    function hexThis() {
      // eslint-disable-next-line no-invalid-this
      return this.toString('hex')
    }

    function swapEndian(ab, size, byteOffset, byteLength) {
      const dv = new DataView(ab)
      const [getter, setter] = {
        2: [dv.getUint16, dv.setUint16],
        4: [dv.getUint32, dv.setUint32],
        8: [dv.getBigUint64, dv.setBigUint64],
      }[size]

      const end = byteOffset + byteLength
      for (let offset = byteOffset; offset < end; offset += size) {
        setter.call(dv, offset, getter.call(dv, offset, true))
      }
    }

    /**
     * Convert a tagged value to a more interesting JavaScript type.  Errors
     * thrown in this function will be captured into the "err" property of the
     * original Tagged instance.
     *
     * @callback TagFunction
     * @param {any} value The value inside the tag.
     * @param {Tagged} tag The enclosing Tagged instance; useful if you want to
     *   modify it and return it.  Also available as "this".
     * @returns {any} The transformed value.
     */

    /* eslint-disable jsdoc/check-types */
    /**
     * A mapping from tag number to a tag decoding function.
     *
     * @typedef {Object.<string, TagFunction>} TagMap
     */
    /* eslint-enable jsdoc/check-types */

    /**
     * @type {TagMap}
     * @private
     */
    const TAGS = {
      // Standard date/time string; see Section 3.4.1
      0: v => new Date(v),
      // Epoch-based date/time; see Section 3.4.2
      1: v => new Date(v * 1000),
      // Positive bignum; see Section 3.4.3
      2: v => utils.bufferToBigInt(v),
      // Negative bignum; see Section 3.4.3
      3: v => constants.BI.MINUS_ONE - utils.bufferToBigInt(v),
      // Expected conversion to base64url encoding; see Section 3.4.5.2
      21: (v, tag) => {
        if (utils.isBufferish(v)) {
          tag[INTERNAL_JSON] = b64urlThis
        } else {
          setBuffersToJSON(v, b64urlThis)
        }
        return tag
      },
      // Expected conversion to base64 encoding; see Section 3.4.5.2
      22: (v, tag) => {
        if (utils.isBufferish(v)) {
          tag[INTERNAL_JSON] = b64this
        } else {
          setBuffersToJSON(v, b64this)
        }
        return tag
      },
      // Expected conversion to base16 encoding; see Section Section 3.4.5.2
      23: (v, tag) => {
        if (utils.isBufferish(v)) {
          tag[INTERNAL_JSON] = hexThis
        } else {
          setBuffersToJSON(v, hexThis)
        }
        return tag
      },
      // URI; see Section 3.4.5.3
      32: v => new URL(v),
      // Base64url; see Section 3.4.5.3
      33: (v, tag) => {
        // If any of the following apply:
        // -  the encoded text string contains non-alphabet characters or
        //    only 1 alphabet character in the last block of 4 (where
        //    alphabet is defined by Section 5 of [RFC4648] for tag number 33
        //    and Section 4 of [RFC4648] for tag number 34), or
        if (!v.match(/^[a-zA-Z0-9_-]+$/)) {
          throw new Error('Invalid base64url characters')
        }
        const last = v.length % 4
        if (last === 1) {
          throw new Error('Invalid base64url length')
        }
        // -  the padding bits in a 2- or 3-character block are not 0, or
        if (last === 2) {
          // The last 4 bits of the last character need to be zero.
          if ('AQgw'.indexOf(v[v.length - 1]) === -1) {
            throw new Error('Invalid base64 padding')
          }
        } else if (last === 3) {
          // The last 2 bits of the last character need to be zero.
          if ('AEIMQUYcgkosw048'.indexOf(v[v.length - 1]) === -1) {
            throw new Error('Invalid base64 padding')
          }
        }

        //    Or
        // -  the base64url encoding has padding characters,
        // (caught above)

        // the string is invalid.
        return tag
      },
      // Base64; see Section 3.4.5.3
      34: (v, tag) => {
        // If any of the following apply:
        // -  the encoded text string contains non-alphabet characters or
        //    only 1 alphabet character in the last block of 4 (where
        //    alphabet is defined by Section 5 of [RFC4648] for tag number 33
        //    and Section 4 of [RFC4648] for tag number 34), or
        const m = v.match(/^[a-zA-Z0-9+/]+(?<padding>={0,2})$/)
        if (!m) {
          throw new Error('Invalid base64 characters')
        }
        if ((v.length % 4) !== 0) {
          throw new Error('Invalid base64 length')
        }
        // -  the padding bits in a 2- or 3-character block are not 0, or
        if (m.groups.padding === '=') {
          // The last 4 bits of the last character need to be zero.
          if ('AQgw'.indexOf(v[v.length - 2]) === -1) {
            throw new Error('Invalid base64 padding')
          }
        } else if (m.groups.padding === '==') {
          // The last 2 bits of the last character need to be zero.
          if ('AEIMQUYcgkosw048'.indexOf(v[v.length - 3]) === -1) {
            throw new Error('Invalid base64 padding')
          }
        }

        // -  the base64 encoding has the wrong number of padding characters,
        // (caught above)
        // the string is invalid.
        return tag
      },
      // Regular expression; see Section 2.4.4.3
      35: v => new RegExp(v),
      // https://github.com/input-output-hk/cbor-sets-spec/blob/master/CBOR_SETS.md
      258: v => new Set(v),
    }

    const TYPED_ARRAY_TAGS = {
      64: Uint8Array,
      65: Uint16Array,
      66: Uint32Array,
      // 67: BigUint64Array,  Safari doesn't implement
      68: Uint8ClampedArray,
      69: Uint16Array,
      70: Uint32Array,
      // 71: BigUint64Array,  Safari doesn't implement
      72: Int8Array,
      73: Int16Array,
      74: Int32Array,
      // 75: BigInt64Array,  Safari doesn't implement
      // 76: reserved
      77: Int16Array,
      78: Int32Array,
      // 79: BigInt64Array,  Safari doesn't implement
      // 80: not implemented, float16 array
      81: Float32Array,
      82: Float64Array,
      // 83: not implemented, float128 array
      // 84: not implemented, float16 array
      85: Float32Array,
      86: Float64Array,
      // 87: not implemented, float128 array
    }

    // Safari
    if (typeof BigUint64Array !== 'undefined') {
      TYPED_ARRAY_TAGS[67] = BigUint64Array
      TYPED_ARRAY_TAGS[71] = BigUint64Array
    }
    if (typeof BigInt64Array !== 'undefined') {
      TYPED_ARRAY_TAGS[75] = BigInt64Array
      TYPED_ARRAY_TAGS[79] = BigInt64Array
    }

    function _toTypedArray(val, tagged) {
      if (!utils.isBufferish(val)) {
        throw new TypeError('val not a buffer')
      }
      const { tag } = tagged
      // See https://tools.ietf.org/html/rfc8746
      const TypedClass = TYPED_ARRAY_TAGS[tag]
      if (!TypedClass) {
        throw new Error(`Invalid typed array tag: ${tag}`)
      }
      const little = tag & 0b00000100
      const float = (tag & 0b00010000) >> 4
      const sz = 2 ** (float + (tag & 0b00000011))

      if ((!little !== utils.isBigEndian()) && (sz > 1)) {
        swapEndian(val.buffer, sz, val.byteOffset, val.byteLength)
      }

      const ab = val.buffer.slice(val.byteOffset, val.byteOffset + val.byteLength)
      return new TypedClass(ab)
    }

    for (const n of Object.keys(TYPED_ARRAY_TAGS)) {
      TAGS[n] = _toTypedArray
    }

    /**
     * @type {TagMap}
     * @private
     */
    let current_TAGS = {}

    /**
     * A CBOR tagged item, where the tag does not have semantics specified at the
     * moment, or those semantics threw an error during parsing. Typically this will
     * be an extension point you're not yet expecting.
     */
    class Tagged {
      /**
       * Creates an instance of Tagged.
       *
       * @param {number} tag The number of the tag.
       * @param {any} value The value inside the tag.
       * @param {Error} [err] The error that was thrown parsing the tag, or null.
       */
      constructor(tag, value, err) {
        this.tag = tag
        this.value = value
        this.err = err
        if (typeof this.tag !== 'number') {
          throw new Error(`Invalid tag type (${typeof this.tag})`)
        }
        if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {
          throw new Error(`Tag must be a positive integer: ${this.tag}`)
        }
      }

      toJSON() {
        if (this[INTERNAL_JSON]) {
          return this[INTERNAL_JSON].call(this.value)
        }
        const ret = {
          tag: this.tag,
          value: this.value,
        }
        if (this.err) {
          ret.err = this.err
        }
        return ret
      }

      /**
       * Convert to a String.
       *
       * @returns {string} String of the form '1(2)'.
       */
      toString() {
        return `${this.tag}(${JSON.stringify(this.value)})`
      }

      /**
       * Push the simple value onto the CBOR stream.
       *
       * @param {object} gen The generator to push onto.
       * @returns {boolean} True on success.
       */
      encodeCBOR(gen) {
        gen._pushTag(this.tag)
        return gen.pushAny(this.value)
      }

      /**
       * If we have a converter for this type, do the conversion.  Some converters
       * are built-in.  Additional ones can be passed in.  If you want to remove
       * a built-in converter, pass a converter in whose value is 'null' instead
       * of a function.
       *
       * @param {object} converters Keys in the object are a tag number, the value
       *   is a function that takes the decoded CBOR and returns a JavaScript value
       *   of the appropriate type.  Throw an exception in the function on errors.
       * @returns {any} The converted item.
       */
      convert(converters) {
        let f = (converters == null) ? undefined : converters[this.tag]
        if (typeof f !== 'function') {
          f = Tagged.TAGS[this.tag]
          if (typeof f !== 'function') {
            return this
          }
        }
        try {
          return f.call(this, this.value, this)
        } catch (error) {
          if (error && error.message && (error.message.length > 0)) {
            this.err = error.message
          } else {
            this.err = error
          }
          return this
        }
      }

      /**
       * The current set of supported tags.  May be modified by plugins.
       *
       * @type {TagMap}
       * @static
       */
      static get TAGS() {
        return current_TAGS
      }

      static set TAGS(val) {
        current_TAGS = val
      }

      /**
       * Reset the supported tags to the original set, before any plugins modified
       * the list.
       */
      static reset() {
        Tagged.TAGS = { ...TAGS }
      }
    }
    Tagged.INTERNAL_JSON = INTERNAL_JSON
    Tagged.reset()
    module.exports = Tagged

  }, { "./constants": 101, "./utils": 108 }], 108: [function (require, module, exports) {
    'use strict'

    const { Buffer } = require('buffer')
    const NoFilter = require('nofilter')
    const stream = require('stream')
    const constants = require('./constants')
    const { NUMBYTES, SHIFT32, BI, SYMS } = constants
    const MAX_SAFE_HIGH = 0x1fffff

    /**
     * Convert a UTF8-encoded Buffer to a JS string.  If possible, throw an error
     * on invalid UTF8.  Byte Order Marks are not looked at or stripped.
     *
     * @private
     */
    const td = new TextDecoder('utf8', { fatal: true, ignoreBOM: true })
    exports.utf8 = buf => td.decode(buf)
    exports.utf8.checksUTF8 = true

    function isReadable(s) {
      // Is this a readable stream?  In the webpack version, instanceof isn't
      // working correctly.
      if (s instanceof stream.Readable) {
        return true
      }
      return ['read', 'on', 'pipe'].every(f => typeof s[f] === 'function')
    }

    exports.isBufferish = function isBufferish(b) {
      return b &&
        (typeof b === 'object') &&
        ((Buffer.isBuffer(b)) ||
          (b instanceof Uint8Array) ||
          (b instanceof Uint8ClampedArray) ||
          (b instanceof ArrayBuffer) ||
          (b instanceof DataView))
    }

    exports.bufferishToBuffer = function bufferishToBuffer(b) {
      if (Buffer.isBuffer(b)) {
        return b
      } else if (ArrayBuffer.isView(b)) {
        return Buffer.from(b.buffer, b.byteOffset, b.byteLength)
      } else if (b instanceof ArrayBuffer) {
        return Buffer.from(b)
      }
      return null
    }

    exports.parseCBORint = function parseCBORint(ai, buf) {
      switch (ai) {
        case NUMBYTES.ONE:
          return buf.readUInt8(0)
        case NUMBYTES.TWO:
          return buf.readUInt16BE(0)
        case NUMBYTES.FOUR:
          return buf.readUInt32BE(0)
        case NUMBYTES.EIGHT: {
          const f = buf.readUInt32BE(0)
          const g = buf.readUInt32BE(4)
          if (f > MAX_SAFE_HIGH) {
            return (BigInt(f) * BI.SHIFT32) + BigInt(g)
          }
          return (f * SHIFT32) + g
        }
        default:
          throw new Error(`Invalid additional info for int: ${ai}`)
      }
    }

    exports.writeHalf = function writeHalf(buf, half) {
      // Assume 0, -0, NaN, Infinity, and -Infinity have already been caught

      // HACK: everyone settle in.  This isn't going to be pretty.
      // Translate cn-cbor's C code (from Carsten Borman):

      // uint32_t be32;
      // uint16_t be16, u16;
      // union {
      //   float f;
      //   uint32_t u;
      // } u32;
      // u32.f = float_val;

      const u32 = Buffer.allocUnsafe(4)
      u32.writeFloatBE(half, 0)
      const u = u32.readUInt32BE(0)

      // If ((u32.u & 0x1FFF) == 0) { /* worth trying half */

      // hildjj: If the lower 13 bits aren't 0,
      // we will lose precision in the conversion.
      // mant32 = 24bits, mant16 = 11bits, 24-11 = 13
      if ((u & 0x1FFF) !== 0) {
        return false
      }

      // Sign, exponent, mantissa
      //   int s16 = (u32.u >> 16) & 0x8000;
      //   int exp = (u32.u >> 23) & 0xff;
      //   int mant = u32.u & 0x7fffff;

      let s16 = (u >> 16) & 0x8000 // Top bit is sign
      const exp = (u >> 23) & 0xff // Then 5 bits of exponent
      const mant = u & 0x7fffff

      // Hildjj: zeros already handled.  Assert if you don't believe me.
      //   if (exp == 0 && mant == 0)
      //     ;              /* 0.0, -0.0 */

      //   else if (exp >= 113 && exp <= 142) /* normalized */
      //     s16 += ((exp - 112) << 10) + (mant >> 13);

      if ((exp >= 113) && (exp <= 142)) {
        s16 += ((exp - 112) << 10) + (mant >> 13)
      } else if ((exp >= 103) && (exp < 113)) {
        // Denormalized numbers
        //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
        //     if (mant & ((1 << (126 - exp)) - 1))
        //       goto float32;         /* loss of precision */
        //     s16 += ((mant + 0x800000) >> (126 - exp));

        if (mant & ((1 << (126 - exp)) - 1)) {
          return false
        }
        s16 += ((mant + 0x800000) >> (126 - exp))
      } else {
        //   } else if (exp == 255 && mant == 0) { /* Inf */
        //     s16 += 0x7c00;

        // hildjj: Infinity already handled

        //   } else
        //     goto float32;           /* loss of range */

        return false
      }

      // Done
      //   ensure_writable(3);
      //   u16 = s16;
      //   be16 = hton16p((const uint8_t*)&u16);
      buf.writeUInt16BE(s16)
      return true
    }

    exports.parseHalf = function parseHalf(buf) {
      const sign = buf[0] & 0x80 ? -1 : 1
      const exp = (buf[0] & 0x7C) >> 2
      const mant = ((buf[0] & 0x03) << 8) | buf[1]
      if (!exp) {
        return sign * 5.9604644775390625e-8 * mant
      } else if (exp === 0x1f) {
        return sign * (mant ? NaN : Infinity)
      }
      return sign * (2 ** (exp - 25)) * (1024 + mant)
    }

    exports.parseCBORfloat = function parseCBORfloat(buf) {
      switch (buf.length) {
        case 2:
          return exports.parseHalf(buf)
        case 4:
          return buf.readFloatBE(0)
        case 8:
          return buf.readDoubleBE(0)
        default:
          throw new Error(`Invalid float size: ${buf.length}`)
      }
    }

    exports.hex = function hex(s) {
      return Buffer.from(s.replace(/^0x/, ''), 'hex')
    }

    exports.bin = function bin(s) {
      s = s.replace(/\s/g, '')
      let start = 0
      let end = (s.length % 8) || 8
      const chunks = []
      while (end <= s.length) {
        chunks.push(parseInt(s.slice(start, end), 2))
        start = end
        end += 8
      }
      return Buffer.from(chunks)
    }

    exports.arrayEqual = function arrayEqual(a, b) {
      if ((a == null) && (b == null)) {
        return true
      }
      if ((a == null) || (b == null)) {
        return false
      }
      return (a.length === b.length) && a.every((elem, i) => elem === b[i])
    }

    exports.bufferToBigInt = function bufferToBigInt(buf) {
      return BigInt(`0x${buf.toString('hex')}`)
    }

    exports.cborValueToString = function cborValueToString(val, float_bytes = -1) {
      switch (typeof val) {
        case 'symbol': {
          switch (val) {
            case SYMS.NULL:
              return 'null'
            case SYMS.UNDEFINED:
              return 'undefined'
            case SYMS.BREAK:
              return 'BREAK'
          }
          // Impossible in node 10
          /* istanbul ignore if */
          if (val.description) {
            return val.description
          }
          // On node10, Symbol doesn't have description.  Parse it out of the
          // toString value, which looks like `Symbol(foo)`.
          const s = val.toString()
          const m = s.match(/^Symbol\((?<name>.*)\)/)
          /* istanbul ignore if */
          if (m && m.groups.name) {
            // Impossible in node 12+
            /* istanbul ignore next */
            return m.groups.name
          }
          return 'Symbol'
        }
        case 'string':
          return JSON.stringify(val)
        case 'bigint':
          return val.toString()
        case 'number': {
          const s = Object.is(val, -0) ? '-0' : String(val)
          return (float_bytes > 0) ? `${s}_${float_bytes}` : s
        }
        case 'object': {
          // A null should be caught above
          const buf = exports.bufferishToBuffer(val)
          if (buf) {
            const hex = buf.toString('hex')
            return (float_bytes === -Infinity) ? hex : `h'${hex}'`
          }
          if (typeof val[Symbol.for('nodejs.util.inspect.custom')] === 'function') {
            return val[Symbol.for('nodejs.util.inspect.custom')]()
          }
          // Shouldn't get non-empty arrays here
          if (Array.isArray(val)) {
            return '[]'
          }
          // This should be all that is left
          return '{}'
        }
      }
      return String(val)
    }

    exports.guessEncoding = function guessEncoding(input, encoding) {
      if (typeof input === 'string') {
        return new NoFilter(input, (encoding == null) ? 'hex' : encoding)
      }
      const buf = exports.bufferishToBuffer(input)
      if (buf) {
        return new NoFilter(buf)
      }
      if (isReadable(input)) {
        return input
      }
      throw new Error('Unknown input type')
    }

    const B64URL_SWAPS = {
      '=': '',
      '+': '-',
      '/': '_',
    }

    /**
     * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf
     *   Buffer to convert.
     * @returns {string} Base64url string.
     * @private
     */
    exports.base64url = function base64url(buf) {
      return exports.bufferishToBuffer(buf)
        .toString('base64')
        .replace(/[=+/]/g, c => B64URL_SWAPS[c])
    }

    /**
     * @param {Buffer|Uint8Array|Uint8ClampedArray|ArrayBuffer|DataView} buf
     *   Buffer to convert.
     * @returns {string} Base64 string.
     * @private
     */
    exports.base64 = function base64(buf) {
      return exports.bufferishToBuffer(buf).toString('base64')
    }

    exports.isBigEndian = function isBigEndian() {
      const array = new Uint8Array(4)
      const view = new Uint32Array(array.buffer)
      return !((view[0] = 1) & array[0])
    }

  }, { "./constants": 101, "buffer": 96, "nofilter": 216, "stream": 296 }], 109: [function (require, module, exports) {
    // Tweaked version of nathan7's binary-parse-stream
    // (see https://github.com/nathan7/binary-parse-stream)
    // Uses NoFilter instead of the readable in the original.  Removes
    // the ability to read -1, which was odd and un-needed.
    // License for binary-parse-stream: MIT

    // binary-parse-stream is now unmaintained, so I have rewritten it as
    // more modern JS so I can get tsc to help check types.

    'use strict'
    const stream = require('stream')
    const NoFilter = require('nofilter')

    /**
     * BinaryParseStream is a TransformStream that consumes buffers and outputs
     * objects on the other end.  It expects your subclass to implement a `_parse`
     * method that is a generator.  When your generator yields a number, it'll be
     * fed a buffer of that length from the input.  When your generator returns,
     * the return value will be pushed to the output side.
     *
     * @extends stream.Transform
     */
    class BinaryParseStream extends stream.Transform {
      /**
       * Creates an instance of BinaryParseStream.
       *
       * @param {stream.TransformOptions} options Stream options.
       * @memberof BinaryParseStream
       */
      constructor(options) {
        super(options)
        // Doesn't work to pass these in as opts, for some reason
        // also, work around typescript not knowing TransformStream internals
        // eslint-disable-next-line dot-notation
        this['_writableState'].objectMode = false
        // eslint-disable-next-line dot-notation
        this['_readableState'].objectMode = true

        this.bs = new NoFilter()
        this.__restart()
      }

      _transform(fresh, encoding, cb) {
        this.bs.write(fresh)

        while (this.bs.length >= this.__needed) {
          let ret = null
          const chunk = (this.__needed === null) ?
            undefined :
            this.bs.read(this.__needed)

          try {
            ret = this.__parser.next(chunk)
          } catch (e) {
            return cb(e)
          }

          if (this.__needed) {
            this.__fresh = false
          }

          if (ret.done) {
            this.push(ret.value)
            this.__restart()
          } else {
            this.__needed = ret.value || Infinity
          }
        }

        return cb()
      }

      /**
       * Subclasses must override this to set their parsing behavior.  Yield a
       * number to receive a Buffer of that many bytes.
       *
       * @abstract
       * @returns {Generator<number, undefined, Buffer>}
       */
      /* istanbul ignore next */
      *_parse() { // eslint-disable-line class-methods-use-this, require-yield
        throw new Error('Must be implemented in subclass')
      }

      __restart() {
        this.__needed = null
        this.__parser = this._parse()
        this.__fresh = true
      }

      _flush(cb) {
        cb(this.__fresh ? null : new Error('unexpected end of input'))
      }
    }

    module.exports = BinaryParseStream

  }, { "nofilter": 216, "stream": 296 }], 110: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('stream').Transform
    var StringDecoder = require('string_decoder').StringDecoder
    var inherits = require('inherits')

    function CipherBase(hashMode) {
      Transform.call(this)
      this.hashMode = typeof hashMode === 'string'
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest
      } else {
        this.final = this._finalOrDigest
      }
      if (this._final) {
        this.__final = this._final
        this._final = null
      }
      this._decoder = null
      this._encoding = null
    }
    inherits(CipherBase, Transform)

    CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
      if (typeof data === 'string') {
        data = Buffer.from(data, inputEnc)
      }

      var outData = this._update(data)
      if (this.hashMode) return this

      if (outputEnc) {
        outData = this._toString(outData, outputEnc)
      }

      return outData
    }

    CipherBase.prototype.setAutoPadding = function () { }
    CipherBase.prototype.getAuthTag = function () {
      throw new Error('trying to get auth tag in unsupported state')
    }

    CipherBase.prototype.setAuthTag = function () {
      throw new Error('trying to set auth tag in unsupported state')
    }

    CipherBase.prototype.setAAD = function () {
      throw new Error('trying to set aad in unsupported state')
    }

    CipherBase.prototype._transform = function (data, _, next) {
      var err
      try {
        if (this.hashMode) {
          this._update(data)
        } else {
          this.push(this._update(data))
        }
      } catch (e) {
        err = e
      } finally {
        next(err)
      }
    }
    CipherBase.prototype._flush = function (done) {
      var err
      try {
        this.push(this.__final())
      } catch (e) {
        err = e
      }

      done(err)
    }
    CipherBase.prototype._finalOrDigest = function (outputEnc) {
      var outData = this.__final() || Buffer.alloc(0)
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true)
      }
      return outData
    }

    CipherBase.prototype._toString = function (value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc)
        this._encoding = enc
      }

      if (this._encoding !== enc) throw new Error('can\'t switch encodings')

      var out = this._decoder.write(value)
      if (fin) {
        out += this._decoder.end()
      }

      return out
    }

    module.exports = CipherBase

  }, { "inherits": 203, "safe-buffer": 286, "stream": 296, "string_decoder": 311 }], 111: [function (require, module, exports) {
    (function (global, Buffer) {
      (function () {
        /* jshint esversion: 6 */
        /* jslint node: true */
        'use strict';

        const AlgToTags = {
          'RS512': -259,
          'RS384': -258,
          'RS256': -257,
          'ECDH-SS-512': -28,
          'ECDH-SS': -27,
          'ECDH-ES-512': -26,
          'ECDH-ES': -25,
          'ES256': -7,
          'ES512': -36,
          'direct': -6,
          'A128GCM': 1,
          'A192GCM': 2,
          'A256GCM': 3,
          'SHA-256_64': 4,
          'SHA-256-64': 4,
          'HS256/64': 4,
          'SHA-256': 5,
          'HS256': 5,
          'SHA-384': 6,
          'HS384': 6,
          'SHA-512': 7,
          'HS512': 7,
          'AES-CCM-16-64-128': 10,
          'AES-CCM-16-128/64': 10,
          'AES-CCM-16-64-256': 11,
          'AES-CCM-16-256/64': 11,
          'AES-CCM-64-64-128': 12,
          'AES-CCM-64-128/64': 12,
          'AES-CCM-64-64-256': 13,
          'AES-CCM-64-256/64': 13,
          'AES-MAC-128/64': 14,
          'AES-MAC-256/64': 15,
          'AES-MAC-128/128': 25,
          'AES-MAC-256/128': 26,
          'AES-CCM-16-128-128': 30,
          'AES-CCM-16-128/128': 30,
          'AES-CCM-16-128-256': 31,
          'AES-CCM-16-256/128': 31,
          'AES-CCM-64-128-128': 32,
          'AES-CCM-64-128/128': 32,
          'AES-CCM-64-128-256': 33,
          'AES-CCM-64-256/128': 33
        };

        const Translators = {
          'kid': (value) => {
            return Buffer.from(value, 'utf8');
          },
          'alg': (value) => {
            if (!(AlgToTags[value])) {
              throw new Error('Unknown \'alg\' parameter, ' + value);
            }
            return AlgToTags[value];
          }
        };

        const HeaderParameters = {
          'partyUNonce': -22,
          'static_key_id': -3,
          'static_key': -2,
          'ephemeral_key': -1,
          'alg': 1,
          'crit': 2,
          'content_type': 3,
          'ctyp': 3, // one could question this but it makes testing easier
          'kid': 4,
          'IV': 5,
          'Partial_IV': 6,
          'counter_signature': 7
        };

        exports.EMPTY_BUFFER = Buffer.alloc(0);

        exports.TranslateHeaders = function (header) {
          const result = new Map();
          for (const param in header) {
            if (!HeaderParameters[param]) {
              throw new Error('Unknown parameter, \'' + param + '\'');
            }
            let value = header[param];
            if (Translators[param]) {
              value = Translators[param](header[param]);
            }
            if (value !== undefined && value !== null) {
              result.set(HeaderParameters[param], value);
            }
          }
          return result;
        };

        const KeyParameters = {
          'crv': -1,
          'k': -1,
          'x': -2,
          'y': -3,
          'd': -4,
          'kty': 1
        };

        const KeyTypes = {
          'OKP': 1,
          'EC2': 2,
          'RSA': 3,
          'Symmetric': 4
        };

        const KeyCrv = {
          'P-256': 1,
          'P-384': 2,
          'P-521': 3,
          'X25519': 4,
          'X448': 5,
          'Ed25519': 6,
          'Ed448': 7
        };

        const KeyTranslators = {
          'kty': (value) => {
            if (!(KeyTypes[value])) {
              throw new Error('Unknown \'kty\' parameter, ' + value);
            }
            return KeyTypes[value];
          },
          'crv': (value) => {
            if (!(KeyCrv[value])) {
              throw new Error('Unknown \'crv\' parameter, ' + value);
            }
            return KeyCrv[value];
          }
        };

        exports.TranslateKey = function (key) {
          const result = new Map();
          for (const param in key) {
            if (!KeyParameters[param]) {
              throw new Error('Unknown parameter, \'' + param + '\'');
            }
            let value = key[param];
            if (KeyTranslators[param]) {
              value = KeyTranslators[param](value);
            }
            result.set(KeyParameters[param], value);
          }
          return result;
        };

        module.exports.xor = function (a, b) {
          const buffer = Buffer.alloc(Math.max(a.length, b.length));
          for (let i = 1; i <= buffer.length; ++i) {
            const av = (a.length - i) < 0 ? 0 : a[a.length - i];
            const bv = (b.length - i) < 0 ? 0 : b[b.length - i];
            buffer[buffer.length - i] = av ^ bv;
          }
          return buffer;
        };

        exports.HeaderParameters = HeaderParameters;

        exports.runningInNode = function () {
          return Object.prototype.toString.call(global.process) === '[object process]';
        };

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer)

  }, { "buffer": 96 }], 112: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /* jshint esversion: 6 */
        /* jslint node: true */
        'use strict';

        const cbor = require('cbor');
        const crypto = require('crypto');
        const Promise = require('any-promise');
        const common = require('./common');
        const HKDF = require('node-hkdf-sync');

        const Tagged = cbor.Tagged;

        const EMPTY_BUFFER = common.EMPTY_BUFFER;
        const EncryptTag = exports.EncryptTag = 96;
        const Encrypt0Tag = exports.Encrypt0Tag = 16;

        const runningInNode = common.runningInNode;

        const TagToAlg = {
          1: 'A128GCM',
          2: 'A192GCM',
          3: 'A256GCM',
          10: 'AES-CCM-16-64-128',
          11: 'AES-CCM-16-64-256',
          12: 'AES-CCM-64-64-128',
          13: 'AES-CCM-64-64-256',
          30: 'AES-CCM-16-128-128',
          31: 'AES-CCM-16-128-256',
          32: 'AES-CCM-64-128-128',
          33: 'AES-CCM-64-128-256'
        };

        const COSEAlgToNodeAlg = {
          'A128GCM': 'aes-128-gcm',
          'A192GCM': 'aes-192-gcm',
          'A256GCM': 'aes-256-gcm',

          'AES-CCM-16-64-128': 'aes-128-ccm',
          'AES-CCM-16-64-256': 'aes-256-ccm',
          'AES-CCM-64-64-128': 'aes-128-ccm',
          'AES-CCM-64-64-256': 'aes-256-ccm',
          'AES-CCM-16-128-128': 'aes-128-ccm',
          'AES-CCM-16-128-256': 'aes-256-ccm',
          'AES-CCM-64-128-128': 'aes-128-ccm',
          'AES-CCM-64-128-256': 'aes-256-ccm'
        };

        const isNodeAlg = {
          1: true, // A128GCM
          2: true, // A192GCM
          3: true // A256GCM
        };

        const isCCMAlg = {
          10: true, // AES-CCM-16-64-128
          11: true, // AES-CCM-16-64-256
          12: true, // AES-CCM-64-64-128
          13: true, // AES-CCM-64-64-256
          30: true, // AES-CCM-16-128-128
          31: true, // AES-CCM-16-128-256
          32: true, // AES-CCM-64-128-128
          33: true // AES-CCM-64-128-256
        };

        const authTagLength = {
          1: 16,
          2: 16,
          3: 16,
          10: 8, // AES-CCM-16-64-128
          11: 8, // AES-CCM-16-64-256
          12: 8, // AES-CCM-64-64-128
          13: 8, // AES-CCM-64-64-256
          30: 16, // AES-CCM-16-128-128
          31: 16, // AES-CCM-16-128-256
          32: 16, // AES-CCM-64-128-128
          33: 16 // AES-CCM-64-128-256
        };

        const ivLenght = {
          1: 12, // A128GCM
          2: 12, // A192GCM
          3: 12, // A256GCM
          10: 13, // AES-CCM-16-64-128
          11: 13, // AES-CCM-16-64-256
          12: 7, // AES-CCM-64-64-128
          13: 7, // AES-CCM-64-64-256
          30: 13, // AES-CCM-16-128-128
          31: 13, // AES-CCM-16-128-256
          32: 7, // AES-CCM-64-128-128
          33: 7 // AES-CCM-64-128-256
        };

        const keyLength = {
          1: 16, // A128GCM
          2: 24, // A192GCM
          3: 32, // A256GCM
          10: 16, // AES-CCM-16-64-128
          11: 32, // AES-CCM-16-64-256
          12: 16, // AES-CCM-64-64-128
          13: 32, // AES-CCM-64-64-256
          30: 16, // AES-CCM-16-128-128
          31: 32, // AES-CCM-16-128-256
          32: 16, // AES-CCM-64-128-128
          33: 32, // AES-CCM-64-128-256
          'P-521': 66,
          'P-256': 32
        };

        const HKDFAlg = {
          'ECDH-ES': 'sha256',
          'ECDH-ES-512': 'sha512',
          'ECDH-SS': 'sha256',
          'ECDH-SS-512': 'sha512'
        };

        const nodeCRV = {
          'P-521': 'secp521r1',
          'P-256': 'prime256v1'
        };

        function createAAD(p, context, externalAAD) {
          p = (!p.size) ? EMPTY_BUFFER : cbor.encode(p);
          const encStructure = [
            context,
            p,
            externalAAD
          ];
          return cbor.encode(encStructure);
        }

        function _randomSource(bytes) {
          return crypto.randomBytes(bytes);
        }

        function nodeEncrypt(payload, key, alg, iv, aad, ccm = false) {
          const nodeAlg = COSEAlgToNodeAlg[TagToAlg[alg]];
          const chiperOptions = ccm ? { authTagLength: authTagLength[alg] } : null;
          const aadOptions = ccm ? { plaintextLength: Buffer.byteLength(payload) } : null;
          const cipher = crypto.createCipheriv(nodeAlg, key, iv, chiperOptions);
          cipher.setAAD(aad, aadOptions);
          return Buffer.concat([
            cipher.update(payload),
            cipher.final(),
            cipher.getAuthTag()
          ]);
        }

        function createContext(rp, alg, partyUNonce) {
          return cbor.encode([
            alg, // AlgorithmID
            [ // PartyUInfo
              null, // identity
              (partyUNonce || null), // nonce
              null // other
            ],
            [ // PartyVInfo
              null, // identity
              null, // nonce
              null // other
            ],
            [
              keyLength[alg] * 8, // keyDataLength
              rp // protected
            ]
          ]);
        }

        exports.create = function (headers, payload, recipients, options) {
          return new Promise((resolve, reject) => {
            options = options || {};
            const externalAAD = options.externalAAD || EMPTY_BUFFER;
            const randomSource = options.randomSource || _randomSource;
            let u = headers.u || {};
            let p = headers.p || {};

            p = common.TranslateHeaders(p);
            u = common.TranslateHeaders(u);

            const alg = p.get(common.HeaderParameters.alg) || u.get(common.HeaderParameters.alg);

            if (!alg) {
              throw new Error('Missing mandatory parameter \'alg\'');
            }

            if (Array.isArray(recipients)) {
              if (recipients.length === 0) {
                throw new Error('There has to be at least one recipent');
              }
              if (recipients.length > 1) {
                throw new Error('Encrypting with multiple recipents is not implemented');
              }

              let iv;
              if (options.contextIv) {
                let partialIv = randomSource(2);
                iv = common.xor(partialIv, options.contextIv);
                u.set(common.HeaderParameters.Partial_IV, partialIv);
              } else {
                iv = randomSource(ivLenght[alg]);
                u.set(common.HeaderParameters.IV, iv);
              }

              const aad = createAAD(p, 'Encrypt', externalAAD);

              let key;
              let recipientStruct;
              // TODO do a more accurate check
              if (recipients[0] && recipients[0].p &&
                (recipients[0].p.alg === 'ECDH-ES' ||
                  recipients[0].p.alg === 'ECDH-ES-512' ||
                  recipients[0].p.alg === 'ECDH-SS' ||
                  recipients[0].p.alg === 'ECDH-SS-512')) {
                const recipient = crypto.createECDH(nodeCRV[recipients[0].key.crv]);
                const generated = crypto.createECDH(nodeCRV[recipients[0].key.crv]);
                recipient.setPrivateKey(recipients[0].key.d);
                let pk = randomSource(keyLength[recipients[0].key.crv]);
                if (recipients[0].p.alg === 'ECDH-ES' ||
                  recipients[0].p.alg === 'ECDH-ES-512') {
                  pk = randomSource(keyLength[recipients[0].key.crv]);
                  pk[0] = (recipients[0].key.crv !== 'P-521' || pk[0] === 1) ? pk[0] : 0;
                } else {
                  pk = recipients[0].sender.d;
                }

                generated.setPrivateKey(pk);
                const senderPublicKey = generated.getPublicKey();
                const recipientPublicKey = Buffer.concat([
                  Buffer.from('04', 'hex'),
                  recipients[0].key.x,
                  recipients[0].key.y
                ]);

                const generatedKey = common.TranslateKey({
                  'crv': recipients[0].key.crv,
                  'x': senderPublicKey.slice(1, keyLength[recipients[0].key.crv] + 1), // TODO slice based on key length
                  'y': senderPublicKey.slice(keyLength[recipients[0].key.crv] + 1),
                  'kty': 'EC2' // TODO use real value
                });
                const rp = cbor.encode(common.TranslateHeaders(recipients[0].p));
                const ikm = generated.computeSecret(recipientPublicKey);
                let partyUNonce = null;
                if (recipients[0].p.alg === 'ECDH-SS' || recipients[0].p.alg === 'ECDH-SS-512') {
                  partyUNonce = randomSource(64); // TODO use real value
                }
                const context = createContext(rp, alg, partyUNonce);
                const nrBytes = keyLength[alg];
                const hkdf = new HKDF(HKDFAlg[recipients[0].p.alg], undefined, ikm);
                key = hkdf.derive(context, nrBytes);
                let ru = recipients[0].u;

                if (recipients[0].p.alg === 'ECDH-ES' ||
                  recipients[0].p.alg === 'ECDH-ES-512') {
                  ru.ephemeral_key = generatedKey;
                } else {
                  ru.static_key = generatedKey;
                }

                ru.partyUNonce = partyUNonce;
                ru = common.TranslateHeaders(ru);

                recipientStruct = [[rp, ru, EMPTY_BUFFER]];
              } else {
                key = recipients[0].key;
                const ru = common.TranslateHeaders(recipients[0].u);
                recipientStruct = [[EMPTY_BUFFER, ru, EMPTY_BUFFER]];
              }

              let ciphertext;
              if (isNodeAlg[alg]) {
                ciphertext = nodeEncrypt(payload, key, alg, iv, aad);
              } else if (isCCMAlg[alg] && runningInNode()) {
                ciphertext = nodeEncrypt(payload, key, alg, iv, aad, true);
              } else {
                throw new Error('No implementation for algorithm, ' + alg);
              }

              if (p.size === 0 && options.encodep === 'empty') {
                p = EMPTY_BUFFER;
              } else {
                p = cbor.encode(p);
              }

              const encrypted = [p, u, ciphertext, recipientStruct];
              resolve(cbor.encode(options.excludetag ? encrypted : new Tagged(EncryptTag, encrypted)));
            } else {
              let iv;
              if (options.contextIv) {
                let partialIv = randomSource(2);
                iv = common.xor(partialIv, options.contextIv);
                u.set(common.HeaderParameters.Partial_IV, partialIv);
              } else {
                iv = randomSource(ivLenght[alg]);
                u.set(common.HeaderParameters.IV, iv);
              }

              let key;
              if (recipients && recipients.p && recipients.p.alg === 'ECDH-ES') {
                // TODO use curve from parameters
                const recipient = crypto.createECDH('prime256v1');
                const generated = crypto.createECDH('prime256v1');
                recipient.setPrivateKey(recipients.key.d);
                generated.setPrivateKey(randomSource(32)); // TODO use real alg value
                const recipientPublicKey = Buffer.concat([
                  Buffer.from('04', 'hex'),
                  recipients.key.x,
                  recipients.key.y
                ]);
                const ikm = generated.computeSecret(recipientPublicKey);
                const context = createContext(p);
                const nrBytes = 16; // TODO use real number based on alg
                const hkdf = new HKDF('sha256', undefined, ikm); // TODO use real alg
                key = hkdf.derive(context, nrBytes);
              } else {
                key = recipients.key;
              }

              const aad = createAAD(p, 'Encrypt0', externalAAD);
              let ciphertext;
              if (isNodeAlg[alg]) {
                ciphertext = nodeEncrypt(payload, key, alg, iv, aad);
              } else if (isCCMAlg[alg] && runningInNode()) {
                ciphertext = nodeEncrypt(payload, key, alg, iv, aad, true);
              } else {
                throw new Error('No implementation for algorithm, ' + alg);
              }

              if (p.size === 0 && options.encodep === 'empty') {
                p = EMPTY_BUFFER;
              } else {
                p = cbor.encode(p);
              }
              const encrypted = [p, u, ciphertext];
              resolve(cbor.encode(options.excludetag ? encrypted : new Tagged(Encrypt0Tag, encrypted)));
            }
          });
        };

        function nodeDecrypt(ciphertext, key, alg, iv, tag, aad, ccm = false) {
          const nodeAlg = COSEAlgToNodeAlg[TagToAlg[alg]];
          const chiperOptions = ccm ? { authTagLength: authTagLength[alg] } : null;
          const aadOptions = ccm ? { plaintextLength: Buffer.byteLength(ciphertext) } : null;
          const decipher = crypto.createDecipheriv(nodeAlg, key, iv, chiperOptions);
          decipher.setAuthTag(tag);
          decipher.setAAD(aad, aadOptions);
          return Buffer.concat([decipher.update(ciphertext), decipher.final()]);
        }

        exports.read = function (data, key, options) {
          options = options || {};
          const externalAAD = options.externalAAD || EMPTY_BUFFER;
          return cbor.decodeFirst(data)
            .then((obj) => {
              let msgTag = options.defaultType ? options.defaultType : EncryptTag;
              if (obj instanceof Tagged) {
                if (obj.tag !== EncryptTag && obj.tag !== Encrypt0Tag) {
                  throw new Error('Unknown tag, ' + obj.tag);
                }
                msgTag = obj.tag;
                obj = obj.value;
              }

              if (!Array.isArray(obj)) {
                throw new Error('Expecting Array');
              }

              if (msgTag === EncryptTag && obj.length !== 4) {
                throw new Error('Expecting Array of lenght 4 for COSE Encrypt message');
              }

              if (msgTag === Encrypt0Tag && obj.length !== 3) {
                throw new Error('Expecting Array of lenght 4 for COSE Encrypt0 message');
              }

              let [p, u, ciphertext] = obj;

              p = (p.length === 0) ? EMPTY_BUFFER : cbor.decodeFirstSync(p);
              p = (!p.size) ? EMPTY_BUFFER : p;
              u = (!u.size) ? EMPTY_BUFFER : u;

              const alg = (p !== EMPTY_BUFFER) ? p.get(common.HeaderParameters.alg) : (u !== EMPTY_BUFFER) ? u.get(common.HeaderParameters.alg) : undefined;
              if (!TagToAlg[alg]) {
                throw new Error('Unknown or unsupported algorithm ' + alg);
              }

              let iv = u.get(common.HeaderParameters.IV);
              const partialIv = u.get(common.HeaderParameters.Partial_IV);
              if (iv && partialIv) {
                throw new Error('IV and Partial IV parameters MUST NOT both be present in the same security layer');
              }
              if (partialIv && !options.contextIv) {
                throw new Error('Context IV must be provided when Partial IV is used');
              }
              if (partialIv && options.contextIv) {
                iv = common.xor(partialIv, options.contextIv);
              }

              const tagLength = authTagLength[alg];
              const tag = ciphertext.slice(ciphertext.length - tagLength, ciphertext.length);
              ciphertext = ciphertext.slice(0, ciphertext.length - tagLength);

              const aad = createAAD(p, (msgTag === EncryptTag ? 'Encrypt' : 'Encrypt0'), externalAAD);
              if (isNodeAlg[alg]) {
                return nodeDecrypt(ciphertext, key, alg, iv, tag, aad);
              } else if (isCCMAlg[alg] && runningInNode()) {
                return nodeDecrypt(ciphertext, key, alg, iv, tag, aad, true);
              } else {
                throw new Error('No implementation for algorithm, ' + alg);
              }
            });
        };

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./common": 111, "any-promise": 24, "buffer": 96, "cbor": 116, "crypto": 132, "node-hkdf-sync": 214 }], 113: [function (require, module, exports) {
    /* jshint esversion: 6 */
    /* jslint node: true */
    'use strict';

    exports.common = require('./common');
    exports.mac = require('./mac');
    exports.sign = require('./sign');
    exports.encrypt = require('./encrypt');

  }, { "./common": 111, "./encrypt": 112, "./mac": 114, "./sign": 115 }], 114: [function (require, module, exports) {
    /* jshint esversion: 6 */
    /* jslint node: true */
    'use strict';

    const cbor = require('cbor');
    const aesCbcMac = require('aes-cbc-mac');
    const crypto = require('crypto');
    const Promise = require('any-promise');
    const common = require('./common');
    const Tagged = cbor.Tagged;
    const EMPTY_BUFFER = common.EMPTY_BUFFER;

    const MAC0Tag = exports.MAC0Tag = 17;
    const MACTag = exports.MACTag = 97;

    const AlgFromTags = {
      4: 'SHA-256_64',
      5: 'SHA-256',
      6: 'SHA-384',
      7: 'SHA-512',
      14: 'AES-MAC-128/64',
      15: 'AES-MAC-256/64',
      25: 'AES-MAC-128/128',
      26: 'AES-MAC-256/128'
    };

    const COSEAlgToNodeAlg = {
      'SHA-256_64': 'sha256',
      'SHA-256': 'sha256',
      'HS256': 'sha256',
      'SHA-384': 'sha384',
      'SHA-512': 'sha512',
      'AES-MAC-128/64': 'aes-cbc-mac-64',
      'AES-MAC-128/128': 'aes-cbc-mac-128',
      'AES-MAC-256/64': 'aes-cbc-mac-64',
      'AES-MAC-256/128': 'aes-cbc-mac-128'
    };

    const CutTo = {
      4: 8,
      5: 32,
      6: 48,
      7: 64
    };

    const context = {};
    context[MAC0Tag] = 'MAC0';
    context[MACTag] = 'MAC';

    function doMac(context, p, externalAAD, payload, alg, key) {
      return new Promise((resolve, reject) => {
        const MACstructure = [
          context, // 'MAC0' or 'MAC1', // context
          p, // protected
          externalAAD, // bstr,
          payload // bstr
        ];

        const toBeMACed = cbor.encode(MACstructure);
        if (alg === 'aes-cbc-mac-64') {
          const mac = aesCbcMac.create(key, toBeMACed, 8);
          resolve(mac);
        } else if (alg === 'aes-cbc-mac-128') {
          const mac = aesCbcMac.create(key, toBeMACed, 16);
          resolve(mac);
        } else {
          const hmac = crypto.createHmac(alg, key);
          hmac.end(toBeMACed, function () {
            resolve(hmac.read());
          });
        }
      });
    }

    exports.create = function (headers, payload, recipents, externalAAD, options) {
      options = options || {};
      externalAAD = externalAAD || EMPTY_BUFFER;
      let u = headers.u || {};
      let p = headers.p || {};

      p = common.TranslateHeaders(p);
      u = common.TranslateHeaders(u);

      const alg = p.get(common.HeaderParameters.alg) || u.get(common.HeaderParameters.alg);

      if (!alg) {
        throw new Error('Missing mandatory parameter \'alg\'');
      }

      if (recipents.length === 0) {
        throw new Error('There has to be at least one recipent');
      }

      const predictableP = (!p.size) ? EMPTY_BUFFER : cbor.encode(p);
      if (p.size === 0 && options.encodep === 'empty') {
        p = EMPTY_BUFFER;
      } else {
        p = cbor.encode(p);
      }
      // TODO check crit headers
      if (Array.isArray(recipents)) {
        if (recipents.length > 1) {
          throw new Error('MACing with multiple recipents is not implemented');
        }
        const recipent = recipents[0];
        return doMac('MAC',
          predictableP,
          externalAAD,
          payload,
          COSEAlgToNodeAlg[AlgFromTags[alg]],
          recipent.key)
          .then((tag) => {
            tag = tag.slice(0, CutTo[alg]);
            const ru = common.TranslateHeaders(recipent.u);
            const rp = EMPTY_BUFFER;
            const maced = [p, u, payload, tag, [[rp, ru, EMPTY_BUFFER]]];
            return cbor.encode(options.excludetag ? maced : new Tagged(MACTag, maced));
          });
      } else {
        return doMac('MAC0',
          predictableP,
          externalAAD,
          payload,
          COSEAlgToNodeAlg[AlgFromTags[alg]],
          recipents.key)
          .then((tag) => {
            tag = tag.slice(0, CutTo[alg]);
            const maced = [p, u, payload, tag];
            return cbor.encode(options.excludetag ? maced : new Tagged(MAC0Tag, maced));
          });
      }
    };

    exports.read = function (data, key, externalAAD, options) {
      options = options || {};
      externalAAD = externalAAD || EMPTY_BUFFER;

      return cbor.decodeFirst(data)
        .then((obj) => {
          let type = options.defaultType ? options.defaultType : MAC0Tag;
          if (obj instanceof Tagged) {
            if (obj.tag !== MAC0Tag && obj.tag !== MACTag) {
              throw new Error('Unexpected cbor tag, \'' + obj.tag + '\'');
            }
            type = obj.tag;
            obj = obj.value;
          }

          if (!Array.isArray(obj)) {
            throw new Error('Expecting Array');
          }

          if (type === MAC0Tag && obj.length !== 4) {
            throw new Error('Expecting Array of lenght 4');
          }
          if (type === MACTag && obj.length !== 5) {
            throw new Error('Expecting Array of lenght 5');
          }

          let [p, u, payload, tag] = obj;
          p = (!p.length) ? EMPTY_BUFFER : cbor.decode(p);
          p = (!p.size) ? EMPTY_BUFFER : p;
          u = (!u.size) ? EMPTY_BUFFER : u;

          // TODO validate protected header
          const alg = (p !== EMPTY_BUFFER) ? p.get(common.HeaderParameters.alg) : (u !== EMPTY_BUFFER) ? u.get(common.HeaderParameters.alg) : undefined;
          p = (!p.size) ? EMPTY_BUFFER : cbor.encode(p);
          if (!AlgFromTags[alg]) {
            throw new Error('Unknown algorithm, ' + alg);
          }
          if (!COSEAlgToNodeAlg[AlgFromTags[alg]]) {
            throw new Error('Unsupported algorithm, ' + AlgFromTags[alg]);
          }

          return doMac(context[type], p, externalAAD, payload, COSEAlgToNodeAlg[AlgFromTags[alg]], key)
            .then((calcTag) => {
              calcTag = calcTag.slice(0, CutTo[alg]);

              if (tag.toString('hex') !== calcTag.toString('hex')) {
                throw new Error('Tag mismatch');
              }

              return payload;
            });
        });
    };

  }, { "./common": 111, "aes-cbc-mac": 23, "any-promise": 24, "cbor": 116, "crypto": 132 }], 115: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /* jshint esversion: 6 */
        /* jslint node: true */
        'use strict';

        const cbor = require('cbor');
        const EC = require('elliptic').ec;
        const crypto = require('crypto');
        const common = require('./common');
        const Promise = require('any-promise');
        const EMPTY_BUFFER = common.EMPTY_BUFFER;
        const Tagged = cbor.Tagged;

        const SignTag = exports.SignTag = 98;
        const Sign1Tag = exports.Sign1Tag = 18;

        const AlgFromTags = {};
        AlgFromTags[-7] = { 'sign': 'ES256', 'digest': 'SHA-256' };
        AlgFromTags[-35] = { 'sign': 'ES384', 'digest': 'SHA-384' };
        AlgFromTags[-36] = { 'sign': 'ES512', 'digest': 'SHA-512' };
        AlgFromTags[-257] = { 'sign': 'RS256', 'digest': 'SHA-256' };
        AlgFromTags[-258] = { 'sign': 'RS384', 'digest': 'SHA-384' };
        AlgFromTags[-259] = { 'sign': 'RS512', 'digest': 'SHA-512' };

        const COSEAlgToNodeAlg = {
          'ES256': { 'sign': 'p256', 'digest': 'sha256' },
          'ES384': { 'sign': 'p384', 'digest': 'sha384' },
          'ES512': { 'sign': 'p521', 'digest': 'sha512' },
          'RS256': { 'sign': 'RSA-SHA256' },
          'RS384': { 'sign': 'RSA-SHA384' },
          'RS512': { 'sign': 'RSA-SHA512' }
        };

        function doSign(SigStructure, signer, alg) {
          return new Promise((resolve, reject) => {
            if (!AlgFromTags[alg]) {
              throw new Error('Unknown algorithm, ' + alg);
            }
            if (!COSEAlgToNodeAlg[AlgFromTags[alg].sign]) {
              throw new Error('Unsupported algorithm, ' + AlgFromTags[alg].sign);
            }

            let ToBeSigned = cbor.encode(SigStructure);

            let sig;
            if (AlgFromTags[alg].sign.startsWith('ES')) {
              const hash = crypto.createHash(COSEAlgToNodeAlg[AlgFromTags[alg].sign].digest);
              hash.update(ToBeSigned);
              ToBeSigned = hash.digest();
              const ec = new EC(COSEAlgToNodeAlg[AlgFromTags[alg].sign].sign);
              const key = ec.keyFromPrivate(signer.key.d);
              const signature = key.sign(ToBeSigned);
              const bitLength = Math.ceil(ec.curve._bitLength / 8);
              sig = Buffer.concat([signature.r.toArrayLike(Buffer, undefined, bitLength), signature.s.toArrayLike(Buffer, undefined, bitLength)]);
            } else {
              const sign = crypto.createSign(COSEAlgToNodeAlg[AlgFromTags[alg].sign].sign);
              sign.update(ToBeSigned);
              sign.end();
              sig = sign.sign(signer.key);
            }

            resolve(sig);
          });
        }

        exports.create = function (headers, payload, signers, options) {
          options = options || {};
          let u = headers.u || {};
          let p = headers.p || {};

          p = common.TranslateHeaders(p);
          u = common.TranslateHeaders(u);
          let bodyP = p || {};
          bodyP = (bodyP.size === 0) ? EMPTY_BUFFER : cbor.encode(bodyP);
          if (Array.isArray(signers)) {
            if (signers.length === 0) {
              throw new Error('There has to be at least one signer');
            }
            if (signers.length > 1) {
              throw new Error('Only one signer is supported');
            }
            // TODO handle multiple signers
            const signer = signers[0];
            const externalAAD = signer.externalAAD || EMPTY_BUFFER;
            let signerP = signer.p || {};
            let signerU = signer.u || {};

            signerP = common.TranslateHeaders(signerP);
            signerU = common.TranslateHeaders(signerU);
            const alg = signerP.get(common.HeaderParameters.alg);
            signerP = (signerP.size === 0) ? EMPTY_BUFFER : cbor.encode(signerP);

            const SigStructure = [
              'Signature',
              bodyP,
              signerP,
              externalAAD,
              payload
            ];
            return doSign(SigStructure, signer, alg).then((sig) => {
              if (p.size === 0 && options.encodep === 'empty') {
                p = EMPTY_BUFFER;
              } else {
                p = cbor.encode(p);
              }
              const signed = [p, u, payload, [[signerP, signerU, sig]]];
              return cbor.encode(options.excludetag ? signed : new Tagged(SignTag, signed));
            });
          } else {
            const signer = signers;
            const externalAAD = signer.externalAAD || EMPTY_BUFFER;
            const alg = p.get(common.HeaderParameters.alg) || u.get(common.HeaderParameters.alg);
            const SigStructure = [
              'Signature1',
              bodyP,
              externalAAD,
              payload
            ];
            return doSign(SigStructure, signer, alg).then((sig) => {
              if (p.size === 0 && options.encodep === 'empty') {
                p = EMPTY_BUFFER;
              } else {
                p = cbor.encode(p);
              }
              const signed = [p, u, payload, sig];
              return cbor.encodeCanonical(options.excludetag ? signed : new Tagged(Sign1Tag, signed));
            });
          }
        };

        function doVerify(SigStructure, verifier, alg, sig) {
          return new Promise((resolve, reject) => {
            if (!AlgFromTags[alg]) {
              throw new Error('Unknown algorithm, ' + alg);
            }
            if (!COSEAlgToNodeAlg[AlgFromTags[alg].sign]) {
              throw new Error('Unsupported algorithm, ' + AlgFromTags[alg].sign);
            }
            const ToBeSigned = cbor.encode(SigStructure);

            if (AlgFromTags[alg].sign.startsWith('ES')) {
              const hash = crypto.createHash(COSEAlgToNodeAlg[AlgFromTags[alg].sign].digest);
              hash.update(ToBeSigned);
              const msgHash = hash.digest();

              const pub = { 'x': verifier.key.x, 'y': verifier.key.y };
              const ec = new EC(COSEAlgToNodeAlg[AlgFromTags[alg].sign].sign);
              const key = ec.keyFromPublic(pub);
              sig = { 'r': sig.slice(0, sig.length / 2), 's': sig.slice(sig.length / 2) };
              if (key.verify(msgHash, sig)) {
                resolve();
              } else {
                throw new Error('Signature missmatch');
              }
            } else {
              const verify = crypto.createVerify(COSEAlgToNodeAlg[AlgFromTags[alg].sign].sign);
              verify.update(ToBeSigned);
              if (verify.verify(verifier.key, sig)) {
                resolve();
              } else {
                throw new Error('Signature missmatch');
              }
            }
          });
        }

        function getSigner(signers, verifier) {
          for (let i = 0; i < signers.length; i++) {
            const kid = signers[i][1].get(common.HeaderParameters.kid); // TODO create constant for header locations
            if (kid.equals(Buffer.from(verifier.key.kid, 'utf8'))) {
              return signers[i];
            }
          }
        }

        function getCommonParameter(first, second, parameter) {
          let result;
          if (first.get) {
            result = first.get(parameter);
          }
          if (!result && second.get) {
            result = second.get(parameter);
          }
          return result;
        }

        exports.verify = function (payload, verifier, options) {
          options = options || {};
          return cbor.decodeFirst(payload)
            .then((obj) => {
              let type = options.defaultType ? options.defaultType : SignTag;
              if (obj instanceof Tagged) {
                if (obj.tag !== SignTag && obj.tag !== Sign1Tag) {
                  throw new Error('Unexpected cbor tag, \'' + obj.tag + '\'');
                }
                type = obj.tag;
                obj = obj.value;
              }

              if (!Array.isArray(obj)) {
                throw new Error('Expecting Array');
              }

              if (obj.length !== 4) {
                throw new Error('Expecting Array of lenght 4');
              }

              let [p, u, plaintext, signers] = obj;

              if (type === SignTag && !Array.isArray(signers)) {
                throw new Error('Expecting signature Array');
              }

              p = (!p.length) ? EMPTY_BUFFER : cbor.decodeFirstSync(p);
              u = (!u.size) ? EMPTY_BUFFER : u;

              let signer = (type === SignTag ? getSigner(signers, verifier) : signers);

              if (!signer) {
                throw new Error('Failed to find signer with kid' + verifier.key.kid);
              }

              if (type === SignTag) {
                const externalAAD = verifier.externalAAD || EMPTY_BUFFER;
                let [signerP, , sig] = signer;
                signerP = (!signerP.length) ? EMPTY_BUFFER : signerP;
                p = (!p.size) ? EMPTY_BUFFER : cbor.encode(p);
                const signerPMap = cbor.decode(signerP);
                const alg = signerPMap.get(common.HeaderParameters.alg);
                const SigStructure = [
                  'Signature',
                  p,
                  signerP,
                  externalAAD,
                  plaintext
                ];
                return doVerify(SigStructure, verifier, alg, sig)
                  .then(() => {
                    return plaintext;
                  });
              } else {
                const externalAAD = verifier.externalAAD || EMPTY_BUFFER;

                const alg = getCommonParameter(p, u, common.HeaderParameters.alg);
                p = (!p.size) ? EMPTY_BUFFER : cbor.encode(p);
                const SigStructure = [
                  'Signature1',
                  p,
                  externalAAD,
                  plaintext
                ];
                return doVerify(SigStructure, verifier, alg, signer)
                  .then(() => {
                    return plaintext;
                  });
              }
            });
        };

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./common": 111, "any-promise": 24, "buffer": 96, "cbor": 116, "crypto": 132, "elliptic": 144 }], 116: [function (require, module, exports) {
    'use strict'

    exports.Commented = require('./commented')
    exports.Diagnose = require('./diagnose')
    exports.Decoder = require('./decoder')
    exports.Encoder = require('./encoder')
    exports.Simple = require('./simple')
    exports.Tagged = require('./tagged')

    exports.comment = exports.Commented.comment
    exports.decodeAll = exports.Decoder.decodeAll
    exports.decodeFirst = exports.Decoder.decodeFirst
    exports.decodeAllSync = exports.Decoder.decodeAllSync
    exports.decodeFirstSync = exports.Decoder.decodeFirstSync
    exports.diagnose = exports.Diagnose.diagnose
    exports.encode = exports.Encoder.encode
    exports.encodeCanonical = exports.Encoder.encodeCanonical
    exports.decode = exports.Decoder.decodeFirstSync

    exports.leveldb = {
      decode: exports.Decoder.decodeAllSync,
      encode: exports.Encoder.encode,
      buffer: true,
      name: 'cbor'
    }

  }, { "./commented": 117, "./decoder": 119, "./diagnose": 120, "./encoder": 121, "./simple": 122, "./tagged": 123 }], 117: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict'

        const stream = require('stream')
        const util = require('util')
        const utils = require('./utils')
        const Simple = require('./simple')
        const Decoder = require('./decoder')
        const constants = require('./constants')
        const bignumber = require('bignumber.js')
        const NoFilter = require('nofilter')

        const MT = constants.MT
        const NUMBYTES = constants.NUMBYTES
        const SYMS = constants.SYMS

        function plural(c) {
          if (c > 1) {
            return 's'
          } else {
            return ''
          }
        }

        /**
         * Generate the expanded format of RFC 7049, section 2.2.1
         *
         * @extends {stream.Transform}
         */
        class Commented extends stream.Transform {
          /**
           * Create a CBOR commenter.
           *
           * @param {any} [options={}] - Stream options
           * @param {bool} [options.max_depth=10] - how many times to indent the dashes
           */
          constructor(options) {
            options = options || {}
            options.readableObjectMode = false
            options.writableObjectMode = false
            const max_depth = (options.max_depth != null) ? options.max_depth : 10
            delete options.max_depth
            super(options)

            this.depth = 1
            this.max_depth = max_depth
            this.all = new NoFilter
            this.parser = new Decoder(options)
            this.parser.on('value', this._on_value.bind(this))
            this.parser.on('start', this._on_start.bind(this))
            this.parser.on('start-string', this._on_start_string.bind(this))
            this.parser.on('stop', this._on_stop.bind(this))
            this.parser.on('more-bytes', this._on_more.bind(this))
            this.parser.on('error', this._on_error.bind(this))
            this.parser.on('data', this._on_data.bind(this))
            this.parser.bs.on('read', this._on_read.bind(this))
          }

          /**
           * @private
           */
          _transform(fresh, encoding, cb) {
            this.parser.write(fresh, encoding, cb)
          }

          /**
           * @private
           */
          _flush(cb) {
            // TODO: find the test that covers this, and look at the return value
            return this.parser._flush(cb)
          }

          /**
           * @callback commentCallback
           * @param {Error} error - if one was generated
           * @param {string} commented - the comment string
           */

          /**
           * Comment on an input Buffer or string, creating a string passed to the
           * callback.  If callback not specified, a promise is returned.
           *
           * @static
           * @param {(string|Buffer|NoFilter)} input
           * @param {(string|object|function)} options
           * @param {number} [options.max_depth=10] how many times to indent the dashes
           * @param {commentCallback=} cb
           * @returns {Promise} if cb not specified
           */
          static comment(input, options, cb) {
            if (input == null) {
              throw new Error('input required')
            }
            let encoding = (typeof input === 'string') ? 'hex' : void 0
            let max_depth = 10
            switch (typeof options) {
              case 'function':
                cb = options
                break
              case 'string':
                encoding = options
                break
              case 'number':
                max_depth = options
                break
              case 'object':
                const ref1 = options.encoding
                const ref2 = options.max_depth
                encoding = (ref1 != null) ? ref1 : encoding
                max_depth = (ref2 != null) ? ref2 : max_depth
                break
              case 'undefined':
                break
              default:
                throw new Error('Unknown option type')
            }
            const bs = new NoFilter
            const d = new Commented({
              max_depth: max_depth
            })
            let p = null
            if (typeof cb === 'function') {
              d.on('end', () => {
                cb(null, bs.toString('utf8'))
              })
              d.on('error', cb)
            } else {
              p = new Promise((resolve, reject) => {
                d.on('end', () => {
                  resolve(bs.toString('utf8'))
                })
                return d.on('error', reject)
              })
            }
            d.pipe(bs)
            d.end(input, encoding)
            return p
          }

          /**
           * @private
           */
          _on_error(er) {
            return this.push('Помилка: ') &&
              this.push(er.toString()) &&
              this.push('\n')
          }

          /**
           * @private
           */
          _on_read(buf) {
            this.all.write(buf)
            const hex = buf.toString('hex')
            this.push(new Array(this.depth + 1).join('  '))
            this.push(hex)
            let ind = (this.max_depth - this.depth) * 2
            ind -= hex.length
            if (ind < 1) {
              ind = 1
            }
            this.push(new Array(ind + 1).join(' '))
            return this.push('-- ')
          }

          /**
           * @private
           */
          _on_more(mt, len, parent_mt, pos) {
            this.depth++
            let desc = ''
            switch (mt) {
              case MT.POS_INT:
                desc = 'Positive number,'
                break
              case MT.NEG_INT:
                desc = 'Negative number,'
                break
              case MT.ARRAY:
                desc = 'Array, length'
                break
              case MT.MAP:
                desc = 'Map, count'
                break
              case MT.BYTE_STRING:
                desc = 'Bytes, length'
                break
              case MT.UTF8_STRING:
                desc = 'String, length'
                break
              case MT.SIMPLE_FLOAT:
                if (len === 1) {
                  desc = 'Simple value,'
                } else {
                  desc = 'Float,'
                }
                break
            }
            return this.push(desc + ' next ' + len + ' byte' + (plural(len)) + '\n')
          }

          /**
           * @private
           */
          _on_start_string(mt, tag, parent_mt, pos) {
            this.depth++
            let desc = ''
            switch (mt) {
              case MT.BYTE_STRING:
                desc = 'Bytes, length: ' + tag
                break
              case MT.UTF8_STRING:
                desc = 'String, length: ' + (tag.toString())
                break
            }
            return this.push(desc + '\n')
          }

          /**
           * @private
           */
          _on_start(mt, tag, parent_mt, pos) {
            this.depth++
            if (tag !== SYMS.BREAK) {
              this.push((() => {
                switch (parent_mt) {
                  case MT.ARRAY:
                    return '[' + pos + '], '
                  case MT.MAP:
                    if (pos % 2) {
                      return '{Val:' + (Math.floor(pos / 2)) + '}, '
                    } else {
                      return '{Key:' + (Math.floor(pos / 2)) + '}, '
                    }
                }
              })())
            }
            this.push((() => {
              switch (mt) {
                case MT.TAG:
                  return 'Tag #' + tag
                case MT.ARRAY:
                  if (tag === SYMS.STREAM) {
                    return 'Array (streaming)'
                  } else {
                    return 'Array, ' + tag + ' item' + (plural(tag))
                  }
                case MT.MAP:
                  if (tag === SYMS.STREAM) {
                    return 'Map (streaming)'
                  } else {
                    return 'Map, ' + tag + ' pair' + (plural(tag))
                  }
                case MT.BYTE_STRING:
                  return 'Bytes (streaming)'
                case MT.UTF8_STRING:
                  return 'String (streaming)'
              }
            })())
            return this.push('\n')
          }

          /**
           * @private
           */
          _on_stop(mt) {
            return this.depth--
          }

          /**
           * @private
           */
          _on_value(val, parent_mt, pos, ai) {
            if (val !== SYMS.BREAK) {
              this.push((() => {
                switch (parent_mt) {
                  case MT.ARRAY:
                    return '[' + pos + '], '
                  case MT.MAP:
                    if (pos % 2) {
                      return '{Val:' + (Math.floor(pos / 2)) + '}, '
                    } else {
                      return '{Key:' + (Math.floor(pos / 2)) + '}, '
                    }
                }
              })())
            }

            if (val === SYMS.BREAK) {
              this.push('BREAK\n')
            } else if (val === SYMS.NULL) {
              this.push('null\n')
            } else if (val === SYMS.UNDEFINED) {
              this.push('undefined\n')
            } else if (typeof val === 'string') {
              this.depth--
              if (val.length > 0) {
                this.push(JSON.stringify(val))
                this.push('\n')
              }
            } else if (Buffer.isBuffer(val)) {
              this.depth--
              if (val.length > 0) {
                this.push(val.toString('hex'))
                this.push('\n')
              }
            } else if (val instanceof bignumber) {
              this.push(val.toString())
              this.push('\n')
            } else {
              this.push(util.inspect(val))
              this.push('\n')
            }

            switch (ai) {
              case NUMBYTES.ONE:
              case NUMBYTES.TWO:
              case NUMBYTES.FOUR:
              case NUMBYTES.EIGHT:
                this.depth--
            }
          }

          /**
           * @private
           */
          _on_data() {
            this.push('0x')
            this.push(this.all.read().toString('hex'))
            return this.push('\n')
          }
        }

        module.exports = Commented

      }).call(this)
    }).call(this, { "isBuffer": require("../../../../is-buffer/index.js") })

  }, { "../../../../is-buffer/index.js": 205, "./constants": 118, "./decoder": 119, "./simple": 122, "./utils": 124, "bignumber.js": 45, "nofilter": 126, "stream": 296, "util": 319 }], 118: [function (require, module, exports) {
    'use strict'

    exports.MT = {
      POS_INT: 0,
      NEG_INT: 1,
      BYTE_STRING: 2,
      UTF8_STRING: 3,
      ARRAY: 4,
      MAP: 5,
      TAG: 6,
      SIMPLE_FLOAT: 7
    }

    exports.TAG = {
      DATE_STRING: 0,
      DATE_EPOCH: 1,
      POS_BIGINT: 2,
      NEG_BIGINT: 3,
      DECIMAL_FRAC: 4,
      BIGFLOAT: 5,
      BASE64URL_EXPECTED: 21,
      BASE64_EXPECTED: 22,
      BASE16_EXPECTED: 23,
      CBOR: 24,
      URI: 32,
      BASE64URL: 33,
      BASE64: 34,
      REGEXP: 35,
      MIME: 36
    }

    exports.NUMBYTES = {
      ZERO: 0,
      ONE: 24,
      TWO: 25,
      FOUR: 26,
      EIGHT: 27,
      INDEFINITE: 31
    }

    exports.SIMPLE = {
      FALSE: 20,
      TRUE: 21,
      NULL: 22,
      UNDEFINED: 23
    }

    exports.SYMS = {
      NULL: Symbol('null'),
      UNDEFINED: Symbol('undef'),
      PARENT: Symbol('parent'),
      BREAK: Symbol('break'),
      STREAM: Symbol('stream')
    }

    exports.SHIFT32 = Math.pow(2, 32)

  }, {}], 119: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict'

        const BinaryParseStream = require('../vendor/binary-parse-stream')
        const Tagged = require('./tagged')
        const Simple = require('./simple')
        const utils = require('./utils')
        const bignumber = require('bignumber.js')
        const NoFilter = require('nofilter')
        const constants = require('./constants')
        // Do not fix this if you want to support node v4
        const MT = constants.MT
        const NUMBYTES = constants.NUMBYTES
        const SIMPLE = constants.SIMPLE
        const SYMS = constants.SYMS

        const NEG_ONE = new bignumber(-1)
        const NEG_MAX = NEG_ONE.sub(
          new bignumber(Number.MAX_SAFE_INTEGER.toString(16), 16))
        const COUNT = Symbol('count')
        const PENDING_KEY = Symbol('pending_key')
        const MAJOR = Symbol('major type')
        const ERROR = Symbol('error')
        const NOT_FOUND = Symbol('not found')

        function parentArray(parent, typ, count) {
          const a = []
          a[COUNT] = count
          a[SYMS.PARENT] = parent
          a[MAJOR] = typ
          return a
        }

        function parentBufferStream(parent, typ) {
          const b = new NoFilter
          b[SYMS.PARENT] = parent
          b[MAJOR] = typ
          return b
        }

        /**
         * Decode a stream of CBOR bytes by transforming them into equivalent
         * JavaScript data.  Because of the limitations of Node object streams,
         * special symbols are emitted instead of NULL or UNDEFINED.  Fix those
         * up by calling {@link Decoder.nullcheck}.
         *
         * @extends {BinaryParseStream}
         */
        class Decoder extends BinaryParseStream {

          /**
           * Create a parsing stream.
           *
           * @param {object} [options={}]
           * @param {number} [options.max_depth=-1] - the maximum depth to parse.
           *   Use -1 for "until you run out of memory".  Set this to a finite
           *   positive number for un-trusted inputs.  Most standard inputs won't nest
           *   more than 100 or so levels; I've tested into the millions before
           *   running out of memory.
           * @param {object=} options.tags - mapping from tag number to function(v),
           *   where v is the decoded value that comes after the tag, and where the
           *   function returns the correctly-created value for that tag.
           */
          constructor(options) {
            options = options || {}
            const tags = options.tags
            delete options.tags
            const max_depth = (options.max_depth != null) ? options.max_depth : -1
            delete options.max_depth
            super(options)

            this.running = true
            this.max_depth = max_depth
            this.tags = tags
          }

          /**
           * Check the given value for a symbol encoding a NULL or UNDEFINED value in
           * the CBOR stream.
           *
           * @static
           * @param {any} val - the value to check
           * @returns {any} the corrected value
           *
           * @example
           * myDecoder.on('data', function(val) {
           *   val = Decoder.nullcheck(val);
           *   ...
           * });
           */
          static nullcheck(val) {
            switch (val) {
              case SYMS.NULL:
                return null
              case SYMS.UNDEFINED:
                return undefined
              case NOT_FOUND:
                throw new Error('Value not found')
              default:
                return val
            }
          }

          /**
           * Decode the first CBOR item in the input, synchronously.  This will throw an
           * exception if the input is not valid CBOR.
           *
           * @static
           * @param {(string|Buffer)} input
           * @param {object} [options={encoding: 'hex'}]
           * @param {string} [options.encoding: 'hex'] - The encoding of the input.
           *   Ignored if input is a Buffer.
           * @returns {any} - the decoded value
           */
          static decodeFirstSync(input, options) {
            options = options || { encoding: 'hex' }
            let opts = {}
            let encod
            switch (typeof options) {
              case 'string':
                encod = options
                break
              case 'object':
                opts = utils.extend({}, options)
                encod = opts.encoding
                delete opts.encoding
                break
            }
            const c = new Decoder(opts)
            const s = new NoFilter(
              input,
              encod != null ? encod : utils.guessEncoding(input))
            const parser = c._parse()
            let state = parser.next()
            while (!state.done) {
              const b = s.read(state.value)
              if ((b == null) || (b.length !== state.value)) {
                throw new Error('Insufficient data')
              }
              state = parser.next(b)
            }
            return Decoder.nullcheck(state.value)
          }

          /**
           * Decode all of the CBOR items in the input into an array.  This will throw
           * an exception if the input is not valid CBOR; a zero-length input will
           * return an empty array.
           *
           * @static
           * @param {(string|Buffer)} input
           * @param {(string|Object)} [options={encoding: 'hex'}]
           * @param {string} [options.encoding: 'hex'] - The encoding of the input.
           *   Ignored if input is a Buffer.
           * @returns {Array} - Array of all found items
           */
          static decodeAllSync(input, options) {
            options = options || { encoding: 'hex' }
            let opts = {}
            let encod
            switch (typeof options) {
              case 'string':
                encod = options
                break
              case 'object':
                opts = utils.extend({}, options)
                encod = opts.encoding
                delete opts.encoding
            }
            const c = new Decoder(opts)
            const s = new NoFilter(
              input,
              encod != null ? encod : utils.guessEncoding(input))
            const res = []
            while (s.length > 0) {
              const parser = c._parse()
              let state = parser.next()
              while (!state.done) {
                const b = s.read(state.value)
                if ((b == null) || (b.length !== state.value)) {
                  throw new Error('Insufficient data')
                }
                state = parser.next(b)
              }
              res.push(Decoder.nullcheck(state.value))
            }
            return res
          }

          /**
           * @callback decodeCallback
           * @param {Error} error - if one was generated
           * @param {any} value - the decoded value
           */

          /**
           * Decode the first CBOR item in the input.  This will error if there are more
           * bytes left over at the end, and optionally if there were no valid CBOR
           * bytes in the input.  Emits the {Decoder.NOT_FOUND} Symbol in the callback
           * if no data was found and the `required` option is false.
           *
           * @static
           * @param {(string|Buffer)} input - the input to parse
           * @param {(function|string|Object)} options
           * @param {string} [options.encoding: 'hex'] - The encoding of the input.
           *   Ignored if input is a Buffer.
           * @param {decodeCallback} cb
           * @returns {Promise} if no cb specified
           */
          static decodeFirst(input, options, cb) {
            let opts = {}
            let required = false
            let encod = 'hex'
            switch (typeof options) {
              case 'function':
                cb = options
                encod = utils.guessEncoding(input)
                break
              case 'string':
                encod = options
                break
              case 'object':
                opts = utils.extend({}, options)
                encod = (opts.encoding != null) ?
                  opts.encoding : utils.guessEncoding(input)
                delete opts.encoding
                required = (opts.required != null) ? opts.required : false
                delete opts.required
            }
            const c = new Decoder(opts)
            let p
            let v = NOT_FOUND
            c.on('data', (val) => {
              v = Decoder.nullcheck(val)
              c.close()
            })
            if (typeof cb === 'function') {
              c.once('error', (er) => {
                const u = v
                v = ERROR
                c.close()
                return cb(er, u)
              })
              c.once('end', () => {
                switch (v) {
                  case NOT_FOUND:
                    if (required) {
                      return cb(new Error('No CBOR found'))
                    } else {
                      return cb(null, v)
                    }
                  case ERROR:
                    return void 0
                  default:
                    return cb(null, v)
                }
              })
            } else {
              p = new Promise((resolve, reject) => {
                c.once('error', (er) => {
                  v = ERROR
                  c.close()
                  return reject(er)
                })
                return c.once('end', () => {
                  switch (v) {
                    case NOT_FOUND:
                      if (required) {
                        return reject(new Error('No CBOR found'))
                      } else {
                        return resolve(v)
                      }
                    case ERROR:
                      return void 0
                    default:
                      return resolve(v)
                  }
                })
              })
            }
            c.end(input, encod)
            return p
          }

          /**
           * @callback decodeAllCallback
           * @param {Error} error - if one was generated
           * @param {Array} value - all of the decoded values, wrapped in an Array
           */

          /**
           * Decode all of the CBOR items in the input.  This will error if there are
           * more bytes left over at the end.
           *
           * @static
           * @param {(string|Buffer)} input - the input to parse
           * @param {(string|Object)} options - Decoding options.
           *   If string, the input encoding.
           * @param {decodeAllCallback} cb
           * @returns {Promise} if no callback
           */
          static decodeAll(input, options, cb) {
            let opts = {}
            let encod = 'hex'
            switch (typeof options) {
              case 'function':
                cb = options
                encod = utils.guessEncoding(input)
                break
              case 'string':
                encod = options
                break
              case 'object':
                opts = utils.extend({}, options)
                encod = (opts.encoding != null) ?
                  opts.encoding : utils.guessEncoding(input)
                delete opts.encoding
            }
            const c = new Decoder(opts)
            let p
            const vals = []
            c.on('data', (val) => {
              return vals.push(Decoder.nullcheck(val))
            })
            if (typeof cb === 'function') {
              c.on('error', cb)
              c.on('end', () => cb(null, vals))
            } else {
              p = new Promise((resolve, reject) => {
                c.on('error', reject)
                c.on('end', () => resolve(vals))
              })
            }
            c.end(input, encod)
            return p
          }

          /**
           * Stop processing
           */
          close() {
            this.running = false
            this.__fresh = true
          }

          *_parse() {
            let parent = null
            let depth = 0
            let val = null
            while (true) {
              if ((this.max_depth >= 0) && (depth > this.max_depth)) {
                throw new Error('Maximum depth ' + this.max_depth + ' exceeded')
              }
              const octet = (yield 1)[0]
              if (!this.running) {
                throw new Error('Unexpected data: 0x' + (octet.toString(16)))
              }
              const mt = octet >> 5
              const ai = octet & 0x1f
              const parent_major = (parent != null) ? parent[MAJOR] : undefined
              const parent_length = (parent != null) ? parent.length : undefined
              switch (ai) {
                case NUMBYTES.ONE:
                  this.emit('more-bytes', mt, 1, parent_major, parent_length)
                  val = (yield 1)[0]
                  break
                case NUMBYTES.TWO:
                case NUMBYTES.FOUR:
                case NUMBYTES.EIGHT:
                  const numbytes = 1 << (ai - 24)
                  this.emit('more-bytes', mt, numbytes, parent_major, parent_length)
                  const buf = yield numbytes
                  val = (mt === MT.SIMPLE_FLOAT) ? buf : utils.parseCBORint(ai, buf)
                  break
                case 28:
                case 29:
                case 30:
                  this.running = false
                  throw new Error('Additional info not implemented: ' + ai)
                case NUMBYTES.INDEFINITE:
                  val = -1
                  break
                default:
                  val = ai
              }
              switch (mt) {
                case MT.POS_INT:
                  // val already decoded
                  break
                case MT.NEG_INT:
                  if (val === Number.MAX_SAFE_INTEGER) {
                    val = NEG_MAX
                  } else if (val instanceof bignumber) {
                    val = NEG_ONE.sub(val)
                  } else {
                    val = -1 - val
                  }
                  break
                case MT.BYTE_STRING:
                case MT.UTF8_STRING:
                  switch (val) {
                    case 0:
                      this.emit('start-string', mt, val, parent_major, parent_length)
                      val = (mt === MT.BYTE_STRING) ? new Buffer(0) : ''
                      break
                    case -1:
                      this.emit('start', mt, SYMS.STREAM, parent_major, parent_length)
                      parent = parentBufferStream(parent, mt)
                      depth++
                      continue
                    default:
                      this.emit('start-string', mt, val, parent_major, parent_length)
                      val = yield val
                      if (mt === MT.UTF8_STRING) {
                        val = val.toString('utf-8')
                      }
                  }
                  break
                case MT.ARRAY:
                case MT.MAP:
                  switch (val) {
                    case 0:
                      val = (mt === MT.MAP) ? {} : []
                      break
                    case -1:
                      this.emit('start', mt, SYMS.STREAM, parent_major, parent_length)
                      parent = parentArray(parent, mt, -1)
                      depth++
                      continue
                    default:
                      this.emit('start', mt, val, parent_major, parent_length)
                      parent = parentArray(parent, mt, val * (mt - 3))
                      depth++
                      continue
                  }
                  break
                case MT.TAG:
                  this.emit('start', mt, val, parent_major, parent_length)
                  parent = parentArray(parent, mt, 1)
                  parent.push(val)
                  depth++
                  continue
                case MT.SIMPLE_FLOAT:
                  if (typeof val === 'number') {
                    val = Simple.decode(val, parent != null)
                  } else {
                    val = utils.parseCBORfloat(val)
                  }
              }
              this.emit('value', val, parent_major, parent_length, ai)
              let again = false
              while (parent != null) {
                switch (false) {
                  case val !== SYMS.BREAK:
                    parent[COUNT] = 1
                    break
                  case !Array.isArray(parent):
                    parent.push(val)
                    break
                  case !(parent instanceof NoFilter):
                    const pm = parent[MAJOR]
                    if ((pm != null) && (pm !== mt)) {
                      this.running = false
                      throw new Error('Invalid major type in indefinite encoding')
                    }
                    parent.write(val)
                }
                if ((--parent[COUNT]) !== 0) {
                  again = true
                  break
                }
                --depth
                delete parent[COUNT]
                this.emit('stop', parent[MAJOR])

                if (Array.isArray(parent)) {
                  switch (parent[MAJOR]) {
                    case MT.ARRAY:
                      val = parent
                      break
                    case MT.MAP:
                      let allstrings = true
                      if ((parent.length % 2) !== 0) {
                        throw new Error('Invalid map length: ' + parent.length)
                      }
                      for (let i = 0, len = parent.length; i < len; i += 2) {
                        if (typeof parent[i] !== 'string') {
                          allstrings = false
                          break
                        }
                      }
                      if (allstrings) {
                        val = {}
                        for (let i = 0, len = parent.length; i < len; i += 2) {
                          val[parent[i]] = parent[i + 1]
                        }
                      } else {
                        val = new Map
                        for (let i = 0, len = parent.length; i < len; i += 2) {
                          val.set(parent[i], parent[i + 1])
                        }
                      }
                      break
                    case MT.TAG:
                      const t = new Tagged(parent[0], parent[1])
                      val = t.convert(this.tags)
                      break
                  }
                } else if (parent instanceof NoFilter) {
                  switch (parent[MAJOR]) {
                    case MT.BYTE_STRING:
                      val = parent.slice()
                      break
                    case MT.UTF8_STRING:
                      val = parent.toString('utf-8')
                      break
                  }
                }

                const old = parent
                parent = parent[SYMS.PARENT]
                delete old[SYMS.PARENT]
                delete old[MAJOR]
              }
              if (!again) {
                return val
              }
            }
          }
        }

        Decoder.NOT_FOUND = NOT_FOUND
        module.exports = Decoder

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "../vendor/binary-parse-stream": 125, "./constants": 118, "./simple": 122, "./tagged": 123, "./utils": 124, "bignumber.js": 45, "buffer": 96, "nofilter": 126 }], 120: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict'

        const stream = require('stream')
        const util = require('util')
        const Decoder = require('./decoder')
        const Simple = require('./simple')
        const utils = require('./utils')
        const constants = require('./constants')
        const bignumber = require('bignumber.js')
        const NoFilter = require('nofilter')

        const MT = constants.MT, SYMS = constants.SYMS

        /**
         * Output the diagnostic format from a stream of CBOR bytes.
         *
         * @extends {stream.Transform}
         */
        class Diagnose extends stream.Transform {

          /**
           * Creates an instance of Diagnose.
           *
           * @param {Object} [options={}] - options for creation
           * @param {string} [options.separator='\n'] - output between detected objects
           * @param {bool} [options.stream_errors=false] - put error info into the
           *   output stream
           * @param {number} [options.max_depth=-1] - -1 for "until you run out of
           *   memory".  Set this to a finite positive number for un-trusted inputs.  Most
           *   standard inputs won't nest more than 100 or so levels; I've tested into the
           *   millions before running out of memory.
           */
          constructor(options) {
            options = options || {}
            const separator = (options.separator != null) ? options.separator : '\n'
            delete options.separator
            const stream_errors = (options.stream_errors != null) ? options.stream_errors : false
            delete options.stream_errors
            options.readableObjectMode = false
            options.writableObjectMode = false
            super(options)

            this.float_bytes = -1
            this.separator = separator
            this.stream_errors = stream_errors
            this.parser = new Decoder(options)
            this.parser.on('more-bytes', this._on_more.bind(this))
            this.parser.on('value', this._on_value.bind(this))
            this.parser.on('start', this._on_start.bind(this))
            this.parser.on('stop', this._on_stop.bind(this))
            this.parser.on('data', this._on_data.bind(this))
            this.parser.on('error', this._on_error.bind(this))
          }

          _transform(fresh, encoding, cb) {
            return this.parser.write(fresh, encoding, cb)
          }

          _flush(cb) {
            return this.parser._flush((er) => {
              if (this.stream_errors) {
                this._on_error(er)
                return cb()
              } else {
                return cb(er)
              }
            })
          }

          /**
           * Convenience function to return a string in diagnostic format.
           *
           * @param {(Buffer|string)} input - the CBOR bytes to format
           * @param {string} [encoding='hex'] - the encoding of input, ignored if input is Buffer
           * @param {commentCallback} cb - callback
           * @returns {Promise} if callback not specified
           */
          static diagnose(input, encoding, cb) {
            if (input == null) {
              throw new Error('input required')
            }
            let opts = {}
            let encod = 'hex'
            switch (typeof encoding) {
              case 'function':
                cb = encoding
                encod = utils.guessEncoding(input)
                break
              case 'object':
                opts = utils.extend({}, encoding)
                encod = (opts.encoding != null) ? opts.encoding : utils.guessEncoding(input)
                delete opts.encoding
                break
              default:
                encod = (encoding != null) ? encoding : 'hex'
            }
            const bs = new NoFilter
            const d = new Diagnose(opts)
            let p = null
            if (typeof cb === 'function') {
              d.on('end', function () {
                return cb(null, bs.toString('utf8'))
              })
              d.on('error', cb)
            } else {
              p = new Promise(function (resolve, reject) {
                d.on('end', function () {
                  return resolve(bs.toString('utf8'))
                })
                return d.on('error', reject)
              })
            }
            d.pipe(bs)
            d.end(input, encod)
            return p
          }

          _on_error(er) {
            if (this.stream_errors) {
              return this.push(er.toString())
            } else {
              return this.emit('error', er)
            }
          }

          _on_more(mt, len, parent_mt, pos) {
            if (mt === MT.SIMPLE_FLOAT) {
              return this.float_bytes = (function () {
                switch (len) {
                  case 2:
                    return 1
                  case 4:
                    return 2
                  case 8:
                    return 3
                }
              })()
            }
          }

          _fore(parent_mt, pos) {
            switch (parent_mt) {
              case MT.BYTE_STRING:
              case MT.UTF8_STRING:
              case MT.ARRAY:
                if (pos > 0) {
                  return this.push(', ')
                }
                break
              case MT.MAP:
                if (pos > 0) {
                  if (pos % 2) {
                    return this.push(': ')
                  } else {
                    return this.push(', ')
                  }
                }
            }
          }

          _on_value(val, parent_mt, pos) {
            if (val === SYMS.BREAK) {
              return
            }
            this._fore(parent_mt, pos)
            return this.push((function () {
              switch (false) {
                case val !== SYMS.NULL:
                  return 'null'
                case val !== SYMS.UNDEFINED:
                  return 'undefined'
                case typeof val !== 'string':
                  return JSON.stringify(val)
                case !(this.float_bytes > 0):
                  const fb = this.float_bytes
                  this.float_bytes = -1
                  return (util.inspect(val)) + '_' + fb
                case !Buffer.isBuffer(val):
                  return "h'" + (val.toString('hex')) + "'"
                case !(val instanceof bignumber):
                  return val.toString()
                default:
                  return util.inspect(val)
              }
            }).call(this))
          }

          _on_start(mt, tag, parent_mt, pos) {
            this._fore(parent_mt, pos)
            this.push((function () {
              switch (mt) {
                case MT.TAG:
                  return tag + '('
                case MT.ARRAY:
                  return '['
                case MT.MAP:
                  return '{'
                case MT.BYTE_STRING:
                case MT.UTF8_STRING:
                  return '('
                default:
                  // istanbul ignore next
                  throw new Error('Unknown diagnostic type: ' + mt)
              }
            })())
            if (tag === SYMS.STREAM) {
              return this.push('_ ')
            }
          }

          _on_stop(mt) {
            return this.push((function () {
              switch (mt) {
                case MT.TAG:
                  return ')'
                case MT.ARRAY:
                  return ']'
                case MT.MAP:
                  return '}'
                case MT.BYTE_STRING:
                case MT.UTF8_STRING:
                  return ')'
                default:
                  // istanbul ignore next
                  throw new Error('Unknown diagnostic type: ' + mt)
              }
            })())
          }

          _on_data() {
            return this.push(this.separator)
          }
        }

        module.exports = Diagnose

      }).call(this)
    }).call(this, { "isBuffer": require("../../../../is-buffer/index.js") })

  }, { "../../../../is-buffer/index.js": 205, "./constants": 118, "./decoder": 119, "./simple": 122, "./utils": 124, "bignumber.js": 45, "nofilter": 126, "stream": 296, "util": 319 }], 121: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        'use strict'

        const stream = require('stream')
        const url = require('url')
        const bignumber = require('bignumber.js')
        const NoFilter = require('nofilter')
        const Tagged = require('./tagged')
        const Simple = require('./simple')
        const utils = require('./utils')

        const constants = require('./constants')
        const MT = constants.MT, NUMBYTES = constants.NUMBYTES, SHIFT32 = constants.SHIFT32, SYMS = constants.SYMS, TAG = constants.TAG
        const HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO
        const FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR
        const DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT
        const TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE
        const FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE
        const UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED
        const NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL

        const MAXINT_BN = new bignumber('0x20000000000000')
        const BUF_NAN = new Buffer('f97e00', 'hex')
        const BUF_INF_NEG = new Buffer('f9fc00', 'hex')
        const BUF_INF_POS = new Buffer('f97c00', 'hex')

        /**
         * Transform JavaScript values into CBOR bytes.  The `Writable` side of
         * the stream is in object mode.
         *
         * @extends {stream.Transform}
         */
        class Encoder extends stream.Transform {

          /**
           * Creates an instance of Encoder.
           *
           * @param {Object} [options={}] - options for the encoder
           * @param {any[]} [options.genTypes=[]] - array of pairs of `type`,
           *   `function(Encoder)` for semantic types to be encoded.  Not needed
           *   for Array, Date, Buffer, Map, RegExp, Set, Url, or bignumber.
           * @param {boolean} [options.canonical=false] - should the output be
           *   canonicalized
           */
          constructor(options) {
            options = options || {}
            options.readableObjectMode = false
            options.writableObjectMode = true
            super(options)

            this.canonical = options.canonical
            this.semanticTypes = [
              Array, this._pushArray,
              Date, this._pushDate,
              Buffer, this._pushBuffer,
              Map, this._pushMap,
              NoFilter, this._pushNoFilter,
              RegExp, this._pushRegexp,
              Set, this._pushSet,
              url.Url, this._pushUrl,
              bignumber, this._pushBigNumber
            ]

            const addTypes = options.genTypes || []
            for (let i = 0, len = addTypes.length; i < len; i += 2) {
              this.addSemanticType(addTypes[i], addTypes[i + 1])
            }
          }

          _transform(fresh, encoding, cb) {
            const ret = this.pushAny(fresh)
            // Old transformers might not return bool.  undefined !== false
            return cb((ret === false) ? new Error('Push Error') : undefined)
          }

          _flush(cb) {
            return cb()
          }

          /**
           * @callback encodeFunction
           * @param {Encoder} encoder - the encoder to serialize into.  Call "write"
           *   on the encoder as needed.
           * @return {bool} - true on success, else false
           */

          /**
           * Add an encoding function to the list of supported semantic types.  This is
           * useful for objects for which you can't add an encodeCBOR method
           *
           * @param {any} type
           * @param {any} fun
           * @returns {encodeFunction}
           */
          addSemanticType(type, fun) {
            for (let i = 0, len = this.semanticTypes.length; i < len; i += 2) {
              const typ = this.semanticTypes[i]
              if (typ === type) {
                const old = this.semanticTypes[i + 1]
                this.semanticTypes[i + 1] = fun
                return old
              }
            }
            this.semanticTypes.push(type, fun)
            return null
          }

          _pushUInt8(val) {
            const b = new Buffer(1)
            b.writeUInt8(val)
            return this.push(b)
          }

          _pushUInt16BE(val) {
            const b = new Buffer(2)
            b.writeUInt16BE(val)
            return this.push(b)
          }

          _pushUInt32BE(val) {
            const b = new Buffer(4)
            b.writeUInt32BE(val)
            return this.push(b)
          }

          _pushDoubleBE(val) {
            const b = new Buffer(8)
            b.writeDoubleBE(val)
            return this.push(b)
          }

          _pushNaN() {
            return this.push(BUF_NAN)
          }

          _pushInfinity(obj) {
            const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS
            return this.push(half)
          }

          _pushFloat(obj) {
            if (this.canonical) {
              // TODO: is this enough slower to hide behind canonical?
              // It's certainly enough of a hack (see utils.parseHalf)

              // From section 3.9:
              // If a protocol allows for IEEE floats, then additional canonicalization
              // rules might need to be added.  One example rule might be to have all
              // floats start as a 64-bit float, then do a test conversion to a 32-bit
              // float; if the result is the same numeric value, use the shorter value
              // and repeat the process with a test conversion to a 16-bit float.  (This
              // rule selects 16-bit float for positive and negative Infinity as well.)

              // which seems pretty much backwards to me.
              const b2 = new Buffer(2)
              if (utils.writeHalf(b2, obj)) {
                if (utils.parseHalf(b2) === obj) {
                  return this._pushUInt8(HALF) && this.push(b2)
                }
              }
              const b4 = new Buffer(4)
              b4.writeFloatBE(obj)
              if (b4.readFloatBE() === obj) {
                return this._pushUInt8(FLOAT) && this.push(b4)
              }
            }

            return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)
          }

          _pushInt(obj, mt, orig) {
            const m = mt << 5
            switch (false) {
              case !(obj < 24):
                return this._pushUInt8(m | obj)
              case !(obj <= 0xff):
                return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)
              case !(obj <= 0xffff):
                return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)
              case !(obj <= 0xffffffff):
                return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)
              case !(obj <= Number.MAX_SAFE_INTEGER):
                return this._pushUInt8(m | NUMBYTES.EIGHT) &&
                  this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&
                  this._pushUInt32BE(obj % SHIFT32)
              default:
                if (mt === MT.NEG_INT) {
                  return this._pushFloat(orig)
                } else {
                  return this._pushFloat(obj)
                }
            }
          }

          _pushIntNum(obj) {
            if (obj < 0) {
              return this._pushInt(-obj - 1, MT.NEG_INT, obj)
            } else {
              return this._pushInt(obj, MT.POS_INT)
            }
          }

          _pushNumber(obj) {
            switch (false) {
              case !isNaN(obj):
                return this._pushNaN(obj)
              case isFinite(obj):
                return this._pushInfinity(obj)
              case Math.round(obj) !== obj:
                return this._pushIntNum(obj)
              default:
                return this._pushFloat(obj)
            }
          }

          _pushString(obj) {
            const len = Buffer.byteLength(obj, 'utf8')
            return this._pushInt(len, MT.UTF8_STRING) && this.push(obj, 'utf8')
          }

          _pushBoolean(obj) {
            return this._pushUInt8(obj ? TRUE : FALSE)
          }

          _pushUndefined(obj) {
            return this._pushUInt8(UNDEFINED)
          }

          _pushNull(obj) {
            return this._pushUInt8(NULL)
          }

          _pushArray(gen, obj) {
            const len = obj.length
            if (!gen._pushInt(len, MT.ARRAY)) {
              return false
            }
            for (let j = 0; j < len; j++) {
              if (!gen.pushAny(obj[j])) {
                return false
              }
            }
            return true
          }

          _pushTag(tag) {
            return this._pushInt(tag, MT.TAG)
          }

          _pushDate(gen, obj) {
            return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(obj / 1000)
          }

          _pushBuffer(gen, obj) {
            return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)
          }

          _pushNoFilter(gen, obj) {
            return gen._pushBuffer(gen, obj.slice())
          }

          _pushRegexp(gen, obj) {
            return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)
          }

          _pushSet(gen, obj) {
            if (!gen._pushInt(obj.size, MT.ARRAY)) {
              return false
            }
            for (let x of obj) {
              if (!gen.pushAny(x)) {
                return false
              }
            }
            return true
          }

          _pushUrl(gen, obj) {
            return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())
          }

          _pushBigint(obj) {
            let tag = TAG.POS_BIGINT
            if (obj.isNegative()) {
              obj = obj.negated().minus(1)
              tag = TAG.NEG_BIGINT
            }
            let str = obj.toString(16)
            if (str.length % 2) {
              str = '0' + str
            }
            const buf = new Buffer(str, 'hex')
            return this._pushTag(tag) && this._pushBuffer(this, buf)
          }

          _pushBigNumber(gen, obj) {
            if (obj.isNaN()) {
              return gen._pushNaN()
            }
            if (!obj.isFinite()) {
              return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)
            }
            if (obj.isInteger()) {
              return gen._pushBigint(obj)
            }
            if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&
              gen._pushInt(2, MT.ARRAY))) {
              return false
            }

            const dec = obj.decimalPlaces()
            const slide = obj.mul(new bignumber(10).pow(dec))
            if (!gen._pushIntNum(-dec)) {
              return false
            }
            if (slide.abs().lessThan(MAXINT_BN)) {
              return gen._pushIntNum(slide.toNumber())
            } else {
              return gen._pushBigint(slide)
            }
          }

          _pushMap(gen, obj) {
            if (!gen._pushInt(obj.size, MT.MAP)) {
              return false
            }
            // memoizing the cbor only helps in certain cases, and hurts in most
            // others.  Just avoid it.
            if (gen.canonical) {
              // keep the key/value pairs together, so we don't have to do odd
              // gets with object keys later
              const entries = []
              // iterator.  If we drop support for node4, use ...
              for (const e of obj.entries()) {
                entries.push(e)
              }
              entries.sort((a, b) => {
                // a, b are both entries of [key, value]
                const a_cbor = Encoder.encode(a[0])
                const b_cbor = Encoder.encode(b[0])
                return a_cbor.compare(b_cbor)
              })
              for (const kv of entries) {
                if (!(gen.pushAny(kv[0]) && gen.pushAny(kv[1]))) {
                  return false
                }
              }
            } else {
              for (const kv of obj) {
                if (!(gen.pushAny(kv[0]) && gen.pushAny(kv[1]))) {
                  return false
                }
              }
            }
            return true
          }

          _pushObject(obj) {
            if (!obj) {
              return this._pushNull(obj)
            }
            for (let i = 0, len1 = this.semanticTypes.length; i < len1; i += 2) {
              const typ = this.semanticTypes[i]
              if (obj instanceof typ) {
                return this.semanticTypes[i + 1].call(obj, this, obj)
              }
            }
            const f = obj.encodeCBOR
            if (typeof f === 'function') {
              return f.call(obj, this)
            }
            const keys = Object.keys(obj)
            const cbor_keys = {}
            if (this.canonical) {
              // note: this can't be a normal sort, because 'b' needs to sort before
              // 'aa'
              keys.sort((a, b) => {
                // Always strings, so don't bother to pass options.
                // hold on to the cbor versions, since there's no need
                // to encode more than once
                const a_cbor = cbor_keys[a] || (cbor_keys[a] = Encoder.encode(a))
                const b_cbor = cbor_keys[b] || (cbor_keys[b] = Encoder.encode(b))

                return a_cbor.compare(b_cbor)
              })
            }
            if (!this._pushInt(keys.length, MT.MAP)) {
              return false
            }
            let ck
            for (let j = 0, len2 = keys.length; j < len2; j++) {
              const k = keys[j]
              if (this.canonical && ((ck = cbor_keys[k]))) {
                if (!this.push(ck)) { // already a Buffer
                  return false
                }
              } else {
                if (!this._pushString(k)) {
                  return false
                }
              }
              if (!this.pushAny(obj[k])) {
                return false
              }
            }

            return true
          }

          /**
           * Push any supported type onto the encoded stream
           *
           * @param {any} obj
           * @returns {boolean} true on success
           */
          pushAny(obj) {
            switch (typeof obj) {
              case 'number':
                return this._pushNumber(obj)
              case 'string':
                return this._pushString(obj)
              case 'boolean':
                return this._pushBoolean(obj)
              case 'undefined':
                return this._pushUndefined(obj)
              case 'object':
                return this._pushObject(obj)
              case 'symbol':
                switch (obj) {
                  case SYMS.NULL:
                    return this._pushNull(null)
                  case SYMS.UNDEFINED:
                    return this._pushUndefined(void 0)
                  // TODO: Add pluggable support for other symbols
                  default:
                    throw new Error('Unknown symbol: ' + obj.toString())
                }
              default:
                throw new Error('Unknown type: ' + typeof obj + ', ' + (!!obj ? obj.toString() : ''))
            }
          }

          /* backwards-compat wrapper */
          _pushAny(obj) {
            // TODO: write deprecation warning
            return this.pushAny(obj)
          }

          _encodeAll(objs) {
            const bs = new NoFilter()
            this.pipe(bs)
            for (let o of objs) {
              if (typeof o === 'undefined') {
                this._pushUndefined()
              } else if (o === null) {
                this._pushNull(null)
              } else {
                this.write(o)
              }
            }
            this.end()
            return bs.read()
          }

          /**
           * Encode one or more JavaScript objects, and return a Buffer containing the
           * CBOR bytes.
           *
           * @param {...any} objs - the objects to encode
           * @returns {Buffer} - the encoded objects
           */
          static encode() {
            const objs = Array.prototype.slice.apply(arguments)
            return new Encoder()._encodeAll(objs)
          }

          /**
           * Encode one or more JavaScript objects canonically (slower!), and return
           * a Buffer containing the CBOR bytes.
           *
           * @param {...any} objs - the objects to encode
           * @returns {Buffer} - the encoded objects
           */
          static encodeCanonical() {
            const objs = Array.prototype.slice.apply(arguments)
            return new Encoder({ canonical: true })._encodeAll(objs)
          }
        }

        module.exports = Encoder

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./constants": 118, "./simple": 122, "./tagged": 123, "./utils": 124, "bignumber.js": 45, "buffer": 96, "nofilter": 126, "stream": 296, "url": 314 }], 122: [function (require, module, exports) {
    'use strict'

    const constants = require('./constants')
    const MT = constants.MT, SIMPLE = constants.SIMPLE, SYMS = constants.SYMS

    /**
     * A CBOR Simple Value that does not map onto a known constant.
     */
    class Simple {
      /**
       * Creates an instance of Simple.
       *
       * @param {integer} value - the simple value's integer value
       */
      constructor(value) {
        if (typeof value !== 'number') {
          throw new Error('Invalid Simple type: ' + (typeof value))
        }
        if ((value < 0) || (value > 255) || ((value | 0) !== value)) {
          throw new Error('value must be a small positive integer: ' + value)
        }
        this.value = value
      }

      /**
       * Debug string for simple value
       *
       * @returns {string} simple(value)
       */
      toString() {
        return 'simple(' + this.value + ')'
      }

      /**
       * Debug string for simple value
       *
       * @returns {string} simple(value)
       */
      inspect(depth, opts) {
        return 'simple(' + this.value + ')'
      }

      /**
       * Push the simple value onto the CBOR stream
       *
       * @param {cbor.Encoder} gen The generator to push onto
       */
      encodeCBOR(gen) {
        return gen._pushInt(this.value, MT.SIMPLE_FLOAT)
      }

      /**
       * Is the given object a Simple?
       *
       * @param {any} obj - object to test
       * @returns {bool} - is it Simple?
       */
      static isSimple(obj) {
        return obj instanceof Simple
      }

      /**
       * Decode from the CBOR additional information into a JavaScript value.
       * If the CBOR item has no parent, return a "safe" symbol instead of
       * `null` or `undefined`, so that the value can be passed through a
       * stream in object mode.
       *
       * @param {Number} val - the CBOR additional info to convert
       * @param {bool} has_parent - Does the CBOR item have a parent?
       * @returns {(null|undefined|Boolean|Symbol)} - the decoded value
       */
      static decode(val, has_parent) {
        if (has_parent == null) {
          has_parent = true
        }
        switch (val) {
          case SIMPLE.FALSE:
            return false
          case SIMPLE.TRUE:
            return true
          case SIMPLE.NULL:
            if (has_parent) {
              return null
            } else {
              return SYMS.NULL
            }
          case SIMPLE.UNDEFINED:
            if (has_parent) {
              return void 0
            } else {
              return SYMS.UNDEFINED
            }
          case -1:
            if (!has_parent) {
              throw new Error('Invalid BREAK')
            }
            return SYMS.BREAK
          default:
            return new Simple(val)
        }
      }
    }

    module.exports = Simple

  }, { "./constants": 118 }], 123: [function (require, module, exports) {
    'use strict'

    const bignumber = require('bignumber.js')
    const utils = require('./utils')
    const url = require('url')

    const MINUS_ONE = new bignumber(-1)
    const TEN = new bignumber(10)
    const TWO = new bignumber(2)


    /**
     * A CBOR tagged item, where the tag does not have semantics specified at the
     * moment, or those semantics threw an error during parsing. Typically this will
     * be an extension point you're not yet expecting.
     */
    class Tagged {

      /**
       * Creates an instance of Tagged.
       *
       * @param {Number} tag - the number of the tag
       * @param {any} value - the value inside the tag
       * @param {Error} err - the error that was thrown parsing the tag, or null
       */
      constructor(tag, value, err) {
        this.tag = tag
        this.value = value
        this.err = err
        if (typeof this.tag !== 'number') {
          throw new Error('Invalid tag type (' + (typeof this.tag) + ')')
        }
        if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {
          throw new Error('Tag must be a positive integer: ' + this.tag)
        }
      }

      /**
       * Convert to a String
       *
       * @returns {String} string of the form '1(2)'
       */
      toString() {
        return `${this.tag}(${JSON.stringify(this.value)})`
      }

      /**
       * Push the simple value onto the CBOR stream
       *
       * @param {cbor.Encoder} gen The generator to push onto
       */
      encodeCBOR(gen) {
        gen._pushTag(this.tag)
        return gen.pushAny(this.value)
      }

      /**
       * If we have a converter for this type, do the conversion.  Some converters
       * are built-in.  Additional ones can be passed in.  If you want to remove
       * a built-in converter, pass a converter in whose value is 'null' instead
       * of a function.
       *
       * @param {Object} converters - keys in the object are a tag number, the value
       *   is a function that takes the decoded CBOR and returns a JavaScript value
       *   of the appropriate type.  Throw an exception in the function on errors.
       * @returns {any} - the converted item
       */
      convert(converters) {
        var er, f
        f = converters != null ? converters[this.tag] : void 0
        if (typeof f !== 'function') {
          f = Tagged['_tag_' + this.tag]
          if (typeof f !== 'function') {
            return this
          }
        }
        try {
          return f.call(Tagged, this.value)
        } catch (error) {
          er = error
          this.err = er
          return this
        }
      }

      static _tag_0(v) {
        return new Date(v)
      }

      static _tag_1(v) {
        return new Date(v * 1000)
      }

      static _tag_2(v) {
        return utils.bufferToBignumber(v)
      }

      static _tag_3(v) {
        return MINUS_ONE.minus(utils.bufferToBignumber(v))
      }

      static _tag_4(v) {
        return TEN.pow(v[0]).times(v[1])
      }

      static _tag_5(v) {
        return TWO.pow(v[0]).times(v[1])
      }

      static _tag_32(v) {
        return url.parse(v)
      }

      static _tag_35(v) {
        return new RegExp(v)
      }
    }

    module.exports = Tagged

  }, { "./utils": 124, "bignumber.js": 45, "url": 314 }], 124: [function (require, module, exports) {
    (function (process, Buffer) {
      (function () {
        'use strict'

        const fs = require('fs')
        const stream = require('stream')
        const bignumber = require('bignumber.js')

        const constants = require('./constants')
        const NUMBYTES = constants.NUMBYTES
        const SHIFT32 = constants.SHIFT32
        const MAX_SAFE_HIGH = 0x1fffff

        exports.parseCBORint = function (ai, buf) {
          switch (ai) {
            case NUMBYTES.ONE:
              return buf.readUInt8(0, true)
            case NUMBYTES.TWO:
              return buf.readUInt16BE(0, true)
            case NUMBYTES.FOUR:
              return buf.readUInt32BE(0, true)
            case NUMBYTES.EIGHT:
              const f = buf.readUInt32BE(0)
              const g = buf.readUInt32BE(4)
              if (f > MAX_SAFE_HIGH) {
                return new bignumber(f).times(SHIFT32).plus(g)
              } else {
                return (f * SHIFT32) + g
              }
            default:
              throw new Error('Invalid additional info for int: ' + ai)
          }
        }

        exports.writeHalf = function writeHalf(buf, half) {
          // assume 0, -0, NaN, Infinity, and -Infinity have already been caught

          // HACK: everyone settle in.  This isn't going to be pretty.
          // Translate cn-cbor's C code (from Carsten Borman):

          // uint32_t be32;
          // uint16_t be16, u16;
          // union {
          //   float f;
          //   uint32_t u;
          // } u32;
          // u32.f = float_val;

          const u32 = new Buffer(4)
          u32.writeFloatBE(half)
          const u = u32.readUInt32BE()

          // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */

          // hildjj: If the lower 13 bits are 0,
          // we won't lose anything in the conversion
          if ((u & 0x1FFF) !== 0) {
            return false
          }

          //   int s16 = (u32.u >> 16) & 0x8000;
          //   int exp = (u32.u >> 23) & 0xff;
          //   int mant = u32.u & 0x7fffff;

          let s16 = (u >> 16) & 0x8000 // top bit is sign
          const exp = (u >> 23) & 0xff // then 5 bits of exponent
          const mant = u & 0x7fffff

          //   if (exp == 0 && mant == 0)
          //     ;              /* 0.0, -0.0 */

          // hildjj: zeros already handled.  Assert if you don't believe me.

          //   else if (exp >= 113 && exp <= 142) /* normalized */
          //     s16 += ((exp - 112) << 10) + (mant >> 13);

          if ((exp >= 113) && (exp <= 142)) {
            s16 += ((exp - 112) << 10) + (mant >> 13)
          } else if ((exp >= 103) && (exp < 113)) {
            //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */
            //     if (mant & ((1 << (126 - exp)) - 1))
            //       goto float32;         /* loss of precision */
            //     s16 += ((mant + 0x800000) >> (126 - exp));

            if (mant & ((1 << (126 - exp)) - 1)) {
              return false
            }
            s16 += ((mant + 0x800000) >> (126 - exp))
          } else {
            //   } else if (exp == 255 && mant == 0) { /* Inf */
            //     s16 += 0x7c00;

            // hildjj: Infinity already handled

            //   } else
            //     goto float32;           /* loss of range */

            return false
          }

          //   ensure_writable(3);
          //   u16 = s16;
          //   be16 = hton16p((const uint8_t*)&u16);
          buf.writeUInt16BE(s16)
          return true
        }

        exports.parseHalf = function parseHalf(buf) {
          const sign = buf[0] & 0x80 ? -1 : 1
          const exp = (buf[0] & 0x7C) >> 2
          const mant = ((buf[0] & 0x03) << 8) | buf[1]
          if (!exp) {
            return sign * 5.9604644775390625e-8 * mant
          } else if (exp === 0x1f) {
            return sign * (mant ? 0 / 0 : 2e308)
          } else {
            return sign * Math.pow(2, exp - 25) * (1024 + mant)
          }
        }

        exports.parseCBORfloat = function parseCBORfloat(buf) {
          switch (buf.length) {
            case 2:
              return exports.parseHalf(buf)
            case 4:
              return buf.readFloatBE(0, true)
            case 8:
              return buf.readDoubleBE(0, true)
            default:
              throw new Error('Invalid float size: ' + buf.length)
          }
        }

        exports.hex = function hex(s) {
          return new Buffer(s.replace(/^0x/, ''), 'hex')
        }

        exports.bin = function bin(s) {
          s = s.replace(/\s/g, '')
          let start = 0
          let end = (s.length % 8) || 8
          const chunks = []
          while (end <= s.length) {
            chunks.push(parseInt(s.slice(start, end), 2))
            start = end
            end += 8
          }
          return new Buffer(chunks)
        }

        exports.extend = function extend() {
          let old = arguments[0]
          const adds = (2 <= arguments.length) ?
            Array.prototype.slice.call(arguments, 1) : []
          const len = adds.length
          if (old == null) {
            old = {}
          }
          for (let j = 0; j < len; j++) {
            const a = adds[j]
            for (const k in a) {
              const v = a[k]
              old[k] = v
            }
          }
          return old
        }

        exports.arrayEqual = function arrayEqual(a, b) {
          if ((a == null) && (b == null)) {
            return true
          }
          if ((a == null) || (b == null)) {
            return false
          }
          return (a.length === b.length) && a.every((elem, i) => elem === b[i])
        }

        exports.bufferEqual = function bufferEqual(a, b) {
          if ((a == null) && (b == null)) {
            return true
          }
          if ((a == null) || (b == null)) {
            return false
          }
          if (!(Buffer.isBuffer(a) && Buffer.isBuffer(b) && (a.length === b.length))) {
            return false
          }
          const len = a.length
          let ret = true
          let i
          let j
          for (i = j = 0; j < len; i = ++j) {
            const byte = a[i]
            ret &= b[i] === byte
          }
          return !!ret
        }

        exports.bufferToBignumber = function bufferToBignumber(buf) {
          return new bignumber(buf.toString('hex'), 16)
        }

        exports.DeHexStream = class DeHexStream extends stream.Readable {
          constructor(hex) {
            super()
            hex = hex.replace(/^0x/, '')
            if (hex) {
              this.push(new Buffer(hex, 'hex'))
            }
            this.push(null)
          }
        }

        exports.HexStream = class HexStream extends stream.Transform {
          constructor(options) {
            super(options)
          }

          _transform(fresh, encoding, cb) {
            this.push(fresh.toString('hex'))
            return cb()
          }
        }

        function printError(er) {
          if (er != null) {
            return console.log(er)
          }
        }

        exports.streamFiles = function streamFiles(files, streamFunc, cb) {
          if (cb == null) {
            cb = printError
          }
          const f = files.shift()
          if (!f) {
            return cb()
          }
          const sf = streamFunc()
          sf.on('end', () => exports.streamFiles(files, streamFunc, cb))
          sf.on('error', cb)
          const s = (f === '-') ?
            process.stdin : (f instanceof stream.Stream) ? f : fs.createReadStream(f)
          s.on('error', cb)
          return s.pipe(sf)
        }

        exports.guessEncoding = function guessEncoding(input) {
          switch (false) {
            case typeof input !== 'string':
              return 'hex'
            case !Buffer.isBuffer(input):
              return undefined
            default:
              throw new Error('Unknown input type')
          }
        }

      }).call(this)
    }).call(this, require('_process'), require("buffer").Buffer)

  }, { "./constants": 118, "_process": 244, "bignumber.js": 45, "buffer": 96, "fs": 48, "stream": 296 }], 125: [function (require, module, exports) {
    // Tweaked version of nathan7's binary-parse-stream
    // (see https://github.com/nathan7/binary-parse-stream)
    // Uses NoFilter instead of the readable in the original.  Removes
    // the ability to read -1, which was odd and un-needed.
    // License for binary-parse-stream: MIT

    'use strict';
    exports = module.exports = BinaryParseStream
    var Stream = require('stream')
      , TransformStream = Stream.Transform
      , inherits = require('util').inherits
      , NoFilter = require('nofilter')

    exports.One = -1

    inherits(BinaryParseStream, TransformStream)
    function BinaryParseStream(options) {
      TransformStream.call(this, options)
      this._writableState.objectMode = false
      this._readableState.objectMode = true

      this.bs = new NoFilter()
      this.__restart()
    }

    BinaryParseStream.prototype._transform = function (fresh, encoding, cb) {
      var self = this
      this.bs.write(fresh)

      while (this.bs.length >= this.__needed) {
        var ret
          , chunk = this.__needed === null
            ? undefined
            : this.bs.read(this.__needed)

        try { ret = this.__parser.next(chunk) }
        catch (e) {
          return cb(e)
        }

        if (this.__needed)
          this.__fresh = false

        if (!ret.done)
          this.__needed = ret.value | 0
        else {
          this.push(ret.value)
          this.__restart()
        }
      }

      return cb()
    }

    BinaryParseStream.prototype.__restart = function () {
      this.__needed = null
      this.__parser = this._parse()
      this.__fresh = true
    }

    BinaryParseStream.prototype._flush = function (cb) {
      cb(this.__fresh
        ? null
        : new Error('unexpected end of input'))
    }

  }, { "nofilter": 126, "stream": 296, "util": 319 }], 126: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        // Generated by CoffeeScript 1.10.0
        (function () {
          var NoFilter, stream, util,
            extend = function (child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
            hasProp = {}.hasOwnProperty;

          stream = require('stream');

          util = require('util');

          module.exports = NoFilter = (function (superClass) {
            var _read_gen, _write_gen, get;

            extend(NoFilter, superClass);

            function NoFilter(input, inputEncoding, options) {
              var inp, inpE, ref, watchPipe;
              if (options == null) {
                options = {};
              }
              inp = void 0;
              inpE = void 0;
              switch (typeof input) {
                case 'object':
                  if (Buffer.isBuffer(input)) {
                    inp = input;
                    if ((inputEncoding != null) && (typeof inputEncoding === 'object')) {
                      options = inputEncoding;
                    }
                  } else {
                    options = input;
                  }
                  break;
                case 'string':
                  inp = input;
                  if ((inputEncoding != null) && (typeof inputEncoding === 'object')) {
                    options = inputEncoding;
                  } else {
                    inpE = inputEncoding;
                  }
              }
              if (options == null) {
                options = {};
              }
              if (inp == null) {
                inp = options.input;
              }
              if (inpE == null) {
                inpE = options.inputEncoding;
              }
              delete options.input;
              delete options.inputEncoding;
              watchPipe = (ref = options.watchPipe) != null ? ref : true;
              delete options.watchPipe;
              NoFilter.__super__.constructor.call(this, options);
              if (watchPipe) {
                this.on('pipe', (function (_this) {
                  return function (readable) {
                    var om;
                    om = readable._readableState.objectMode;
                    if ((_this.length > 0) && (om !== _this._readableState.objectMode)) {
                      throw new Error('Do not switch objectMode in the middle of the stream');
                    }
                    _this._readableState.objectMode = om;
                    return _this._writableState.objectMode = om;
                  };
                })(this));
              }
              if (inp != null) {
                this.end(inp, inpE);
              }
            }

            NoFilter.isNoFilter = function (obj) {
              return obj instanceof this;
            };

            NoFilter.compare = function (nf1, nf2) {
              if (!(nf1 instanceof this)) {
                throw new TypeError('Arguments must be NoFilters');
              }
              if (nf1 === nf2) {
                return 0;
              } else {
                return nf1.compare(nf2);
              }
            };

            NoFilter.concat = function (list, length) {
              var bufs;
              if (!Array.isArray(list)) {
                throw new TypeError('list argument must be an Array of NoFilters');
              }
              if ((list.length === 0) || (length === 0)) {
                return new Buffer(0);
              }
              if (length == null) {
                length = list.reduce(function (tot, nf) {
                  if (!(nf instanceof NoFilter)) {
                    throw new TypeError('list argument must be an Array of NoFilters');
                  }
                  return tot + nf.length;
                }, 0);
              }
              bufs = list.map(function (nf) {
                if (!(nf instanceof NoFilter)) {
                  throw new TypeError('list argument must be an Array of NoFilters');
                }
                if (nf._readableState.objectMode) {
                  throw new Error('NoFilter may not be in object mode for concat');
                }
                return nf.slice();
              });
              return Buffer.concat(bufs, length);
            };

            NoFilter.prototype._transform = function (chunk, encoding, callback) {
              if (!this._readableState.objectMode && !Buffer.isBuffer(chunk)) {
                chunk = new Buffer(chunk, encoding);
              }
              this.push(chunk);
              return callback();
            };

            NoFilter.prototype._bufArray = function () {
              var b, bufs;
              bufs = this._readableState.buffer;
              if (!Array.isArray(bufs)) {
                b = bufs.head;
                bufs = [];
                while (b != null) {
                  bufs.push(b.data);
                  b = b.next;
                }
              }
              return bufs;
            };

            NoFilter.prototype.read = function (size) {
              var buf;
              buf = NoFilter.__super__.read.call(this, size);
              if (buf != null) {
                this.emit('read', buf);
              }
              return buf;
            };

            NoFilter.prototype.promise = function (cb) {
              var done;
              done = false;
              return new Promise((function (_this) {
                return function (resolve, reject) {
                  _this.on('finish', function () {
                    var data;
                    data = _this.read();
                    if ((cb != null) && !done) {
                      done = true;
                      cb(null, data);
                    }
                    return resolve(data);
                  });
                  return _this.on('error', function (er) {
                    if ((cb != null) && !done) {
                      done = true;
                      cb(er);
                    }
                    return reject(er);
                  });
                };
              })(this));
            };

            NoFilter.prototype.compare = function (other) {
              if (!(other instanceof NoFilter)) {
                throw new TypeError('Arguments must be NoFilters');
              }
              if (this._readableState.objectMode || other._readableState.objectMode) {
                throw new Error('Must not be in object mode to compare');
              }
              if (this === other) {
                return 0;
              } else {
                return this.slice().compare(other.slice());
              }
            };

            NoFilter.prototype.equals = function (other) {
              return this.compare(other) === 0;
            };

            NoFilter.prototype.slice = function (start, end) {
              var b, bufs;
              if (this._readableState.objectMode) {
                return this._bufArray().slice(start, end);
              } else {
                bufs = this._bufArray();
                switch (bufs.length) {
                  case 0:
                    return new Buffer(0);
                  case 1:
                    return bufs[0].slice(start, end);
                  default:
                    b = Buffer.concat(bufs);
                    return b.slice(start, end);
                }
              }
            };

            NoFilter.prototype.get = function (index) {
              return this.slice()[index];
            };

            NoFilter.prototype.toJSON = function () {
              var b;
              b = this.slice();
              if (Buffer.isBuffer(b)) {
                return b.toJSON();
              } else {
                return b;
              }
            };

            NoFilter.prototype.toString = function (encoding, start, end) {
              return this.slice().toString(encoding, start, end);
            };

            NoFilter.prototype.inspect = function (depth, options) {
              var bufs, hex;
              bufs = this._bufArray();
              hex = bufs.map(function (b) {
                if (Buffer.isBuffer(b)) {
                  if (options != null ? options.stylize : void 0) {
                    return options.stylize(b.toString('hex'), 'string');
                  } else {
                    return b.toString('hex');
                  }
                } else {
                  return util.inspect(b, options);
                }
              }).join(', ');
              return this.constructor.name + " [" + hex + "]";
            };

            _read_gen = function (meth, len) {
              return function (val) {
                var b;
                b = this.read(len);
                if (!Buffer.isBuffer(b)) {
                  return null;
                }
                return b[meth].call(b, 0, true);
              };
            };

            _write_gen = function (meth, len) {
              return function (val) {
                var b;
                b = new Buffer(len);
                b[meth].call(b, val, 0, true);
                return this.push(b);
              };
            };

            NoFilter.prototype.writeUInt8 = _write_gen('writeUInt8', 1);

            NoFilter.prototype.writeUInt16LE = _write_gen('writeUInt16LE', 2);

            NoFilter.prototype.writeUInt16BE = _write_gen('writeUInt16BE', 2);

            NoFilter.prototype.writeUInt32LE = _write_gen('writeUInt32LE', 4);

            NoFilter.prototype.writeUInt32BE = _write_gen('writeUInt32BE', 4);

            NoFilter.prototype.writeInt8 = _write_gen('writeInt8', 1);

            NoFilter.prototype.writeInt16LE = _write_gen('writeInt16LE', 2);

            NoFilter.prototype.writeInt16BE = _write_gen('writeInt16BE', 2);

            NoFilter.prototype.writeInt32LE = _write_gen('writeInt32LE', 4);

            NoFilter.prototype.writeInt32BE = _write_gen('writeInt32BE', 4);

            NoFilter.prototype.writeFloatLE = _write_gen('writeFloatLE', 4);

            NoFilter.prototype.writeFloatBE = _write_gen('writeFloatBE', 4);

            NoFilter.prototype.writeDoubleLE = _write_gen('writeDoubleLE', 8);

            NoFilter.prototype.writeDoubleBE = _write_gen('writeDoubleBE', 8);

            NoFilter.prototype.readUInt8 = _read_gen('readUInt8', 1);

            NoFilter.prototype.readUInt16LE = _read_gen('readUInt16LE', 2);

            NoFilter.prototype.readUInt16BE = _read_gen('readUInt16BE', 2);

            NoFilter.prototype.readUInt32LE = _read_gen('readUInt32LE', 4);

            NoFilter.prototype.readUInt32BE = _read_gen('readUInt32BE', 4);

            NoFilter.prototype.readInt8 = _read_gen('readInt8', 1);

            NoFilter.prototype.readInt16LE = _read_gen('readInt16LE', 2);

            NoFilter.prototype.readInt16BE = _read_gen('readInt16BE', 2);

            NoFilter.prototype.readInt32LE = _read_gen('readInt32LE', 4);

            NoFilter.prototype.readInt32BE = _read_gen('readInt32BE', 4);

            NoFilter.prototype.readFloatLE = _read_gen('readFloatLE', 4);

            NoFilter.prototype.readFloatBE = _read_gen('readFloatBE', 4);

            NoFilter.prototype.readDoubleLE = _read_gen('readDoubleLE', 8);

            NoFilter.prototype.readDoubleBE = _read_gen('readDoubleBE', 8);

            get = function (props) {
              var getter, name, results;
              results = [];
              for (name in props) {
                getter = props[name];
                results.push(NoFilter.prototype.__defineGetter__(name, getter));
              }
              return results;
            };

            get({
              length: function () {
                return this._readableState.length;
              }
            });

            return NoFilter;

          })(stream.Transform);

        }).call(this);



      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96, "stream": 296, "util": 319 }], 127: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var elliptic = require('elliptic')
        var BN = require('bn.js')

        module.exports = function createECDH(curve) {
          return new ECDH(curve)
        }

        var aliases = {
          secp256k1: {
            name: 'secp256k1',
            byteLength: 32
          },
          secp224r1: {
            name: 'p224',
            byteLength: 28
          },
          prime256v1: {
            name: 'p256',
            byteLength: 32
          },
          prime192v1: {
            name: 'p192',
            byteLength: 24
          },
          ed25519: {
            name: 'ed25519',
            byteLength: 32
          },
          secp384r1: {
            name: 'p384',
            byteLength: 48
          },
          secp521r1: {
            name: 'p521',
            byteLength: 66
          }
        }

        aliases.p224 = aliases.secp224r1
        aliases.p256 = aliases.secp256r1 = aliases.prime256v1
        aliases.p192 = aliases.secp192r1 = aliases.prime192v1
        aliases.p384 = aliases.secp384r1
        aliases.p521 = aliases.secp521r1

        function ECDH(curve) {
          this.curveType = aliases[curve]
          if (!this.curveType) {
            this.curveType = {
              name: curve
            }
          }
          this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
          this.keys = void 0
        }

        ECDH.prototype.generateKeys = function (enc, format) {
          this.keys = this.curve.genKeyPair()
          return this.getPublicKey(enc, format)
        }

        ECDH.prototype.computeSecret = function (other, inenc, enc) {
          inenc = inenc || 'utf8'
          if (!Buffer.isBuffer(other)) {
            other = new Buffer(other, inenc)
          }
          var otherPub = this.curve.keyFromPublic(other).getPublic()
          var out = otherPub.mul(this.keys.getPrivate()).getX()
          return formatReturnValue(out, enc, this.curveType.byteLength)
        }

        ECDH.prototype.getPublicKey = function (enc, format) {
          var key = this.keys.getPublic(format === 'compressed', true)
          if (format === 'hybrid') {
            if (key[key.length - 1] % 2) {
              key[0] = 7
            } else {
              key[0] = 6
            }
          }
          return formatReturnValue(key, enc)
        }

        ECDH.prototype.getPrivateKey = function (enc) {
          return formatReturnValue(this.keys.getPrivate(), enc)
        }

        ECDH.prototype.setPublicKey = function (pub, enc) {
          enc = enc || 'utf8'
          if (!Buffer.isBuffer(pub)) {
            pub = new Buffer(pub, enc)
          }
          this.keys._importPublic(pub)
          return this
        }

        ECDH.prototype.setPrivateKey = function (priv, enc) {
          enc = enc || 'utf8'
          if (!Buffer.isBuffer(priv)) {
            priv = new Buffer(priv, enc)
          }

          var _priv = new BN(priv)
          _priv = _priv.toString(16)
          this.keys = this.curve.genKeyPair()
          this.keys._importPrivate(_priv)
          return this
        }

        function formatReturnValue(bn, enc, len) {
          if (!Array.isArray(bn)) {
            bn = bn.toArray()
          }
          var buf = new Buffer(bn)
          if (len && buf.length < len) {
            var zeros = new Buffer(len - buf.length)
            zeros.fill(0)
            buf = Buffer.concat([zeros, buf])
          }
          if (!enc) {
            return buf
          } else {
            return buf.toString(enc)
          }
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "bn.js": 46, "buffer": 96, "elliptic": 144 }], 128: [function (require, module, exports) {
    'use strict'
    var inherits = require('inherits')
    var MD5 = require('md5.js')
    var RIPEMD160 = require('ripemd160')
    var sha = require('sha.js')
    var Base = require('cipher-base')

    function Hash(hash) {
      Base.call(this, 'digest')

      this._hash = hash
    }

    inherits(Hash, Base)

    Hash.prototype._update = function (data) {
      this._hash.update(data)
    }

    Hash.prototype._final = function () {
      return this._hash.digest()
    }

    module.exports = function createHash(alg) {
      alg = alg.toLowerCase()
      if (alg === 'md5') return new MD5()
      if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

      return new Hash(sha(alg))
    }

  }, { "cipher-base": 110, "inherits": 203, "md5.js": 210, "ripemd160": 285, "sha.js": 289 }], 129: [function (require, module, exports) {
    var MD5 = require('md5.js')

    module.exports = function (buffer) {
      return new MD5().update(buffer).digest()
    }

  }, { "md5.js": 210 }], 130: [function (require, module, exports) {
    'use strict'
    var inherits = require('inherits')
    var Legacy = require('./legacy')
    var Base = require('cipher-base')
    var Buffer = require('safe-buffer').Buffer
    var md5 = require('create-hash/md5')
    var RIPEMD160 = require('ripemd160')

    var sha = require('sha.js')

    var ZEROS = Buffer.alloc(128)

    function Hmac(alg, key) {
      Base.call(this, 'digest')
      if (typeof key === 'string') {
        key = Buffer.from(key)
      }

      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

      this._alg = alg
      this._key = key
      if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
        key = hash.update(key).digest()
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }

      var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
      var opad = this._opad = Buffer.allocUnsafe(blocksize)

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }
      this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
      this._hash.update(ipad)
    }

    inherits(Hmac, Base)

    Hmac.prototype._update = function (data) {
      this._hash.update(data)
    }

    Hmac.prototype._final = function () {
      var h = this._hash.digest()
      var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
      return hash.update(this._opad).update(h).digest()
    }

    module.exports = function createHmac(alg, key) {
      alg = alg.toLowerCase()
      if (alg === 'rmd160' || alg === 'ripemd160') {
        return new Hmac('rmd160', key)
      }
      if (alg === 'md5') {
        return new Legacy(md5, key)
      }
      return new Hmac(alg, key)
    }

  }, { "./legacy": 131, "cipher-base": 110, "create-hash/md5": 129, "inherits": 203, "ripemd160": 285, "safe-buffer": 286, "sha.js": 289 }], 131: [function (require, module, exports) {
    'use strict'
    var inherits = require('inherits')
    var Buffer = require('safe-buffer').Buffer

    var Base = require('cipher-base')

    var ZEROS = Buffer.alloc(128)
    var blocksize = 64

    function Hmac(alg, key) {
      Base.call(this, 'digest')
      if (typeof key === 'string') {
        key = Buffer.from(key)
      }

      this._alg = alg
      this._key = key

      if (key.length > blocksize) {
        key = alg(key)
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }

      var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
      var opad = this._opad = Buffer.allocUnsafe(blocksize)

      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }

      this._hash = [ipad]
    }

    inherits(Hmac, Base)

    Hmac.prototype._update = function (data) {
      this._hash.push(data)
    }

    Hmac.prototype._final = function () {
      var h = this._alg(Buffer.concat(this._hash))
      return this._alg(Buffer.concat([this._opad, h]))
    }
    module.exports = Hmac

  }, { "cipher-base": 110, "inherits": 203, "safe-buffer": 286 }], 132: [function (require, module, exports) {
    'use strict'

    exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
    exports.createHash = exports.Hash = require('create-hash')
    exports.createHmac = exports.Hmac = require('create-hmac')

    var algos = require('browserify-sign/algos')
    var algoKeys = Object.keys(algos)
    var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
    exports.getHashes = function () {
      return hashes
    }

    var p = require('pbkdf2')
    exports.pbkdf2 = p.pbkdf2
    exports.pbkdf2Sync = p.pbkdf2Sync

    var aes = require('browserify-cipher')

    exports.Cipher = aes.Cipher
    exports.createCipher = aes.createCipher
    exports.Cipheriv = aes.Cipheriv
    exports.createCipheriv = aes.createCipheriv
    exports.Decipher = aes.Decipher
    exports.createDecipher = aes.createDecipher
    exports.Decipheriv = aes.Decipheriv
    exports.createDecipheriv = aes.createDecipheriv
    exports.getCiphers = aes.getCiphers
    exports.listCiphers = aes.listCiphers

    var dh = require('diffie-hellman')

    exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
    exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
    exports.getDiffieHellman = dh.getDiffieHellman
    exports.createDiffieHellman = dh.createDiffieHellman
    exports.DiffieHellman = dh.DiffieHellman

    var sign = require('browserify-sign')

    exports.createSign = sign.createSign
    exports.Sign = sign.Sign
    exports.createVerify = sign.createVerify
    exports.Verify = sign.Verify

    exports.createECDH = require('create-ecdh')

    var publicEncrypt = require('public-encrypt')

    exports.publicEncrypt = publicEncrypt.publicEncrypt
    exports.privateEncrypt = publicEncrypt.privateEncrypt
    exports.publicDecrypt = publicEncrypt.publicDecrypt
    exports.privateDecrypt = publicEncrypt.privateDecrypt

    // the least I can do is make error messages for the rest of the node.js/crypto api.
    // ;[
    //   'createCredentials'
    // ].forEach(function (name) {
    //   exports[name] = function () {
    //     throw new Error([
    //       'sorry, ' + name + ' is not implemented yet',
    //       'we accept pull requests',
    //       'https://github.com/crypto-browserify/crypto-browserify'
    //     ].join('\n'))
    //   }
    // })

    var rf = require('randomfill')

    exports.randomFill = rf.randomFill
    exports.randomFillSync = rf.randomFillSync

    exports.createCredentials = function () {
      throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
      ].join('\n'))
    }

    exports.constants = {
      'DH_CHECK_P_NOT_SAFE_PRIME': 2,
      'DH_CHECK_P_NOT_PRIME': 1,
      'DH_UNABLE_TO_CHECK_GENERATOR': 4,
      'DH_NOT_SUITABLE_GENERATOR': 8,
      'NPN_ENABLED': 1,
      'ALPN_ENABLED': 1,
      'RSA_PKCS1_PADDING': 1,
      'RSA_SSLV23_PADDING': 2,
      'RSA_NO_PADDING': 3,
      'RSA_PKCS1_OAEP_PADDING': 4,
      'RSA_X931_PADDING': 5,
      'RSA_PKCS1_PSS_PADDING': 6,
      'POINT_CONVERSION_COMPRESSED': 2,
      'POINT_CONVERSION_UNCOMPRESSED': 4,
      'POINT_CONVERSION_HYBRID': 6
    }

  }, { "browserify-cipher": 66, "browserify-sign": 74, "browserify-sign/algos": 71, "create-ecdh": 127, "create-hash": 128, "create-hmac": 130, "diffie-hellman": 139, "pbkdf2": 238, "public-encrypt": 245, "randombytes": 283, "randomfill": 284 }], 133: [function (require, module, exports) {
    'use strict';

    exports.utils = require('./des/utils');
    exports.Cipher = require('./des/cipher');
    exports.DES = require('./des/des');
    exports.CBC = require('./des/cbc');
    exports.EDE = require('./des/ede');

  }, { "./des/cbc": 134, "./des/cipher": 135, "./des/des": 136, "./des/ede": 137, "./des/utils": 138 }], 134: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    var proto = {};

    function CBCState(iv) {
      assert.equal(iv.length, 8, 'Invalid IV length');

      this.iv = new Array(8);
      for (var i = 0; i < this.iv.length; i++)
        this.iv[i] = iv[i];
    }

    function instantiate(Base) {
      function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
      }
      inherits(CBC, Base);

      var keys = Object.keys(proto);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        CBC.prototype[key] = proto[key];
      }

      CBC.create = function create(options) {
        return new CBC(options);
      };

      return CBC;
    }

    exports.instantiate = instantiate;

    proto._cbcInit = function _cbcInit() {
      var state = new CBCState(this.options.iv);
      this._cbcState = state;
    };

    proto._update = function _update(inp, inOff, out, outOff) {
      var state = this._cbcState;
      var superProto = this.constructor.super_.prototype;

      var iv = state.iv;
      if (this.type === 'encrypt') {
        for (var i = 0; i < this.blockSize; i++)
          iv[i] ^= inp[inOff + i];

        superProto._update.call(this, iv, 0, out, outOff);

        for (var i = 0; i < this.blockSize; i++)
          iv[i] = out[outOff + i];
      } else {
        superProto._update.call(this, inp, inOff, out, outOff);

        for (var i = 0; i < this.blockSize; i++)
          out[outOff + i] ^= iv[i];

        for (var i = 0; i < this.blockSize; i++)
          iv[i] = inp[inOff + i];
      }
    };

  }, { "inherits": 203, "minimalistic-assert": 212 }], 135: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');

    function Cipher(options) {
      this.options = options;

      this.type = this.options.type;
      this.blockSize = 8;
      this._init();

      this.buffer = new Array(this.blockSize);
      this.bufferOff = 0;
    }
    module.exports = Cipher;

    Cipher.prototype._init = function _init() {
      // Might be overrided
    };

    Cipher.prototype.update = function update(data) {
      if (data.length === 0)
        return [];

      if (this.type === 'decrypt')
        return this._updateDecrypt(data);
      else
        return this._updateEncrypt(data);
    };

    Cipher.prototype._buffer = function _buffer(data, off) {
      // Append data to buffer
      var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
      for (var i = 0; i < min; i++)
        this.buffer[this.bufferOff + i] = data[off + i];
      this.bufferOff += min;

      // Shift next
      return min;
    };

    Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
      this._update(this.buffer, 0, out, off);
      this.bufferOff = 0;
      return this.blockSize;
    };

    Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
      var inputOff = 0;
      var outputOff = 0;

      var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
      var out = new Array(count * this.blockSize);

      if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);

        if (this.bufferOff === this.buffer.length)
          outputOff += this._flushBuffer(out, outputOff);
      }

      // Write blocks
      var max = data.length - ((data.length - inputOff) % this.blockSize);
      for (; inputOff < max; inputOff += this.blockSize) {
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
      }

      // Queue rest
      for (; inputOff < data.length; inputOff++, this.bufferOff++)
        this.buffer[this.bufferOff] = data[inputOff];

      return out;
    };

    Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
      var inputOff = 0;
      var outputOff = 0;

      var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
      var out = new Array(count * this.blockSize);

      // TODO(indutny): optimize it, this is far from optimal
      for (; count > 0; count--) {
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
      }

      // Buffer rest of the input
      inputOff += this._buffer(data, inputOff);

      return out;
    };

    Cipher.prototype.final = function final(buffer) {
      var first;
      if (buffer)
        first = this.update(buffer);

      var last;
      if (this.type === 'encrypt')
        last = this._finalEncrypt();
      else
        last = this._finalDecrypt();

      if (first)
        return first.concat(last);
      else
        return last;
    };

    Cipher.prototype._pad = function _pad(buffer, off) {
      if (off === 0)
        return false;

      while (off < buffer.length)
        buffer[off++] = 0;

      return true;
    };

    Cipher.prototype._finalEncrypt = function _finalEncrypt() {
      if (!this._pad(this.buffer, this.bufferOff))
        return [];

      var out = new Array(this.blockSize);
      this._update(this.buffer, 0, out, 0);
      return out;
    };

    Cipher.prototype._unpad = function _unpad(buffer) {
      return buffer;
    };

    Cipher.prototype._finalDecrypt = function _finalDecrypt() {
      assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
      var out = new Array(this.blockSize);
      this._flushBuffer(out, 0);

      return this._unpad(out);
    };

  }, { "minimalistic-assert": 212 }], 136: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    var utils = require('./utils');
    var Cipher = require('./cipher');

    function DESState() {
      this.tmp = new Array(2);
      this.keys = null;
    }

    function DES(options) {
      Cipher.call(this, options);

      var state = new DESState();
      this._desState = state;

      this.deriveKeys(state, options.key);
    }
    inherits(DES, Cipher);
    module.exports = DES;

    DES.create = function create(options) {
      return new DES(options);
    };

    var shiftTable = [
      1, 1, 2, 2, 2, 2, 2, 2,
      1, 2, 2, 2, 2, 2, 2, 1
    ];

    DES.prototype.deriveKeys = function deriveKeys(state, key) {
      state.keys = new Array(16 * 2);

      assert.equal(key.length, this.blockSize, 'Invalid key length');

      var kL = utils.readUInt32BE(key, 0);
      var kR = utils.readUInt32BE(key, 4);

      utils.pc1(kL, kR, state.tmp, 0);
      kL = state.tmp[0];
      kR = state.tmp[1];
      for (var i = 0; i < state.keys.length; i += 2) {
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
      }
    };

    DES.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._desState;

      var l = utils.readUInt32BE(inp, inOff);
      var r = utils.readUInt32BE(inp, inOff + 4);

      // Initial Permutation
      utils.ip(l, r, state.tmp, 0);
      l = state.tmp[0];
      r = state.tmp[1];

      if (this.type === 'encrypt')
        this._encrypt(state, l, r, state.tmp, 0);
      else
        this._decrypt(state, l, r, state.tmp, 0);

      l = state.tmp[0];
      r = state.tmp[1];

      utils.writeUInt32BE(out, l, outOff);
      utils.writeUInt32BE(out, r, outOff + 4);
    };

    DES.prototype._pad = function _pad(buffer, off) {
      var value = buffer.length - off;
      for (var i = off; i < buffer.length; i++)
        buffer[i] = value;

      return true;
    };

    DES.prototype._unpad = function _unpad(buffer) {
      var pad = buffer[buffer.length - 1];
      for (var i = buffer.length - pad; i < buffer.length; i++)
        assert.equal(buffer[i], pad);

      return buffer.slice(0, buffer.length - pad);
    };

    DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
      var l = lStart;
      var r = rStart;

      // Apply f() x16 times
      for (var i = 0; i < state.keys.length; i += 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];

        // f(r, k)
        utils.expand(r, state.tmp, 0);

        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);

        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
      }

      // Reverse Initial Permutation
      utils.rip(r, l, out, off);
    };

    DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
      var l = rStart;
      var r = lStart;

      // Apply f() x16 times
      for (var i = state.keys.length - 2; i >= 0; i -= 2) {
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];

        // f(r, k)
        utils.expand(l, state.tmp, 0);

        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);

        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
      }

      // Reverse Initial Permutation
      utils.rip(l, r, out, off);
    };

  }, { "./cipher": 135, "./utils": 138, "inherits": 203, "minimalistic-assert": 212 }], 137: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    var Cipher = require('./cipher');
    var DES = require('./des');

    function EDEState(type, key) {
      assert.equal(key.length, 24, 'Invalid key length');

      var k1 = key.slice(0, 8);
      var k2 = key.slice(8, 16);
      var k3 = key.slice(16, 24);

      if (type === 'encrypt') {
        this.ciphers = [
          DES.create({ type: 'encrypt', key: k1 }),
          DES.create({ type: 'decrypt', key: k2 }),
          DES.create({ type: 'encrypt', key: k3 })
        ];
      } else {
        this.ciphers = [
          DES.create({ type: 'decrypt', key: k3 }),
          DES.create({ type: 'encrypt', key: k2 }),
          DES.create({ type: 'decrypt', key: k1 })
        ];
      }
    }

    function EDE(options) {
      Cipher.call(this, options);

      var state = new EDEState(this.type, this.options.key);
      this._edeState = state;
    }
    inherits(EDE, Cipher);

    module.exports = EDE;

    EDE.create = function create(options) {
      return new EDE(options);
    };

    EDE.prototype._update = function _update(inp, inOff, out, outOff) {
      var state = this._edeState;

      state.ciphers[0]._update(inp, inOff, out, outOff);
      state.ciphers[1]._update(out, outOff, out, outOff);
      state.ciphers[2]._update(out, outOff, out, outOff);
    };

    EDE.prototype._pad = DES.prototype._pad;
    EDE.prototype._unpad = DES.prototype._unpad;

  }, { "./cipher": 135, "./des": 136, "inherits": 203, "minimalistic-assert": 212 }], 138: [function (require, module, exports) {
    'use strict';

    exports.readUInt32BE = function readUInt32BE(bytes, off) {
      var res = (bytes[0 + off] << 24) |
        (bytes[1 + off] << 16) |
        (bytes[2 + off] << 8) |
        bytes[3 + off];
      return res >>> 0;
    };

    exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
      bytes[0 + off] = value >>> 24;
      bytes[1 + off] = (value >>> 16) & 0xff;
      bytes[2 + off] = (value >>> 8) & 0xff;
      bytes[3 + off] = value & 0xff;
    };

    exports.ip = function ip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }

      for (var i = 6; i >= 0; i -= 2) {
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
        }
        for (var j = 1; j <= 25; j += 8) {
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.rip = function rip(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      for (var i = 0; i < 4; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outL <<= 1;
          outL |= (inR >>> (j + i)) & 1;
          outL <<= 1;
          outL |= (inL >>> (j + i)) & 1;
        }
      }
      for (var i = 4; i < 8; i++) {
        for (var j = 24; j >= 0; j -= 8) {
          outR <<= 1;
          outR |= (inR >>> (j + i)) & 1;
          outR <<= 1;
          outR |= (inL >>> (j + i)) & 1;
        }
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.pc1 = function pc1(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      // 7, 15, 23, 31, 39, 47, 55, 63
      // 6, 14, 22, 30, 39, 47, 55, 63
      // 5, 13, 21, 29, 39, 47, 55, 63
      // 4, 12, 20, 28
      for (var i = 7; i >= 5; i--) {
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outL <<= 1;
          outL |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outL <<= 1;
        outL |= (inR >> (j + i)) & 1;
      }

      // 1, 9, 17, 25, 33, 41, 49, 57
      // 2, 10, 18, 26, 34, 42, 50, 58
      // 3, 11, 19, 27, 35, 43, 51, 59
      // 36, 44, 52, 60
      for (var i = 1; i <= 3; i++) {
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inR >> (j + i)) & 1;
        }
        for (var j = 0; j <= 24; j += 8) {
          outR <<= 1;
          outR |= (inL >> (j + i)) & 1;
        }
      }
      for (var j = 0; j <= 24; j += 8) {
        outR <<= 1;
        outR |= (inL >> (j + i)) & 1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.r28shl = function r28shl(num, shift) {
      return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
    };

    var pc2table = [
      // inL => outL
      14, 11, 17, 4, 27, 23, 25, 0,
      13, 22, 7, 18, 5, 9, 16, 24,
      2, 20, 12, 21, 1, 8, 15, 26,

      // inR => outR
      15, 4, 25, 19, 9, 1, 26, 16,
      5, 11, 23, 8, 12, 7, 17, 0,
      22, 3, 10, 14, 6, 20, 27, 24
    ];

    exports.pc2 = function pc2(inL, inR, out, off) {
      var outL = 0;
      var outR = 0;

      var len = pc2table.length >>> 1;
      for (var i = 0; i < len; i++) {
        outL <<= 1;
        outL |= (inL >>> pc2table[i]) & 0x1;
      }
      for (var i = len; i < pc2table.length; i++) {
        outR <<= 1;
        outR |= (inR >>> pc2table[i]) & 0x1;
      }

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    exports.expand = function expand(r, out, off) {
      var outL = 0;
      var outR = 0;

      outL = ((r & 1) << 5) | (r >>> 27);
      for (var i = 23; i >= 15; i -= 4) {
        outL <<= 6;
        outL |= (r >>> i) & 0x3f;
      }
      for (var i = 11; i >= 3; i -= 4) {
        outR |= (r >>> i) & 0x3f;
        outR <<= 6;
      }
      outR |= ((r & 0x1f) << 1) | (r >>> 31);

      out[off + 0] = outL >>> 0;
      out[off + 1] = outR >>> 0;
    };

    var sTable = [
      14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
      3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
      4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
      15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

      15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
      9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
      0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
      5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

      10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
      1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
      13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
      11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

      7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
      1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
      10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
      15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

      2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
      8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
      4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
      15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

      12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
      0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
      9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
      7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

      4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
      3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
      1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
      10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

      13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
      10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
      7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
      0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
    ];

    exports.substitute = function substitute(inL, inR) {
      var out = 0;
      for (var i = 0; i < 4; i++) {
        var b = (inL >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[i * 0x40 + b];

        out <<= 4;
        out |= sb;
      }
      for (var i = 0; i < 4; i++) {
        var b = (inR >>> (18 - i * 6)) & 0x3f;
        var sb = sTable[4 * 0x40 + i * 0x40 + b];

        out <<= 4;
        out |= sb;
      }
      return out >>> 0;
    };

    var permuteTable = [
      16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
      30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
    ];

    exports.permute = function permute(num) {
      var out = 0;
      for (var i = 0; i < permuteTable.length; i++) {
        out <<= 1;
        out |= (num >>> permuteTable[i]) & 0x1;
      }
      return out >>> 0;
    };

    exports.padSplit = function padSplit(num, size, group) {
      var str = num.toString(2);
      while (str.length < size)
        str = '0' + str;

      var out = [];
      for (var i = 0; i < size; i += group)
        out.push(str.slice(i, i + group));
      return out.join(' ');
    };

  }, {}], 139: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var generatePrime = require('./lib/generatePrime')
        var primes = require('./lib/primes.json')

        var DH = require('./lib/dh')

        function getDiffieHellman(mod) {
          var prime = new Buffer(primes[mod].prime, 'hex')
          var gen = new Buffer(primes[mod].gen, 'hex')

          return new DH(prime, gen)
        }

        var ENCODINGS = {
          'binary': true, 'hex': true, 'base64': true
        }

        function createDiffieHellman(prime, enc, generator, genc) {
          if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
            return createDiffieHellman(prime, 'binary', enc, generator)
          }

          enc = enc || 'binary'
          genc = genc || 'binary'
          generator = generator || new Buffer([2])

          if (!Buffer.isBuffer(generator)) {
            generator = new Buffer(generator, genc)
          }

          if (typeof prime === 'number') {
            return new DH(generatePrime(prime, generator), generator, true)
          }

          if (!Buffer.isBuffer(prime)) {
            prime = new Buffer(prime, enc)
          }

          return new DH(prime, generator, true)
        }

        exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
        exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./lib/dh": 140, "./lib/generatePrime": 141, "./lib/primes.json": 142, "buffer": 96 }], 140: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        var BN = require('bn.js');
        var MillerRabin = require('miller-rabin');
        var millerRabin = new MillerRabin();
        var TWENTYFOUR = new BN(24);
        var ELEVEN = new BN(11);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);
        var primes = require('./generatePrime');
        var randomBytes = require('randombytes');
        module.exports = DH;

        function setPublicKey(pub, enc) {
          enc = enc || 'utf8';
          if (!Buffer.isBuffer(pub)) {
            pub = new Buffer(pub, enc);
          }
          this._pub = new BN(pub);
          return this;
        }

        function setPrivateKey(priv, enc) {
          enc = enc || 'utf8';
          if (!Buffer.isBuffer(priv)) {
            priv = new Buffer(priv, enc);
          }
          this._priv = new BN(priv);
          return this;
        }

        var primeCache = {};
        function checkPrime(prime, generator) {
          var gen = generator.toString('hex');
          var hex = [gen, prime.toString(16)].join('_');
          if (hex in primeCache) {
            return primeCache[hex];
          }
          var error = 0;

          if (prime.isEven() ||
            !primes.simpleSieve ||
            !primes.fermatTest(prime) ||
            !millerRabin.test(prime)) {
            //not a prime so +1
            error += 1;

            if (gen === '02' || gen === '05') {
              // we'd be able to check the generator
              // it would fail so +8
              error += 8;
            } else {
              //we wouldn't be able to test the generator
              // so +4
              error += 4;
            }
            primeCache[hex] = error;
            return error;
          }
          if (!millerRabin.test(prime.shrn(1))) {
            //not a safe prime
            error += 2;
          }
          var rem;
          switch (gen) {
            case '02':
              if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                // unsuidable generator
                error += 8;
              }
              break;
            case '05':
              rem = prime.mod(TEN);
              if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                // prime mod 10 needs to equal 3 or 7
                error += 8;
              }
              break;
            default:
              error += 4;
          }
          primeCache[hex] = error;
          return error;
        }

        function DH(prime, generator, malleable) {
          this.setGenerator(generator);
          this.__prime = new BN(prime);
          this._prime = BN.mont(this.__prime);
          this._primeLen = prime.length;
          this._pub = undefined;
          this._priv = undefined;
          this._primeCode = undefined;
          if (malleable) {
            this.setPublicKey = setPublicKey;
            this.setPrivateKey = setPrivateKey;
          } else {
            this._primeCode = 8;
          }
        }
        Object.defineProperty(DH.prototype, 'verifyError', {
          enumerable: true,
          get: function () {
            if (typeof this._primeCode !== 'number') {
              this._primeCode = checkPrime(this.__prime, this.__gen);
            }
            return this._primeCode;
          }
        });
        DH.prototype.generateKeys = function () {
          if (!this._priv) {
            this._priv = new BN(randomBytes(this._primeLen));
          }
          this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
          return this.getPublicKey();
        };

        DH.prototype.computeSecret = function (other) {
          other = new BN(other);
          other = other.toRed(this._prime);
          var secret = other.redPow(this._priv).fromRed();
          var out = new Buffer(secret.toArray());
          var prime = this.getPrime();
          if (out.length < prime.length) {
            var front = new Buffer(prime.length - out.length);
            front.fill(0);
            out = Buffer.concat([front, out]);
          }
          return out;
        };

        DH.prototype.getPublicKey = function getPublicKey(enc) {
          return formatReturnValue(this._pub, enc);
        };

        DH.prototype.getPrivateKey = function getPrivateKey(enc) {
          return formatReturnValue(this._priv, enc);
        };

        DH.prototype.getPrime = function (enc) {
          return formatReturnValue(this.__prime, enc);
        };

        DH.prototype.getGenerator = function (enc) {
          return formatReturnValue(this._gen, enc);
        };

        DH.prototype.setGenerator = function (gen, enc) {
          enc = enc || 'utf8';
          if (!Buffer.isBuffer(gen)) {
            gen = new Buffer(gen, enc);
          }
          this.__gen = gen;
          this._gen = new BN(gen);
          return this;
        };

        function formatReturnValue(bn, enc) {
          var buf = new Buffer(bn.toArray());
          if (!enc) {
            return buf;
          } else {
            return buf.toString(enc);
          }
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "./generatePrime": 141, "bn.js": 46, "buffer": 96, "miller-rabin": 211, "randombytes": 283 }], 141: [function (require, module, exports) {
    var randomBytes = require('randombytes');
    module.exports = findPrime;
    findPrime.simpleSieve = simpleSieve;
    findPrime.fermatTest = fermatTest;
    var BN = require('bn.js');
    var TWENTYFOUR = new BN(24);
    var MillerRabin = require('miller-rabin');
    var millerRabin = new MillerRabin();
    var ONE = new BN(1);
    var TWO = new BN(2);
    var FIVE = new BN(5);
    var SIXTEEN = new BN(16);
    var EIGHT = new BN(8);
    var TEN = new BN(10);
    var THREE = new BN(3);
    var SEVEN = new BN(7);
    var ELEVEN = new BN(11);
    var FOUR = new BN(4);
    var TWELVE = new BN(12);
    var primes = null;

    function _getPrimes() {
      if (primes !== null)
        return primes;

      var limit = 0x100000;
      var res = [];
      res[0] = 2;
      for (var i = 1, k = 3; k < limit; k += 2) {
        var sqrt = Math.ceil(Math.sqrt(k));
        for (var j = 0; j < i && res[j] <= sqrt; j++)
          if (k % res[j] === 0)
            break;

        if (i !== j && res[j] <= sqrt)
          continue;

        res[i++] = k;
      }
      primes = res;
      return res;
    }

    function simpleSieve(p) {
      var primes = _getPrimes();

      for (var i = 0; i < primes.length; i++)
        if (p.modn(primes[i]) === 0) {
          if (p.cmpn(primes[i]) === 0) {
            return true;
          } else {
            return false;
          }
        }

      return true;
    }

    function fermatTest(p) {
      var red = BN.mont(p);
      return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
    }

    function findPrime(bits, gen) {
      if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) {
          return new BN([0x8c, 0x7b]);
        } else {
          return new BN([0x8c, 0x27]);
        }
      }
      gen = new BN(gen);

      var num, n2;

      while (true) {
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while (num.bitLength() > bits) {
          num.ishrn(1);
        }
        if (num.isEven()) {
          num.iadd(ONE);
        }
        if (!num.testn(1)) {
          num.iadd(TWO);
        }
        if (!gen.cmp(TWO)) {
          while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
            num.iadd(FOUR);
          }
        } else if (!gen.cmp(FIVE)) {
          while (num.mod(TEN).cmp(THREE)) {
            num.iadd(FOUR);
          }
        }
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) &&
          fermatTest(n2) && fermatTest(num) &&
          millerRabin.test(n2) && millerRabin.test(num)) {
          return num;
        }
      }

    }

  }, { "bn.js": 46, "miller-rabin": 211, "randombytes": 283 }], 142: [function (require, module, exports) {
    module.exports = {
      "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
      },
      "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
      },
      "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
      },
      "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
      },
      "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
      },
      "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
      },
      "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
      },
      "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
      }
    }
  }, {}], 143: [function (require, module, exports) {
    'use strict';

    /******************************************************************************
     * Created 2008-08-19.
     *
     * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
     *
     * Copyright (C) 2008
     *   Wyatt Baldwin <self@wyattbaldwin.com>
     *   All rights reserved
     *
     * Licensed under the MIT license.
     *
     *   http://www.opensource.org/licenses/mit-license.php
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     * THE SOFTWARE.
     *****************************************************************************/
    var dijkstra = {
      single_source_shortest_paths: function (graph, s, d) {
        // Predecessor map for each node that has been encountered.
        // node ID => predecessor node ID
        var predecessors = {};

        // Costs of shortest paths from s to all nodes encountered.
        // node ID => cost
        var costs = {};
        costs[s] = 0;

        // Costs of shortest paths from s to all nodes encountered; differs from
        // `costs` in that it provides easy access to the node that currently has
        // the known shortest path from s.
        // XXX: Do we actually need both `costs` and `open`?
        var open = dijkstra.PriorityQueue.make();
        open.push(s, 0);

        var closest,
          u, v,
          cost_of_s_to_u,
          adjacent_nodes,
          cost_of_e,
          cost_of_s_to_u_plus_cost_of_e,
          cost_of_s_to_v,
          first_visit;
        while (!open.empty()) {
          // In the nodes remaining in graph that have a known cost from s,
          // find the node, u, that currently has the shortest path from s.
          closest = open.pop();
          u = closest.value;
          cost_of_s_to_u = closest.cost;

          // Get nodes adjacent to u...
          adjacent_nodes = graph[u] || {};

          // ...and explore the edges that connect u to those nodes, updating
          // the cost of the shortest paths to any or all of those nodes as
          // necessary. v is the node across the current edge from u.
          for (v in adjacent_nodes) {
            if (adjacent_nodes.hasOwnProperty(v)) {
              // Get the cost of the edge running from u to v.
              cost_of_e = adjacent_nodes[v];

              // Cost of s to u plus the cost of u to v across e--this is *a*
              // cost from s to v that may or may not be less than the current
              // known cost to v.
              cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;

              // If we haven't visited v yet OR if the current known cost from s to
              // v is greater than the new cost we just found (cost of s to u plus
              // cost of u to v across e), update v's cost in the cost list and
              // update v's predecessor in the predecessor list (it's now u).
              cost_of_s_to_v = costs[v];
              first_visit = (typeof costs[v] === 'undefined');
              if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                costs[v] = cost_of_s_to_u_plus_cost_of_e;
                open.push(v, cost_of_s_to_u_plus_cost_of_e);
                predecessors[v] = u;
              }
            }
          }
        }

        if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
          var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
          throw new Error(msg);
        }

        return predecessors;
      },

      extract_shortest_path_from_predecessor_list: function (predecessors, d) {
        var nodes = [];
        var u = d;
        var predecessor;
        while (u) {
          nodes.push(u);
          predecessor = predecessors[u];
          u = predecessors[u];
        }
        nodes.reverse();
        return nodes;
      },

      find_path: function (graph, s, d) {
        var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
        return dijkstra.extract_shortest_path_from_predecessor_list(
          predecessors, d);
      },

      /**
       * A very naive priority queue implementation.
       */
      PriorityQueue: {
        make: function (opts) {
          var T = dijkstra.PriorityQueue,
            t = {},
            key;
          opts = opts || {};
          for (key in T) {
            if (T.hasOwnProperty(key)) {
              t[key] = T[key];
            }
          }
          t.queue = [];
          t.sorter = opts.sorter || T.default_sorter;
          return t;
        },

        default_sorter: function (a, b) {
          return a.cost - b.cost;
        },

        /**
         * Add a new item to the queue and ensure the highest priority element
         * is at the front of the queue.
         */
        push: function (value, cost) {
          var item = { value: value, cost: cost };
          this.queue.push(item);
          this.queue.sort(this.sorter);
        },

        /**
         * Return the highest priority element in the queue.
         */
        pop: function () {
          return this.queue.shift();
        },

        empty: function () {
          return this.queue.length === 0;
        }
      }
    };


    // node.js module exports
    if (typeof module !== 'undefined') {
      module.exports = dijkstra;
    }

  }, {}], 144: [function (require, module, exports) {
    'use strict';

    var elliptic = exports;

    elliptic.version = require('../package.json').version;
    elliptic.utils = require('./elliptic/utils');
    elliptic.rand = require('brorand');
    elliptic.curve = require('./elliptic/curve');
    elliptic.curves = require('./elliptic/curves');

    // Protocols
    elliptic.ec = require('./elliptic/ec');
    elliptic.eddsa = require('./elliptic/eddsa');

  }, { "../package.json": 159, "./elliptic/curve": 147, "./elliptic/curves": 150, "./elliptic/ec": 151, "./elliptic/eddsa": 154, "./elliptic/utils": 158, "brorand": 47 }], 145: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var utils = require('../utils');
    var getNAF = utils.getNAF;
    var getJSF = utils.getJSF;
    var assert = utils.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new BN(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

      // Useful for many curves
      this.zero = new BN(0).toRed(this.red);
      this.one = new BN(1).toRed(this.red);
      this.two = new BN(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new BN(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
        bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert(bytes[bytes.length - 1] % 2 === 1);

        var res = this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
        bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

      return [0x04].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

  }, { "../utils": 158, "bn.js": 46 }], 146: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');

    var assert = utils.assert;

    function EdwardsCurve(conf) {
      // NOTE: Important as we are creating point in Base.call()
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;

      Base.call(this, 'edwards', conf);

      this.a = new BN(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);

      assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;

    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };

    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };

    // Just for compatibility with Short curve
    EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
      return this.point(x, y, z, t);
    };

    EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN(y, 16);
      if (!y.red)
        y = y.toRed(this.red);

      // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());

      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error('invalid point');
        else
          return this.point(this.zero, y);
      }

      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();

      return this.point(x, y);
    };

    EdwardsCurve.prototype.validate = function validate(point) {
      if (point.isInfinity())
        return true;

      // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
      point.normalize();

      var x2 = point.x.redSqr();
      var y2 = point.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

      return lhs.cmp(rhs) === 0;
    };

    function Point(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;

        // Use extended coordinates
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point, Base.BasePoint);

    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    EdwardsCurve.prototype.point = function point(x, y, z, t) {
      return new Point(this, x, y, z, t);
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1], obj[2]);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.x.cmpn(0) === 0 &&
        (this.y.cmp(this.z) === 0 ||
          (this.zOne && this.y.cmp(this.curve.c) === 0));
    };

    Point.prototype._extDbl = function _extDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #doubling-dbl-2008-hwcd
      // 4M + 4S

      // A = X1^2
      var a = this.x.redSqr();
      // B = Y1^2
      var b = this.y.redSqr();
      // C = 2 * Z1^2
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      // D = a * A
      var d = this.curve._mulA(a);
      // E = (X1 + Y1)^2 - A - B
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      // G = D + B
      var g = d.redAdd(b);
      // F = G - C
      var f = g.redSub(c);
      // H = D - B
      var h = d.redSub(b);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projDbl = function _projDbl() {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #doubling-dbl-2008-bbjlp
      //     #doubling-dbl-2007-bl
      // and others
      // Generally 3M + 4S or 2M + 4S

      // B = (X1 + Y1)^2
      var b = this.x.redAdd(this.y).redSqr();
      // C = X1^2
      var c = this.x.redSqr();
      // D = Y1^2
      var d = this.y.redSqr();

      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
          // X3 = (B - C - D) * (F - 2)
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F^2 - 2 * F
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          // H = Z1^2
          h = this.z.redSqr();
          // J = F - 2 * H
          j = f.redSub(h).redISub(h);
          // X3 = (B-C-D)*J
          nx = b.redSub(c).redISub(d).redMul(j);
          // Y3 = F * (E - D)
          ny = f.redMul(e.redSub(d));
          // Z3 = F * J
          nz = f.redMul(j);
        }
      } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      // Double in extended coordinates
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };

    Point.prototype._extAdd = function _extAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
      //     #addition-add-2008-hwcd-3
      // 8M

      // A = (Y1 - X1) * (Y2 - X2)
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      // B = (Y1 + X1) * (Y2 + X2)
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      // C = T1 * k * T2
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      // D = Z1 * 2 * Z2
      var d = this.z.redMul(p.z.redAdd(p.z));
      // E = B - A
      var e = b.redSub(a);
      // F = D - C
      var f = d.redSub(c);
      // G = D + C
      var g = d.redAdd(c);
      // H = B + A
      var h = b.redAdd(a);
      // X3 = E * F
      var nx = e.redMul(f);
      // Y3 = G * H
      var ny = g.redMul(h);
      // T3 = E * H
      var nt = e.redMul(h);
      // Z3 = F * G
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };

    Point.prototype._projAdd = function _projAdd(p) {
      // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
      //     #addition-add-2008-bbjlp
      //     #addition-add-2007-bl
      // 10M + 1S

      // A = Z1 * Z2
      var a = this.z.redMul(p.z);
      // B = A^2
      var b = a.redSqr();
      // C = X1 * X2
      var c = this.x.redMul(p.x);
      // D = Y1 * Y2
      var d = this.y.redMul(p.y);
      // E = d * C * D
      var e = this.curve.d.redMul(c).redMul(d);
      // F = B - E
      var f = b.redSub(e);
      // G = B + E
      var g = b.redAdd(e);
      // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
      } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };

    Point.prototype.add = function add(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;

      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };

    Point.prototype.mul = function mul(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };

    Point.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;

      // Normalize coordinates
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };

    Point.prototype.neg = function neg() {
      return this.curve.point(this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg());
    };

    Point.prototype.getX = function getX() {
      this.normalize();
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      this.normalize();
      return this.y.fromRed();
    };

    Point.prototype.eq = function eq(other) {
      return this === other ||
        this.getX().cmp(other.getX()) === 0 &&
        this.getY().cmp(other.getY()) === 0;
    };

    Point.prototype.eqXToP = function eqXToP(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    // Compatibility with BaseCurve
    Point.prototype.toP = Point.prototype.normalize;
    Point.prototype.mixedAdd = Point.prototype.add;

  }, { "../utils": 158, "./base": 145, "bn.js": 46, "inherits": 203 }], 147: [function (require, module, exports) {
    'use strict';

    var curve = exports;

    curve.base = require('./base');
    curve.short = require('./short');
    curve.mont = require('./mont');
    curve.edwards = require('./edwards');

  }, { "./base": 145, "./edwards": 146, "./mont": 148, "./short": 149 }], 148: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');

    var utils = require('../utils');

    function MontCurve(conf) {
      Base.call(this, 'mont', conf);

      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.i4 = new BN(4).toRed(this.red).redInvm();
      this.two = new BN(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;

    MontCurve.prototype.validate = function validate(point) {
      var x = point.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();

      return y.redSqr().cmp(rhs) === 0;
    };

    function Point(curve, x, z) {
      Base.BasePoint.call(this, curve, 'projective');
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point, Base.BasePoint);

    MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };

    MontCurve.prototype.point = function point(x, z) {
      return new Point(this, x, z);
    };

    MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
      return Point.fromJSON(this, obj);
    };

    Point.prototype.precompute = function precompute() {
      // No-op
    };

    Point.prototype._encode = function _encode() {
      return this.getX().toArray('be', this.curve.p.byteLength());
    };

    Point.fromJSON = function fromJSON(curve, obj) {
      return new Point(curve, obj[0], obj[1] || curve.one);
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' z: ' + this.z.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    Point.prototype.dbl = function dbl() {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
      // 2M + 2S + 4A

      // A = X1 + Z1
      var a = this.x.redAdd(this.z);
      // AA = A^2
      var aa = a.redSqr();
      // B = X1 - Z1
      var b = this.x.redSub(this.z);
      // BB = B^2
      var bb = b.redSqr();
      // C = AA - BB
      var c = aa.redSub(bb);
      // X3 = AA * BB
      var nx = aa.redMul(bb);
      // Z3 = C * (BB + A24 * C)
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };

    Point.prototype.add = function add() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.diffAdd = function diffAdd(p, diff) {
      // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
      // 4M + 2S + 6A

      // A = X2 + Z2
      var a = this.x.redAdd(this.z);
      // B = X2 - Z2
      var b = this.x.redSub(this.z);
      // C = X3 + Z3
      var c = p.x.redAdd(p.z);
      // D = X3 - Z3
      var d = p.x.redSub(p.z);
      // DA = D * A
      var da = d.redMul(a);
      // CB = C * B
      var cb = c.redMul(b);
      // X5 = Z1 * (DA + CB)^2
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      // Z5 = X1 * (DA - CB)^2
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };

    Point.prototype.mul = function mul(k) {
      var t = k.clone();
      var a = this; // (N / 2) * Q + Q
      var b = this.curve.point(null, null); // (N / 2) * Q
      var c = this; // Q

      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));

      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
          a = a.diffAdd(b, c);
          // N * Q = 2 * ((N / 2) * Q + Q))
          b = b.dbl();
        } else {
          // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
          b = a.diffAdd(b, c);
          // N * Q + Q = 2 * ((N / 2) * Q + Q)
          a = a.dbl();
        }
      }
      return b;
    };

    Point.prototype.mulAdd = function mulAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.jumlAdd = function jumlAdd() {
      throw new Error('Not supported on Montgomery curve');
    };

    Point.prototype.eq = function eq(other) {
      return this.getX().cmp(other.getX()) === 0;
    };

    Point.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };

    Point.prototype.getX = function getX() {
      // Normalize coordinates
      this.normalize();

      return this.x.fromRed();
    };

  }, { "../utils": 158, "./base": 145, "bn.js": 46, "inherits": 203 }], 149: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var BN = require('bn.js');
    var inherits = require('inherits');
    var Base = require('./base');

    var assert = utils.assert;

    function ShortCurve(conf) {
      Base.call(this, 'short', conf);

      this.a = new BN(conf.a, 16).toRed(this.red);
      this.b = new BN(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve, Base);
    module.exports = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function (vec) {
          return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : BN.mont(num);
      var tinv = new BN(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN(1);
      var y1 = new BN(0);
      var x2 = new BN(0);
      var y2 = new BN(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new BN(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
      function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();

          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }

          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };

    function Point(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point, Base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function (p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];

      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      }];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
        ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new BN(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p ||
        this.inf === p.inf &&
        (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function (p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      Base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
      } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint, Base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new BN(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
        ' y: ' + this.y.toString(16, 2) +
        ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

  }, { "../utils": 158, "./base": 145, "bn.js": 46, "inherits": 203 }], 150: [function (require, module, exports) {
    'use strict';

    var curves = exports;

    var hash = require('hash.js');
    var curve = require('./curve');
    var utils = require('./utils');

    var assert = utils.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function () {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
        '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
        'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
        '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
        '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
        'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
        'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = require('./precomputed/secp256k1');
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });

  }, { "./curve": 147, "./precomputed/secp256k1": 157, "./utils": 158, "hash.js": 189 }], 151: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var HmacDRBG = require('hmac-drbg');
    var utils = require('../utils');
    var curves = require('../curves');
    var rand = require('brorand');
    var assert = utils.assert;

    var KeyPair = require('./key');
    var Signature = require('./signature');

    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert(Object.prototype.hasOwnProperty.call(curves, options),
          'Unknown curve ' + options);

        options = curves[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new KeyPair(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return KeyPair.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return KeyPair.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN(2));
      for (; ;) {
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new BN(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new BN(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
          (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature, key, enc) {
      msg = this._truncateToN(new BN(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature = new Signature(signature, 'hex');

      // Perform primitive values validation
      var r = signature.r;
      var s = signature.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
      assert((3 & j) === j, 'The recovery param is more than two bits');
      signature = new Signature(signature, enc);

      var n = this.n;
      var e = new BN(msg);
      var r = signature.r;
      var s = signature.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
      signature = new Signature(signature, enc);
      if (signature.recoveryParam !== null)
        return signature.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

  }, { "../curves": 150, "../utils": 158, "./key": 152, "./signature": 153, "bn.js": 46, "brorand": 47, "hmac-drbg": 201 }], 152: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new BN(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
          this.ec.curve.type === 'edwards') {
          assert(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
        ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };

  }, { "../utils": 158, "bn.js": 46 }], 153: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');

    var utils = require('../utils');
    var assert = utils.assert;

    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;

      if (this._importDER(options, enc))
        return;

      assert(options.r && options.s, 'Signature without r or s');
      this.r = new BN(options.r, 16);
      this.s = new BN(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new BN(r);
      this.s = new BN(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [0].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [0].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [0x02];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [0x30];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };

  }, { "../utils": 158, "bn.js": 46 }], 154: [function (require, module, exports) {
    'use strict';

    var hash = require('hash.js');
    var curves = require('../curves');
    var utils = require('../utils');
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair = require('./key');
    var Signature = require('./signature');

    function EDDSA(curve) {
      assert(curve === 'ed25519', 'only tested with ed25519 so far');

      if (!(this instanceof EDDSA))
        return new EDDSA(curve);

      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);

      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash.sha512;
    }

    module.exports = EDDSA;

    /**
    * @param {Array|String} message - message bytes
    * @param {Array|String|KeyPair} secret - secret bytes or a keypair
    * @returns {Signature} - signature
    */
    EDDSA.prototype.sign = function sign(message, secret) {
      message = parseBytes(message);
      var key = this.keyFromSecret(secret);
      var r = this.hashInt(key.messagePrefix(), message);
      var R = this.g.mul(r);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
        .mul(key.priv());
      var S = r.add(s_).umod(this.curve.n);
      return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
    };

    /**
    * @param {Array} message - message bytes
    * @param {Array|String|Signature} sig - sig bytes
    * @param {Array|String|Point|KeyPair} pub - public key
    * @returns {Boolean} - true if public key matches sig of message
    */
    EDDSA.prototype.verify = function verify(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key.pub().mul(h));
      return RplusAh.eq(SG);
    };

    EDDSA.prototype.hashInt = function hashInt() {
      var hash = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash.update(arguments[i]);
      return utils.intFromLE(hash.digest()).umod(this.curve.n);
    };

    EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
      return KeyPair.fromPublic(this, pub);
    };

    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair.fromSecret(this, secret);
    };

    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature)
        return sig;
      return new Signature(this, sig);
    };

    /**
    * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
    *
    * EDDSA defines methods for encoding and decoding points and integers. These are
    * helper convenience methods, that pass along to utility functions implied
    * parameters.
    *
    */
    EDDSA.prototype.encodePoint = function encodePoint(point) {
      var enc = point.getY().toArray('le', this.encodingLength);
      enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
      return enc;
    };

    EDDSA.prototype.decodePoint = function decodePoint(bytes) {
      bytes = utils.parseBytes(bytes);

      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
      var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };

    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray('le', this.encodingLength);
    };

    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };

    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };

  }, { "../curves": 150, "../utils": 158, "./key": 155, "./signature": 156, "hash.js": 189 }], 155: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var assert = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;

    /**
    * @param {EDDSA} eddsa - instance
    * @param {Object} params - public/private key parameters
    *
    * @param {Array<Byte>} [params.secret] - secret seed bytes
    * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
    * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
    *
    */
    function KeyPair(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }

    KeyPair.fromPublic = function fromPublic(eddsa, pub) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(eddsa, { pub: pub });
    };

    KeyPair.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair)
        return secret;
      return new KeyPair(eddsa, { secret: secret });
    };

    KeyPair.prototype.secret = function secret() {
      return this._secret;
    };

    cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });

    cachedProperty(KeyPair, 'pub', function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });

    cachedProperty(KeyPair, 'privBytes', function privBytes() {
      var eddsa = this.eddsa;
      var hash = this.hash();
      var lastIx = eddsa.encodingLength - 1;

      var a = hash.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;

      return a;
    });

    cachedProperty(KeyPair, 'priv', function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });

    cachedProperty(KeyPair, 'hash', function hash() {
      return this.eddsa.hash().update(this.secret()).digest();
    });

    cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
      return this.hash().slice(this.eddsa.encodingLength);
    });

    KeyPair.prototype.sign = function sign(message) {
      assert(this._secret, 'KeyPair can only verify');
      return this.eddsa.sign(message, this);
    };

    KeyPair.prototype.verify = function verify(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };

    KeyPair.prototype.getSecret = function getSecret(enc) {
      assert(this._secret, 'KeyPair is public only');
      return utils.encode(this.secret(), enc);
    };

    KeyPair.prototype.getPublic = function getPublic(enc) {
      return utils.encode(this.pubBytes(), enc);
    };

    module.exports = KeyPair;

  }, { "../utils": 158 }], 156: [function (require, module, exports) {
    'use strict';

    var BN = require('bn.js');
    var utils = require('../utils');
    var assert = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;

    /**
    * @param {EDDSA} eddsa - eddsa instance
    * @param {Array<Bytes>|Object} sig -
    * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
    * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
    * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
    * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
    */
    function Signature(eddsa, sig) {
      this.eddsa = eddsa;

      if (typeof sig !== 'object')
        sig = parseBytes(sig);

      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength),
        };
      }

      assert(sig.R && sig.S, 'Signature without R or S');

      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN)
        this._S = sig.S;

      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }

    cachedProperty(Signature, 'S', function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });

    cachedProperty(Signature, 'R', function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });

    cachedProperty(Signature, 'Rencoded', function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });

    cachedProperty(Signature, 'Sencoded', function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });

    Signature.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };

    Signature.prototype.toHex = function toHex() {
      return utils.encode(this.toBytes(), 'hex').toUpperCase();
    };

    module.exports = Signature;

  }, { "../utils": 158, "bn.js": 46 }], 157: [function (require, module, exports) {
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
            'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
          ],
          [
            '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
            '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
          ],
          [
            '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
            'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
          ],
          [
            '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
            '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
          ],
          [
            '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
            '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
          ],
          [
            '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
            '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
          ],
          [
            'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
            '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
          ],
          [
            '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
            'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
          ],
          [
            'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
            '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
          ],
          [
            'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
            'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
          ],
          [
            'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
            '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
          ],
          [
            '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
            '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
          ],
          [
            '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
            '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
          ],
          [
            '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
            '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
          ],
          [
            '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
            '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
          ],
          [
            '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
            '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
          ],
          [
            '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
            '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
          ],
          [
            '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
            '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
          ],
          [
            '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
            'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
          ],
          [
            'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
            '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
          ],
          [
            'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
            '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
          ],
          [
            '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
            '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
          ],
          [
            '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
            '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
          ],
          [
            'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
            '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
          ],
          [
            '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
            'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
          ],
          [
            'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
            '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
          ],
          [
            'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
            'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
          ],
          [
            'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
            '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
          ],
          [
            'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
            'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
          ],
          [
            'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
            '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
          ],
          [
            '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
            'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
          ],
          [
            '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
            '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
          ],
          [
            'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
            '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
          ],
          [
            '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
            'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
          ],
          [
            'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
            '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
          ],
          [
            'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
            '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
          ],
          [
            'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
            'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
          ],
          [
            '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
            '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
          ],
          [
            '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
            '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
          ],
          [
            '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
            'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
          ],
          [
            '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
            '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
          ],
          [
            'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
            '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
          ],
          [
            '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
            '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
          ],
          [
            '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
            'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
          ],
          [
            '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
            '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
          ],
          [
            'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
            '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
          ],
          [
            '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
            'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
          ],
          [
            'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
            'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
          ],
          [
            'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
            '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
          ],
          [
            '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
            'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
          ],
          [
            '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
            'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
          ],
          [
            'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
            '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
          ],
          [
            'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
            '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
          ],
          [
            'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
            '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
          ],
          [
            '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
            'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
          ],
          [
            '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
            '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
          ],
          [
            'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
            'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
          ],
          [
            '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
            'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
          ],
          [
            '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
            '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
          ],
          [
            '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
            '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
          ],
          [
            'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
            'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
          ],
          [
            '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
            '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
          ],
          [
            '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
            '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
          ],
          [
            'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
            '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
          ],
          [
            'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
            'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
          ],
        ],
      },
      naf: {
        wnd: 7,
        points: [
          [
            'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
            '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
          ],
          [
            '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
            'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
          ],
          [
            '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
            '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
          ],
          [
            'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
            'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
          ],
          [
            '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
            'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
          ],
          [
            'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
            'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
          ],
          [
            'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
            '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
          ],
          [
            'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
            '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
          ],
          [
            '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
            '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
          ],
          [
            '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
            '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
          ],
          [
            '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
            '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
          ],
          [
            '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
            '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
          ],
          [
            'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
            'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
          ],
          [
            'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
            '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
          ],
          [
            '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
            'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
          ],
          [
            '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
            'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
          ],
          [
            '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
            '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
          ],
          [
            '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
            '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
          ],
          [
            '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
            '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
          ],
          [
            '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
            'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
          ],
          [
            'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
            'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
          ],
          [
            '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
            '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
          ],
          [
            '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
            '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
          ],
          [
            'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
            'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
          ],
          [
            '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
            '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
          ],
          [
            'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
            'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
          ],
          [
            'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
            'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
          ],
          [
            '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
            '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
          ],
          [
            '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
            '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
          ],
          [
            '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
            '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
          ],
          [
            'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
            '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
          ],
          [
            '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
            '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
          ],
          [
            'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
            '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
          ],
          [
            '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
            'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
          ],
          [
            '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
            'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
          ],
          [
            'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
            'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
          ],
          [
            '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
            '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
          ],
          [
            '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
            'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
          ],
          [
            'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
            'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
          ],
          [
            '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
            '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
          ],
          [
            '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
            'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
          ],
          [
            '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
            '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
          ],
          [
            '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
            'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
          ],
          [
            'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
            '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
          ],
          [
            '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
            '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
          ],
          [
            '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
            'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
          ],
          [
            '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
            'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
          ],
          [
            'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
            'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
          ],
          [
            'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
            'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
          ],
          [
            '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
            '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
          ],
          [
            '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
            '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
          ],
          [
            'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
            '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
          ],
          [
            'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
            'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
          ],
          [
            '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
            '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
          ],
          [
            '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
            '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
          ],
          [
            'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
            '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
          ],
          [
            '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
            '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
          ],
          [
            'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
            'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
          ],
          [
            '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
            'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
          ],
          [
            '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
            '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
          ],
          [
            'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
            '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
          ],
          [
            'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
            '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
          ],
          [
            '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
            '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
          ],
          [
            '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
            '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
          ],
          [
            '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
            'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
          ],
          [
            '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
            'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
          ],
          [
            '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
            '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
          ],
          [
            '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
            '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
          ],
          [
            '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
            '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
          ],
          [
            '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
            'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
          ],
          [
            'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
            'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
          ],
          [
            '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
            'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
          ],
          [
            'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
            '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
          ],
          [
            'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
            '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
          ],
          [
            'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
            '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
          ],
          [
            'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
            '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
          ],
          [
            '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
            'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
          ],
          [
            '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
            '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
          ],
          [
            '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
            'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
          ],
          [
            'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
            'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
          ],
          [
            'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
            '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
          ],
          [
            'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
            'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
          ],
          [
            'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
            '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
          ],
          [
            '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
            '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
          ],
          [
            'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
            '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
          ],
          [
            'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
            '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
          ],
          [
            '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
            '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
          ],
          [
            '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
            'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
          ],
          [
            'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
            '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
          ],
          [
            'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
            '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
          ],
          [
            'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
            '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
          ],
          [
            '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
            '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
          ],
          [
            'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
            'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
          ],
          [
            '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
            'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
          ],
          [
            'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
            'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
          ],
          [
            'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
            '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
          ],
          [
            '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
            'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
          ],
          [
            'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
            '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
          ],
          [
            'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
            '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
          ],
          [
            'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
            '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
          ],
          [
            '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
            'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
          ],
          [
            '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
            'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
          ],
          [
            'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
            '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
          ],
          [
            '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
            'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
          ],
          [
            '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
            '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
          ],
          [
            '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
            'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
          ],
          [
            'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
            'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
          ],
          [
            '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
            'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
          ],
          [
            '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
            '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
          ],
          [
            '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
            'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
          ],
          [
            '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
            '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
          ],
          [
            'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
            'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
          ],
          [
            '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
            '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
          ],
          [
            'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
            '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
          ],
          [
            '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
            '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
          ],
          [
            'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
            'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
          ],
          [
            'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
            '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
          ],
          [
            'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
            'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
          ],
          [
            '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
            'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
          ],
          [
            '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
            '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
          ],
          [
            '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
            'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
          ],
          [
            '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
            '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
          ],
          [
            '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
            '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
          ],
          [
            '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
            'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
          ],
          [
            '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
            '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
          ],
          [
            '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
            '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
          ],
          [
            '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
            '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
          ],
        ],
      },
    };

  }, {}], 158: [function (require, module, exports) {
    'use strict';

    var utils = exports;
    var BN = require('bn.js');
    var minAssert = require('minimalistic-assert');
    var minUtils = require('minimalistic-crypto-utils');

    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new BN(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;


  }, { "bn.js": 46, "minimalistic-assert": 212, "minimalistic-crypto-utils": 213 }], 159: [function (require, module, exports) {
    module.exports = {
      "_from": "elliptic@^6.4.0",
      "_id": "elliptic@6.5.4",
      "_inBundle": false,
      "_integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
      "_location": "/elliptic",
      "_phantomChildren": {},
      "_requested": {
        "type": "range",
        "registry": true,
        "raw": "elliptic@^6.4.0",
        "name": "elliptic",
        "escapedName": "elliptic",
        "rawSpec": "^6.4.0",
        "saveSpec": null,
        "fetchSpec": "^6.4.0"
      },
      "_requiredBy": [
        "/browserify-sign",
        "/cose-js",
        "/create-ecdh"
      ],
      "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
      "_shasum": "da37cebd31e79a1367e941b592ed1fbebd58abbb",
      "_spec": "elliptic@^6.4.0",
      "_where": "/mnt/c/Users/andre/source/DGC/JS/DCC-green-pass-decoder/node_modules/cose-js",
      "author": {
        "name": "Fedor Indutny",
        "email": "fedor@indutny.com"
      },
      "bugs": {
        "url": "https://github.com/indutny/elliptic/issues"
      },
      "bundleDependencies": false,
      "dependencies": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      },
      "deprecated": false,
      "description": "EC cryptography",
      "devDependencies": {
        "brfs": "^2.0.2",
        "coveralls": "^3.1.0",
        "eslint": "^7.6.0",
        "grunt": "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        "istanbul": "^0.4.5",
        "mocha": "^8.0.1"
      },
      "files": [
        "lib"
      ],
      "homepage": "https://github.com/indutny/elliptic",
      "keywords": [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      "license": "MIT",
      "main": "lib/elliptic.js",
      "name": "elliptic",
      "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/indutny/elliptic.git"
      },
      "scripts": {
        "lint": "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        "test": "npm run lint && npm run unit",
        "unit": "istanbul test _mocha --reporter=spec test/index.js",
        "version": "grunt dist && git add dist/"
      },
      "version": "6.5.4"
    }

  }, {}], 160: [function (require, module, exports) {
    'use strict'

    module.exports = function encodeUtf8(input) {
      var result = []
      var size = input.length

      for (var index = 0; index < size; index++) {
        var point = input.charCodeAt(index)

        if (point >= 0xD800 && point <= 0xDBFF && size > index + 1) {
          var second = input.charCodeAt(index + 1)

          if (second >= 0xDC00 && second <= 0xDFFF) {
            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            point = (point - 0xD800) * 0x400 + second - 0xDC00 + 0x10000
            index += 1
          }
        }

        // US-ASCII
        if (point < 0x80) {
          result.push(point)
          continue
        }

        // 2-byte UTF-8
        if (point < 0x800) {
          result.push((point >> 6) | 192)
          result.push((point & 63) | 128)
          continue
        }

        // 3-byte UTF-8
        if (point < 0xD800 || (point >= 0xE000 && point < 0x10000)) {
          result.push((point >> 12) | 224)
          result.push(((point >> 6) & 63) | 128)
          result.push((point & 63) | 128)
          continue
        }

        // 4-byte UTF-8
        if (point >= 0x10000 && point <= 0x10FFFF) {
          result.push((point >> 18) | 240)
          result.push(((point >> 12) & 63) | 128)
          result.push(((point >> 6) & 63) | 128)
          result.push((point & 63) | 128)
          continue
        }

        // Invalid character
        result.push(0xEF, 0xBF, 0xBD)
      }

      return new Uint8Array(result).buffer
    }

  }, {}], 161: [function (require, module, exports) {
    'use strict';

    var GetIntrinsic = require('get-intrinsic');

    var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
    if ($gOPD) {
      try {
        $gOPD([], 'length');
      } catch (e) {
        // IE 8 has a broken gOPD
        $gOPD = null;
      }
    }

    module.exports = $gOPD;

  }, { "get-intrinsic": 167 }], 162: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    var R = typeof Reflect === 'object' ? Reflect : null
    var ReflectApply = R && typeof R.apply === 'function'
      ? R.apply
      : function ReflectApply(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      }

    var ReflectOwnKeys
    if (R && typeof R.ownKeys === 'function') {
      ReflectOwnKeys = R.ownKeys
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target)
          .concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys(target) {
        return Object.getOwnPropertyNames(target);
      };
    }

    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }

    var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
      return value !== value;
    }

    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;

    // Backwards-compat with node 0.10.x
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    var defaultMaxListeners = 10;

    function checkListener(listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }

    Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
      enumerable: true,
      get: function () {
        return defaultMaxListeners;
      },
      set: function (arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        }
        defaultMaxListeners = arg;
      }
    });

    EventEmitter.init = function () {

      if (this._events === undefined ||
        this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
      }
      this._maxListeners = n;
      return this;
    };

    function _getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };

    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = (type === 'error');

      var events = this._events;
      if (events !== undefined)
        doError = (doError && events.error === undefined);
      else if (!doError)
        return false;

      // If there is no 'error' event listener then throw.
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          // Note: The comments on the `throw` lines are intentional, they show
          // up in Node's output if this results in an unhandled exception.
          throw er; // Unhandled 'error' event
        }
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
      }

      var handler = events[type];

      if (handler === undefined)
        return false;

      if (typeof handler === 'function') {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      checkListener(listener);

      events = target._events;
      if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
          target.emit('newListener', type,
            listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
          // If we've already got an array, just append.
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }

        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          // No error code for this since it is a Warning
          // eslint-disable-next-line no-restricted-syntax
          var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' ' + String(type) + ' listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

    // Emits a 'removeListener' event if and only if the listener was removed.
    EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        checkListener(listener);

        events = this._events;
        if (events === undefined)
          return this;

        list = events[type];
        if (list === undefined)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener !== undefined)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (events === undefined)
          return this;

        // not listening for removeListener, no need to emit
        if (events.removeListener === undefined) {
          if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null);
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = Object.create(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners !== undefined) {
          // LIFO order
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

    function _listeners(target, type, unwrap) {
      var events = target._events;

      if (events === undefined)
        return [];

      var evlistener = events[type];
      if (evlistener === undefined)
        return [];

      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

      return unwrap ?
        unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function (emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events !== undefined) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener !== undefined) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function once(emitter, name) {
      return new Promise(function (resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }

        function resolver() {
          if (typeof emitter.removeListener === 'function') {
            emitter.removeListener('error', errorListener);
          }
          resolve([].slice.call(arguments));
        };

        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== 'error') {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }

    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === 'function') {
        eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
      }
    }

    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === 'function') {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === 'function') {
        // EventTarget does not have `error` event semantics like Node
        // EventEmitters, we do not listen for `error` events here.
        emitter.addEventListener(name, function wrapListener(arg) {
          // IE does not have builtin `{ once: true }` support so we
          // have to do it manually.
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }

  }, {}], 163: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer
    var MD5 = require('md5.js')

    /* eslint-disable camelcase */
    function EVP_BytesToKey(password, salt, keyBits, ivLen) {
      if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
      if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
      }

      var keyLen = keyBits / 8
      var key = Buffer.alloc(keyLen)
      var iv = Buffer.alloc(ivLen || 0)
      var tmp = Buffer.alloc(0)

      while (keyLen > 0 || ivLen > 0) {
        var hash = new MD5()
        hash.update(tmp)
        hash.update(password)
        if (salt) hash.update(salt)
        tmp = hash.digest()

        var used = 0

        if (keyLen > 0) {
          var keyStart = key.length - keyLen
          used = Math.min(keyLen, tmp.length)
          tmp.copy(key, keyStart, 0, used)
          keyLen -= used
        }

        if (used < tmp.length && ivLen > 0) {
          var ivStart = iv.length - ivLen
          var length = Math.min(ivLen, tmp.length - used)
          tmp.copy(iv, ivStart, used, used + length)
          ivLen -= length
        }
      }

      tmp.fill(0)
      return { key: key, iv: iv }
    }

    module.exports = EVP_BytesToKey

  }, { "md5.js": 210, "safe-buffer": 286 }], 164: [function (require, module, exports) {
    'use strict';

    var isCallable = require('is-callable');

    var toStr = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    var forEachArray = function forEachArray(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          if (receiver == null) {
            iterator(array[i], i, array);
          } else {
            iterator.call(receiver, array[i], i, array);
          }
        }
      }
    };

    var forEachString = function forEachString(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
          iterator(string.charAt(i), i, string);
        } else {
          iterator.call(receiver, string.charAt(i), i, string);
        }
      }
    };

    var forEachObject = function forEachObject(object, iterator, receiver) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          if (receiver == null) {
            iterator(object[k], k, object);
          } else {
            iterator.call(receiver, object[k], k, object);
          }
        }
      }
    };

    var forEach = function forEach(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
      }

      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }

      if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };

    module.exports = forEach;

  }, { "is-callable": 206 }], 165: [function (require, module, exports) {
    'use strict';

    /* eslint no-invalid-this: 1 */

    var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = '[object Function]';

    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);

      var bound;
      var binder = function () {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            args.concat(slice.call(arguments))
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(
            that,
            args.concat(slice.call(arguments))
          );
        }
      };

      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
      }

      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

      if (target.prototype) {
        var Empty = function Empty() { };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }

      return bound;
    };

  }, {}], 166: [function (require, module, exports) {
    'use strict';

    var implementation = require('./implementation');

    module.exports = Function.prototype.bind || implementation;

  }, { "./implementation": 165 }], 167: [function (require, module, exports) {
    'use strict';

    var undefined;

    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;

    // eslint-disable-next-line consistent-return
    var getEvalledConstructor = function (expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
      } catch (e) { }
    };

    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, '');
      } catch (e) {
        $gOPD = null; // this is IE 8, which has a broken gOPD
      }
    }

    var throwTypeError = function () {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD
      ? (function () {
        try {
          // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
          arguments.callee; // IE 8 does not throw here
          return throwTypeError;
        } catch (calleeThrows) {
          try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, 'callee').get;
          } catch (gOPDthrows) {
            return throwTypeError;
          }
        }
      }())
      : throwTypeError;

    var hasSymbols = require('has-symbols')();

    var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

    var needsEval = {};

    var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

    var INTRINSICS = {
      '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
      '%Array%': Array,
      '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
      '%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
      '%AsyncFromSyncIteratorPrototype%': undefined,
      '%AsyncFunction%': needsEval,
      '%AsyncGenerator%': needsEval,
      '%AsyncGeneratorFunction%': needsEval,
      '%AsyncIteratorPrototype%': needsEval,
      '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
      '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
      '%Boolean%': Boolean,
      '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
      '%Date%': Date,
      '%decodeURI%': decodeURI,
      '%decodeURIComponent%': decodeURIComponent,
      '%encodeURI%': encodeURI,
      '%encodeURIComponent%': encodeURIComponent,
      '%Error%': Error,
      '%eval%': eval, // eslint-disable-line no-eval
      '%EvalError%': EvalError,
      '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
      '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
      '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
      '%Function%': $Function,
      '%GeneratorFunction%': needsEval,
      '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
      '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
      '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
      '%isFinite%': isFinite,
      '%isNaN%': isNaN,
      '%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
      '%JSON%': typeof JSON === 'object' ? JSON : undefined,
      '%Map%': typeof Map === 'undefined' ? undefined : Map,
      '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
      '%Math%': Math,
      '%Number%': Number,
      '%Object%': Object,
      '%parseFloat%': parseFloat,
      '%parseInt%': parseInt,
      '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
      '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
      '%RangeError%': RangeError,
      '%ReferenceError%': ReferenceError,
      '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
      '%RegExp%': RegExp,
      '%Set%': typeof Set === 'undefined' ? undefined : Set,
      '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
      '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
      '%String%': String,
      '%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
      '%Symbol%': hasSymbols ? Symbol : undefined,
      '%SyntaxError%': $SyntaxError,
      '%ThrowTypeError%': ThrowTypeError,
      '%TypedArray%': TypedArray,
      '%TypeError%': $TypeError,
      '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
      '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
      '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
      '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
      '%URIError%': URIError,
      '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
      '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
      '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
    };

    var doEval = function doEval(name) {
      var value;
      if (name === '%AsyncFunction%') {
        value = getEvalledConstructor('async function () {}');
      } else if (name === '%GeneratorFunction%') {
        value = getEvalledConstructor('function* () {}');
      } else if (name === '%AsyncGeneratorFunction%') {
        value = getEvalledConstructor('async function* () {}');
      } else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');
        if (gen) {
          value = getProto(gen.prototype);
        }
      }

      INTRINSICS[name] = value;

      return value;
    };

    var LEGACY_ALIASES = {
      '%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
      '%ArrayPrototype%': ['Array', 'prototype'],
      '%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
      '%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
      '%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
      '%ArrayProto_values%': ['Array', 'prototype', 'values'],
      '%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
      '%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
      '%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
      '%BooleanPrototype%': ['Boolean', 'prototype'],
      '%DataViewPrototype%': ['DataView', 'prototype'],
      '%DatePrototype%': ['Date', 'prototype'],
      '%ErrorPrototype%': ['Error', 'prototype'],
      '%EvalErrorPrototype%': ['EvalError', 'prototype'],
      '%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
      '%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
      '%FunctionPrototype%': ['Function', 'prototype'],
      '%Generator%': ['GeneratorFunction', 'prototype'],
      '%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
      '%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
      '%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
      '%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
      '%JSONParse%': ['JSON', 'parse'],
      '%JSONStringify%': ['JSON', 'stringify'],
      '%MapPrototype%': ['Map', 'prototype'],
      '%NumberPrototype%': ['Number', 'prototype'],
      '%ObjectPrototype%': ['Object', 'prototype'],
      '%ObjProto_toString%': ['Object', 'prototype', 'toString'],
      '%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
      '%PromisePrototype%': ['Promise', 'prototype'],
      '%PromiseProto_then%': ['Promise', 'prototype', 'then'],
      '%Promise_all%': ['Promise', 'all'],
      '%Promise_reject%': ['Promise', 'reject'],
      '%Promise_resolve%': ['Promise', 'resolve'],
      '%RangeErrorPrototype%': ['RangeError', 'prototype'],
      '%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
      '%RegExpPrototype%': ['RegExp', 'prototype'],
      '%SetPrototype%': ['Set', 'prototype'],
      '%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
      '%StringPrototype%': ['String', 'prototype'],
      '%SymbolPrototype%': ['Symbol', 'prototype'],
      '%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
      '%TypedArrayPrototype%': ['TypedArray', 'prototype'],
      '%TypeErrorPrototype%': ['TypeError', 'prototype'],
      '%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
      '%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
      '%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
      '%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
      '%URIErrorPrototype%': ['URIError', 'prototype'],
      '%WeakMapPrototype%': ['WeakMap', 'prototype'],
      '%WeakSetPrototype%': ['WeakSet', 'prototype']
    };

    var bind = require('function-bind');
    var hasOwn = require('has');
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);

    /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
    var stringToPath = function stringToPath(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === '%' && last !== '%') {
        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
      } else if (last === '%' && first !== '%') {
        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
      }
      var result = [];
      $replace(string, rePropName, function (match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
      });
      return result;
    };
    /* end adaptation */

    var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
      }

      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === 'undefined' && !allowMissing) {
          throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        }

        return {
          alias: alias,
          name: intrinsicName,
          value: value
        };
      }

      throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
    };

    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== 'string' || name.length === 0) {
        throw new $TypeError('intrinsic name must be a non-empty string');
      }
      if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }

      if ($exec(/^%?[^%]*%?$/g, name) === null) {
        throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

      var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;

      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }

      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if (
          (
            (first === '"' || first === "'" || first === '`')
            || (last === '"' || last === "'" || last === '`')
          )
          && first !== last
        ) {
          throw new $SyntaxError('property names with quotes must have matching quotes');
        }
        if (part === 'constructor' || !isOwn) {
          skipFurtherCaching = true;
        }

        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';

        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
            }
            return void undefined;
          }
          if ($gOPD && (i + 1) >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;

            // By convention, when a data property is converted to an accessor
            // property to emulate a data property that does not suffer from
            // the override mistake, that accessor's getter is marked with
            // an `originalValue` property. Here, when we detect this, we
            // uphold the illusion by pretending to see that original data
            // property, i.e., returning the value rather than the getter
            // itself.
            if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }

          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };

  }, { "function-bind": 166, "has": 171, "has-symbols": 168 }], 168: [function (require, module, exports) {
    'use strict';

    var origSymbol = typeof Symbol !== 'undefined' && Symbol;
    var hasSymbolSham = require('./shams');

    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== 'function') { return false; }
      if (typeof Symbol !== 'function') { return false; }
      if (typeof origSymbol('foo') !== 'symbol') { return false; }
      if (typeof Symbol('bar') !== 'symbol') { return false; }

      return hasSymbolSham();
    };

  }, { "./shams": 169 }], 169: [function (require, module, exports) {
    'use strict';

    /* eslint complexity: [2, 18], max-statements: [2, 33] */
    module.exports = function hasSymbols() {
      if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
      if (typeof Symbol.iterator === 'symbol') { return true; }

      var obj = {};
      var sym = Symbol('test');
      var symObj = Object(sym);
      if (typeof sym === 'string') { return false; }

      if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
      if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

      // temp disabled per https://github.com/ljharb/object.assign/issues/17
      // if (sym instanceof Symbol) { return false; }
      // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
      // if (!(symObj instanceof Symbol)) { return false; }

      // if (typeof Symbol.prototype.toString !== 'function') { return false; }
      // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
      if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

      if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) { return false; }

      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

      if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
      }

      return true;
    };

  }, {}], 170: [function (require, module, exports) {
    'use strict';

    var hasSymbols = require('has-symbols/shams');

    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };

  }, { "has-symbols/shams": 169 }], 171: [function (require, module, exports) {
    'use strict';

    var bind = require('function-bind');

    module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

  }, { "function-bind": 166 }], 172: [function (require, module, exports) {
    'use strict'
    var Buffer = require('safe-buffer').Buffer
    var Transform = require('readable-stream').Transform
    var inherits = require('inherits')

    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer.isBuffer(val) && typeof val !== 'string') {
        throw new TypeError(prefix + ' must be a string or a buffer')
      }
    }

    function HashBase(blockSize) {
      Transform.call(this)

      this._block = Buffer.allocUnsafe(blockSize)
      this._blockSize = blockSize
      this._blockOffset = 0
      this._length = [0, 0, 0, 0]

      this._finalized = false
    }

    inherits(HashBase, Transform)

    HashBase.prototype._transform = function (chunk, encoding, callback) {
      var error = null
      try {
        this.update(chunk, encoding)
      } catch (err) {
        error = err
      }

      callback(error)
    }

    HashBase.prototype._flush = function (callback) {
      var error = null
      try {
        this.push(this.digest())
      } catch (err) {
        error = err
      }

      callback(error)
    }

    HashBase.prototype.update = function (data, encoding) {
      throwIfNotStringOrBuffer(data, 'Data')
      if (this._finalized) throw new Error('Digest already called')
      if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

      // consume data
      var block = this._block
      var offset = 0
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
        this._update()
        this._blockOffset = 0
      }
      while (offset < data.length) block[this._blockOffset++] = data[offset++]

      // update length
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry
        carry = (this._length[j] / 0x0100000000) | 0
        if (carry > 0) this._length[j] -= 0x0100000000 * carry
      }

      return this
    }

    HashBase.prototype._update = function () {
      throw new Error('_update is not implemented')
    }

    HashBase.prototype.digest = function (encoding) {
      if (this._finalized) throw new Error('Digest already called')
      this._finalized = true

      var digest = this._digest()
      if (encoding !== undefined) digest = digest.toString(encoding)

      // reset state
      this._block.fill(0)
      this._blockOffset = 0
      for (var i = 0; i < 4; ++i) this._length[i] = 0

      return digest
    }

    HashBase.prototype._digest = function () {
      throw new Error('_digest is not implemented')
    }

    module.exports = HashBase

  }, { "inherits": 203, "readable-stream": 187, "safe-buffer": 188 }], 173: [function (require, module, exports) {
    arguments[4][78][0].apply(exports, arguments)
  }, { "dup": 78 }], 174: [function (require, module, exports) {
    (function (process) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.
        'use strict';
        /*<replacement>*/

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            keys.push(key);
          }

          return keys;
        };
        /*</replacement>*/


        module.exports = Duplex;

        var Readable = require('./_stream_readable');

        var Writable = require('./_stream_writable');

        require('inherits')(Duplex, Readable);

        {
          // Allow the keys array to be GC'ed.
          var keys = objectKeys(Writable.prototype);

          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
          }
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);
          Readable.call(this, options);
          Writable.call(this, options);
          this.allowHalfOpen = true;

          if (options) {
            if (options.readable === false) this.readable = false;
            if (options.writable === false) this.writable = false;

            if (options.allowHalfOpen === false) {
              this.allowHalfOpen = false;
              this.once('end', onend);
            }
          }
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        }); // the no-half-open enforcer

        function onend() {
          // If the writable side ended, then we're ok.
          if (this._writableState.ended) return; // no more data can be written.
          // But allow more writes to happen in this tick.

          process.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined || this._writableState === undefined) {
              return false;
            }

            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (this._readableState === undefined || this._writableState === undefined) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });
      }).call(this)
    }).call(this, require('_process'))

  }, { "./_stream_readable": 176, "./_stream_writable": 178, "_process": 244, "inherits": 203 }], 175: [function (require, module, exports) {
    arguments[4][80][0].apply(exports, arguments)
  }, { "./_stream_transform": 177, "dup": 80, "inherits": 203 }], 176: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        'use strict';

        module.exports = Readable;
        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = require('events').EventEmitter;

        var EElistenerCount = function EElistenerCount(emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () { };

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*<replacement>*/


        var debugUtil = require('util');

        var debug;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function debug() { };
        }
        /*</replacement>*/


        var BufferList = require('./internal/streams/buffer_list');

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
          getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
          ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
          ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


        var StringDecoder;
        var createReadableStreamAsyncIterator;
        var from;

        require('inherits')(Readable, Stream);

        var errorOrDestroy = destroyImpl.errorOrDestroy;
        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.

          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;
          this.paused = true; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

          this.autoDestroy = !!options.autoDestroy; // has it been destroyed

          this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || require('./_stream_duplex');
          if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
          // the ReadableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          this._readableState = new ReadableState(options, this, isDuplex); // legacy

          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined) {
              return false;
            }

            return this._readableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;

        Readable.prototype._destroy = function (err, cb) {
          cb(err);
        }; // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;

              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }

              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          debug('readableAddChunk', chunk);
          var state = stream._readableState;

          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);

            if (er) {
              errorOrDestroy(stream, er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()); else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
              } else if (state.destroyed) {
                return false;
              } else {
                state.reading = false;

                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
              maybeReadMore(stream, state);
            }
          } // We can push more data if we are below the highWaterMark.
          // Also, if we have no data yet, we can stand some more bytes.
          // This is to work around cases where hwm=0, such as the repl.


          return !state.ended && (state.length < state.highWaterMark || state.length === 0);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            state.awaitDrain = 0;
            stream.emit('data', chunk);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }

          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;

          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
          }

          return er;
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        }; // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          var decoder = new StringDecoder(enc);
          this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

          this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

          var p = this._readableState.buffer.head;
          var content = '';

          while (p !== null) {
            content += decoder.write(p.data);
            p = p.next;
          }

          this._readableState.buffer.clear();

          if (content !== '') this._readableState.buffer.push(content);
          this._readableState.length = content.length;
          return this;
        }; // Don't raise the hwm > 1GB


        var MAX_HWM = 0x40000000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state); else ret = null;

          if (ret === null) {
            state.needReadable = state.length <= state.highWaterMark;
            n = 0;
          } else {
            state.length -= n;
            state.awaitDrain = 0;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function onEofChunk(stream, state) {
          debug('onEofChunk');
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true;

          if (state.sync) {
            // if we are sync, wait until next tick to emit the data.
            // Otherwise we risk emitting data in the flow()
            // the readable code triggers during a read() call
            emitReadable(stream);
          } else {
            // emit 'readable' now to make sure it gets picked up.
            state.needReadable = false;

            if (!state.emittedReadable) {
              state.emittedReadable = true;
              emitReadable_(stream);
            }
          }
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          debug('emitReadable', state.needReadable, state.emittedReadable);
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            process.nextTick(emitReadable_, stream);
          }
        }

        function emitReadable_(stream) {
          var state = stream._readableState;
          debug('emitReadable_', state.destroyed, state.length, state.ended);

          if (!state.destroyed && (state.length || state.ended)) {
            stream.emit('readable');
            state.emittedReadable = false;
          } // The stream needs another readable event if
          // 1. It is not flowing, as the flow mechanism will take
          //    care of it.
          // 2. It is not ended.
          // 3. It is below the highWaterMark, so we can schedule
          //    another readable later.


          state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            process.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          // Attempt to read more data if we should.
          //
          // The conditions for reading more data are (one of):
          // - Not enough data buffered (state.length < state.highWaterMark). The loop
          //   is responsible for filling the buffer with enough data if such data
          //   is available. If highWaterMark is 0 and we are not in the flowing mode
          //   we should _not_ attempt to buffer any extra data. We'll get more data
          //   when the stream consumer calls read() instead.
          // - No data in the buffer, and the stream is in flowing mode. In this mode
          //   the loop below is responsible for ensuring read() is called. Failing to
          //   call read here would abort the flow and there's no other mechanism for
          //   continuing the flow if the stream consumer has just subscribed to the
          //   'data' event.
          //
          // In addition to the above conditions to keep reading data, the following
          // conditions prevent the data from being read:
          // - The stream has ended (state.ended).
          // - There is already a pending 'read' operation (state.reading). This is a
          //   case where the the stream has called the implementation defined _read()
          //   method, but they are processing the call asynchronously and have _not_
          //   called push() with new data. In this case we skip performing more
          //   read()s. The execution ends in this method again after the _read() ends
          //   up calling push() with more data.
          while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
            var len = state.length;
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) process.nextTick(endFn); else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');

            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          }

          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            var ret = dest.write(chunk);
            debug('dest.write', ret);

            if (ret === false) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function pipeOnDrainFunctionResult() {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          }; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, {
                hasUnpiped: false
              });
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this, unpipeInfo);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);
          var state = this._readableState;

          if (ev === 'data') {
            // update readableListening so that resume() may be a no-op
            // a few lines down. This is needed to support once('readable').
            state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

            if (state.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.flowing = false;
              state.emittedReadable = false;
              debug('on readable', state.length, state.reading);

              if (state.length) {
                emitReadable(this);
              } else if (!state.reading) {
                process.nextTick(nReadingNextTick, this);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        Readable.prototype.removeListener = function (ev, fn) {
          var res = Stream.prototype.removeListener.call(this, ev, fn);

          if (ev === 'readable') {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        Readable.prototype.removeAllListeners = function (ev) {
          var res = Stream.prototype.removeAllListeners.apply(this, arguments);

          if (ev === 'readable' || ev === undefined) {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        function updateReadableListening(self) {
          var state = self._readableState;
          state.readableListening = self.listenerCount('readable') > 0;

          if (state.resumeScheduled && !state.paused) {
            // flowing needs to be set to true now, otherwise
            // the upcoming resume will not flow.
            state.flowing = true; // crude way to check if we should resume
          } else if (self.listenerCount('data') > 0) {
            self.resume();
          }
        }

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume'); // we flow only if there is no one listening
            // for readable, but we still have to call
            // resume()

            state.flowing = !state.readableListening;
            resume(this, state);
          }

          state.paused = false;
          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            process.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          debug('resume', state.reading);

          if (!state.reading) {
            stream.read(0);
          }

          state.resumeScheduled = false;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (this._readableState.flowing !== false) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          this._readableState.paused = true;
          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {
            ;
          }
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function methodWrap(method) {
                return function methodWrapReturnFunction() {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          } // when we try to consume some more bytes, simply unpause the
          // underlying stream.


          this._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        if (typeof Symbol === 'function') {
          Readable.prototype[Symbol.asyncIterator] = function () {
            if (createReadableStreamAsyncIterator === undefined) {
              createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
            }

            return createReadableStreamAsyncIterator(this);
          };
        }

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState && this._readableState.buffer;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableFlowing', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.flowing;
          },
          set: function set(state) {
            if (this._readableState) {
              this._readableState.flowing = state;
            }
          }
        }); // exposed for testing purposes only.

        Readable._fromList = fromList;
        Object.defineProperty(Readable.prototype, 'readableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.length;
          }
        }); // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.first(); else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = state.buffer.consume(n, state.decoder);
          }
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState;
          debug('endReadable', state.endEmitted);

          if (!state.endEmitted) {
            state.ended = true;
            process.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');

            if (state.autoDestroy) {
              // In case of duplex streams we need a way to detect
              // if the writable side is ready for autoDestroy as well
              var wState = stream._writableState;

              if (!wState || wState.autoDestroy && wState.finished) {
                stream.destroy();
              }
            }
          }
        }

        if (typeof Symbol === 'function') {
          Readable.from = function (iterable, opts) {
            if (from === undefined) {
              from = require('./internal/streams/from');
            }

            return from(Readable, iterable, opts);
          };
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "../errors": 173, "./_stream_duplex": 174, "./internal/streams/async_iterator": 179, "./internal/streams/buffer_list": 180, "./internal/streams/destroy": 181, "./internal/streams/from": 183, "./internal/streams/state": 185, "./internal/streams/stream": 186, "_process": 244, "buffer": 96, "events": 162, "inherits": 203, "string_decoder/": 311, "util": 48 }], 177: [function (require, module, exports) {
    arguments[4][82][0].apply(exports, arguments)
  }, { "../errors": 173, "./_stream_duplex": 174, "dup": 82, "inherits": 203 }], 178: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';

        module.exports = Writable;
        /* <replacement> */

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var internalUtil = {
          deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () { };

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
          getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
          ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
          ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
          ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
          ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
          ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
          ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

        var errorOrDestroy = destroyImpl.errorOrDestroy;

        require('inherits')(Writable, Stream);

        function nop() { }

        function WritableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream,
          // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

          this.finalCalled = false; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // has it been destroyed

          this.destroyed = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

          this.autoDestroy = !!options.autoDestroy; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) { }
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance(object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.
          // Checking for a Stream.Duplex instance is faster here instead of inside
          // the WritableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
          this._writableState = new WritableState(options, this, isDuplex); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
        };

        function writeAfterEnd(stream, cb) {
          var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var er;

          if (chunk === null) {
            er = new ERR_STREAM_NULL_VALUES();
          } else if (typeof chunk !== 'string' && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
          }

          if (er) {
            errorOrDestroy(stream, er);
            process.nextTick(cb, er);
            return false;
          }

          return true;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;

          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ending) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          this._writableState.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }

          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }); // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.

        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);

            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write')); else if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            process.nextTick(cb, er); // this can emit finish, and it will always happen
            // after error

            process.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er); // this can emit finish, but finish must
            // always follow error

            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb); else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state) || stream.destroyed;

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              process.nextTick(afterWrite, stream, state, finished, cb);
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;

            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }

            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }

            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending) endWritable(this, state, cb);
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        });

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;

            if (err) {
              errorOrDestroy(stream, err);
            }

            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }

        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function' && !state.destroyed) {
              state.pendingcb++;
              state.finalCalled = true;
              process.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            prefinish(stream, state);

            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');

              if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;

                if (!rState || rState.autoDestroy && rState.endEmitted) {
                  stream.destroy();
                }
              }
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) process.nextTick(cb); else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;

          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          } // reuse the free corkReq.


          state.corkedRequestsFree.next = corkReq;
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._writableState === undefined) {
              return false;
            }

            return this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;

        Writable.prototype._destroy = function (err, cb) {
          cb(err);
        };
      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "../errors": 173, "./_stream_duplex": 174, "./internal/streams/destroy": 181, "./internal/streams/state": 185, "./internal/streams/stream": 186, "_process": 244, "buffer": 96, "inherits": 203, "util-deprecate": 316 }], 179: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict';

        var _Object$setPrototypeO;

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        var finished = require('./end-of-stream');

        var kLastResolve = Symbol('lastResolve');
        var kLastReject = Symbol('lastReject');
        var kError = Symbol('error');
        var kEnded = Symbol('ended');
        var kLastPromise = Symbol('lastPromise');
        var kHandlePromise = Symbol('handlePromise');
        var kStream = Symbol('stream');

        function createIterResult(value, done) {
          return {
            value: value,
            done: done
          };
        }

        function readAndResolve(iter) {
          var resolve = iter[kLastResolve];

          if (resolve !== null) {
            var data = iter[kStream].read(); // we defer if data is null
            // we can be expecting either 'end' or
            // 'error'

            if (data !== null) {
              iter[kLastPromise] = null;
              iter[kLastResolve] = null;
              iter[kLastReject] = null;
              resolve(createIterResult(data, false));
            }
          }
        }

        function onReadable(iter) {
          // we wait for the next tick, because it might
          // emit an error with process.nextTick
          process.nextTick(readAndResolve, iter);
        }

        function wrapForNext(lastPromise, iter) {
          return function (resolve, reject) {
            lastPromise.then(function () {
              if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
              }

              iter[kHandlePromise](resolve, reject);
            }, reject);
          };
        }

        var AsyncIteratorPrototype = Object.getPrototypeOf(function () { });
        var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },

          next: function next() {
            var _this = this;

            // if we have detected an error in the meanwhile
            // reject straight away
            var error = this[kError];

            if (error !== null) {
              return Promise.reject(error);
            }

            if (this[kEnded]) {
              return Promise.resolve(createIterResult(undefined, true));
            }

            if (this[kStream].destroyed) {
              // We need to defer via nextTick because if .destroy(err) is
              // called, the error will be emitted via nextTick, and
              // we cannot guarantee that there is no error lingering around
              // waiting to be emitted.
              return new Promise(function (resolve, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve(createIterResult(undefined, true));
                  }
                });
              });
            } // if we have multiple next() calls
            // we will wait for the previous Promise to finish
            // this logic is optimized to support for await loops,
            // where next() is only called once at a time


            var lastPromise = this[kLastPromise];
            var promise;

            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              // fast path needed to support multiple this.push()
              // without triggering the next() queue
              var data = this[kStream].read();

              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }

              promise = new Promise(this[kHandlePromise]);
            }

            this[kLastPromise] = promise;
            return promise;
          }
        }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
          return this;
        }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this;

          // destroy(err, cb) is a private API
          // we can guarantee we have that here, because we control the
          // Readable class this is attached to
          return new Promise(function (resolve, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err);
                return;
              }

              resolve(createIterResult(undefined, true));
            });
          });
        }), _Object$setPrototypeO), AsyncIteratorPrototype);

        var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
          var _Object$create;

          var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true
          }), _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kError, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true
          }), _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read();

              if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
              } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
              }
            },
            writable: true
          }), _Object$create));
          iterator[kLastPromise] = null;
          finished(stream, function (err) {
            if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
              var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
              // returned by next() and store the error

              if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
              }

              iterator[kError] = err;
              return;
            }

            var resolve = iterator[kLastResolve];

            if (resolve !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(undefined, true));
            }

            iterator[kEnded] = true;
          });
          stream.on('readable', onReadable.bind(null, iterator));
          return iterator;
        };

        module.exports = createReadableStreamAsyncIterator;
      }).call(this)
    }).call(this, require('_process'))

  }, { "./end-of-stream": 182, "_process": 244 }], 180: [function (require, module, exports) {
    arguments[4][85][0].apply(exports, arguments)
  }, { "buffer": 96, "dup": 85, "util": 48 }], 181: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict'; // undocumented cb() API, needed for core, not for public API

        function destroy(err, cb) {
          var _this = this;

          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;

          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err) {
              if (!this._writableState) {
                process.nextTick(emitErrorNT, this, err);
              } else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
              }
            }

            return this;
          } // we set destroyed to true before firing error callbacks in order
          // to make it re-entrance safe in case destroy() is called within callbacks


          if (this._readableState) {
            this._readableState.destroyed = true;
          } // if this is a duplex stream mark the writable part as destroyed as well


          if (this._writableState) {
            this._writableState.destroyed = true;
          }

          this._destroy(err || null, function (err) {
            if (!cb && err) {
              if (!_this._writableState) {
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else {
                process.nextTick(emitCloseNT, _this);
              }
            } else if (cb) {
              process.nextTick(emitCloseNT, _this);
              cb(err);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          });

          return this;
        }

        function emitErrorAndCloseNT(self, err) {
          emitErrorNT(self, err);
          emitCloseNT(self);
        }

        function emitCloseNT(self) {
          if (self._writableState && !self._writableState.emitClose) return;
          if (self._readableState && !self._readableState.emitClose) return;
          self.emit('close');
        }

        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }

          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }

        function emitErrorNT(self, err) {
          self.emit('error', err);
        }

        function errorOrDestroy(stream, err) {
          // We have tests that rely on errors being emitted
          // in the same tick, so changing this is semver major.
          // For now when you opt-in to autoDestroy we allow
          // the error to be emitted nextTick. In a future
          // semver major update we should change the default to this.
          var rState = stream._readableState;
          var wState = stream._writableState;
          if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err); else stream.emit('error', err);
        }

        module.exports = {
          destroy: destroy,
          undestroy: undestroy,
          errorOrDestroy: errorOrDestroy
        };
      }).call(this)
    }).call(this, require('_process'))

  }, { "_process": 244 }], 182: [function (require, module, exports) {
    arguments[4][87][0].apply(exports, arguments)
  }, { "../../../errors": 173, "dup": 87 }], 183: [function (require, module, exports) {
    arguments[4][88][0].apply(exports, arguments)
  }, { "dup": 88 }], 184: [function (require, module, exports) {
    arguments[4][89][0].apply(exports, arguments)
  }, { "../../../errors": 173, "./end-of-stream": 182, "dup": 89 }], 185: [function (require, module, exports) {
    arguments[4][90][0].apply(exports, arguments)
  }, { "../../../errors": 173, "dup": 90 }], 186: [function (require, module, exports) {
    arguments[4][91][0].apply(exports, arguments)
  }, { "dup": 91, "events": 162 }], 187: [function (require, module, exports) {
    arguments[4][92][0].apply(exports, arguments)
  }, { "./lib/_stream_duplex.js": 174, "./lib/_stream_passthrough.js": 175, "./lib/_stream_readable.js": 176, "./lib/_stream_transform.js": 177, "./lib/_stream_writable.js": 178, "./lib/internal/streams/end-of-stream.js": 182, "./lib/internal/streams/pipeline.js": 184, "dup": 92 }], 188: [function (require, module, exports) {
    arguments[4][93][0].apply(exports, arguments)
  }, { "buffer": 96, "dup": 93 }], 189: [function (require, module, exports) {
    var hash = exports;

    hash.utils = require('./hash/utils');
    hash.common = require('./hash/common');
    hash.sha = require('./hash/sha');
    hash.ripemd = require('./hash/ripemd');
    hash.hmac = require('./hash/hmac');

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;

  }, { "./hash/common": 190, "./hash/hmac": 191, "./hash/ripemd": 192, "./hash/sha": 193, "./hash/utils": 200 }], 190: [function (require, module, exports) {
    'use strict';

    var utils = require('./utils');
    var assert = require('minimalistic-assert');

    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;

    BlockHash.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert(this.pending === null);

      return this._digest(enc);
    };

    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

  }, { "./utils": 200, "minimalistic-assert": 212 }], 191: [function (require, module, exports) {
    'use strict';

    var utils = require('./utils');
    var assert = require('minimalistic-assert');

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils.toArray(key, enc));
    }
    module.exports = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      assert(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

  }, { "./utils": 200, "minimalistic-assert": 212 }], 192: [function (require, module, exports) {
    'use strict';

    var utils = require('./utils');
    var common = require('./common');

    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
      this.endian = 'little';
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'little');
      else
        return utils.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

  }, { "./common": 190, "./utils": 200 }], 193: [function (require, module, exports) {
    'use strict';

    exports.sha1 = require('./sha/1');
    exports.sha224 = require('./sha/224');
    exports.sha256 = require('./sha/256');
    exports.sha384 = require('./sha/384');
    exports.sha512 = require('./sha/512');

  }, { "./sha/1": 194, "./sha/224": 195, "./sha/256": 196, "./sha/384": 197, "./sha/512": 198 }], 194: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');

    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0];
      this.W = new Array(80);
    }

    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };

  }, { "../common": 190, "../utils": 200, "./common": 199 }], 195: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var SHA256 = require('./256');

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      SHA256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils.split32(this.h.slice(0, 7), 'big');
    };


  }, { "../utils": 200, "./256": 196 }], 196: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var common = require('../common');
    var shaCommon = require('./common');
    var assert = require('minimalistic-assert');

    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;

    var BlockHash = common.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();

      BlockHash.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;

    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      assert(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }

      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };

  }, { "../common": 190, "../utils": 200, "./common": 199, "minimalistic-assert": 212 }], 197: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');

    var SHA512 = require('./512');

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      SHA512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils.split32(this.h.slice(0, 12), 'big');
    };

  }, { "../utils": 200, "./512": 198 }], 198: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var common = require('../common');
    var assert = require('minimalistic-assert');

    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;

    var BlockHash = common.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();

      BlockHash.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      assert(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils.toHex32(this.h, 'big');
      else
        return utils.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

  }, { "../common": 190, "../utils": 200, "minimalistic-assert": 212 }], 199: [function (require, module, exports) {
    'use strict';

    var utils = require('../utils');
    var rotr32 = utils.rotr32;

    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;

    function ch32(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    exports.ch32 = ch32;

    function maj32(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    exports.maj32 = maj32;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;

    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;

    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;

    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    exports.g0_256 = g0_256;

    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    exports.g1_256 = g1_256;

  }, { "../utils": 200 }], 200: [function (require, module, exports) {
    'use strict';

    var assert = require('minimalistic-assert');
    var inherits = require('inherits');

    exports.inherits = inherits;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex;

    function htonl(w) {
      var res = (w >>> 24) |
        ((w >>> 8) & 0xff00) |
        ((w << 8) & 0xff0000) |
        ((w & 0xff) << 24);
      return res >>> 0;
    }
    exports.htonl = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    exports.zero2 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    exports.zero8 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      assert(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    exports.split32 = split32;

    function rotr32(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    exports.rotr32 = rotr32;

    function rotl32(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    exports.rotl32 = rotl32;

    function sum32(a, b) {
      return (a + b) >>> 0;
    }
    exports.sum32 = sum32;

    function sum32_3(a, b, c) {
      return (a + b + c) >>> 0;
    }
    exports.sum32_3 = sum32_3;

    function sum32_4(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    exports.sum32_4 = sum32_4;

    function sum32_5(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    exports.sum32_5 = sum32_5;

    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;

    function sum64_hi(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;

    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;

    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;

    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;

    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;

    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;

    function rotr64_hi(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;

    function rotr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;

    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;

    function shr64_lo(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    exports.shr64_lo = shr64_lo;

  }, { "inherits": 203, "minimalistic-assert": 212 }], 201: [function (require, module, exports) {
    'use strict';

    var hash = require('hash.js');
    var utils = require('minimalistic-crypto-utils');
    var assert = require('minimalistic-assert');

    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils.toArray(options.pers, options.persEnc || 'hex');
      assert(entropy.length >= (this.minEntropy / 8),
        'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
        .update(this.V)
        .update([0x00]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
        .update(this.V)
        .update([0x01])
        .update(seed)
        .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils.toArray(entropy, entropyEnc);
      add = utils.toArray(add, addEnc);

      assert(entropy.length >= (this.minEntropy / 8),
        'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils.encode(res, enc);
    };

  }, { "hash.js": 189, "minimalistic-assert": 212, "minimalistic-crypto-utils": 213 }], 202: [function (require, module, exports) {
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? (nBytes - 1) : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]

      i += d

      e = s & ((1 << (-nBits)) - 1)
      s >>= (-nBits)
      nBits += eLen
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }

      m = e & ((1 << (-nBits)) - 1)
      e >>= (-nBits)
      nBits += mLen
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }

      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
      var i = isLE ? 0 : (nBytes - 1)
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

      value = Math.abs(value)

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }

        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

      e = (e << mLen) | m
      eLen += mLen
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

      buffer[offset + i - d] |= s * 128
    }

  }, {}], 203: [function (require, module, exports) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          })
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor
          var TempCtor = function () { }
          TempCtor.prototype = superCtor.prototype
          ctor.prototype = new TempCtor()
          ctor.prototype.constructor = ctor
        }
      }
    }

  }, {}], 204: [function (require, module, exports) {
    'use strict';

    var hasToStringTag = require('has-tostringtag/shams')();
    var callBound = require('call-bind/callBound');

    var $toString = callBound('Object.prototype.toString');

    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === '[object Arguments]';
    };

    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null &&
        typeof value === 'object' &&
        typeof value.length === 'number' &&
        value.length >= 0 &&
        $toString(value) !== '[object Array]' &&
        $toString(value.callee) === '[object Function]';
    };

    var supportsStandardArguments = (function () {
      return isStandardArguments(arguments);
    }());

    isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

  }, { "call-bind/callBound": 97, "has-tostringtag/shams": 170 }], 205: [function (require, module, exports) {
    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */

    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    }

    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }

  }, {}], 206: [function (require, module, exports) {
    'use strict';

    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
      try {
        badArrayLike = Object.defineProperty({}, 'length', {
          get: function () {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        // eslint-disable-next-line no-throw-literal
        reflectApply(function () { throw 42; }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }

    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false; // not a function
      }
    };

    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) { return false; }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr = Object.prototype.toString;
    var fnClass = '[object Function]';
    var genClass = '[object GeneratorFunction]';
    var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
    /* globals document: false */
    var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : {};

    module.exports = reflectApply
      ? function isCallable(value) {
        if (value === documentDotAll) { return true; }
        if (!value) { return false; }
        if (typeof value !== 'function' && typeof value !== 'object') { return false; }
        if (typeof value === 'function' && !value.prototype) { return true; }
        try {
          reflectApply(value, null, badArrayLike);
        } catch (e) {
          if (e !== isCallableMarker) { return false; }
        }
        return !isES6ClassFn(value);
      }
      : function isCallable(value) {
        if (value === documentDotAll) { return true; }
        if (!value) { return false; }
        if (typeof value !== 'function' && typeof value !== 'object') { return false; }
        if (typeof value === 'function' && !value.prototype) { return true; }
        if (hasToStringTag) { return tryFunctionObject(value); }
        if (isES6ClassFn(value)) { return false; }
        var strClass = toStr.call(value);
        return strClass === fnClass || strClass === genClass;
      };

  }, {}], 207: [function (require, module, exports) {
    'use strict';

    var toStr = Object.prototype.toString;
    var fnToStr = Function.prototype.toString;
    var isFnRegex = /^\s*(?:function)?\*/;
    var hasToStringTag = require('has-tostringtag/shams')();
    var getProto = Object.getPrototypeOf;
    var getGeneratorFunc = function () { // eslint-disable-line consistent-return
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function('return function*() {}')();
      } catch (e) {
      }
    };
    var GeneratorFunction;

    module.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== 'function') {
        return false;
      }
      if (isFnRegex.test(fnToStr.call(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === '[object GeneratorFunction]';
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === 'undefined') {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };

  }, { "has-tostringtag/shams": 170 }], 208: [function (require, module, exports) {
    (function (global) {
      (function () {
        'use strict';

        var forEach = require('for-each');
        var availableTypedArrays = require('available-typed-arrays');
        var callBound = require('call-bind/callBound');

        var $toString = callBound('Object.prototype.toString');
        var hasToStringTag = require('has-tostringtag/shams')();

        var g = typeof globalThis === 'undefined' ? global : globalThis;
        var typedArrays = availableTypedArrays();

        var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
          for (var i = 0; i < array.length; i += 1) {
            if (array[i] === value) {
              return i;
            }
          }
          return -1;
        };
        var $slice = callBound('String.prototype.slice');
        var toStrTags = {};
        var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
        var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
        if (hasToStringTag && gOPD && getPrototypeOf) {
          forEach(typedArrays, function (typedArray) {
            var arr = new g[typedArray]();
            if (Symbol.toStringTag in arr) {
              var proto = getPrototypeOf(arr);
              var descriptor = gOPD(proto, Symbol.toStringTag);
              if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
              }
              toStrTags[typedArray] = descriptor.get;
            }
          });
        }

        var tryTypedArrays = function tryAllTypedArrays(value) {
          var anyTrue = false;
          forEach(toStrTags, function (getter, typedArray) {
            if (!anyTrue) {
              try {
                anyTrue = getter.call(value) === typedArray;
              } catch (e) { /**/ }
            }
          });
          return anyTrue;
        };

        module.exports = function isTypedArray(value) {
          if (!value || typeof value !== 'object') { return false; }
          if (!hasToStringTag || !(Symbol.toStringTag in value)) {
            var tag = $slice($toString(value), 8, -1);
            return $indexOf(typedArrays, tag) > -1;
          }
          if (!gOPD) { return false; }
          return tryTypedArrays(value);
        };

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "available-typed-arrays": 41, "call-bind/callBound": 97, "es-abstract/helpers/getOwnPropertyDescriptor": 161, "for-each": 164, "has-tostringtag/shams": 170 }], 209: [function (require, module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
      else if (typeof define === 'function' && define.amd)
        define([], factory);
      else if (typeof exports === 'object')
        exports["jsQR"] = factory();
      else
        root["jsQR"] = factory();
    })(typeof self !== 'undefined' ? self : this, function () {
      return /******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
            /******/
          }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
            /******/
          };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
          /******/
        }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
          /******/
        });
            /******/
          }
          /******/
        };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
          /******/
        };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
        /******/
      })
/************************************************************************/
/******/([
/* 0 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var BitMatrix = /** @class */ (function () {
            function BitMatrix(data, width) {
              this.width = width;
              this.height = data.length / width;
              this.data = data;
            }
            BitMatrix.createEmpty = function (width, height) {
              return new BitMatrix(new Uint8ClampedArray(width * height), width);
            };
            BitMatrix.prototype.get = function (x, y) {
              if (x < 0 || x >= this.width || y < 0 || y >= this.height) {
                return false;
              }
              return !!this.data[y * this.width + x];
            };
            BitMatrix.prototype.set = function (x, y, v) {
              this.data[y * this.width + x] = v ? 1 : 0;
            };
            BitMatrix.prototype.setRegion = function (left, top, width, height, v) {
              for (var y = top; y < top + height; y++) {
                for (var x = left; x < left + width; x++) {
                  this.set(x, y, !!v);
                }
              }
            };
            return BitMatrix;
          }());
          exports.BitMatrix = BitMatrix;


          /***/
        }),
/* 1 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var GenericGFPoly_1 = __webpack_require__(2);
          function addOrSubtractGF(a, b) {
            return a ^ b; // tslint:disable-line:no-bitwise
          }
          exports.addOrSubtractGF = addOrSubtractGF;
          var GenericGF = /** @class */ (function () {
            function GenericGF(primitive, size, genBase) {
              this.primitive = primitive;
              this.size = size;
              this.generatorBase = genBase;
              this.expTable = new Array(this.size);
              this.logTable = new Array(this.size);
              var x = 1;
              for (var i = 0; i < this.size; i++) {
                this.expTable[i] = x;
                x = x * 2;
                if (x >= this.size) {
                  x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise
                }
              }
              for (var i = 0; i < this.size - 1; i++) {
                this.logTable[this.expTable[i]] = i;
              }
              this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([0]));
              this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([1]));
            }
            GenericGF.prototype.multiply = function (a, b) {
              if (a === 0 || b === 0) {
                return 0;
              }
              return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
            };
            GenericGF.prototype.inverse = function (a) {
              if (a === 0) {
                throw new Error("Can't invert 0");
              }
              return this.expTable[this.size - this.logTable[a] - 1];
            };
            GenericGF.prototype.buildMonomial = function (degree, coefficient) {
              if (degree < 0) {
                throw new Error("Invalid monomial degree less than 0");
              }
              if (coefficient === 0) {
                return this.zero;
              }
              var coefficients = new Uint8ClampedArray(degree + 1);
              coefficients[0] = coefficient;
              return new GenericGFPoly_1.default(this, coefficients);
            };
            GenericGF.prototype.log = function (a) {
              if (a === 0) {
                throw new Error("Can't take log(0)");
              }
              return this.logTable[a];
            };
            GenericGF.prototype.exp = function (a) {
              return this.expTable[a];
            };
            return GenericGF;
          }());
          exports.default = GenericGF;


          /***/
        }),
/* 2 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var GenericGF_1 = __webpack_require__(1);
          var GenericGFPoly = /** @class */ (function () {
            function GenericGFPoly(field, coefficients) {
              if (coefficients.length === 0) {
                throw new Error("No coefficients.");
              }
              this.field = field;
              var coefficientsLength = coefficients.length;
              if (coefficientsLength > 1 && coefficients[0] === 0) {
                // Leading term must be non-zero for anything except the constant polynomial "0"
                var firstNonZero = 1;
                while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {
                  firstNonZero++;
                }
                if (firstNonZero === coefficientsLength) {
                  this.coefficients = field.zero.coefficients;
                }
                else {
                  this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);
                  for (var i = 0; i < this.coefficients.length; i++) {
                    this.coefficients[i] = coefficients[firstNonZero + i];
                  }
                }
              }
              else {
                this.coefficients = coefficients;
              }
            }
            GenericGFPoly.prototype.degree = function () {
              return this.coefficients.length - 1;
            };
            GenericGFPoly.prototype.isZero = function () {
              return this.coefficients[0] === 0;
            };
            GenericGFPoly.prototype.getCoefficient = function (degree) {
              return this.coefficients[this.coefficients.length - 1 - degree];
            };
            GenericGFPoly.prototype.addOrSubtract = function (other) {
              var _a;
              if (this.isZero()) {
                return other;
              }
              if (other.isZero()) {
                return this;
              }
              var smallerCoefficients = this.coefficients;
              var largerCoefficients = other.coefficients;
              if (smallerCoefficients.length > largerCoefficients.length) {
                _a = [largerCoefficients, smallerCoefficients], smallerCoefficients = _a[0], largerCoefficients = _a[1];
              }
              var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
              var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
              for (var i = 0; i < lengthDiff; i++) {
                sumDiff[i] = largerCoefficients[i];
              }
              for (var i = lengthDiff; i < largerCoefficients.length; i++) {
                sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
              }
              return new GenericGFPoly(this.field, sumDiff);
            };
            GenericGFPoly.prototype.multiply = function (scalar) {
              if (scalar === 0) {
                return this.field.zero;
              }
              if (scalar === 1) {
                return this;
              }
              var size = this.coefficients.length;
              var product = new Uint8ClampedArray(size);
              for (var i = 0; i < size; i++) {
                product[i] = this.field.multiply(this.coefficients[i], scalar);
              }
              return new GenericGFPoly(this.field, product);
            };
            GenericGFPoly.prototype.multiplyPoly = function (other) {
              if (this.isZero() || other.isZero()) {
                return this.field.zero;
              }
              var aCoefficients = this.coefficients;
              var aLength = aCoefficients.length;
              var bCoefficients = other.coefficients;
              var bLength = bCoefficients.length;
              var product = new Uint8ClampedArray(aLength + bLength - 1);
              for (var i = 0; i < aLength; i++) {
                var aCoeff = aCoefficients[i];
                for (var j = 0; j < bLength; j++) {
                  product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
                }
              }
              return new GenericGFPoly(this.field, product);
            };
            GenericGFPoly.prototype.multiplyByMonomial = function (degree, coefficient) {
              if (degree < 0) {
                throw new Error("Invalid degree less than 0");
              }
              if (coefficient === 0) {
                return this.field.zero;
              }
              var size = this.coefficients.length;
              var product = new Uint8ClampedArray(size + degree);
              for (var i = 0; i < size; i++) {
                product[i] = this.field.multiply(this.coefficients[i], coefficient);
              }
              return new GenericGFPoly(this.field, product);
            };
            GenericGFPoly.prototype.evaluateAt = function (a) {
              var result = 0;
              if (a === 0) {
                // Just return the x^0 coefficient
                return this.getCoefficient(0);
              }
              var size = this.coefficients.length;
              if (a === 1) {
                // Just the sum of the coefficients
                this.coefficients.forEach(function (coefficient) {
                  result = GenericGF_1.addOrSubtractGF(result, coefficient);
                });
                return result;
              }
              result = this.coefficients[0];
              for (var i = 1; i < size; i++) {
                result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
              }
              return result;
            };
            return GenericGFPoly;
          }());
          exports.default = GenericGFPoly;


          /***/
        }),
/* 3 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var binarizer_1 = __webpack_require__(4);
          var decoder_1 = __webpack_require__(5);
          var extractor_1 = __webpack_require__(11);
          var locator_1 = __webpack_require__(12);
          function scan(matrix) {
            var locations = locator_1.locate(matrix);
            if (!locations) {
              return null;
            }
            for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
              var location_1 = locations_1[_i];
              var extracted = extractor_1.extract(matrix, location_1);
              var decoded = decoder_1.decode(extracted.matrix);
              if (decoded) {
                return {
                  binaryData: decoded.bytes,
                  data: decoded.text,
                  chunks: decoded.chunks,
                  version: decoded.version,
                  location: {
                    topRightCorner: extracted.mappingFunction(location_1.dimension, 0),
                    topLeftCorner: extracted.mappingFunction(0, 0),
                    bottomRightCorner: extracted.mappingFunction(location_1.dimension, location_1.dimension),
                    bottomLeftCorner: extracted.mappingFunction(0, location_1.dimension),
                    topRightFinderPattern: location_1.topRight,
                    topLeftFinderPattern: location_1.topLeft,
                    bottomLeftFinderPattern: location_1.bottomLeft,
                    bottomRightAlignmentPattern: location_1.alignmentPattern,
                  },
                };
              }
            }
            return null;
          }
          var defaultOptions = {
            inversionAttempts: "attemptBoth",
          };
          function jsQR(data, width, height, providedOptions) {
            if (providedOptions === void 0) { providedOptions = {}; }
            var options = defaultOptions;
            Object.keys(options || {}).forEach(function (opt) {
              options[opt] = providedOptions[opt] || options[opt];
            });
            var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
            var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";
            var _a = binarizer_1.binarize(data, width, height, shouldInvert), binarized = _a.binarized, inverted = _a.inverted;
            var result = scan(tryInvertedFirst ? inverted : binarized);
            if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) {
              result = scan(tryInvertedFirst ? binarized : inverted);
            }
            return result;
          }
          jsQR.default = jsQR;
          exports.default = jsQR;


          /***/
        }),
/* 4 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var BitMatrix_1 = __webpack_require__(0);
          var REGION_SIZE = 8;
          var MIN_DYNAMIC_RANGE = 24;
          function numBetween(value, min, max) {
            return value < min ? min : value > max ? max : value;
          }
          // Like BitMatrix but accepts arbitry Uint8 values
          var Matrix = /** @class */ (function () {
            function Matrix(width, height) {
              this.width = width;
              this.data = new Uint8ClampedArray(width * height);
            }
            Matrix.prototype.get = function (x, y) {
              return this.data[y * this.width + x];
            };
            Matrix.prototype.set = function (x, y, value) {
              this.data[y * this.width + x] = value;
            };
            return Matrix;
          }());
          function binarize(data, width, height, returnInverted) {
            if (data.length !== width * height * 4) {
              throw new Error("Malformed data passed to binarizer.");
            }
            // Convert image to greyscale
            var greyscalePixels = new Matrix(width, height);
            for (var x = 0; x < width; x++) {
              for (var y = 0; y < height; y++) {
                var r = data[((y * width + x) * 4) + 0];
                var g = data[((y * width + x) * 4) + 1];
                var b = data[((y * width + x) * 4) + 2];
                greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
              }
            }
            var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
            var verticalRegionCount = Math.ceil(height / REGION_SIZE);
            var blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount);
            for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
              for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
                var sum = 0;
                var min = Infinity;
                var max = 0;
                for (var y = 0; y < REGION_SIZE; y++) {
                  for (var x = 0; x < REGION_SIZE; x++) {
                    var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
                    sum += pixelLumosity;
                    min = Math.min(min, pixelLumosity);
                    max = Math.max(max, pixelLumosity);
                  }
                }
                var average = sum / (Math.pow(REGION_SIZE, 2));
                if (max - min <= MIN_DYNAMIC_RANGE) {
                  // If variation within the block is low, assume this is a block with only light or only
                  // dark pixels. In that case we do not want to use the average, as it would divide this
                  // low contrast area into black and white pixels, essentially creating data out of noise.
                  //
                  // Default the blackpoint for these blocks to be half the min - effectively white them out
                  average = min / 2;
                  if (verticalRegion > 0 && hortizontalRegion > 0) {
                    // Correct the "white background" assumption for blocks that have neighbors by comparing
                    // the pixels in this block to the previously calculated black points. This is based on
                    // the fact that dark barcode symbology is always surrounded by some amount of light
                    // background for which reasonable black point estimates were made. The bp estimated at
                    // the boundaries is used for the interior.
                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.
                    var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +
                      (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +
                      blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;
                    if (min < averageNeighborBlackPoint) {
                      average = averageNeighborBlackPoint;
                    }
                  }
                }
                blackPoints.set(hortizontalRegion, verticalRegion, average);
              }
            }
            var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
            var inverted = null;
            if (returnInverted) {
              inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
            }
            for (var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {
              for (var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {
                var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
                var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
                var sum = 0;
                for (var xRegion = -2; xRegion <= 2; xRegion++) {
                  for (var yRegion = -2; yRegion <= 2; yRegion++) {
                    sum += blackPoints.get(left + xRegion, top_1 + yRegion);
                  }
                }
                var threshold = sum / 25;
                for (var xRegion = 0; xRegion < REGION_SIZE; xRegion++) {
                  for (var yRegion = 0; yRegion < REGION_SIZE; yRegion++) {
                    var x = hortizontalRegion * REGION_SIZE + xRegion;
                    var y = verticalRegion * REGION_SIZE + yRegion;
                    var lum = greyscalePixels.get(x, y);
                    binarized.set(x, y, lum <= threshold);
                    if (returnInverted) {
                      inverted.set(x, y, !(lum <= threshold));
                    }
                  }
                }
              }
            }
            if (returnInverted) {
              return { binarized: binarized, inverted: inverted };
            }
            return { binarized: binarized };
          }
          exports.binarize = binarize;


          /***/
        }),
/* 5 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var BitMatrix_1 = __webpack_require__(0);
          var decodeData_1 = __webpack_require__(6);
          var reedsolomon_1 = __webpack_require__(9);
          var version_1 = __webpack_require__(10);
          // tslint:disable:no-bitwise
          function numBitsDiffering(x, y) {
            var z = x ^ y;
            var bitCount = 0;
            while (z) {
              bitCount++;
              z &= z - 1;
            }
            return bitCount;
          }
          function pushBit(bit, byte) {
            return (byte << 1) | bit;
          }
          // tslint:enable:no-bitwise
          var FORMAT_INFO_TABLE = [
            { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },
            { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },
            { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },
            { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },
            { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },
            { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },
            { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },
            { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },
            { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },
            { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },
            { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },
            { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },
            { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },
            { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },
            { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },
            { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },
            { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },
            { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },
            { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },
            { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },
            { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },
            { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },
            { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },
            { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },
            { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },
            { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },
            { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },
            { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },
            { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },
            { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },
            { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },
            { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },
          ];
          var DATA_MASKS = [
            function (p) { return ((p.y + p.x) % 2) === 0; },
            function (p) { return (p.y % 2) === 0; },
            function (p) { return p.x % 3 === 0; },
            function (p) { return (p.y + p.x) % 3 === 0; },
            function (p) { return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0; },
            function (p) { return ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0; },
            function (p) { return ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0; },
            function (p) { return ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0; },
          ];
          function buildFunctionPatternMask(version) {
            var dimension = 17 + 4 * version.versionNumber;
            var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
            matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
            matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
            matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
            // Alignment patterns
            for (var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++) {
              var x = _a[_i];
              for (var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++) {
                var y = _c[_b];
                if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {
                  matrix.setRegion(x - 2, y - 2, 5, 5, true);
                }
              }
            }
            matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
            matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
            if (version.versionNumber > 6) {
              matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
              matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
            }
            return matrix;
          }
          function readCodewords(matrix, version, formatInfo) {
            var dataMask = DATA_MASKS[formatInfo.dataMask];
            var dimension = matrix.height;
            var functionPatternMask = buildFunctionPatternMask(version);
            var codewords = [];
            var currentByte = 0;
            var bitsRead = 0;
            // Read columns in pairs, from right to left
            var readingUp = true;
            for (var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {
              if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;
                columnIndex--;
              }
              for (var i = 0; i < dimension; i++) {
                var y = readingUp ? dimension - 1 - i : i;
                for (var columnOffset = 0; columnOffset < 2; columnOffset++) {
                  var x = columnIndex - columnOffset;
                  if (!functionPatternMask.get(x, y)) {
                    bitsRead++;
                    var bit = matrix.get(x, y);
                    if (dataMask({ y: y, x: x })) {
                      bit = !bit;
                    }
                    currentByte = pushBit(bit, currentByte);
                    if (bitsRead === 8) { // Whole bytes
                      codewords.push(currentByte);
                      bitsRead = 0;
                      currentByte = 0;
                    }
                  }
                }
              }
              readingUp = !readingUp;
            }
            return codewords;
          }
          function readVersion(matrix) {
            var dimension = matrix.height;
            var provisionalVersion = Math.floor((dimension - 17) / 4);
            if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code
              return version_1.VERSIONS[provisionalVersion - 1];
            }
            var topRightVersionBits = 0;
            for (var y = 5; y >= 0; y--) {
              for (var x = dimension - 9; x >= dimension - 11; x--) {
                topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
              }
            }
            var bottomLeftVersionBits = 0;
            for (var x = 5; x >= 0; x--) {
              for (var y = dimension - 9; y >= dimension - 11; y--) {
                bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
              }
            }
            var bestDifference = Infinity;
            var bestVersion;
            for (var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++) {
              var version = VERSIONS_1[_i];
              if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {
                return version;
              }
              var difference = numBitsDiffering(topRightVersionBits, version.infoBits);
              if (difference < bestDifference) {
                bestVersion = version;
                bestDifference = difference;
              }
              difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
              if (difference < bestDifference) {
                bestVersion = version;
                bestDifference = difference;
              }
            }
            // We can tolerate up to 3 bits of error since no two version info codewords will
            // differ in less than 8 bits.
            if (bestDifference <= 3) {
              return bestVersion;
            }
          }
          function readFormatInformation(matrix) {
            var topLeftFormatInfoBits = 0;
            for (var x = 0; x <= 8; x++) {
              if (x !== 6) { // Skip timing pattern bit
                topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
              }
            }
            for (var y = 7; y >= 0; y--) {
              if (y !== 6) { // Skip timing pattern bit
                topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
              }
            }
            var dimension = matrix.height;
            var topRightBottomRightFormatInfoBits = 0;
            for (var y = dimension - 1; y >= dimension - 7; y--) { // bottom left
              topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
            }
            for (var x = dimension - 8; x < dimension; x++) { // top right
              topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
            }
            var bestDifference = Infinity;
            var bestFormatInfo = null;
            for (var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++) {
              var _a = FORMAT_INFO_TABLE_1[_i], bits = _a.bits, formatInfo = _a.formatInfo;
              if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {
                return formatInfo;
              }
              var difference = numBitsDiffering(topLeftFormatInfoBits, bits);
              if (difference < bestDifference) {
                bestFormatInfo = formatInfo;
                bestDifference = difference;
              }
              if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option
                difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
                if (difference < bestDifference) {
                  bestFormatInfo = formatInfo;
                  bestDifference = difference;
                }
              }
            }
            // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
            if (bestDifference <= 3) {
              return bestFormatInfo;
            }
            return null;
          }
          function getDataBlocks(codewords, version, ecLevel) {
            var ecInfo = version.errorCorrectionLevels[ecLevel];
            var dataBlocks = [];
            var totalCodewords = 0;
            ecInfo.ecBlocks.forEach(function (block) {
              for (var i = 0; i < block.numBlocks; i++) {
                dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });
                totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
              }
            });
            // In some cases the QR code will be malformed enough that we pull off more or less than we should.
            // If we pull off less there's nothing we can do.
            // If we pull off more we can safely truncate
            if (codewords.length < totalCodewords) {
              return null;
            }
            codewords = codewords.slice(0, totalCodewords);
            var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
            // Pull codewords to fill the blocks up to the minimum size
            for (var i = 0; i < shortBlockSize; i++) {
              for (var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++) {
                var dataBlock = dataBlocks_1[_i];
                dataBlock.codewords.push(codewords.shift());
              }
            }
            // If there are any large blocks, pull codewords to fill the last element of those
            if (ecInfo.ecBlocks.length > 1) {
              var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
              var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
              for (var i = 0; i < largeBlockCount; i++) {
                dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());
              }
            }
            // Add the rest of the codewords to the blocks. These are the error correction codewords.
            while (codewords.length > 0) {
              for (var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++) {
                var dataBlock = dataBlocks_2[_a];
                dataBlock.codewords.push(codewords.shift());
              }
            }
            return dataBlocks;
          }
          function decodeMatrix(matrix) {
            var version = readVersion(matrix);
            if (!version) {
              return null;
            }
            var formatInfo = readFormatInformation(matrix);
            if (!formatInfo) {
              return null;
            }
            var codewords = readCodewords(matrix, version, formatInfo);
            var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
            if (!dataBlocks) {
              return null;
            }
            // Count total number of data bytes
            var totalBytes = dataBlocks.reduce(function (a, b) { return a + b.numDataCodewords; }, 0);
            var resultBytes = new Uint8ClampedArray(totalBytes);
            var resultIndex = 0;
            for (var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++) {
              var dataBlock = dataBlocks_3[_i];
              var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
              if (!correctedBytes) {
                return null;
              }
              for (var i = 0; i < dataBlock.numDataCodewords; i++) {
                resultBytes[resultIndex++] = correctedBytes[i];
              }
            }
            try {
              return decodeData_1.decode(resultBytes, version.versionNumber);
            }
            catch (_a) {
              return null;
            }
          }
          function decode(matrix) {
            if (matrix == null) {
              return null;
            }
            var result = decodeMatrix(matrix);
            if (result) {
              return result;
            }
            // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
            for (var x = 0; x < matrix.width; x++) {
              for (var y = x + 1; y < matrix.height; y++) {
                if (matrix.get(x, y) !== matrix.get(y, x)) {
                  matrix.set(x, y, !matrix.get(x, y));
                  matrix.set(y, x, !matrix.get(y, x));
                }
              }
            }
            return decodeMatrix(matrix);
          }
          exports.decode = decode;


          /***/
        }),
/* 6 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          // tslint:disable:no-bitwise
          var BitStream_1 = __webpack_require__(7);
          var shiftJISTable_1 = __webpack_require__(8);
          var Mode;
          (function (Mode) {
            Mode["Numeric"] = "numeric";
            Mode["Alphanumeric"] = "alphanumeric";
            Mode["Byte"] = "byte";
            Mode["Kanji"] = "kanji";
            Mode["ECI"] = "eci";
          })(Mode = exports.Mode || (exports.Mode = {}));
          var ModeByte;
          (function (ModeByte) {
            ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
            ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
            ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
            ModeByte[ModeByte["Byte"] = 4] = "Byte";
            ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
            ModeByte[ModeByte["ECI"] = 7] = "ECI";
            // StructuredAppend = 0x3,
            // FNC1FirstPosition = 0x5,
            // FNC1SecondPosition = 0x9,
          })(ModeByte || (ModeByte = {}));
          function decodeNumeric(stream, size) {
            var bytes = [];
            var text = "";
            var characterCountSize = [10, 12, 14][size];
            var length = stream.readBits(characterCountSize);
            // Read digits in groups of 3
            while (length >= 3) {
              var num = stream.readBits(10);
              if (num >= 1000) {
                throw new Error("Invalid numeric value above 999");
              }
              var a = Math.floor(num / 100);
              var b = Math.floor(num / 10) % 10;
              var c = num % 10;
              bytes.push(48 + a, 48 + b, 48 + c);
              text += a.toString() + b.toString() + c.toString();
              length -= 3;
            }
            // If the number of digits aren't a multiple of 3, the remaining digits are special cased.
            if (length === 2) {
              var num = stream.readBits(7);
              if (num >= 100) {
                throw new Error("Invalid numeric value above 99");
              }
              var a = Math.floor(num / 10);
              var b = num % 10;
              bytes.push(48 + a, 48 + b);
              text += a.toString() + b.toString();
            }
            else if (length === 1) {
              var num = stream.readBits(4);
              if (num >= 10) {
                throw new Error("Invalid numeric value above 9");
              }
              bytes.push(48 + num);
              text += num.toString();
            }
            return { bytes: bytes, text: text };
          }
          var AlphanumericCharacterCodes = [
            "0", "1", "2", "3", "4", "5", "6", "7", "8",
            "9", "A", "B", "C", "D", "E", "F", "G", "H",
            "I", "J", "K", "L", "M", "N", "O", "P", "Q",
            "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
            " ", "$", "%", "*", "+", "-", ".", "/", ":",
          ];
          function decodeAlphanumeric(stream, size) {
            var bytes = [];
            var text = "";
            var characterCountSize = [9, 11, 13][size];
            var length = stream.readBits(characterCountSize);
            while (length >= 2) {
              var v = stream.readBits(11);
              var a = Math.floor(v / 45);
              var b = v % 45;
              bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
              text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
              length -= 2;
            }
            if (length === 1) {
              var a = stream.readBits(6);
              bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
              text += AlphanumericCharacterCodes[a];
            }
            return { bytes: bytes, text: text };
          }
          function decodeByte(stream, size) {
            var bytes = [];
            var text = "";
            var characterCountSize = [8, 16, 16][size];
            var length = stream.readBits(characterCountSize);
            for (var i = 0; i < length; i++) {
              var b = stream.readBits(8);
              bytes.push(b);
            }
            try {
              text += decodeURIComponent(bytes.map(function (b) { return "%" + ("0" + b.toString(16)).substr(-2); }).join(""));
            }
            catch (_a) {
              // failed to decode
            }
            return { bytes: bytes, text: text };
          }
          function decodeKanji(stream, size) {
            var bytes = [];
            var text = "";
            var characterCountSize = [8, 10, 12][size];
            var length = stream.readBits(characterCountSize);
            for (var i = 0; i < length; i++) {
              var k = stream.readBits(13);
              var c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);
              if (c < 0x1F00) {
                c += 0x8140;
              }
              else {
                c += 0xC140;
              }
              bytes.push(c >> 8, c & 0xFF);
              text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
            }
            return { bytes: bytes, text: text };
          }
          function decode(data, version) {
            var _a, _b, _c, _d;
            var stream = new BitStream_1.BitStream(data);
            // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).
            var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
            var result = {
              text: "",
              bytes: [],
              chunks: [],
              version: version,
            };
            while (stream.available() >= 4) {
              var mode = stream.readBits(4);
              if (mode === ModeByte.Terminator) {
                return result;
              }
              else if (mode === ModeByte.ECI) {
                if (stream.readBits(1) === 0) {
                  result.chunks.push({
                    type: Mode.ECI,
                    assignmentNumber: stream.readBits(7),
                  });
                }
                else if (stream.readBits(1) === 0) {
                  result.chunks.push({
                    type: Mode.ECI,
                    assignmentNumber: stream.readBits(14),
                  });
                }
                else if (stream.readBits(1) === 0) {
                  result.chunks.push({
                    type: Mode.ECI,
                    assignmentNumber: stream.readBits(21),
                  });
                }
                else {
                  // ECI data seems corrupted
                  result.chunks.push({
                    type: Mode.ECI,
                    assignmentNumber: -1,
                  });
                }
              }
              else if (mode === ModeByte.Numeric) {
                var numericResult = decodeNumeric(stream, size);
                result.text += numericResult.text;
                (_a = result.bytes).push.apply(_a, numericResult.bytes);
                result.chunks.push({
                  type: Mode.Numeric,
                  text: numericResult.text,
                });
              }
              else if (mode === ModeByte.Alphanumeric) {
                var alphanumericResult = decodeAlphanumeric(stream, size);
                result.text += alphanumericResult.text;
                (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);
                result.chunks.push({
                  type: Mode.Alphanumeric,
                  text: alphanumericResult.text,
                });
              }
              else if (mode === ModeByte.Byte) {
                var byteResult = decodeByte(stream, size);
                result.text += byteResult.text;
                (_c = result.bytes).push.apply(_c, byteResult.bytes);
                result.chunks.push({
                  type: Mode.Byte,
                  bytes: byteResult.bytes,
                  text: byteResult.text,
                });
              }
              else if (mode === ModeByte.Kanji) {
                var kanjiResult = decodeKanji(stream, size);
                result.text += kanjiResult.text;
                (_d = result.bytes).push.apply(_d, kanjiResult.bytes);
                result.chunks.push({
                  type: Mode.Kanji,
                  bytes: kanjiResult.bytes,
                  text: kanjiResult.text,
                });
              }
            }
            // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker
            if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {
              return result;
            }
          }
          exports.decode = decode;


          /***/
        }),
/* 7 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          // tslint:disable:no-bitwise
          Object.defineProperty(exports, "__esModule", { value: true });
          var BitStream = /** @class */ (function () {
            function BitStream(bytes) {
              this.byteOffset = 0;
              this.bitOffset = 0;
              this.bytes = bytes;
            }
            BitStream.prototype.readBits = function (numBits) {
              if (numBits < 1 || numBits > 32 || numBits > this.available()) {
                throw new Error("Cannot read " + numBits.toString() + " bits");
              }
              var result = 0;
              // First, read remainder from current byte
              if (this.bitOffset > 0) {
                var bitsLeft = 8 - this.bitOffset;
                var toRead = numBits < bitsLeft ? numBits : bitsLeft;
                var bitsToNotRead = bitsLeft - toRead;
                var mask = (0xFF >> (8 - toRead)) << bitsToNotRead;
                result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                numBits -= toRead;
                this.bitOffset += toRead;
                if (this.bitOffset === 8) {
                  this.bitOffset = 0;
                  this.byteOffset++;
                }
              }
              // Next read whole bytes
              if (numBits > 0) {
                while (numBits >= 8) {
                  result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);
                  this.byteOffset++;
                  numBits -= 8;
                }
                // Finally read a partial byte
                if (numBits > 0) {
                  var bitsToNotRead = 8 - numBits;
                  var mask = (0xFF >> bitsToNotRead) << bitsToNotRead;
                  result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);
                  this.bitOffset += numBits;
                }
              }
              return result;
            };
            BitStream.prototype.available = function () {
              return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
            };
            return BitStream;
          }());
          exports.BitStream = BitStream;


          /***/
        }),
/* 8 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.shiftJISTable = {
            0x20: 0x0020,
            0x21: 0x0021,
            0x22: 0x0022,
            0x23: 0x0023,
            0x24: 0x0024,
            0x25: 0x0025,
            0x26: 0x0026,
            0x27: 0x0027,
            0x28: 0x0028,
            0x29: 0x0029,
            0x2A: 0x002A,
            0x2B: 0x002B,
            0x2C: 0x002C,
            0x2D: 0x002D,
            0x2E: 0x002E,
            0x2F: 0x002F,
            0x30: 0x0030,
            0x31: 0x0031,
            0x32: 0x0032,
            0x33: 0x0033,
            0x34: 0x0034,
            0x35: 0x0035,
            0x36: 0x0036,
            0x37: 0x0037,
            0x38: 0x0038,
            0x39: 0x0039,
            0x3A: 0x003A,
            0x3B: 0x003B,
            0x3C: 0x003C,
            0x3D: 0x003D,
            0x3E: 0x003E,
            0x3F: 0x003F,
            0x40: 0x0040,
            0x41: 0x0041,
            0x42: 0x0042,
            0x43: 0x0043,
            0x44: 0x0044,
            0x45: 0x0045,
            0x46: 0x0046,
            0x47: 0x0047,
            0x48: 0x0048,
            0x49: 0x0049,
            0x4A: 0x004A,
            0x4B: 0x004B,
            0x4C: 0x004C,
            0x4D: 0x004D,
            0x4E: 0x004E,
            0x4F: 0x004F,
            0x50: 0x0050,
            0x51: 0x0051,
            0x52: 0x0052,
            0x53: 0x0053,
            0x54: 0x0054,
            0x55: 0x0055,
            0x56: 0x0056,
            0x57: 0x0057,
            0x58: 0x0058,
            0x59: 0x0059,
            0x5A: 0x005A,
            0x5B: 0x005B,
            0x5C: 0x00A5,
            0x5D: 0x005D,
            0x5E: 0x005E,
            0x5F: 0x005F,
            0x60: 0x0060,
            0x61: 0x0061,
            0x62: 0x0062,
            0x63: 0x0063,
            0x64: 0x0064,
            0x65: 0x0065,
            0x66: 0x0066,
            0x67: 0x0067,
            0x68: 0x0068,
            0x69: 0x0069,
            0x6A: 0x006A,
            0x6B: 0x006B,
            0x6C: 0x006C,
            0x6D: 0x006D,
            0x6E: 0x006E,
            0x6F: 0x006F,
            0x70: 0x0070,
            0x71: 0x0071,
            0x72: 0x0072,
            0x73: 0x0073,
            0x74: 0x0074,
            0x75: 0x0075,
            0x76: 0x0076,
            0x77: 0x0077,
            0x78: 0x0078,
            0x79: 0x0079,
            0x7A: 0x007A,
            0x7B: 0x007B,
            0x7C: 0x007C,
            0x7D: 0x007D,
            0x7E: 0x203E,
            0x8140: 0x3000,
            0x8141: 0x3001,
            0x8142: 0x3002,
            0x8143: 0xFF0C,
            0x8144: 0xFF0E,
            0x8145: 0x30FB,
            0x8146: 0xFF1A,
            0x8147: 0xFF1B,
            0x8148: 0xFF1F,
            0x8149: 0xFF01,
            0x814A: 0x309B,
            0x814B: 0x309C,
            0x814C: 0x00B4,
            0x814D: 0xFF40,
            0x814E: 0x00A8,
            0x814F: 0xFF3E,
            0x8150: 0xFFE3,
            0x8151: 0xFF3F,
            0x8152: 0x30FD,
            0x8153: 0x30FE,
            0x8154: 0x309D,
            0x8155: 0x309E,
            0x8156: 0x3003,
            0x8157: 0x4EDD,
            0x8158: 0x3005,
            0x8159: 0x3006,
            0x815A: 0x3007,
            0x815B: 0x30FC,
            0x815C: 0x2015,
            0x815D: 0x2010,
            0x815E: 0xFF0F,
            0x815F: 0x005C,
            0x8160: 0x301C,
            0x8161: 0x2016,
            0x8162: 0xFF5C,
            0x8163: 0x2026,
            0x8164: 0x2025,
            0x8165: 0x2018,
            0x8166: 0x2019,
            0x8167: 0x201C,
            0x8168: 0x201D,
            0x8169: 0xFF08,
            0x816A: 0xFF09,
            0x816B: 0x3014,
            0x816C: 0x3015,
            0x816D: 0xFF3B,
            0x816E: 0xFF3D,
            0x816F: 0xFF5B,
            0x8170: 0xFF5D,
            0x8171: 0x3008,
            0x8172: 0x3009,
            0x8173: 0x300A,
            0x8174: 0x300B,
            0x8175: 0x300C,
            0x8176: 0x300D,
            0x8177: 0x300E,
            0x8178: 0x300F,
            0x8179: 0x3010,
            0x817A: 0x3011,
            0x817B: 0xFF0B,
            0x817C: 0x2212,
            0x817D: 0x00B1,
            0x817E: 0x00D7,
            0x8180: 0x00F7,
            0x8181: 0xFF1D,
            0x8182: 0x2260,
            0x8183: 0xFF1C,
            0x8184: 0xFF1E,
            0x8185: 0x2266,
            0x8186: 0x2267,
            0x8187: 0x221E,
            0x8188: 0x2234,
            0x8189: 0x2642,
            0x818A: 0x2640,
            0x818B: 0x00B0,
            0x818C: 0x2032,
            0x818D: 0x2033,
            0x818E: 0x2103,
            0x818F: 0xFFE5,
            0x8190: 0xFF04,
            0x8191: 0x00A2,
            0x8192: 0x00A3,
            0x8193: 0xFF05,
            0x8194: 0xFF03,
            0x8195: 0xFF06,
            0x8196: 0xFF0A,
            0x8197: 0xFF20,
            0x8198: 0x00A7,
            0x8199: 0x2606,
            0x819A: 0x2605,
            0x819B: 0x25CB,
            0x819C: 0x25CF,
            0x819D: 0x25CE,
            0x819E: 0x25C7,
            0x819F: 0x25C6,
            0x81A0: 0x25A1,
            0x81A1: 0x25A0,
            0x81A2: 0x25B3,
            0x81A3: 0x25B2,
            0x81A4: 0x25BD,
            0x81A5: 0x25BC,
            0x81A6: 0x203B,
            0x81A7: 0x3012,
            0x81A8: 0x2192,
            0x81A9: 0x2190,
            0x81AA: 0x2191,
            0x81AB: 0x2193,
            0x81AC: 0x3013,
            0x81B8: 0x2208,
            0x81B9: 0x220B,
            0x81BA: 0x2286,
            0x81BB: 0x2287,
            0x81BC: 0x2282,
            0x81BD: 0x2283,
            0x81BE: 0x222A,
            0x81BF: 0x2229,
            0x81C8: 0x2227,
            0x81C9: 0x2228,
            0x81CA: 0x00AC,
            0x81CB: 0x21D2,
            0x81CC: 0x21D4,
            0x81CD: 0x2200,
            0x81CE: 0x2203,
            0x81DA: 0x2220,
            0x81DB: 0x22A5,
            0x81DC: 0x2312,
            0x81DD: 0x2202,
            0x81DE: 0x2207,
            0x81DF: 0x2261,
            0x81E0: 0x2252,
            0x81E1: 0x226A,
            0x81E2: 0x226B,
            0x81E3: 0x221A,
            0x81E4: 0x223D,
            0x81E5: 0x221D,
            0x81E6: 0x2235,
            0x81E7: 0x222B,
            0x81E8: 0x222C,
            0x81F0: 0x212B,
            0x81F1: 0x2030,
            0x81F2: 0x266F,
            0x81F3: 0x266D,
            0x81F4: 0x266A,
            0x81F5: 0x2020,
            0x81F6: 0x2021,
            0x81F7: 0x00B6,
            0x81FC: 0x25EF,
            0x824F: 0xFF10,
            0x8250: 0xFF11,
            0x8251: 0xFF12,
            0x8252: 0xFF13,
            0x8253: 0xFF14,
            0x8254: 0xFF15,
            0x8255: 0xFF16,
            0x8256: 0xFF17,
            0x8257: 0xFF18,
            0x8258: 0xFF19,
            0x8260: 0xFF21,
            0x8261: 0xFF22,
            0x8262: 0xFF23,
            0x8263: 0xFF24,
            0x8264: 0xFF25,
            0x8265: 0xFF26,
            0x8266: 0xFF27,
            0x8267: 0xFF28,
            0x8268: 0xFF29,
            0x8269: 0xFF2A,
            0x826A: 0xFF2B,
            0x826B: 0xFF2C,
            0x826C: 0xFF2D,
            0x826D: 0xFF2E,
            0x826E: 0xFF2F,
            0x826F: 0xFF30,
            0x8270: 0xFF31,
            0x8271: 0xFF32,
            0x8272: 0xFF33,
            0x8273: 0xFF34,
            0x8274: 0xFF35,
            0x8275: 0xFF36,
            0x8276: 0xFF37,
            0x8277: 0xFF38,
            0x8278: 0xFF39,
            0x8279: 0xFF3A,
            0x8281: 0xFF41,
            0x8282: 0xFF42,
            0x8283: 0xFF43,
            0x8284: 0xFF44,
            0x8285: 0xFF45,
            0x8286: 0xFF46,
            0x8287: 0xFF47,
            0x8288: 0xFF48,
            0x8289: 0xFF49,
            0x828A: 0xFF4A,
            0x828B: 0xFF4B,
            0x828C: 0xFF4C,
            0x828D: 0xFF4D,
            0x828E: 0xFF4E,
            0x828F: 0xFF4F,
            0x8290: 0xFF50,
            0x8291: 0xFF51,
            0x8292: 0xFF52,
            0x8293: 0xFF53,
            0x8294: 0xFF54,
            0x8295: 0xFF55,
            0x8296: 0xFF56,
            0x8297: 0xFF57,
            0x8298: 0xFF58,
            0x8299: 0xFF59,
            0x829A: 0xFF5A,
            0x829F: 0x3041,
            0x82A0: 0x3042,
            0x82A1: 0x3043,
            0x82A2: 0x3044,
            0x82A3: 0x3045,
            0x82A4: 0x3046,
            0x82A5: 0x3047,
            0x82A6: 0x3048,
            0x82A7: 0x3049,
            0x82A8: 0x304A,
            0x82A9: 0x304B,
            0x82AA: 0x304C,
            0x82AB: 0x304D,
            0x82AC: 0x304E,
            0x82AD: 0x304F,
            0x82AE: 0x3050,
            0x82AF: 0x3051,
            0x82B0: 0x3052,
            0x82B1: 0x3053,
            0x82B2: 0x3054,
            0x82B3: 0x3055,
            0x82B4: 0x3056,
            0x82B5: 0x3057,
            0x82B6: 0x3058,
            0x82B7: 0x3059,
            0x82B8: 0x305A,
            0x82B9: 0x305B,
            0x82BA: 0x305C,
            0x82BB: 0x305D,
            0x82BC: 0x305E,
            0x82BD: 0x305F,
            0x82BE: 0x3060,
            0x82BF: 0x3061,
            0x82C0: 0x3062,
            0x82C1: 0x3063,
            0x82C2: 0x3064,
            0x82C3: 0x3065,
            0x82C4: 0x3066,
            0x82C5: 0x3067,
            0x82C6: 0x3068,
            0x82C7: 0x3069,
            0x82C8: 0x306A,
            0x82C9: 0x306B,
            0x82CA: 0x306C,
            0x82CB: 0x306D,
            0x82CC: 0x306E,
            0x82CD: 0x306F,
            0x82CE: 0x3070,
            0x82CF: 0x3071,
            0x82D0: 0x3072,
            0x82D1: 0x3073,
            0x82D2: 0x3074,
            0x82D3: 0x3075,
            0x82D4: 0x3076,
            0x82D5: 0x3077,
            0x82D6: 0x3078,
            0x82D7: 0x3079,
            0x82D8: 0x307A,
            0x82D9: 0x307B,
            0x82DA: 0x307C,
            0x82DB: 0x307D,
            0x82DC: 0x307E,
            0x82DD: 0x307F,
            0x82DE: 0x3080,
            0x82DF: 0x3081,
            0x82E0: 0x3082,
            0x82E1: 0x3083,
            0x82E2: 0x3084,
            0x82E3: 0x3085,
            0x82E4: 0x3086,
            0x82E5: 0x3087,
            0x82E6: 0x3088,
            0x82E7: 0x3089,
            0x82E8: 0x308A,
            0x82E9: 0x308B,
            0x82EA: 0x308C,
            0x82EB: 0x308D,
            0x82EC: 0x308E,
            0x82ED: 0x308F,
            0x82EE: 0x3090,
            0x82EF: 0x3091,
            0x82F0: 0x3092,
            0x82F1: 0x3093,
            0x8340: 0x30A1,
            0x8341: 0x30A2,
            0x8342: 0x30A3,
            0x8343: 0x30A4,
            0x8344: 0x30A5,
            0x8345: 0x30A6,
            0x8346: 0x30A7,
            0x8347: 0x30A8,
            0x8348: 0x30A9,
            0x8349: 0x30AA,
            0x834A: 0x30AB,
            0x834B: 0x30AC,
            0x834C: 0x30AD,
            0x834D: 0x30AE,
            0x834E: 0x30AF,
            0x834F: 0x30B0,
            0x8350: 0x30B1,
            0x8351: 0x30B2,
            0x8352: 0x30B3,
            0x8353: 0x30B4,
            0x8354: 0x30B5,
            0x8355: 0x30B6,
            0x8356: 0x30B7,
            0x8357: 0x30B8,
            0x8358: 0x30B9,
            0x8359: 0x30BA,
            0x835A: 0x30BB,
            0x835B: 0x30BC,
            0x835C: 0x30BD,
            0x835D: 0x30BE,
            0x835E: 0x30BF,
            0x835F: 0x30C0,
            0x8360: 0x30C1,
            0x8361: 0x30C2,
            0x8362: 0x30C3,
            0x8363: 0x30C4,
            0x8364: 0x30C5,
            0x8365: 0x30C6,
            0x8366: 0x30C7,
            0x8367: 0x30C8,
            0x8368: 0x30C9,
            0x8369: 0x30CA,
            0x836A: 0x30CB,
            0x836B: 0x30CC,
            0x836C: 0x30CD,
            0x836D: 0x30CE,
            0x836E: 0x30CF,
            0x836F: 0x30D0,
            0x8370: 0x30D1,
            0x8371: 0x30D2,
            0x8372: 0x30D3,
            0x8373: 0x30D4,
            0x8374: 0x30D5,
            0x8375: 0x30D6,
            0x8376: 0x30D7,
            0x8377: 0x30D8,
            0x8378: 0x30D9,
            0x8379: 0x30DA,
            0x837A: 0x30DB,
            0x837B: 0x30DC,
            0x837C: 0x30DD,
            0x837D: 0x30DE,
            0x837E: 0x30DF,
            0x8380: 0x30E0,
            0x8381: 0x30E1,
            0x8382: 0x30E2,
            0x8383: 0x30E3,
            0x8384: 0x30E4,
            0x8385: 0x30E5,
            0x8386: 0x30E6,
            0x8387: 0x30E7,
            0x8388: 0x30E8,
            0x8389: 0x30E9,
            0x838A: 0x30EA,
            0x838B: 0x30EB,
            0x838C: 0x30EC,
            0x838D: 0x30ED,
            0x838E: 0x30EE,
            0x838F: 0x30EF,
            0x8390: 0x30F0,
            0x8391: 0x30F1,
            0x8392: 0x30F2,
            0x8393: 0x30F3,
            0x8394: 0x30F4,
            0x8395: 0x30F5,
            0x8396: 0x30F6,
            0x839F: 0x0391,
            0x83A0: 0x0392,
            0x83A1: 0x0393,
            0x83A2: 0x0394,
            0x83A3: 0x0395,
            0x83A4: 0x0396,
            0x83A5: 0x0397,
            0x83A6: 0x0398,
            0x83A7: 0x0399,
            0x83A8: 0x039A,
            0x83A9: 0x039B,
            0x83AA: 0x039C,
            0x83AB: 0x039D,
            0x83AC: 0x039E,
            0x83AD: 0x039F,
            0x83AE: 0x03A0,
            0x83AF: 0x03A1,
            0x83B0: 0x03A3,
            0x83B1: 0x03A4,
            0x83B2: 0x03A5,
            0x83B3: 0x03A6,
            0x83B4: 0x03A7,
            0x83B5: 0x03A8,
            0x83B6: 0x03A9,
            0x83BF: 0x03B1,
            0x83C0: 0x03B2,
            0x83C1: 0x03B3,
            0x83C2: 0x03B4,
            0x83C3: 0x03B5,
            0x83C4: 0x03B6,
            0x83C5: 0x03B7,
            0x83C6: 0x03B8,
            0x83C7: 0x03B9,
            0x83C8: 0x03BA,
            0x83C9: 0x03BB,
            0x83CA: 0x03BC,
            0x83CB: 0x03BD,
            0x83CC: 0x03BE,
            0x83CD: 0x03BF,
            0x83CE: 0x03C0,
            0x83CF: 0x03C1,
            0x83D0: 0x03C3,
            0x83D1: 0x03C4,
            0x83D2: 0x03C5,
            0x83D3: 0x03C6,
            0x83D4: 0x03C7,
            0x83D5: 0x03C8,
            0x83D6: 0x03C9,
            0x8440: 0x0410,
            0x8441: 0x0411,
            0x8442: 0x0412,
            0x8443: 0x0413,
            0x8444: 0x0414,
            0x8445: 0x0415,
            0x8446: 0x0401,
            0x8447: 0x0416,
            0x8448: 0x0417,
            0x8449: 0x0418,
            0x844A: 0x0419,
            0x844B: 0x041A,
            0x844C: 0x041B,
            0x844D: 0x041C,
            0x844E: 0x041D,
            0x844F: 0x041E,
            0x8450: 0x041F,
            0x8451: 0x0420,
            0x8452: 0x0421,
            0x8453: 0x0422,
            0x8454: 0x0423,
            0x8455: 0x0424,
            0x8456: 0x0425,
            0x8457: 0x0426,
            0x8458: 0x0427,
            0x8459: 0x0428,
            0x845A: 0x0429,
            0x845B: 0x042A,
            0x845C: 0x042B,
            0x845D: 0x042C,
            0x845E: 0x042D,
            0x845F: 0x042E,
            0x8460: 0x042F,
            0x8470: 0x0430,
            0x8471: 0x0431,
            0x8472: 0x0432,
            0x8473: 0x0433,
            0x8474: 0x0434,
            0x8475: 0x0435,
            0x8476: 0x0451,
            0x8477: 0x0436,
            0x8478: 0x0437,
            0x8479: 0x0438,
            0x847A: 0x0439,
            0x847B: 0x043A,
            0x847C: 0x043B,
            0x847D: 0x043C,
            0x847E: 0x043D,
            0x8480: 0x043E,
            0x8481: 0x043F,
            0x8482: 0x0440,
            0x8483: 0x0441,
            0x8484: 0x0442,
            0x8485: 0x0443,
            0x8486: 0x0444,
            0x8487: 0x0445,
            0x8488: 0x0446,
            0x8489: 0x0447,
            0x848A: 0x0448,
            0x848B: 0x0449,
            0x848C: 0x044A,
            0x848D: 0x044B,
            0x848E: 0x044C,
            0x848F: 0x044D,
            0x8490: 0x044E,
            0x8491: 0x044F,
            0x849F: 0x2500,
            0x84A0: 0x2502,
            0x84A1: 0x250C,
            0x84A2: 0x2510,
            0x84A3: 0x2518,
            0x84A4: 0x2514,
            0x84A5: 0x251C,
            0x84A6: 0x252C,
            0x84A7: 0x2524,
            0x84A8: 0x2534,
            0x84A9: 0x253C,
            0x84AA: 0x2501,
            0x84AB: 0x2503,
            0x84AC: 0x250F,
            0x84AD: 0x2513,
            0x84AE: 0x251B,
            0x84AF: 0x2517,
            0x84B0: 0x2523,
            0x84B1: 0x2533,
            0x84B2: 0x252B,
            0x84B3: 0x253B,
            0x84B4: 0x254B,
            0x84B5: 0x2520,
            0x84B6: 0x252F,
            0x84B7: 0x2528,
            0x84B8: 0x2537,
            0x84B9: 0x253F,
            0x84BA: 0x251D,
            0x84BB: 0x2530,
            0x84BC: 0x2525,
            0x84BD: 0x2538,
            0x84BE: 0x2542,
            0x889F: 0x4E9C,
            0x88A0: 0x5516,
            0x88A1: 0x5A03,
            0x88A2: 0x963F,
            0x88A3: 0x54C0,
            0x88A4: 0x611B,
            0x88A5: 0x6328,
            0x88A6: 0x59F6,
            0x88A7: 0x9022,
            0x88A8: 0x8475,
            0x88A9: 0x831C,
            0x88AA: 0x7A50,
            0x88AB: 0x60AA,
            0x88AC: 0x63E1,
            0x88AD: 0x6E25,
            0x88AE: 0x65ED,
            0x88AF: 0x8466,
            0x88B0: 0x82A6,
            0x88B1: 0x9BF5,
            0x88B2: 0x6893,
            0x88B3: 0x5727,
            0x88B4: 0x65A1,
            0x88B5: 0x6271,
            0x88B6: 0x5B9B,
            0x88B7: 0x59D0,
            0x88B8: 0x867B,
            0x88B9: 0x98F4,
            0x88BA: 0x7D62,
            0x88BB: 0x7DBE,
            0x88BC: 0x9B8E,
            0x88BD: 0x6216,
            0x88BE: 0x7C9F,
            0x88BF: 0x88B7,
            0x88C0: 0x5B89,
            0x88C1: 0x5EB5,
            0x88C2: 0x6309,
            0x88C3: 0x6697,
            0x88C4: 0x6848,
            0x88C5: 0x95C7,
            0x88C6: 0x978D,
            0x88C7: 0x674F,
            0x88C8: 0x4EE5,
            0x88C9: 0x4F0A,
            0x88CA: 0x4F4D,
            0x88CB: 0x4F9D,
            0x88CC: 0x5049,
            0x88CD: 0x56F2,
            0x88CE: 0x5937,
            0x88CF: 0x59D4,
            0x88D0: 0x5A01,
            0x88D1: 0x5C09,
            0x88D2: 0x60DF,
            0x88D3: 0x610F,
            0x88D4: 0x6170,
            0x88D5: 0x6613,
            0x88D6: 0x6905,
            0x88D7: 0x70BA,
            0x88D8: 0x754F,
            0x88D9: 0x7570,
            0x88DA: 0x79FB,
            0x88DB: 0x7DAD,
            0x88DC: 0x7DEF,
            0x88DD: 0x80C3,
            0x88DE: 0x840E,
            0x88DF: 0x8863,
            0x88E0: 0x8B02,
            0x88E1: 0x9055,
            0x88E2: 0x907A,
            0x88E3: 0x533B,
            0x88E4: 0x4E95,
            0x88E5: 0x4EA5,
            0x88E6: 0x57DF,
            0x88E7: 0x80B2,
            0x88E8: 0x90C1,
            0x88E9: 0x78EF,
            0x88EA: 0x4E00,
            0x88EB: 0x58F1,
            0x88EC: 0x6EA2,
            0x88ED: 0x9038,
            0x88EE: 0x7A32,
            0x88EF: 0x8328,
            0x88F0: 0x828B,
            0x88F1: 0x9C2F,
            0x88F2: 0x5141,
            0x88F3: 0x5370,
            0x88F4: 0x54BD,
            0x88F5: 0x54E1,
            0x88F6: 0x56E0,
            0x88F7: 0x59FB,
            0x88F8: 0x5F15,
            0x88F9: 0x98F2,
            0x88FA: 0x6DEB,
            0x88FB: 0x80E4,
            0x88FC: 0x852D,
            0x8940: 0x9662,
            0x8941: 0x9670,
            0x8942: 0x96A0,
            0x8943: 0x97FB,
            0x8944: 0x540B,
            0x8945: 0x53F3,
            0x8946: 0x5B87,
            0x8947: 0x70CF,
            0x8948: 0x7FBD,
            0x8949: 0x8FC2,
            0x894A: 0x96E8,
            0x894B: 0x536F,
            0x894C: 0x9D5C,
            0x894D: 0x7ABA,
            0x894E: 0x4E11,
            0x894F: 0x7893,
            0x8950: 0x81FC,
            0x8951: 0x6E26,
            0x8952: 0x5618,
            0x8953: 0x5504,
            0x8954: 0x6B1D,
            0x8955: 0x851A,
            0x8956: 0x9C3B,
            0x8957: 0x59E5,
            0x8958: 0x53A9,
            0x8959: 0x6D66,
            0x895A: 0x74DC,
            0x895B: 0x958F,
            0x895C: 0x5642,
            0x895D: 0x4E91,
            0x895E: 0x904B,
            0x895F: 0x96F2,
            0x8960: 0x834F,
            0x8961: 0x990C,
            0x8962: 0x53E1,
            0x8963: 0x55B6,
            0x8964: 0x5B30,
            0x8965: 0x5F71,
            0x8966: 0x6620,
            0x8967: 0x66F3,
            0x8968: 0x6804,
            0x8969: 0x6C38,
            0x896A: 0x6CF3,
            0x896B: 0x6D29,
            0x896C: 0x745B,
            0x896D: 0x76C8,
            0x896E: 0x7A4E,
            0x896F: 0x9834,
            0x8970: 0x82F1,
            0x8971: 0x885B,
            0x8972: 0x8A60,
            0x8973: 0x92ED,
            0x8974: 0x6DB2,
            0x8975: 0x75AB,
            0x8976: 0x76CA,
            0x8977: 0x99C5,
            0x8978: 0x60A6,
            0x8979: 0x8B01,
            0x897A: 0x8D8A,
            0x897B: 0x95B2,
            0x897C: 0x698E,
            0x897D: 0x53AD,
            0x897E: 0x5186,
            0x8980: 0x5712,
            0x8981: 0x5830,
            0x8982: 0x5944,
            0x8983: 0x5BB4,
            0x8984: 0x5EF6,
            0x8985: 0x6028,
            0x8986: 0x63A9,
            0x8987: 0x63F4,
            0x8988: 0x6CBF,
            0x8989: 0x6F14,
            0x898A: 0x708E,
            0x898B: 0x7114,
            0x898C: 0x7159,
            0x898D: 0x71D5,
            0x898E: 0x733F,
            0x898F: 0x7E01,
            0x8990: 0x8276,
            0x8991: 0x82D1,
            0x8992: 0x8597,
            0x8993: 0x9060,
            0x8994: 0x925B,
            0x8995: 0x9D1B,
            0x8996: 0x5869,
            0x8997: 0x65BC,
            0x8998: 0x6C5A,
            0x8999: 0x7525,
            0x899A: 0x51F9,
            0x899B: 0x592E,
            0x899C: 0x5965,
            0x899D: 0x5F80,
            0x899E: 0x5FDC,
            0x899F: 0x62BC,
            0x89A0: 0x65FA,
            0x89A1: 0x6A2A,
            0x89A2: 0x6B27,
            0x89A3: 0x6BB4,
            0x89A4: 0x738B,
            0x89A5: 0x7FC1,
            0x89A6: 0x8956,
            0x89A7: 0x9D2C,
            0x89A8: 0x9D0E,
            0x89A9: 0x9EC4,
            0x89AA: 0x5CA1,
            0x89AB: 0x6C96,
            0x89AC: 0x837B,
            0x89AD: 0x5104,
            0x89AE: 0x5C4B,
            0x89AF: 0x61B6,
            0x89B0: 0x81C6,
            0x89B1: 0x6876,
            0x89B2: 0x7261,
            0x89B3: 0x4E59,
            0x89B4: 0x4FFA,
            0x89B5: 0x5378,
            0x89B6: 0x6069,
            0x89B7: 0x6E29,
            0x89B8: 0x7A4F,
            0x89B9: 0x97F3,
            0x89BA: 0x4E0B,
            0x89BB: 0x5316,
            0x89BC: 0x4EEE,
            0x89BD: 0x4F55,
            0x89BE: 0x4F3D,
            0x89BF: 0x4FA1,
            0x89C0: 0x4F73,
            0x89C1: 0x52A0,
            0x89C2: 0x53EF,
            0x89C3: 0x5609,
            0x89C4: 0x590F,
            0x89C5: 0x5AC1,
            0x89C6: 0x5BB6,
            0x89C7: 0x5BE1,
            0x89C8: 0x79D1,
            0x89C9: 0x6687,
            0x89CA: 0x679C,
            0x89CB: 0x67B6,
            0x89CC: 0x6B4C,
            0x89CD: 0x6CB3,
            0x89CE: 0x706B,
            0x89CF: 0x73C2,
            0x89D0: 0x798D,
            0x89D1: 0x79BE,
            0x89D2: 0x7A3C,
            0x89D3: 0x7B87,
            0x89D4: 0x82B1,
            0x89D5: 0x82DB,
            0x89D6: 0x8304,
            0x89D7: 0x8377,
            0x89D8: 0x83EF,
            0x89D9: 0x83D3,
            0x89DA: 0x8766,
            0x89DB: 0x8AB2,
            0x89DC: 0x5629,
            0x89DD: 0x8CA8,
            0x89DE: 0x8FE6,
            0x89DF: 0x904E,
            0x89E0: 0x971E,
            0x89E1: 0x868A,
            0x89E2: 0x4FC4,
            0x89E3: 0x5CE8,
            0x89E4: 0x6211,
            0x89E5: 0x7259,
            0x89E6: 0x753B,
            0x89E7: 0x81E5,
            0x89E8: 0x82BD,
            0x89E9: 0x86FE,
            0x89EA: 0x8CC0,
            0x89EB: 0x96C5,
            0x89EC: 0x9913,
            0x89ED: 0x99D5,
            0x89EE: 0x4ECB,
            0x89EF: 0x4F1A,
            0x89F0: 0x89E3,
            0x89F1: 0x56DE,
            0x89F2: 0x584A,
            0x89F3: 0x58CA,
            0x89F4: 0x5EFB,
            0x89F5: 0x5FEB,
            0x89F6: 0x602A,
            0x89F7: 0x6094,
            0x89F8: 0x6062,
            0x89F9: 0x61D0,
            0x89FA: 0x6212,
            0x89FB: 0x62D0,
            0x89FC: 0x6539,
            0x8A40: 0x9B41,
            0x8A41: 0x6666,
            0x8A42: 0x68B0,
            0x8A43: 0x6D77,
            0x8A44: 0x7070,
            0x8A45: 0x754C,
            0x8A46: 0x7686,
            0x8A47: 0x7D75,
            0x8A48: 0x82A5,
            0x8A49: 0x87F9,
            0x8A4A: 0x958B,
            0x8A4B: 0x968E,
            0x8A4C: 0x8C9D,
            0x8A4D: 0x51F1,
            0x8A4E: 0x52BE,
            0x8A4F: 0x5916,
            0x8A50: 0x54B3,
            0x8A51: 0x5BB3,
            0x8A52: 0x5D16,
            0x8A53: 0x6168,
            0x8A54: 0x6982,
            0x8A55: 0x6DAF,
            0x8A56: 0x788D,
            0x8A57: 0x84CB,
            0x8A58: 0x8857,
            0x8A59: 0x8A72,
            0x8A5A: 0x93A7,
            0x8A5B: 0x9AB8,
            0x8A5C: 0x6D6C,
            0x8A5D: 0x99A8,
            0x8A5E: 0x86D9,
            0x8A5F: 0x57A3,
            0x8A60: 0x67FF,
            0x8A61: 0x86CE,
            0x8A62: 0x920E,
            0x8A63: 0x5283,
            0x8A64: 0x5687,
            0x8A65: 0x5404,
            0x8A66: 0x5ED3,
            0x8A67: 0x62E1,
            0x8A68: 0x64B9,
            0x8A69: 0x683C,
            0x8A6A: 0x6838,
            0x8A6B: 0x6BBB,
            0x8A6C: 0x7372,
            0x8A6D: 0x78BA,
            0x8A6E: 0x7A6B,
            0x8A6F: 0x899A,
            0x8A70: 0x89D2,
            0x8A71: 0x8D6B,
            0x8A72: 0x8F03,
            0x8A73: 0x90ED,
            0x8A74: 0x95A3,
            0x8A75: 0x9694,
            0x8A76: 0x9769,
            0x8A77: 0x5B66,
            0x8A78: 0x5CB3,
            0x8A79: 0x697D,
            0x8A7A: 0x984D,
            0x8A7B: 0x984E,
            0x8A7C: 0x639B,
            0x8A7D: 0x7B20,
            0x8A7E: 0x6A2B,
            0x8A80: 0x6A7F,
            0x8A81: 0x68B6,
            0x8A82: 0x9C0D,
            0x8A83: 0x6F5F,
            0x8A84: 0x5272,
            0x8A85: 0x559D,
            0x8A86: 0x6070,
            0x8A87: 0x62EC,
            0x8A88: 0x6D3B,
            0x8A89: 0x6E07,
            0x8A8A: 0x6ED1,
            0x8A8B: 0x845B,
            0x8A8C: 0x8910,
            0x8A8D: 0x8F44,
            0x8A8E: 0x4E14,
            0x8A8F: 0x9C39,
            0x8A90: 0x53F6,
            0x8A91: 0x691B,
            0x8A92: 0x6A3A,
            0x8A93: 0x9784,
            0x8A94: 0x682A,
            0x8A95: 0x515C,
            0x8A96: 0x7AC3,
            0x8A97: 0x84B2,
            0x8A98: 0x91DC,
            0x8A99: 0x938C,
            0x8A9A: 0x565B,
            0x8A9B: 0x9D28,
            0x8A9C: 0x6822,
            0x8A9D: 0x8305,
            0x8A9E: 0x8431,
            0x8A9F: 0x7CA5,
            0x8AA0: 0x5208,
            0x8AA1: 0x82C5,
            0x8AA2: 0x74E6,
            0x8AA3: 0x4E7E,
            0x8AA4: 0x4F83,
            0x8AA5: 0x51A0,
            0x8AA6: 0x5BD2,
            0x8AA7: 0x520A,
            0x8AA8: 0x52D8,
            0x8AA9: 0x52E7,
            0x8AAA: 0x5DFB,
            0x8AAB: 0x559A,
            0x8AAC: 0x582A,
            0x8AAD: 0x59E6,
            0x8AAE: 0x5B8C,
            0x8AAF: 0x5B98,
            0x8AB0: 0x5BDB,
            0x8AB1: 0x5E72,
            0x8AB2: 0x5E79,
            0x8AB3: 0x60A3,
            0x8AB4: 0x611F,
            0x8AB5: 0x6163,
            0x8AB6: 0x61BE,
            0x8AB7: 0x63DB,
            0x8AB8: 0x6562,
            0x8AB9: 0x67D1,
            0x8ABA: 0x6853,
            0x8ABB: 0x68FA,
            0x8ABC: 0x6B3E,
            0x8ABD: 0x6B53,
            0x8ABE: 0x6C57,
            0x8ABF: 0x6F22,
            0x8AC0: 0x6F97,
            0x8AC1: 0x6F45,
            0x8AC2: 0x74B0,
            0x8AC3: 0x7518,
            0x8AC4: 0x76E3,
            0x8AC5: 0x770B,
            0x8AC6: 0x7AFF,
            0x8AC7: 0x7BA1,
            0x8AC8: 0x7C21,
            0x8AC9: 0x7DE9,
            0x8ACA: 0x7F36,
            0x8ACB: 0x7FF0,
            0x8ACC: 0x809D,
            0x8ACD: 0x8266,
            0x8ACE: 0x839E,
            0x8ACF: 0x89B3,
            0x8AD0: 0x8ACC,
            0x8AD1: 0x8CAB,
            0x8AD2: 0x9084,
            0x8AD3: 0x9451,
            0x8AD4: 0x9593,
            0x8AD5: 0x9591,
            0x8AD6: 0x95A2,
            0x8AD7: 0x9665,
            0x8AD8: 0x97D3,
            0x8AD9: 0x9928,
            0x8ADA: 0x8218,
            0x8ADB: 0x4E38,
            0x8ADC: 0x542B,
            0x8ADD: 0x5CB8,
            0x8ADE: 0x5DCC,
            0x8ADF: 0x73A9,
            0x8AE0: 0x764C,
            0x8AE1: 0x773C,
            0x8AE2: 0x5CA9,
            0x8AE3: 0x7FEB,
            0x8AE4: 0x8D0B,
            0x8AE5: 0x96C1,
            0x8AE6: 0x9811,
            0x8AE7: 0x9854,
            0x8AE8: 0x9858,
            0x8AE9: 0x4F01,
            0x8AEA: 0x4F0E,
            0x8AEB: 0x5371,
            0x8AEC: 0x559C,
            0x8AED: 0x5668,
            0x8AEE: 0x57FA,
            0x8AEF: 0x5947,
            0x8AF0: 0x5B09,
            0x8AF1: 0x5BC4,
            0x8AF2: 0x5C90,
            0x8AF3: 0x5E0C,
            0x8AF4: 0x5E7E,
            0x8AF5: 0x5FCC,
            0x8AF6: 0x63EE,
            0x8AF7: 0x673A,
            0x8AF8: 0x65D7,
            0x8AF9: 0x65E2,
            0x8AFA: 0x671F,
            0x8AFB: 0x68CB,
            0x8AFC: 0x68C4,
            0x8B40: 0x6A5F,
            0x8B41: 0x5E30,
            0x8B42: 0x6BC5,
            0x8B43: 0x6C17,
            0x8B44: 0x6C7D,
            0x8B45: 0x757F,
            0x8B46: 0x7948,
            0x8B47: 0x5B63,
            0x8B48: 0x7A00,
            0x8B49: 0x7D00,
            0x8B4A: 0x5FBD,
            0x8B4B: 0x898F,
            0x8B4C: 0x8A18,
            0x8B4D: 0x8CB4,
            0x8B4E: 0x8D77,
            0x8B4F: 0x8ECC,
            0x8B50: 0x8F1D,
            0x8B51: 0x98E2,
            0x8B52: 0x9A0E,
            0x8B53: 0x9B3C,
            0x8B54: 0x4E80,
            0x8B55: 0x507D,
            0x8B56: 0x5100,
            0x8B57: 0x5993,
            0x8B58: 0x5B9C,
            0x8B59: 0x622F,
            0x8B5A: 0x6280,
            0x8B5B: 0x64EC,
            0x8B5C: 0x6B3A,
            0x8B5D: 0x72A0,
            0x8B5E: 0x7591,
            0x8B5F: 0x7947,
            0x8B60: 0x7FA9,
            0x8B61: 0x87FB,
            0x8B62: 0x8ABC,
            0x8B63: 0x8B70,
            0x8B64: 0x63AC,
            0x8B65: 0x83CA,
            0x8B66: 0x97A0,
            0x8B67: 0x5409,
            0x8B68: 0x5403,
            0x8B69: 0x55AB,
            0x8B6A: 0x6854,
            0x8B6B: 0x6A58,
            0x8B6C: 0x8A70,
            0x8B6D: 0x7827,
            0x8B6E: 0x6775,
            0x8B6F: 0x9ECD,
            0x8B70: 0x5374,
            0x8B71: 0x5BA2,
            0x8B72: 0x811A,
            0x8B73: 0x8650,
            0x8B74: 0x9006,
            0x8B75: 0x4E18,
            0x8B76: 0x4E45,
            0x8B77: 0x4EC7,
            0x8B78: 0x4F11,
            0x8B79: 0x53CA,
            0x8B7A: 0x5438,
            0x8B7B: 0x5BAE,
            0x8B7C: 0x5F13,
            0x8B7D: 0x6025,
            0x8B7E: 0x6551,
            0x8B80: 0x673D,
            0x8B81: 0x6C42,
            0x8B82: 0x6C72,
            0x8B83: 0x6CE3,
            0x8B84: 0x7078,
            0x8B85: 0x7403,
            0x8B86: 0x7A76,
            0x8B87: 0x7AAE,
            0x8B88: 0x7B08,
            0x8B89: 0x7D1A,
            0x8B8A: 0x7CFE,
            0x8B8B: 0x7D66,
            0x8B8C: 0x65E7,
            0x8B8D: 0x725B,
            0x8B8E: 0x53BB,
            0x8B8F: 0x5C45,
            0x8B90: 0x5DE8,
            0x8B91: 0x62D2,
            0x8B92: 0x62E0,
            0x8B93: 0x6319,
            0x8B94: 0x6E20,
            0x8B95: 0x865A,
            0x8B96: 0x8A31,
            0x8B97: 0x8DDD,
            0x8B98: 0x92F8,
            0x8B99: 0x6F01,
            0x8B9A: 0x79A6,
            0x8B9B: 0x9B5A,
            0x8B9C: 0x4EA8,
            0x8B9D: 0x4EAB,
            0x8B9E: 0x4EAC,
            0x8B9F: 0x4F9B,
            0x8BA0: 0x4FA0,
            0x8BA1: 0x50D1,
            0x8BA2: 0x5147,
            0x8BA3: 0x7AF6,
            0x8BA4: 0x5171,
            0x8BA5: 0x51F6,
            0x8BA6: 0x5354,
            0x8BA7: 0x5321,
            0x8BA8: 0x537F,
            0x8BA9: 0x53EB,
            0x8BAA: 0x55AC,
            0x8BAB: 0x5883,
            0x8BAC: 0x5CE1,
            0x8BAD: 0x5F37,
            0x8BAE: 0x5F4A,
            0x8BAF: 0x602F,
            0x8BB0: 0x6050,
            0x8BB1: 0x606D,
            0x8BB2: 0x631F,
            0x8BB3: 0x6559,
            0x8BB4: 0x6A4B,
            0x8BB5: 0x6CC1,
            0x8BB6: 0x72C2,
            0x8BB7: 0x72ED,
            0x8BB8: 0x77EF,
            0x8BB9: 0x80F8,
            0x8BBA: 0x8105,
            0x8BBB: 0x8208,
            0x8BBC: 0x854E,
            0x8BBD: 0x90F7,
            0x8BBE: 0x93E1,
            0x8BBF: 0x97FF,
            0x8BC0: 0x9957,
            0x8BC1: 0x9A5A,
            0x8BC2: 0x4EF0,
            0x8BC3: 0x51DD,
            0x8BC4: 0x5C2D,
            0x8BC5: 0x6681,
            0x8BC6: 0x696D,
            0x8BC7: 0x5C40,
            0x8BC8: 0x66F2,
            0x8BC9: 0x6975,
            0x8BCA: 0x7389,
            0x8BCB: 0x6850,
            0x8BCC: 0x7C81,
            0x8BCD: 0x50C5,
            0x8BCE: 0x52E4,
            0x8BCF: 0x5747,
            0x8BD0: 0x5DFE,
            0x8BD1: 0x9326,
            0x8BD2: 0x65A4,
            0x8BD3: 0x6B23,
            0x8BD4: 0x6B3D,
            0x8BD5: 0x7434,
            0x8BD6: 0x7981,
            0x8BD7: 0x79BD,
            0x8BD8: 0x7B4B,
            0x8BD9: 0x7DCA,
            0x8BDA: 0x82B9,
            0x8BDB: 0x83CC,
            0x8BDC: 0x887F,
            0x8BDD: 0x895F,
            0x8BDE: 0x8B39,
            0x8BDF: 0x8FD1,
            0x8BE0: 0x91D1,
            0x8BE1: 0x541F,
            0x8BE2: 0x9280,
            0x8BE3: 0x4E5D,
            0x8BE4: 0x5036,
            0x8BE5: 0x53E5,
            0x8BE6: 0x533A,
            0x8BE7: 0x72D7,
            0x8BE8: 0x7396,
            0x8BE9: 0x77E9,
            0x8BEA: 0x82E6,
            0x8BEB: 0x8EAF,
            0x8BEC: 0x99C6,
            0x8BED: 0x99C8,
            0x8BEE: 0x99D2,
            0x8BEF: 0x5177,
            0x8BF0: 0x611A,
            0x8BF1: 0x865E,
            0x8BF2: 0x55B0,
            0x8BF3: 0x7A7A,
            0x8BF4: 0x5076,
            0x8BF5: 0x5BD3,
            0x8BF6: 0x9047,
            0x8BF7: 0x9685,
            0x8BF8: 0x4E32,
            0x8BF9: 0x6ADB,
            0x8BFA: 0x91E7,
            0x8BFB: 0x5C51,
            0x8BFC: 0x5C48,
            0x8C40: 0x6398,
            0x8C41: 0x7A9F,
            0x8C42: 0x6C93,
            0x8C43: 0x9774,
            0x8C44: 0x8F61,
            0x8C45: 0x7AAA,
            0x8C46: 0x718A,
            0x8C47: 0x9688,
            0x8C48: 0x7C82,
            0x8C49: 0x6817,
            0x8C4A: 0x7E70,
            0x8C4B: 0x6851,
            0x8C4C: 0x936C,
            0x8C4D: 0x52F2,
            0x8C4E: 0x541B,
            0x8C4F: 0x85AB,
            0x8C50: 0x8A13,
            0x8C51: 0x7FA4,
            0x8C52: 0x8ECD,
            0x8C53: 0x90E1,
            0x8C54: 0x5366,
            0x8C55: 0x8888,
            0x8C56: 0x7941,
            0x8C57: 0x4FC2,
            0x8C58: 0x50BE,
            0x8C59: 0x5211,
            0x8C5A: 0x5144,
            0x8C5B: 0x5553,
            0x8C5C: 0x572D,
            0x8C5D: 0x73EA,
            0x8C5E: 0x578B,
            0x8C5F: 0x5951,
            0x8C60: 0x5F62,
            0x8C61: 0x5F84,
            0x8C62: 0x6075,
            0x8C63: 0x6176,
            0x8C64: 0x6167,
            0x8C65: 0x61A9,
            0x8C66: 0x63B2,
            0x8C67: 0x643A,
            0x8C68: 0x656C,
            0x8C69: 0x666F,
            0x8C6A: 0x6842,
            0x8C6B: 0x6E13,
            0x8C6C: 0x7566,
            0x8C6D: 0x7A3D,
            0x8C6E: 0x7CFB,
            0x8C6F: 0x7D4C,
            0x8C70: 0x7D99,
            0x8C71: 0x7E4B,
            0x8C72: 0x7F6B,
            0x8C73: 0x830E,
            0x8C74: 0x834A,
            0x8C75: 0x86CD,
            0x8C76: 0x8A08,
            0x8C77: 0x8A63,
            0x8C78: 0x8B66,
            0x8C79: 0x8EFD,
            0x8C7A: 0x981A,
            0x8C7B: 0x9D8F,
            0x8C7C: 0x82B8,
            0x8C7D: 0x8FCE,
            0x8C7E: 0x9BE8,
            0x8C80: 0x5287,
            0x8C81: 0x621F,
            0x8C82: 0x6483,
            0x8C83: 0x6FC0,
            0x8C84: 0x9699,
            0x8C85: 0x6841,
            0x8C86: 0x5091,
            0x8C87: 0x6B20,
            0x8C88: 0x6C7A,
            0x8C89: 0x6F54,
            0x8C8A: 0x7A74,
            0x8C8B: 0x7D50,
            0x8C8C: 0x8840,
            0x8C8D: 0x8A23,
            0x8C8E: 0x6708,
            0x8C8F: 0x4EF6,
            0x8C90: 0x5039,
            0x8C91: 0x5026,
            0x8C92: 0x5065,
            0x8C93: 0x517C,
            0x8C94: 0x5238,
            0x8C95: 0x5263,
            0x8C96: 0x55A7,
            0x8C97: 0x570F,
            0x8C98: 0x5805,
            0x8C99: 0x5ACC,
            0x8C9A: 0x5EFA,
            0x8C9B: 0x61B2,
            0x8C9C: 0x61F8,
            0x8C9D: 0x62F3,
            0x8C9E: 0x6372,
            0x8C9F: 0x691C,
            0x8CA0: 0x6A29,
            0x8CA1: 0x727D,
            0x8CA2: 0x72AC,
            0x8CA3: 0x732E,
            0x8CA4: 0x7814,
            0x8CA5: 0x786F,
            0x8CA6: 0x7D79,
            0x8CA7: 0x770C,
            0x8CA8: 0x80A9,
            0x8CA9: 0x898B,
            0x8CAA: 0x8B19,
            0x8CAB: 0x8CE2,
            0x8CAC: 0x8ED2,
            0x8CAD: 0x9063,
            0x8CAE: 0x9375,
            0x8CAF: 0x967A,
            0x8CB0: 0x9855,
            0x8CB1: 0x9A13,
            0x8CB2: 0x9E78,
            0x8CB3: 0x5143,
            0x8CB4: 0x539F,
            0x8CB5: 0x53B3,
            0x8CB6: 0x5E7B,
            0x8CB7: 0x5F26,
            0x8CB8: 0x6E1B,
            0x8CB9: 0x6E90,
            0x8CBA: 0x7384,
            0x8CBB: 0x73FE,
            0x8CBC: 0x7D43,
            0x8CBD: 0x8237,
            0x8CBE: 0x8A00,
            0x8CBF: 0x8AFA,
            0x8CC0: 0x9650,
            0x8CC1: 0x4E4E,
            0x8CC2: 0x500B,
            0x8CC3: 0x53E4,
            0x8CC4: 0x547C,
            0x8CC5: 0x56FA,
            0x8CC6: 0x59D1,
            0x8CC7: 0x5B64,
            0x8CC8: 0x5DF1,
            0x8CC9: 0x5EAB,
            0x8CCA: 0x5F27,
            0x8CCB: 0x6238,
            0x8CCC: 0x6545,
            0x8CCD: 0x67AF,
            0x8CCE: 0x6E56,
            0x8CCF: 0x72D0,
            0x8CD0: 0x7CCA,
            0x8CD1: 0x88B4,
            0x8CD2: 0x80A1,
            0x8CD3: 0x80E1,
            0x8CD4: 0x83F0,
            0x8CD5: 0x864E,
            0x8CD6: 0x8A87,
            0x8CD7: 0x8DE8,
            0x8CD8: 0x9237,
            0x8CD9: 0x96C7,
            0x8CDA: 0x9867,
            0x8CDB: 0x9F13,
            0x8CDC: 0x4E94,
            0x8CDD: 0x4E92,
            0x8CDE: 0x4F0D,
            0x8CDF: 0x5348,
            0x8CE0: 0x5449,
            0x8CE1: 0x543E,
            0x8CE2: 0x5A2F,
            0x8CE3: 0x5F8C,
            0x8CE4: 0x5FA1,
            0x8CE5: 0x609F,
            0x8CE6: 0x68A7,
            0x8CE7: 0x6A8E,
            0x8CE8: 0x745A,
            0x8CE9: 0x7881,
            0x8CEA: 0x8A9E,
            0x8CEB: 0x8AA4,
            0x8CEC: 0x8B77,
            0x8CED: 0x9190,
            0x8CEE: 0x4E5E,
            0x8CEF: 0x9BC9,
            0x8CF0: 0x4EA4,
            0x8CF1: 0x4F7C,
            0x8CF2: 0x4FAF,
            0x8CF3: 0x5019,
            0x8CF4: 0x5016,
            0x8CF5: 0x5149,
            0x8CF6: 0x516C,
            0x8CF7: 0x529F,
            0x8CF8: 0x52B9,
            0x8CF9: 0x52FE,
            0x8CFA: 0x539A,
            0x8CFB: 0x53E3,
            0x8CFC: 0x5411,
            0x8D40: 0x540E,
            0x8D41: 0x5589,
            0x8D42: 0x5751,
            0x8D43: 0x57A2,
            0x8D44: 0x597D,
            0x8D45: 0x5B54,
            0x8D46: 0x5B5D,
            0x8D47: 0x5B8F,
            0x8D48: 0x5DE5,
            0x8D49: 0x5DE7,
            0x8D4A: 0x5DF7,
            0x8D4B: 0x5E78,
            0x8D4C: 0x5E83,
            0x8D4D: 0x5E9A,
            0x8D4E: 0x5EB7,
            0x8D4F: 0x5F18,
            0x8D50: 0x6052,
            0x8D51: 0x614C,
            0x8D52: 0x6297,
            0x8D53: 0x62D8,
            0x8D54: 0x63A7,
            0x8D55: 0x653B,
            0x8D56: 0x6602,
            0x8D57: 0x6643,
            0x8D58: 0x66F4,
            0x8D59: 0x676D,
            0x8D5A: 0x6821,
            0x8D5B: 0x6897,
            0x8D5C: 0x69CB,
            0x8D5D: 0x6C5F,
            0x8D5E: 0x6D2A,
            0x8D5F: 0x6D69,
            0x8D60: 0x6E2F,
            0x8D61: 0x6E9D,
            0x8D62: 0x7532,
            0x8D63: 0x7687,
            0x8D64: 0x786C,
            0x8D65: 0x7A3F,
            0x8D66: 0x7CE0,
            0x8D67: 0x7D05,
            0x8D68: 0x7D18,
            0x8D69: 0x7D5E,
            0x8D6A: 0x7DB1,
            0x8D6B: 0x8015,
            0x8D6C: 0x8003,
            0x8D6D: 0x80AF,
            0x8D6E: 0x80B1,
            0x8D6F: 0x8154,
            0x8D70: 0x818F,
            0x8D71: 0x822A,
            0x8D72: 0x8352,
            0x8D73: 0x884C,
            0x8D74: 0x8861,
            0x8D75: 0x8B1B,
            0x8D76: 0x8CA2,
            0x8D77: 0x8CFC,
            0x8D78: 0x90CA,
            0x8D79: 0x9175,
            0x8D7A: 0x9271,
            0x8D7B: 0x783F,
            0x8D7C: 0x92FC,
            0x8D7D: 0x95A4,
            0x8D7E: 0x964D,
            0x8D80: 0x9805,
            0x8D81: 0x9999,
            0x8D82: 0x9AD8,
            0x8D83: 0x9D3B,
            0x8D84: 0x525B,
            0x8D85: 0x52AB,
            0x8D86: 0x53F7,
            0x8D87: 0x5408,
            0x8D88: 0x58D5,
            0x8D89: 0x62F7,
            0x8D8A: 0x6FE0,
            0x8D8B: 0x8C6A,
            0x8D8C: 0x8F5F,
            0x8D8D: 0x9EB9,
            0x8D8E: 0x514B,
            0x8D8F: 0x523B,
            0x8D90: 0x544A,
            0x8D91: 0x56FD,
            0x8D92: 0x7A40,
            0x8D93: 0x9177,
            0x8D94: 0x9D60,
            0x8D95: 0x9ED2,
            0x8D96: 0x7344,
            0x8D97: 0x6F09,
            0x8D98: 0x8170,
            0x8D99: 0x7511,
            0x8D9A: 0x5FFD,
            0x8D9B: 0x60DA,
            0x8D9C: 0x9AA8,
            0x8D9D: 0x72DB,
            0x8D9E: 0x8FBC,
            0x8D9F: 0x6B64,
            0x8DA0: 0x9803,
            0x8DA1: 0x4ECA,
            0x8DA2: 0x56F0,
            0x8DA3: 0x5764,
            0x8DA4: 0x58BE,
            0x8DA5: 0x5A5A,
            0x8DA6: 0x6068,
            0x8DA7: 0x61C7,
            0x8DA8: 0x660F,
            0x8DA9: 0x6606,
            0x8DAA: 0x6839,
            0x8DAB: 0x68B1,
            0x8DAC: 0x6DF7,
            0x8DAD: 0x75D5,
            0x8DAE: 0x7D3A,
            0x8DAF: 0x826E,
            0x8DB0: 0x9B42,
            0x8DB1: 0x4E9B,
            0x8DB2: 0x4F50,
            0x8DB3: 0x53C9,
            0x8DB4: 0x5506,
            0x8DB5: 0x5D6F,
            0x8DB6: 0x5DE6,
            0x8DB7: 0x5DEE,
            0x8DB8: 0x67FB,
            0x8DB9: 0x6C99,
            0x8DBA: 0x7473,
            0x8DBB: 0x7802,
            0x8DBC: 0x8A50,
            0x8DBD: 0x9396,
            0x8DBE: 0x88DF,
            0x8DBF: 0x5750,
            0x8DC0: 0x5EA7,
            0x8DC1: 0x632B,
            0x8DC2: 0x50B5,
            0x8DC3: 0x50AC,
            0x8DC4: 0x518D,
            0x8DC5: 0x6700,
            0x8DC6: 0x54C9,
            0x8DC7: 0x585E,
            0x8DC8: 0x59BB,
            0x8DC9: 0x5BB0,
            0x8DCA: 0x5F69,
            0x8DCB: 0x624D,
            0x8DCC: 0x63A1,
            0x8DCD: 0x683D,
            0x8DCE: 0x6B73,
            0x8DCF: 0x6E08,
            0x8DD0: 0x707D,
            0x8DD1: 0x91C7,
            0x8DD2: 0x7280,
            0x8DD3: 0x7815,
            0x8DD4: 0x7826,
            0x8DD5: 0x796D,
            0x8DD6: 0x658E,
            0x8DD7: 0x7D30,
            0x8DD8: 0x83DC,
            0x8DD9: 0x88C1,
            0x8DDA: 0x8F09,
            0x8DDB: 0x969B,
            0x8DDC: 0x5264,
            0x8DDD: 0x5728,
            0x8DDE: 0x6750,
            0x8DDF: 0x7F6A,
            0x8DE0: 0x8CA1,
            0x8DE1: 0x51B4,
            0x8DE2: 0x5742,
            0x8DE3: 0x962A,
            0x8DE4: 0x583A,
            0x8DE5: 0x698A,
            0x8DE6: 0x80B4,
            0x8DE7: 0x54B2,
            0x8DE8: 0x5D0E,
            0x8DE9: 0x57FC,
            0x8DEA: 0x7895,
            0x8DEB: 0x9DFA,
            0x8DEC: 0x4F5C,
            0x8DED: 0x524A,
            0x8DEE: 0x548B,
            0x8DEF: 0x643E,
            0x8DF0: 0x6628,
            0x8DF1: 0x6714,
            0x8DF2: 0x67F5,
            0x8DF3: 0x7A84,
            0x8DF4: 0x7B56,
            0x8DF5: 0x7D22,
            0x8DF6: 0x932F,
            0x8DF7: 0x685C,
            0x8DF8: 0x9BAD,
            0x8DF9: 0x7B39,
            0x8DFA: 0x5319,
            0x8DFB: 0x518A,
            0x8DFC: 0x5237,
            0x8E40: 0x5BDF,
            0x8E41: 0x62F6,
            0x8E42: 0x64AE,
            0x8E43: 0x64E6,
            0x8E44: 0x672D,
            0x8E45: 0x6BBA,
            0x8E46: 0x85A9,
            0x8E47: 0x96D1,
            0x8E48: 0x7690,
            0x8E49: 0x9BD6,
            0x8E4A: 0x634C,
            0x8E4B: 0x9306,
            0x8E4C: 0x9BAB,
            0x8E4D: 0x76BF,
            0x8E4E: 0x6652,
            0x8E4F: 0x4E09,
            0x8E50: 0x5098,
            0x8E51: 0x53C2,
            0x8E52: 0x5C71,
            0x8E53: 0x60E8,
            0x8E54: 0x6492,
            0x8E55: 0x6563,
            0x8E56: 0x685F,
            0x8E57: 0x71E6,
            0x8E58: 0x73CA,
            0x8E59: 0x7523,
            0x8E5A: 0x7B97,
            0x8E5B: 0x7E82,
            0x8E5C: 0x8695,
            0x8E5D: 0x8B83,
            0x8E5E: 0x8CDB,
            0x8E5F: 0x9178,
            0x8E60: 0x9910,
            0x8E61: 0x65AC,
            0x8E62: 0x66AB,
            0x8E63: 0x6B8B,
            0x8E64: 0x4ED5,
            0x8E65: 0x4ED4,
            0x8E66: 0x4F3A,
            0x8E67: 0x4F7F,
            0x8E68: 0x523A,
            0x8E69: 0x53F8,
            0x8E6A: 0x53F2,
            0x8E6B: 0x55E3,
            0x8E6C: 0x56DB,
            0x8E6D: 0x58EB,
            0x8E6E: 0x59CB,
            0x8E6F: 0x59C9,
            0x8E70: 0x59FF,
            0x8E71: 0x5B50,
            0x8E72: 0x5C4D,
            0x8E73: 0x5E02,
            0x8E74: 0x5E2B,
            0x8E75: 0x5FD7,
            0x8E76: 0x601D,
            0x8E77: 0x6307,
            0x8E78: 0x652F,
            0x8E79: 0x5B5C,
            0x8E7A: 0x65AF,
            0x8E7B: 0x65BD,
            0x8E7C: 0x65E8,
            0x8E7D: 0x679D,
            0x8E7E: 0x6B62,
            0x8E80: 0x6B7B,
            0x8E81: 0x6C0F,
            0x8E82: 0x7345,
            0x8E83: 0x7949,
            0x8E84: 0x79C1,
            0x8E85: 0x7CF8,
            0x8E86: 0x7D19,
            0x8E87: 0x7D2B,
            0x8E88: 0x80A2,
            0x8E89: 0x8102,
            0x8E8A: 0x81F3,
            0x8E8B: 0x8996,
            0x8E8C: 0x8A5E,
            0x8E8D: 0x8A69,
            0x8E8E: 0x8A66,
            0x8E8F: 0x8A8C,
            0x8E90: 0x8AEE,
            0x8E91: 0x8CC7,
            0x8E92: 0x8CDC,
            0x8E93: 0x96CC,
            0x8E94: 0x98FC,
            0x8E95: 0x6B6F,
            0x8E96: 0x4E8B,
            0x8E97: 0x4F3C,
            0x8E98: 0x4F8D,
            0x8E99: 0x5150,
            0x8E9A: 0x5B57,
            0x8E9B: 0x5BFA,
            0x8E9C: 0x6148,
            0x8E9D: 0x6301,
            0x8E9E: 0x6642,
            0x8E9F: 0x6B21,
            0x8EA0: 0x6ECB,
            0x8EA1: 0x6CBB,
            0x8EA2: 0x723E,
            0x8EA3: 0x74BD,
            0x8EA4: 0x75D4,
            0x8EA5: 0x78C1,
            0x8EA6: 0x793A,
            0x8EA7: 0x800C,
            0x8EA8: 0x8033,
            0x8EA9: 0x81EA,
            0x8EAA: 0x8494,
            0x8EAB: 0x8F9E,
            0x8EAC: 0x6C50,
            0x8EAD: 0x9E7F,
            0x8EAE: 0x5F0F,
            0x8EAF: 0x8B58,
            0x8EB0: 0x9D2B,
            0x8EB1: 0x7AFA,
            0x8EB2: 0x8EF8,
            0x8EB3: 0x5B8D,
            0x8EB4: 0x96EB,
            0x8EB5: 0x4E03,
            0x8EB6: 0x53F1,
            0x8EB7: 0x57F7,
            0x8EB8: 0x5931,
            0x8EB9: 0x5AC9,
            0x8EBA: 0x5BA4,
            0x8EBB: 0x6089,
            0x8EBC: 0x6E7F,
            0x8EBD: 0x6F06,
            0x8EBE: 0x75BE,
            0x8EBF: 0x8CEA,
            0x8EC0: 0x5B9F,
            0x8EC1: 0x8500,
            0x8EC2: 0x7BE0,
            0x8EC3: 0x5072,
            0x8EC4: 0x67F4,
            0x8EC5: 0x829D,
            0x8EC6: 0x5C61,
            0x8EC7: 0x854A,
            0x8EC8: 0x7E1E,
            0x8EC9: 0x820E,
            0x8ECA: 0x5199,
            0x8ECB: 0x5C04,
            0x8ECC: 0x6368,
            0x8ECD: 0x8D66,
            0x8ECE: 0x659C,
            0x8ECF: 0x716E,
            0x8ED0: 0x793E,
            0x8ED1: 0x7D17,
            0x8ED2: 0x8005,
            0x8ED3: 0x8B1D,
            0x8ED4: 0x8ECA,
            0x8ED5: 0x906E,
            0x8ED6: 0x86C7,
            0x8ED7: 0x90AA,
            0x8ED8: 0x501F,
            0x8ED9: 0x52FA,
            0x8EDA: 0x5C3A,
            0x8EDB: 0x6753,
            0x8EDC: 0x707C,
            0x8EDD: 0x7235,
            0x8EDE: 0x914C,
            0x8EDF: 0x91C8,
            0x8EE0: 0x932B,
            0x8EE1: 0x82E5,
            0x8EE2: 0x5BC2,
            0x8EE3: 0x5F31,
            0x8EE4: 0x60F9,
            0x8EE5: 0x4E3B,
            0x8EE6: 0x53D6,
            0x8EE7: 0x5B88,
            0x8EE8: 0x624B,
            0x8EE9: 0x6731,
            0x8EEA: 0x6B8A,
            0x8EEB: 0x72E9,
            0x8EEC: 0x73E0,
            0x8EED: 0x7A2E,
            0x8EEE: 0x816B,
            0x8EEF: 0x8DA3,
            0x8EF0: 0x9152,
            0x8EF1: 0x9996,
            0x8EF2: 0x5112,
            0x8EF3: 0x53D7,
            0x8EF4: 0x546A,
            0x8EF5: 0x5BFF,
            0x8EF6: 0x6388,
            0x8EF7: 0x6A39,
            0x8EF8: 0x7DAC,
            0x8EF9: 0x9700,
            0x8EFA: 0x56DA,
            0x8EFB: 0x53CE,
            0x8EFC: 0x5468,
            0x8F40: 0x5B97,
            0x8F41: 0x5C31,
            0x8F42: 0x5DDE,
            0x8F43: 0x4FEE,
            0x8F44: 0x6101,
            0x8F45: 0x62FE,
            0x8F46: 0x6D32,
            0x8F47: 0x79C0,
            0x8F48: 0x79CB,
            0x8F49: 0x7D42,
            0x8F4A: 0x7E4D,
            0x8F4B: 0x7FD2,
            0x8F4C: 0x81ED,
            0x8F4D: 0x821F,
            0x8F4E: 0x8490,
            0x8F4F: 0x8846,
            0x8F50: 0x8972,
            0x8F51: 0x8B90,
            0x8F52: 0x8E74,
            0x8F53: 0x8F2F,
            0x8F54: 0x9031,
            0x8F55: 0x914B,
            0x8F56: 0x916C,
            0x8F57: 0x96C6,
            0x8F58: 0x919C,
            0x8F59: 0x4EC0,
            0x8F5A: 0x4F4F,
            0x8F5B: 0x5145,
            0x8F5C: 0x5341,
            0x8F5D: 0x5F93,
            0x8F5E: 0x620E,
            0x8F5F: 0x67D4,
            0x8F60: 0x6C41,
            0x8F61: 0x6E0B,
            0x8F62: 0x7363,
            0x8F63: 0x7E26,
            0x8F64: 0x91CD,
            0x8F65: 0x9283,
            0x8F66: 0x53D4,
            0x8F67: 0x5919,
            0x8F68: 0x5BBF,
            0x8F69: 0x6DD1,
            0x8F6A: 0x795D,
            0x8F6B: 0x7E2E,
            0x8F6C: 0x7C9B,
            0x8F6D: 0x587E,
            0x8F6E: 0x719F,
            0x8F6F: 0x51FA,
            0x8F70: 0x8853,
            0x8F71: 0x8FF0,
            0x8F72: 0x4FCA,
            0x8F73: 0x5CFB,
            0x8F74: 0x6625,
            0x8F75: 0x77AC,
            0x8F76: 0x7AE3,
            0x8F77: 0x821C,
            0x8F78: 0x99FF,
            0x8F79: 0x51C6,
            0x8F7A: 0x5FAA,
            0x8F7B: 0x65EC,
            0x8F7C: 0x696F,
            0x8F7D: 0x6B89,
            0x8F7E: 0x6DF3,
            0x8F80: 0x6E96,
            0x8F81: 0x6F64,
            0x8F82: 0x76FE,
            0x8F83: 0x7D14,
            0x8F84: 0x5DE1,
            0x8F85: 0x9075,
            0x8F86: 0x9187,
            0x8F87: 0x9806,
            0x8F88: 0x51E6,
            0x8F89: 0x521D,
            0x8F8A: 0x6240,
            0x8F8B: 0x6691,
            0x8F8C: 0x66D9,
            0x8F8D: 0x6E1A,
            0x8F8E: 0x5EB6,
            0x8F8F: 0x7DD2,
            0x8F90: 0x7F72,
            0x8F91: 0x66F8,
            0x8F92: 0x85AF,
            0x8F93: 0x85F7,
            0x8F94: 0x8AF8,
            0x8F95: 0x52A9,
            0x8F96: 0x53D9,
            0x8F97: 0x5973,
            0x8F98: 0x5E8F,
            0x8F99: 0x5F90,
            0x8F9A: 0x6055,
            0x8F9B: 0x92E4,
            0x8F9C: 0x9664,
            0x8F9D: 0x50B7,
            0x8F9E: 0x511F,
            0x8F9F: 0x52DD,
            0x8FA0: 0x5320,
            0x8FA1: 0x5347,
            0x8FA2: 0x53EC,
            0x8FA3: 0x54E8,
            0x8FA4: 0x5546,
            0x8FA5: 0x5531,
            0x8FA6: 0x5617,
            0x8FA7: 0x5968,
            0x8FA8: 0x59BE,
            0x8FA9: 0x5A3C,
            0x8FAA: 0x5BB5,
            0x8FAB: 0x5C06,
            0x8FAC: 0x5C0F,
            0x8FAD: 0x5C11,
            0x8FAE: 0x5C1A,
            0x8FAF: 0x5E84,
            0x8FB0: 0x5E8A,
            0x8FB1: 0x5EE0,
            0x8FB2: 0x5F70,
            0x8FB3: 0x627F,
            0x8FB4: 0x6284,
            0x8FB5: 0x62DB,
            0x8FB6: 0x638C,
            0x8FB7: 0x6377,
            0x8FB8: 0x6607,
            0x8FB9: 0x660C,
            0x8FBA: 0x662D,
            0x8FBB: 0x6676,
            0x8FBC: 0x677E,
            0x8FBD: 0x68A2,
            0x8FBE: 0x6A1F,
            0x8FBF: 0x6A35,
            0x8FC0: 0x6CBC,
            0x8FC1: 0x6D88,
            0x8FC2: 0x6E09,
            0x8FC3: 0x6E58,
            0x8FC4: 0x713C,
            0x8FC5: 0x7126,
            0x8FC6: 0x7167,
            0x8FC7: 0x75C7,
            0x8FC8: 0x7701,
            0x8FC9: 0x785D,
            0x8FCA: 0x7901,
            0x8FCB: 0x7965,
            0x8FCC: 0x79F0,
            0x8FCD: 0x7AE0,
            0x8FCE: 0x7B11,
            0x8FCF: 0x7CA7,
            0x8FD0: 0x7D39,
            0x8FD1: 0x8096,
            0x8FD2: 0x83D6,
            0x8FD3: 0x848B,
            0x8FD4: 0x8549,
            0x8FD5: 0x885D,
            0x8FD6: 0x88F3,
            0x8FD7: 0x8A1F,
            0x8FD8: 0x8A3C,
            0x8FD9: 0x8A54,
            0x8FDA: 0x8A73,
            0x8FDB: 0x8C61,
            0x8FDC: 0x8CDE,
            0x8FDD: 0x91A4,
            0x8FDE: 0x9266,
            0x8FDF: 0x937E,
            0x8FE0: 0x9418,
            0x8FE1: 0x969C,
            0x8FE2: 0x9798,
            0x8FE3: 0x4E0A,
            0x8FE4: 0x4E08,
            0x8FE5: 0x4E1E,
            0x8FE6: 0x4E57,
            0x8FE7: 0x5197,
            0x8FE8: 0x5270,
            0x8FE9: 0x57CE,
            0x8FEA: 0x5834,
            0x8FEB: 0x58CC,
            0x8FEC: 0x5B22,
            0x8FED: 0x5E38,
            0x8FEE: 0x60C5,
            0x8FEF: 0x64FE,
            0x8FF0: 0x6761,
            0x8FF1: 0x6756,
            0x8FF2: 0x6D44,
            0x8FF3: 0x72B6,
            0x8FF4: 0x7573,
            0x8FF5: 0x7A63,
            0x8FF6: 0x84B8,
            0x8FF7: 0x8B72,
            0x8FF8: 0x91B8,
            0x8FF9: 0x9320,
            0x8FFA: 0x5631,
            0x8FFB: 0x57F4,
            0x8FFC: 0x98FE,
            0x9040: 0x62ED,
            0x9041: 0x690D,
            0x9042: 0x6B96,
            0x9043: 0x71ED,
            0x9044: 0x7E54,
            0x9045: 0x8077,
            0x9046: 0x8272,
            0x9047: 0x89E6,
            0x9048: 0x98DF,
            0x9049: 0x8755,
            0x904A: 0x8FB1,
            0x904B: 0x5C3B,
            0x904C: 0x4F38,
            0x904D: 0x4FE1,
            0x904E: 0x4FB5,
            0x904F: 0x5507,
            0x9050: 0x5A20,
            0x9051: 0x5BDD,
            0x9052: 0x5BE9,
            0x9053: 0x5FC3,
            0x9054: 0x614E,
            0x9055: 0x632F,
            0x9056: 0x65B0,
            0x9057: 0x664B,
            0x9058: 0x68EE,
            0x9059: 0x699B,
            0x905A: 0x6D78,
            0x905B: 0x6DF1,
            0x905C: 0x7533,
            0x905D: 0x75B9,
            0x905E: 0x771F,
            0x905F: 0x795E,
            0x9060: 0x79E6,
            0x9061: 0x7D33,
            0x9062: 0x81E3,
            0x9063: 0x82AF,
            0x9064: 0x85AA,
            0x9065: 0x89AA,
            0x9066: 0x8A3A,
            0x9067: 0x8EAB,
            0x9068: 0x8F9B,
            0x9069: 0x9032,
            0x906A: 0x91DD,
            0x906B: 0x9707,
            0x906C: 0x4EBA,
            0x906D: 0x4EC1,
            0x906E: 0x5203,
            0x906F: 0x5875,
            0x9070: 0x58EC,
            0x9071: 0x5C0B,
            0x9072: 0x751A,
            0x9073: 0x5C3D,
            0x9074: 0x814E,
            0x9075: 0x8A0A,
            0x9076: 0x8FC5,
            0x9077: 0x9663,
            0x9078: 0x976D,
            0x9079: 0x7B25,
            0x907A: 0x8ACF,
            0x907B: 0x9808,
            0x907C: 0x9162,
            0x907D: 0x56F3,
            0x907E: 0x53A8,
            0x9080: 0x9017,
            0x9081: 0x5439,
            0x9082: 0x5782,
            0x9083: 0x5E25,
            0x9084: 0x63A8,
            0x9085: 0x6C34,
            0x9086: 0x708A,
            0x9087: 0x7761,
            0x9088: 0x7C8B,
            0x9089: 0x7FE0,
            0x908A: 0x8870,
            0x908B: 0x9042,
            0x908C: 0x9154,
            0x908D: 0x9310,
            0x908E: 0x9318,
            0x908F: 0x968F,
            0x9090: 0x745E,
            0x9091: 0x9AC4,
            0x9092: 0x5D07,
            0x9093: 0x5D69,
            0x9094: 0x6570,
            0x9095: 0x67A2,
            0x9096: 0x8DA8,
            0x9097: 0x96DB,
            0x9098: 0x636E,
            0x9099: 0x6749,
            0x909A: 0x6919,
            0x909B: 0x83C5,
            0x909C: 0x9817,
            0x909D: 0x96C0,
            0x909E: 0x88FE,
            0x909F: 0x6F84,
            0x90A0: 0x647A,
            0x90A1: 0x5BF8,
            0x90A2: 0x4E16,
            0x90A3: 0x702C,
            0x90A4: 0x755D,
            0x90A5: 0x662F,
            0x90A6: 0x51C4,
            0x90A7: 0x5236,
            0x90A8: 0x52E2,
            0x90A9: 0x59D3,
            0x90AA: 0x5F81,
            0x90AB: 0x6027,
            0x90AC: 0x6210,
            0x90AD: 0x653F,
            0x90AE: 0x6574,
            0x90AF: 0x661F,
            0x90B0: 0x6674,
            0x90B1: 0x68F2,
            0x90B2: 0x6816,
            0x90B3: 0x6B63,
            0x90B4: 0x6E05,
            0x90B5: 0x7272,
            0x90B6: 0x751F,
            0x90B7: 0x76DB,
            0x90B8: 0x7CBE,
            0x90B9: 0x8056,
            0x90BA: 0x58F0,
            0x90BB: 0x88FD,
            0x90BC: 0x897F,
            0x90BD: 0x8AA0,
            0x90BE: 0x8A93,
            0x90BF: 0x8ACB,
            0x90C0: 0x901D,
            0x90C1: 0x9192,
            0x90C2: 0x9752,
            0x90C3: 0x9759,
            0x90C4: 0x6589,
            0x90C5: 0x7A0E,
            0x90C6: 0x8106,
            0x90C7: 0x96BB,
            0x90C8: 0x5E2D,
            0x90C9: 0x60DC,
            0x90CA: 0x621A,
            0x90CB: 0x65A5,
            0x90CC: 0x6614,
            0x90CD: 0x6790,
            0x90CE: 0x77F3,
            0x90CF: 0x7A4D,
            0x90D0: 0x7C4D,
            0x90D1: 0x7E3E,
            0x90D2: 0x810A,
            0x90D3: 0x8CAC,
            0x90D4: 0x8D64,
            0x90D5: 0x8DE1,
            0x90D6: 0x8E5F,
            0x90D7: 0x78A9,
            0x90D8: 0x5207,
            0x90D9: 0x62D9,
            0x90DA: 0x63A5,
            0x90DB: 0x6442,
            0x90DC: 0x6298,
            0x90DD: 0x8A2D,
            0x90DE: 0x7A83,
            0x90DF: 0x7BC0,
            0x90E0: 0x8AAC,
            0x90E1: 0x96EA,
            0x90E2: 0x7D76,
            0x90E3: 0x820C,
            0x90E4: 0x8749,
            0x90E5: 0x4ED9,
            0x90E6: 0x5148,
            0x90E7: 0x5343,
            0x90E8: 0x5360,
            0x90E9: 0x5BA3,
            0x90EA: 0x5C02,
            0x90EB: 0x5C16,
            0x90EC: 0x5DDD,
            0x90ED: 0x6226,
            0x90EE: 0x6247,
            0x90EF: 0x64B0,
            0x90F0: 0x6813,
            0x90F1: 0x6834,
            0x90F2: 0x6CC9,
            0x90F3: 0x6D45,
            0x90F4: 0x6D17,
            0x90F5: 0x67D3,
            0x90F6: 0x6F5C,
            0x90F7: 0x714E,
            0x90F8: 0x717D,
            0x90F9: 0x65CB,
            0x90FA: 0x7A7F,
            0x90FB: 0x7BAD,
            0x90FC: 0x7DDA,
            0x9140: 0x7E4A,
            0x9141: 0x7FA8,
            0x9142: 0x817A,
            0x9143: 0x821B,
            0x9144: 0x8239,
            0x9145: 0x85A6,
            0x9146: 0x8A6E,
            0x9147: 0x8CCE,
            0x9148: 0x8DF5,
            0x9149: 0x9078,
            0x914A: 0x9077,
            0x914B: 0x92AD,
            0x914C: 0x9291,
            0x914D: 0x9583,
            0x914E: 0x9BAE,
            0x914F: 0x524D,
            0x9150: 0x5584,
            0x9151: 0x6F38,
            0x9152: 0x7136,
            0x9153: 0x5168,
            0x9154: 0x7985,
            0x9155: 0x7E55,
            0x9156: 0x81B3,
            0x9157: 0x7CCE,
            0x9158: 0x564C,
            0x9159: 0x5851,
            0x915A: 0x5CA8,
            0x915B: 0x63AA,
            0x915C: 0x66FE,
            0x915D: 0x66FD,
            0x915E: 0x695A,
            0x915F: 0x72D9,
            0x9160: 0x758F,
            0x9161: 0x758E,
            0x9162: 0x790E,
            0x9163: 0x7956,
            0x9164: 0x79DF,
            0x9165: 0x7C97,
            0x9166: 0x7D20,
            0x9167: 0x7D44,
            0x9168: 0x8607,
            0x9169: 0x8A34,
            0x916A: 0x963B,
            0x916B: 0x9061,
            0x916C: 0x9F20,
            0x916D: 0x50E7,
            0x916E: 0x5275,
            0x916F: 0x53CC,
            0x9170: 0x53E2,
            0x9171: 0x5009,
            0x9172: 0x55AA,
            0x9173: 0x58EE,
            0x9174: 0x594F,
            0x9175: 0x723D,
            0x9176: 0x5B8B,
            0x9177: 0x5C64,
            0x9178: 0x531D,
            0x9179: 0x60E3,
            0x917A: 0x60F3,
            0x917B: 0x635C,
            0x917C: 0x6383,
            0x917D: 0x633F,
            0x917E: 0x63BB,
            0x9180: 0x64CD,
            0x9181: 0x65E9,
            0x9182: 0x66F9,
            0x9183: 0x5DE3,
            0x9184: 0x69CD,
            0x9185: 0x69FD,
            0x9186: 0x6F15,
            0x9187: 0x71E5,
            0x9188: 0x4E89,
            0x9189: 0x75E9,
            0x918A: 0x76F8,
            0x918B: 0x7A93,
            0x918C: 0x7CDF,
            0x918D: 0x7DCF,
            0x918E: 0x7D9C,
            0x918F: 0x8061,
            0x9190: 0x8349,
            0x9191: 0x8358,
            0x9192: 0x846C,
            0x9193: 0x84BC,
            0x9194: 0x85FB,
            0x9195: 0x88C5,
            0x9196: 0x8D70,
            0x9197: 0x9001,
            0x9198: 0x906D,
            0x9199: 0x9397,
            0x919A: 0x971C,
            0x919B: 0x9A12,
            0x919C: 0x50CF,
            0x919D: 0x5897,
            0x919E: 0x618E,
            0x919F: 0x81D3,
            0x91A0: 0x8535,
            0x91A1: 0x8D08,
            0x91A2: 0x9020,
            0x91A3: 0x4FC3,
            0x91A4: 0x5074,
            0x91A5: 0x5247,
            0x91A6: 0x5373,
            0x91A7: 0x606F,
            0x91A8: 0x6349,
            0x91A9: 0x675F,
            0x91AA: 0x6E2C,
            0x91AB: 0x8DB3,
            0x91AC: 0x901F,
            0x91AD: 0x4FD7,
            0x91AE: 0x5C5E,
            0x91AF: 0x8CCA,
            0x91B0: 0x65CF,
            0x91B1: 0x7D9A,
            0x91B2: 0x5352,
            0x91B3: 0x8896,
            0x91B4: 0x5176,
            0x91B5: 0x63C3,
            0x91B6: 0x5B58,
            0x91B7: 0x5B6B,
            0x91B8: 0x5C0A,
            0x91B9: 0x640D,
            0x91BA: 0x6751,
            0x91BB: 0x905C,
            0x91BC: 0x4ED6,
            0x91BD: 0x591A,
            0x91BE: 0x592A,
            0x91BF: 0x6C70,
            0x91C0: 0x8A51,
            0x91C1: 0x553E,
            0x91C2: 0x5815,
            0x91C3: 0x59A5,
            0x91C4: 0x60F0,
            0x91C5: 0x6253,
            0x91C6: 0x67C1,
            0x91C7: 0x8235,
            0x91C8: 0x6955,
            0x91C9: 0x9640,
            0x91CA: 0x99C4,
            0x91CB: 0x9A28,
            0x91CC: 0x4F53,
            0x91CD: 0x5806,
            0x91CE: 0x5BFE,
            0x91CF: 0x8010,
            0x91D0: 0x5CB1,
            0x91D1: 0x5E2F,
            0x91D2: 0x5F85,
            0x91D3: 0x6020,
            0x91D4: 0x614B,
            0x91D5: 0x6234,
            0x91D6: 0x66FF,
            0x91D7: 0x6CF0,
            0x91D8: 0x6EDE,
            0x91D9: 0x80CE,
            0x91DA: 0x817F,
            0x91DB: 0x82D4,
            0x91DC: 0x888B,
            0x91DD: 0x8CB8,
            0x91DE: 0x9000,
            0x91DF: 0x902E,
            0x91E0: 0x968A,
            0x91E1: 0x9EDB,
            0x91E2: 0x9BDB,
            0x91E3: 0x4EE3,
            0x91E4: 0x53F0,
            0x91E5: 0x5927,
            0x91E6: 0x7B2C,
            0x91E7: 0x918D,
            0x91E8: 0x984C,
            0x91E9: 0x9DF9,
            0x91EA: 0x6EDD,
            0x91EB: 0x7027,
            0x91EC: 0x5353,
            0x91ED: 0x5544,
            0x91EE: 0x5B85,
            0x91EF: 0x6258,
            0x91F0: 0x629E,
            0x91F1: 0x62D3,
            0x91F2: 0x6CA2,
            0x91F3: 0x6FEF,
            0x91F4: 0x7422,
            0x91F5: 0x8A17,
            0x91F6: 0x9438,
            0x91F7: 0x6FC1,
            0x91F8: 0x8AFE,
            0x91F9: 0x8338,
            0x91FA: 0x51E7,
            0x91FB: 0x86F8,
            0x91FC: 0x53EA,
            0x9240: 0x53E9,
            0x9241: 0x4F46,
            0x9242: 0x9054,
            0x9243: 0x8FB0,
            0x9244: 0x596A,
            0x9245: 0x8131,
            0x9246: 0x5DFD,
            0x9247: 0x7AEA,
            0x9248: 0x8FBF,
            0x9249: 0x68DA,
            0x924A: 0x8C37,
            0x924B: 0x72F8,
            0x924C: 0x9C48,
            0x924D: 0x6A3D,
            0x924E: 0x8AB0,
            0x924F: 0x4E39,
            0x9250: 0x5358,
            0x9251: 0x5606,
            0x9252: 0x5766,
            0x9253: 0x62C5,
            0x9254: 0x63A2,
            0x9255: 0x65E6,
            0x9256: 0x6B4E,
            0x9257: 0x6DE1,
            0x9258: 0x6E5B,
            0x9259: 0x70AD,
            0x925A: 0x77ED,
            0x925B: 0x7AEF,
            0x925C: 0x7BAA,
            0x925D: 0x7DBB,
            0x925E: 0x803D,
            0x925F: 0x80C6,
            0x9260: 0x86CB,
            0x9261: 0x8A95,
            0x9262: 0x935B,
            0x9263: 0x56E3,
            0x9264: 0x58C7,
            0x9265: 0x5F3E,
            0x9266: 0x65AD,
            0x9267: 0x6696,
            0x9268: 0x6A80,
            0x9269: 0x6BB5,
            0x926A: 0x7537,
            0x926B: 0x8AC7,
            0x926C: 0x5024,
            0x926D: 0x77E5,
            0x926E: 0x5730,
            0x926F: 0x5F1B,
            0x9270: 0x6065,
            0x9271: 0x667A,
            0x9272: 0x6C60,
            0x9273: 0x75F4,
            0x9274: 0x7A1A,
            0x9275: 0x7F6E,
            0x9276: 0x81F4,
            0x9277: 0x8718,
            0x9278: 0x9045,
            0x9279: 0x99B3,
            0x927A: 0x7BC9,
            0x927B: 0x755C,
            0x927C: 0x7AF9,
            0x927D: 0x7B51,
            0x927E: 0x84C4,
            0x9280: 0x9010,
            0x9281: 0x79E9,
            0x9282: 0x7A92,
            0x9283: 0x8336,
            0x9284: 0x5AE1,
            0x9285: 0x7740,
            0x9286: 0x4E2D,
            0x9287: 0x4EF2,
            0x9288: 0x5B99,
            0x9289: 0x5FE0,
            0x928A: 0x62BD,
            0x928B: 0x663C,
            0x928C: 0x67F1,
            0x928D: 0x6CE8,
            0x928E: 0x866B,
            0x928F: 0x8877,
            0x9290: 0x8A3B,
            0x9291: 0x914E,
            0x9292: 0x92F3,
            0x9293: 0x99D0,
            0x9294: 0x6A17,
            0x9295: 0x7026,
            0x9296: 0x732A,
            0x9297: 0x82E7,
            0x9298: 0x8457,
            0x9299: 0x8CAF,
            0x929A: 0x4E01,
            0x929B: 0x5146,
            0x929C: 0x51CB,
            0x929D: 0x558B,
            0x929E: 0x5BF5,
            0x929F: 0x5E16,
            0x92A0: 0x5E33,
            0x92A1: 0x5E81,
            0x92A2: 0x5F14,
            0x92A3: 0x5F35,
            0x92A4: 0x5F6B,
            0x92A5: 0x5FB4,
            0x92A6: 0x61F2,
            0x92A7: 0x6311,
            0x92A8: 0x66A2,
            0x92A9: 0x671D,
            0x92AA: 0x6F6E,
            0x92AB: 0x7252,
            0x92AC: 0x753A,
            0x92AD: 0x773A,
            0x92AE: 0x8074,
            0x92AF: 0x8139,
            0x92B0: 0x8178,
            0x92B1: 0x8776,
            0x92B2: 0x8ABF,
            0x92B3: 0x8ADC,
            0x92B4: 0x8D85,
            0x92B5: 0x8DF3,
            0x92B6: 0x929A,
            0x92B7: 0x9577,
            0x92B8: 0x9802,
            0x92B9: 0x9CE5,
            0x92BA: 0x52C5,
            0x92BB: 0x6357,
            0x92BC: 0x76F4,
            0x92BD: 0x6715,
            0x92BE: 0x6C88,
            0x92BF: 0x73CD,
            0x92C0: 0x8CC3,
            0x92C1: 0x93AE,
            0x92C2: 0x9673,
            0x92C3: 0x6D25,
            0x92C4: 0x589C,
            0x92C5: 0x690E,
            0x92C6: 0x69CC,
            0x92C7: 0x8FFD,
            0x92C8: 0x939A,
            0x92C9: 0x75DB,
            0x92CA: 0x901A,
            0x92CB: 0x585A,
            0x92CC: 0x6802,
            0x92CD: 0x63B4,
            0x92CE: 0x69FB,
            0x92CF: 0x4F43,
            0x92D0: 0x6F2C,
            0x92D1: 0x67D8,
            0x92D2: 0x8FBB,
            0x92D3: 0x8526,
            0x92D4: 0x7DB4,
            0x92D5: 0x9354,
            0x92D6: 0x693F,
            0x92D7: 0x6F70,
            0x92D8: 0x576A,
            0x92D9: 0x58F7,
            0x92DA: 0x5B2C,
            0x92DB: 0x7D2C,
            0x92DC: 0x722A,
            0x92DD: 0x540A,
            0x92DE: 0x91E3,
            0x92DF: 0x9DB4,
            0x92E0: 0x4EAD,
            0x92E1: 0x4F4E,
            0x92E2: 0x505C,
            0x92E3: 0x5075,
            0x92E4: 0x5243,
            0x92E5: 0x8C9E,
            0x92E6: 0x5448,
            0x92E7: 0x5824,
            0x92E8: 0x5B9A,
            0x92E9: 0x5E1D,
            0x92EA: 0x5E95,
            0x92EB: 0x5EAD,
            0x92EC: 0x5EF7,
            0x92ED: 0x5F1F,
            0x92EE: 0x608C,
            0x92EF: 0x62B5,
            0x92F0: 0x633A,
            0x92F1: 0x63D0,
            0x92F2: 0x68AF,
            0x92F3: 0x6C40,
            0x92F4: 0x7887,
            0x92F5: 0x798E,
            0x92F6: 0x7A0B,
            0x92F7: 0x7DE0,
            0x92F8: 0x8247,
            0x92F9: 0x8A02,
            0x92FA: 0x8AE6,
            0x92FB: 0x8E44,
            0x92FC: 0x9013,
            0x9340: 0x90B8,
            0x9341: 0x912D,
            0x9342: 0x91D8,
            0x9343: 0x9F0E,
            0x9344: 0x6CE5,
            0x9345: 0x6458,
            0x9346: 0x64E2,
            0x9347: 0x6575,
            0x9348: 0x6EF4,
            0x9349: 0x7684,
            0x934A: 0x7B1B,
            0x934B: 0x9069,
            0x934C: 0x93D1,
            0x934D: 0x6EBA,
            0x934E: 0x54F2,
            0x934F: 0x5FB9,
            0x9350: 0x64A4,
            0x9351: 0x8F4D,
            0x9352: 0x8FED,
            0x9353: 0x9244,
            0x9354: 0x5178,
            0x9355: 0x586B,
            0x9356: 0x5929,
            0x9357: 0x5C55,
            0x9358: 0x5E97,
            0x9359: 0x6DFB,
            0x935A: 0x7E8F,
            0x935B: 0x751C,
            0x935C: 0x8CBC,
            0x935D: 0x8EE2,
            0x935E: 0x985B,
            0x935F: 0x70B9,
            0x9360: 0x4F1D,
            0x9361: 0x6BBF,
            0x9362: 0x6FB1,
            0x9363: 0x7530,
            0x9364: 0x96FB,
            0x9365: 0x514E,
            0x9366: 0x5410,
            0x9367: 0x5835,
            0x9368: 0x5857,
            0x9369: 0x59AC,
            0x936A: 0x5C60,
            0x936B: 0x5F92,
            0x936C: 0x6597,
            0x936D: 0x675C,
            0x936E: 0x6E21,
            0x936F: 0x767B,
            0x9370: 0x83DF,
            0x9371: 0x8CED,
            0x9372: 0x9014,
            0x9373: 0x90FD,
            0x9374: 0x934D,
            0x9375: 0x7825,
            0x9376: 0x783A,
            0x9377: 0x52AA,
            0x9378: 0x5EA6,
            0x9379: 0x571F,
            0x937A: 0x5974,
            0x937B: 0x6012,
            0x937C: 0x5012,
            0x937D: 0x515A,
            0x937E: 0x51AC,
            0x9380: 0x51CD,
            0x9381: 0x5200,
            0x9382: 0x5510,
            0x9383: 0x5854,
            0x9384: 0x5858,
            0x9385: 0x5957,
            0x9386: 0x5B95,
            0x9387: 0x5CF6,
            0x9388: 0x5D8B,
            0x9389: 0x60BC,
            0x938A: 0x6295,
            0x938B: 0x642D,
            0x938C: 0x6771,
            0x938D: 0x6843,
            0x938E: 0x68BC,
            0x938F: 0x68DF,
            0x9390: 0x76D7,
            0x9391: 0x6DD8,
            0x9392: 0x6E6F,
            0x9393: 0x6D9B,
            0x9394: 0x706F,
            0x9395: 0x71C8,
            0x9396: 0x5F53,
            0x9397: 0x75D8,
            0x9398: 0x7977,
            0x9399: 0x7B49,
            0x939A: 0x7B54,
            0x939B: 0x7B52,
            0x939C: 0x7CD6,
            0x939D: 0x7D71,
            0x939E: 0x5230,
            0x939F: 0x8463,
            0x93A0: 0x8569,
            0x93A1: 0x85E4,
            0x93A2: 0x8A0E,
            0x93A3: 0x8B04,
            0x93A4: 0x8C46,
            0x93A5: 0x8E0F,
            0x93A6: 0x9003,
            0x93A7: 0x900F,
            0x93A8: 0x9419,
            0x93A9: 0x9676,
            0x93AA: 0x982D,
            0x93AB: 0x9A30,
            0x93AC: 0x95D8,
            0x93AD: 0x50CD,
            0x93AE: 0x52D5,
            0x93AF: 0x540C,
            0x93B0: 0x5802,
            0x93B1: 0x5C0E,
            0x93B2: 0x61A7,
            0x93B3: 0x649E,
            0x93B4: 0x6D1E,
            0x93B5: 0x77B3,
            0x93B6: 0x7AE5,
            0x93B7: 0x80F4,
            0x93B8: 0x8404,
            0x93B9: 0x9053,
            0x93BA: 0x9285,
            0x93BB: 0x5CE0,
            0x93BC: 0x9D07,
            0x93BD: 0x533F,
            0x93BE: 0x5F97,
            0x93BF: 0x5FB3,
            0x93C0: 0x6D9C,
            0x93C1: 0x7279,
            0x93C2: 0x7763,
            0x93C3: 0x79BF,
            0x93C4: 0x7BE4,
            0x93C5: 0x6BD2,
            0x93C6: 0x72EC,
            0x93C7: 0x8AAD,
            0x93C8: 0x6803,
            0x93C9: 0x6A61,
            0x93CA: 0x51F8,
            0x93CB: 0x7A81,
            0x93CC: 0x6934,
            0x93CD: 0x5C4A,
            0x93CE: 0x9CF6,
            0x93CF: 0x82EB,
            0x93D0: 0x5BC5,
            0x93D1: 0x9149,
            0x93D2: 0x701E,
            0x93D3: 0x5678,
            0x93D4: 0x5C6F,
            0x93D5: 0x60C7,
            0x93D6: 0x6566,
            0x93D7: 0x6C8C,
            0x93D8: 0x8C5A,
            0x93D9: 0x9041,
            0x93DA: 0x9813,
            0x93DB: 0x5451,
            0x93DC: 0x66C7,
            0x93DD: 0x920D,
            0x93DE: 0x5948,
            0x93DF: 0x90A3,
            0x93E0: 0x5185,
            0x93E1: 0x4E4D,
            0x93E2: 0x51EA,
            0x93E3: 0x8599,
            0x93E4: 0x8B0E,
            0x93E5: 0x7058,
            0x93E6: 0x637A,
            0x93E7: 0x934B,
            0x93E8: 0x6962,
            0x93E9: 0x99B4,
            0x93EA: 0x7E04,
            0x93EB: 0x7577,
            0x93EC: 0x5357,
            0x93ED: 0x6960,
            0x93EE: 0x8EDF,
            0x93EF: 0x96E3,
            0x93F0: 0x6C5D,
            0x93F1: 0x4E8C,
            0x93F2: 0x5C3C,
            0x93F3: 0x5F10,
            0x93F4: 0x8FE9,
            0x93F5: 0x5302,
            0x93F6: 0x8CD1,
            0x93F7: 0x8089,
            0x93F8: 0x8679,
            0x93F9: 0x5EFF,
            0x93FA: 0x65E5,
            0x93FB: 0x4E73,
            0x93FC: 0x5165,
            0x9440: 0x5982,
            0x9441: 0x5C3F,
            0x9442: 0x97EE,
            0x9443: 0x4EFB,
            0x9444: 0x598A,
            0x9445: 0x5FCD,
            0x9446: 0x8A8D,
            0x9447: 0x6FE1,
            0x9448: 0x79B0,
            0x9449: 0x7962,
            0x944A: 0x5BE7,
            0x944B: 0x8471,
            0x944C: 0x732B,
            0x944D: 0x71B1,
            0x944E: 0x5E74,
            0x944F: 0x5FF5,
            0x9450: 0x637B,
            0x9451: 0x649A,
            0x9452: 0x71C3,
            0x9453: 0x7C98,
            0x9454: 0x4E43,
            0x9455: 0x5EFC,
            0x9456: 0x4E4B,
            0x9457: 0x57DC,
            0x9458: 0x56A2,
            0x9459: 0x60A9,
            0x945A: 0x6FC3,
            0x945B: 0x7D0D,
            0x945C: 0x80FD,
            0x945D: 0x8133,
            0x945E: 0x81BF,
            0x945F: 0x8FB2,
            0x9460: 0x8997,
            0x9461: 0x86A4,
            0x9462: 0x5DF4,
            0x9463: 0x628A,
            0x9464: 0x64AD,
            0x9465: 0x8987,
            0x9466: 0x6777,
            0x9467: 0x6CE2,
            0x9468: 0x6D3E,
            0x9469: 0x7436,
            0x946A: 0x7834,
            0x946B: 0x5A46,
            0x946C: 0x7F75,
            0x946D: 0x82AD,
            0x946E: 0x99AC,
            0x946F: 0x4FF3,
            0x9470: 0x5EC3,
            0x9471: 0x62DD,
            0x9472: 0x6392,
            0x9473: 0x6557,
            0x9474: 0x676F,
            0x9475: 0x76C3,
            0x9476: 0x724C,
            0x9477: 0x80CC,
            0x9478: 0x80BA,
            0x9479: 0x8F29,
            0x947A: 0x914D,
            0x947B: 0x500D,
            0x947C: 0x57F9,
            0x947D: 0x5A92,
            0x947E: 0x6885,
            0x9480: 0x6973,
            0x9481: 0x7164,
            0x9482: 0x72FD,
            0x9483: 0x8CB7,
            0x9484: 0x58F2,
            0x9485: 0x8CE0,
            0x9486: 0x966A,
            0x9487: 0x9019,
            0x9488: 0x877F,
            0x9489: 0x79E4,
            0x948A: 0x77E7,
            0x948B: 0x8429,
            0x948C: 0x4F2F,
            0x948D: 0x5265,
            0x948E: 0x535A,
            0x948F: 0x62CD,
            0x9490: 0x67CF,
            0x9491: 0x6CCA,
            0x9492: 0x767D,
            0x9493: 0x7B94,
            0x9494: 0x7C95,
            0x9495: 0x8236,
            0x9496: 0x8584,
            0x9497: 0x8FEB,
            0x9498: 0x66DD,
            0x9499: 0x6F20,
            0x949A: 0x7206,
            0x949B: 0x7E1B,
            0x949C: 0x83AB,
            0x949D: 0x99C1,
            0x949E: 0x9EA6,
            0x949F: 0x51FD,
            0x94A0: 0x7BB1,
            0x94A1: 0x7872,
            0x94A2: 0x7BB8,
            0x94A3: 0x8087,
            0x94A4: 0x7B48,
            0x94A5: 0x6AE8,
            0x94A6: 0x5E61,
            0x94A7: 0x808C,
            0x94A8: 0x7551,
            0x94A9: 0x7560,
            0x94AA: 0x516B,
            0x94AB: 0x9262,
            0x94AC: 0x6E8C,
            0x94AD: 0x767A,
            0x94AE: 0x9197,
            0x94AF: 0x9AEA,
            0x94B0: 0x4F10,
            0x94B1: 0x7F70,
            0x94B2: 0x629C,
            0x94B3: 0x7B4F,
            0x94B4: 0x95A5,
            0x94B5: 0x9CE9,
            0x94B6: 0x567A,
            0x94B7: 0x5859,
            0x94B8: 0x86E4,
            0x94B9: 0x96BC,
            0x94BA: 0x4F34,
            0x94BB: 0x5224,
            0x94BC: 0x534A,
            0x94BD: 0x53CD,
            0x94BE: 0x53DB,
            0x94BF: 0x5E06,
            0x94C0: 0x642C,
            0x94C1: 0x6591,
            0x94C2: 0x677F,
            0x94C3: 0x6C3E,
            0x94C4: 0x6C4E,
            0x94C5: 0x7248,
            0x94C6: 0x72AF,
            0x94C7: 0x73ED,
            0x94C8: 0x7554,
            0x94C9: 0x7E41,
            0x94CA: 0x822C,
            0x94CB: 0x85E9,
            0x94CC: 0x8CA9,
            0x94CD: 0x7BC4,
            0x94CE: 0x91C6,
            0x94CF: 0x7169,
            0x94D0: 0x9812,
            0x94D1: 0x98EF,
            0x94D2: 0x633D,
            0x94D3: 0x6669,
            0x94D4: 0x756A,
            0x94D5: 0x76E4,
            0x94D6: 0x78D0,
            0x94D7: 0x8543,
            0x94D8: 0x86EE,
            0x94D9: 0x532A,
            0x94DA: 0x5351,
            0x94DB: 0x5426,
            0x94DC: 0x5983,
            0x94DD: 0x5E87,
            0x94DE: 0x5F7C,
            0x94DF: 0x60B2,
            0x94E0: 0x6249,
            0x94E1: 0x6279,
            0x94E2: 0x62AB,
            0x94E3: 0x6590,
            0x94E4: 0x6BD4,
            0x94E5: 0x6CCC,
            0x94E6: 0x75B2,
            0x94E7: 0x76AE,
            0x94E8: 0x7891,
            0x94E9: 0x79D8,
            0x94EA: 0x7DCB,
            0x94EB: 0x7F77,
            0x94EC: 0x80A5,
            0x94ED: 0x88AB,
            0x94EE: 0x8AB9,
            0x94EF: 0x8CBB,
            0x94F0: 0x907F,
            0x94F1: 0x975E,
            0x94F2: 0x98DB,
            0x94F3: 0x6A0B,
            0x94F4: 0x7C38,
            0x94F5: 0x5099,
            0x94F6: 0x5C3E,
            0x94F7: 0x5FAE,
            0x94F8: 0x6787,
            0x94F9: 0x6BD8,
            0x94FA: 0x7435,
            0x94FB: 0x7709,
            0x94FC: 0x7F8E,
            0x9540: 0x9F3B,
            0x9541: 0x67CA,
            0x9542: 0x7A17,
            0x9543: 0x5339,
            0x9544: 0x758B,
            0x9545: 0x9AED,
            0x9546: 0x5F66,
            0x9547: 0x819D,
            0x9548: 0x83F1,
            0x9549: 0x8098,
            0x954A: 0x5F3C,
            0x954B: 0x5FC5,
            0x954C: 0x7562,
            0x954D: 0x7B46,
            0x954E: 0x903C,
            0x954F: 0x6867,
            0x9550: 0x59EB,
            0x9551: 0x5A9B,
            0x9552: 0x7D10,
            0x9553: 0x767E,
            0x9554: 0x8B2C,
            0x9555: 0x4FF5,
            0x9556: 0x5F6A,
            0x9557: 0x6A19,
            0x9558: 0x6C37,
            0x9559: 0x6F02,
            0x955A: 0x74E2,
            0x955B: 0x7968,
            0x955C: 0x8868,
            0x955D: 0x8A55,
            0x955E: 0x8C79,
            0x955F: 0x5EDF,
            0x9560: 0x63CF,
            0x9561: 0x75C5,
            0x9562: 0x79D2,
            0x9563: 0x82D7,
            0x9564: 0x9328,
            0x9565: 0x92F2,
            0x9566: 0x849C,
            0x9567: 0x86ED,
            0x9568: 0x9C2D,
            0x9569: 0x54C1,
            0x956A: 0x5F6C,
            0x956B: 0x658C,
            0x956C: 0x6D5C,
            0x956D: 0x7015,
            0x956E: 0x8CA7,
            0x956F: 0x8CD3,
            0x9570: 0x983B,
            0x9571: 0x654F,
            0x9572: 0x74F6,
            0x9573: 0x4E0D,
            0x9574: 0x4ED8,
            0x9575: 0x57E0,
            0x9576: 0x592B,
            0x9577: 0x5A66,
            0x9578: 0x5BCC,
            0x9579: 0x51A8,
            0x957A: 0x5E03,
            0x957B: 0x5E9C,
            0x957C: 0x6016,
            0x957D: 0x6276,
            0x957E: 0x6577,
            0x9580: 0x65A7,
            0x9581: 0x666E,
            0x9582: 0x6D6E,
            0x9583: 0x7236,
            0x9584: 0x7B26,
            0x9585: 0x8150,
            0x9586: 0x819A,
            0x9587: 0x8299,
            0x9588: 0x8B5C,
            0x9589: 0x8CA0,
            0x958A: 0x8CE6,
            0x958B: 0x8D74,
            0x958C: 0x961C,
            0x958D: 0x9644,
            0x958E: 0x4FAE,
            0x958F: 0x64AB,
            0x9590: 0x6B66,
            0x9591: 0x821E,
            0x9592: 0x8461,
            0x9593: 0x856A,
            0x9594: 0x90E8,
            0x9595: 0x5C01,
            0x9596: 0x6953,
            0x9597: 0x98A8,
            0x9598: 0x847A,
            0x9599: 0x8557,
            0x959A: 0x4F0F,
            0x959B: 0x526F,
            0x959C: 0x5FA9,
            0x959D: 0x5E45,
            0x959E: 0x670D,
            0x959F: 0x798F,
            0x95A0: 0x8179,
            0x95A1: 0x8907,
            0x95A2: 0x8986,
            0x95A3: 0x6DF5,
            0x95A4: 0x5F17,
            0x95A5: 0x6255,
            0x95A6: 0x6CB8,
            0x95A7: 0x4ECF,
            0x95A8: 0x7269,
            0x95A9: 0x9B92,
            0x95AA: 0x5206,
            0x95AB: 0x543B,
            0x95AC: 0x5674,
            0x95AD: 0x58B3,
            0x95AE: 0x61A4,
            0x95AF: 0x626E,
            0x95B0: 0x711A,
            0x95B1: 0x596E,
            0x95B2: 0x7C89,
            0x95B3: 0x7CDE,
            0x95B4: 0x7D1B,
            0x95B5: 0x96F0,
            0x95B6: 0x6587,
            0x95B7: 0x805E,
            0x95B8: 0x4E19,
            0x95B9: 0x4F75,
            0x95BA: 0x5175,
            0x95BB: 0x5840,
            0x95BC: 0x5E63,
            0x95BD: 0x5E73,
            0x95BE: 0x5F0A,
            0x95BF: 0x67C4,
            0x95C0: 0x4E26,
            0x95C1: 0x853D,
            0x95C2: 0x9589,
            0x95C3: 0x965B,
            0x95C4: 0x7C73,
            0x95C5: 0x9801,
            0x95C6: 0x50FB,
            0x95C7: 0x58C1,
            0x95C8: 0x7656,
            0x95C9: 0x78A7,
            0x95CA: 0x5225,
            0x95CB: 0x77A5,
            0x95CC: 0x8511,
            0x95CD: 0x7B86,
            0x95CE: 0x504F,
            0x95CF: 0x5909,
            0x95D0: 0x7247,
            0x95D1: 0x7BC7,
            0x95D2: 0x7DE8,
            0x95D3: 0x8FBA,
            0x95D4: 0x8FD4,
            0x95D5: 0x904D,
            0x95D6: 0x4FBF,
            0x95D7: 0x52C9,
            0x95D8: 0x5A29,
            0x95D9: 0x5F01,
            0x95DA: 0x97AD,
            0x95DB: 0x4FDD,
            0x95DC: 0x8217,
            0x95DD: 0x92EA,
            0x95DE: 0x5703,
            0x95DF: 0x6355,
            0x95E0: 0x6B69,
            0x95E1: 0x752B,
            0x95E2: 0x88DC,
            0x95E3: 0x8F14,
            0x95E4: 0x7A42,
            0x95E5: 0x52DF,
            0x95E6: 0x5893,
            0x95E7: 0x6155,
            0x95E8: 0x620A,
            0x95E9: 0x66AE,
            0x95EA: 0x6BCD,
            0x95EB: 0x7C3F,
            0x95EC: 0x83E9,
            0x95ED: 0x5023,
            0x95EE: 0x4FF8,
            0x95EF: 0x5305,
            0x95F0: 0x5446,
            0x95F1: 0x5831,
            0x95F2: 0x5949,
            0x95F3: 0x5B9D,
            0x95F4: 0x5CF0,
            0x95F5: 0x5CEF,
            0x95F6: 0x5D29,
            0x95F7: 0x5E96,
            0x95F8: 0x62B1,
            0x95F9: 0x6367,
            0x95FA: 0x653E,
            0x95FB: 0x65B9,
            0x95FC: 0x670B,
            0x9640: 0x6CD5,
            0x9641: 0x6CE1,
            0x9642: 0x70F9,
            0x9643: 0x7832,
            0x9644: 0x7E2B,
            0x9645: 0x80DE,
            0x9646: 0x82B3,
            0x9647: 0x840C,
            0x9648: 0x84EC,
            0x9649: 0x8702,
            0x964A: 0x8912,
            0x964B: 0x8A2A,
            0x964C: 0x8C4A,
            0x964D: 0x90A6,
            0x964E: 0x92D2,
            0x964F: 0x98FD,
            0x9650: 0x9CF3,
            0x9651: 0x9D6C,
            0x9652: 0x4E4F,
            0x9653: 0x4EA1,
            0x9654: 0x508D,
            0x9655: 0x5256,
            0x9656: 0x574A,
            0x9657: 0x59A8,
            0x9658: 0x5E3D,
            0x9659: 0x5FD8,
            0x965A: 0x5FD9,
            0x965B: 0x623F,
            0x965C: 0x66B4,
            0x965D: 0x671B,
            0x965E: 0x67D0,
            0x965F: 0x68D2,
            0x9660: 0x5192,
            0x9661: 0x7D21,
            0x9662: 0x80AA,
            0x9663: 0x81A8,
            0x9664: 0x8B00,
            0x9665: 0x8C8C,
            0x9666: 0x8CBF,
            0x9667: 0x927E,
            0x9668: 0x9632,
            0x9669: 0x5420,
            0x966A: 0x982C,
            0x966B: 0x5317,
            0x966C: 0x50D5,
            0x966D: 0x535C,
            0x966E: 0x58A8,
            0x966F: 0x64B2,
            0x9670: 0x6734,
            0x9671: 0x7267,
            0x9672: 0x7766,
            0x9673: 0x7A46,
            0x9674: 0x91E6,
            0x9675: 0x52C3,
            0x9676: 0x6CA1,
            0x9677: 0x6B86,
            0x9678: 0x5800,
            0x9679: 0x5E4C,
            0x967A: 0x5954,
            0x967B: 0x672C,
            0x967C: 0x7FFB,
            0x967D: 0x51E1,
            0x967E: 0x76C6,
            0x9680: 0x6469,
            0x9681: 0x78E8,
            0x9682: 0x9B54,
            0x9683: 0x9EBB,
            0x9684: 0x57CB,
            0x9685: 0x59B9,
            0x9686: 0x6627,
            0x9687: 0x679A,
            0x9688: 0x6BCE,
            0x9689: 0x54E9,
            0x968A: 0x69D9,
            0x968B: 0x5E55,
            0x968C: 0x819C,
            0x968D: 0x6795,
            0x968E: 0x9BAA,
            0x968F: 0x67FE,
            0x9690: 0x9C52,
            0x9691: 0x685D,
            0x9692: 0x4EA6,
            0x9693: 0x4FE3,
            0x9694: 0x53C8,
            0x9695: 0x62B9,
            0x9696: 0x672B,
            0x9697: 0x6CAB,
            0x9698: 0x8FC4,
            0x9699: 0x4FAD,
            0x969A: 0x7E6D,
            0x969B: 0x9EBF,
            0x969C: 0x4E07,
            0x969D: 0x6162,
            0x969E: 0x6E80,
            0x969F: 0x6F2B,
            0x96A0: 0x8513,
            0x96A1: 0x5473,
            0x96A2: 0x672A,
            0x96A3: 0x9B45,
            0x96A4: 0x5DF3,
            0x96A5: 0x7B95,
            0x96A6: 0x5CAC,
            0x96A7: 0x5BC6,
            0x96A8: 0x871C,
            0x96A9: 0x6E4A,
            0x96AA: 0x84D1,
            0x96AB: 0x7A14,
            0x96AC: 0x8108,
            0x96AD: 0x5999,
            0x96AE: 0x7C8D,
            0x96AF: 0x6C11,
            0x96B0: 0x7720,
            0x96B1: 0x52D9,
            0x96B2: 0x5922,
            0x96B3: 0x7121,
            0x96B4: 0x725F,
            0x96B5: 0x77DB,
            0x96B6: 0x9727,
            0x96B7: 0x9D61,
            0x96B8: 0x690B,
            0x96B9: 0x5A7F,
            0x96BA: 0x5A18,
            0x96BB: 0x51A5,
            0x96BC: 0x540D,
            0x96BD: 0x547D,
            0x96BE: 0x660E,
            0x96BF: 0x76DF,
            0x96C0: 0x8FF7,
            0x96C1: 0x9298,
            0x96C2: 0x9CF4,
            0x96C3: 0x59EA,
            0x96C4: 0x725D,
            0x96C5: 0x6EC5,
            0x96C6: 0x514D,
            0x96C7: 0x68C9,
            0x96C8: 0x7DBF,
            0x96C9: 0x7DEC,
            0x96CA: 0x9762,
            0x96CB: 0x9EBA,
            0x96CC: 0x6478,
            0x96CD: 0x6A21,
            0x96CE: 0x8302,
            0x96CF: 0x5984,
            0x96D0: 0x5B5F,
            0x96D1: 0x6BDB,
            0x96D2: 0x731B,
            0x96D3: 0x76F2,
            0x96D4: 0x7DB2,
            0x96D5: 0x8017,
            0x96D6: 0x8499,
            0x96D7: 0x5132,
            0x96D8: 0x6728,
            0x96D9: 0x9ED9,
            0x96DA: 0x76EE,
            0x96DB: 0x6762,
            0x96DC: 0x52FF,
            0x96DD: 0x9905,
            0x96DE: 0x5C24,
            0x96DF: 0x623B,
            0x96E0: 0x7C7E,
            0x96E1: 0x8CB0,
            0x96E2: 0x554F,
            0x96E3: 0x60B6,
            0x96E4: 0x7D0B,
            0x96E5: 0x9580,
            0x96E6: 0x5301,
            0x96E7: 0x4E5F,
            0x96E8: 0x51B6,
            0x96E9: 0x591C,
            0x96EA: 0x723A,
            0x96EB: 0x8036,
            0x96EC: 0x91CE,
            0x96ED: 0x5F25,
            0x96EE: 0x77E2,
            0x96EF: 0x5384,
            0x96F0: 0x5F79,
            0x96F1: 0x7D04,
            0x96F2: 0x85AC,
            0x96F3: 0x8A33,
            0x96F4: 0x8E8D,
            0x96F5: 0x9756,
            0x96F6: 0x67F3,
            0x96F7: 0x85AE,
            0x96F8: 0x9453,
            0x96F9: 0x6109,
            0x96FA: 0x6108,
            0x96FB: 0x6CB9,
            0x96FC: 0x7652,
            0x9740: 0x8AED,
            0x9741: 0x8F38,
            0x9742: 0x552F,
            0x9743: 0x4F51,
            0x9744: 0x512A,
            0x9745: 0x52C7,
            0x9746: 0x53CB,
            0x9747: 0x5BA5,
            0x9748: 0x5E7D,
            0x9749: 0x60A0,
            0x974A: 0x6182,
            0x974B: 0x63D6,
            0x974C: 0x6709,
            0x974D: 0x67DA,
            0x974E: 0x6E67,
            0x974F: 0x6D8C,
            0x9750: 0x7336,
            0x9751: 0x7337,
            0x9752: 0x7531,
            0x9753: 0x7950,
            0x9754: 0x88D5,
            0x9755: 0x8A98,
            0x9756: 0x904A,
            0x9757: 0x9091,
            0x9758: 0x90F5,
            0x9759: 0x96C4,
            0x975A: 0x878D,
            0x975B: 0x5915,
            0x975C: 0x4E88,
            0x975D: 0x4F59,
            0x975E: 0x4E0E,
            0x975F: 0x8A89,
            0x9760: 0x8F3F,
            0x9761: 0x9810,
            0x9762: 0x50AD,
            0x9763: 0x5E7C,
            0x9764: 0x5996,
            0x9765: 0x5BB9,
            0x9766: 0x5EB8,
            0x9767: 0x63DA,
            0x9768: 0x63FA,
            0x9769: 0x64C1,
            0x976A: 0x66DC,
            0x976B: 0x694A,
            0x976C: 0x69D8,
            0x976D: 0x6D0B,
            0x976E: 0x6EB6,
            0x976F: 0x7194,
            0x9770: 0x7528,
            0x9771: 0x7AAF,
            0x9772: 0x7F8A,
            0x9773: 0x8000,
            0x9774: 0x8449,
            0x9775: 0x84C9,
            0x9776: 0x8981,
            0x9777: 0x8B21,
            0x9778: 0x8E0A,
            0x9779: 0x9065,
            0x977A: 0x967D,
            0x977B: 0x990A,
            0x977C: 0x617E,
            0x977D: 0x6291,
            0x977E: 0x6B32,
            0x9780: 0x6C83,
            0x9781: 0x6D74,
            0x9782: 0x7FCC,
            0x9783: 0x7FFC,
            0x9784: 0x6DC0,
            0x9785: 0x7F85,
            0x9786: 0x87BA,
            0x9787: 0x88F8,
            0x9788: 0x6765,
            0x9789: 0x83B1,
            0x978A: 0x983C,
            0x978B: 0x96F7,
            0x978C: 0x6D1B,
            0x978D: 0x7D61,
            0x978E: 0x843D,
            0x978F: 0x916A,
            0x9790: 0x4E71,
            0x9791: 0x5375,
            0x9792: 0x5D50,
            0x9793: 0x6B04,
            0x9794: 0x6FEB,
            0x9795: 0x85CD,
            0x9796: 0x862D,
            0x9797: 0x89A7,
            0x9798: 0x5229,
            0x9799: 0x540F,
            0x979A: 0x5C65,
            0x979B: 0x674E,
            0x979C: 0x68A8,
            0x979D: 0x7406,
            0x979E: 0x7483,
            0x979F: 0x75E2,
            0x97A0: 0x88CF,
            0x97A1: 0x88E1,
            0x97A2: 0x91CC,
            0x97A3: 0x96E2,
            0x97A4: 0x9678,
            0x97A5: 0x5F8B,
            0x97A6: 0x7387,
            0x97A7: 0x7ACB,
            0x97A8: 0x844E,
            0x97A9: 0x63A0,
            0x97AA: 0x7565,
            0x97AB: 0x5289,
            0x97AC: 0x6D41,
            0x97AD: 0x6E9C,
            0x97AE: 0x7409,
            0x97AF: 0x7559,
            0x97B0: 0x786B,
            0x97B1: 0x7C92,
            0x97B2: 0x9686,
            0x97B3: 0x7ADC,
            0x97B4: 0x9F8D,
            0x97B5: 0x4FB6,
            0x97B6: 0x616E,
            0x97B7: 0x65C5,
            0x97B8: 0x865C,
            0x97B9: 0x4E86,
            0x97BA: 0x4EAE,
            0x97BB: 0x50DA,
            0x97BC: 0x4E21,
            0x97BD: 0x51CC,
            0x97BE: 0x5BEE,
            0x97BF: 0x6599,
            0x97C0: 0x6881,
            0x97C1: 0x6DBC,
            0x97C2: 0x731F,
            0x97C3: 0x7642,
            0x97C4: 0x77AD,
            0x97C5: 0x7A1C,
            0x97C6: 0x7CE7,
            0x97C7: 0x826F,
            0x97C8: 0x8AD2,
            0x97C9: 0x907C,
            0x97CA: 0x91CF,
            0x97CB: 0x9675,
            0x97CC: 0x9818,
            0x97CD: 0x529B,
            0x97CE: 0x7DD1,
            0x97CF: 0x502B,
            0x97D0: 0x5398,
            0x97D1: 0x6797,
            0x97D2: 0x6DCB,
            0x97D3: 0x71D0,
            0x97D4: 0x7433,
            0x97D5: 0x81E8,
            0x97D6: 0x8F2A,
            0x97D7: 0x96A3,
            0x97D8: 0x9C57,
            0x97D9: 0x9E9F,
            0x97DA: 0x7460,
            0x97DB: 0x5841,
            0x97DC: 0x6D99,
            0x97DD: 0x7D2F,
            0x97DE: 0x985E,
            0x97DF: 0x4EE4,
            0x97E0: 0x4F36,
            0x97E1: 0x4F8B,
            0x97E2: 0x51B7,
            0x97E3: 0x52B1,
            0x97E4: 0x5DBA,
            0x97E5: 0x601C,
            0x97E6: 0x73B2,
            0x97E7: 0x793C,
            0x97E8: 0x82D3,
            0x97E9: 0x9234,
            0x97EA: 0x96B7,
            0x97EB: 0x96F6,
            0x97EC: 0x970A,
            0x97ED: 0x9E97,
            0x97EE: 0x9F62,
            0x97EF: 0x66A6,
            0x97F0: 0x6B74,
            0x97F1: 0x5217,
            0x97F2: 0x52A3,
            0x97F3: 0x70C8,
            0x97F4: 0x88C2,
            0x97F5: 0x5EC9,
            0x97F6: 0x604B,
            0x97F7: 0x6190,
            0x97F8: 0x6F23,
            0x97F9: 0x7149,
            0x97FA: 0x7C3E,
            0x97FB: 0x7DF4,
            0x97FC: 0x806F,
            0x9840: 0x84EE,
            0x9841: 0x9023,
            0x9842: 0x932C,
            0x9843: 0x5442,
            0x9844: 0x9B6F,
            0x9845: 0x6AD3,
            0x9846: 0x7089,
            0x9847: 0x8CC2,
            0x9848: 0x8DEF,
            0x9849: 0x9732,
            0x984A: 0x52B4,
            0x984B: 0x5A41,
            0x984C: 0x5ECA,
            0x984D: 0x5F04,
            0x984E: 0x6717,
            0x984F: 0x697C,
            0x9850: 0x6994,
            0x9851: 0x6D6A,
            0x9852: 0x6F0F,
            0x9853: 0x7262,
            0x9854: 0x72FC,
            0x9855: 0x7BED,
            0x9856: 0x8001,
            0x9857: 0x807E,
            0x9858: 0x874B,
            0x9859: 0x90CE,
            0x985A: 0x516D,
            0x985B: 0x9E93,
            0x985C: 0x7984,
            0x985D: 0x808B,
            0x985E: 0x9332,
            0x985F: 0x8AD6,
            0x9860: 0x502D,
            0x9861: 0x548C,
            0x9862: 0x8A71,
            0x9863: 0x6B6A,
            0x9864: 0x8CC4,
            0x9865: 0x8107,
            0x9866: 0x60D1,
            0x9867: 0x67A0,
            0x9868: 0x9DF2,
            0x9869: 0x4E99,
            0x986A: 0x4E98,
            0x986B: 0x9C10,
            0x986C: 0x8A6B,
            0x986D: 0x85C1,
            0x986E: 0x8568,
            0x986F: 0x6900,
            0x9870: 0x6E7E,
            0x9871: 0x7897,
            0x9872: 0x8155,
            0x989F: 0x5F0C,
            0x98A0: 0x4E10,
            0x98A1: 0x4E15,
            0x98A2: 0x4E2A,
            0x98A3: 0x4E31,
            0x98A4: 0x4E36,
            0x98A5: 0x4E3C,
            0x98A6: 0x4E3F,
            0x98A7: 0x4E42,
            0x98A8: 0x4E56,
            0x98A9: 0x4E58,
            0x98AA: 0x4E82,
            0x98AB: 0x4E85,
            0x98AC: 0x8C6B,
            0x98AD: 0x4E8A,
            0x98AE: 0x8212,
            0x98AF: 0x5F0D,
            0x98B0: 0x4E8E,
            0x98B1: 0x4E9E,
            0x98B2: 0x4E9F,
            0x98B3: 0x4EA0,
            0x98B4: 0x4EA2,
            0x98B5: 0x4EB0,
            0x98B6: 0x4EB3,
            0x98B7: 0x4EB6,
            0x98B8: 0x4ECE,
            0x98B9: 0x4ECD,
            0x98BA: 0x4EC4,
            0x98BB: 0x4EC6,
            0x98BC: 0x4EC2,
            0x98BD: 0x4ED7,
            0x98BE: 0x4EDE,
            0x98BF: 0x4EED,
            0x98C0: 0x4EDF,
            0x98C1: 0x4EF7,
            0x98C2: 0x4F09,
            0x98C3: 0x4F5A,
            0x98C4: 0x4F30,
            0x98C5: 0x4F5B,
            0x98C6: 0x4F5D,
            0x98C7: 0x4F57,
            0x98C8: 0x4F47,
            0x98C9: 0x4F76,
            0x98CA: 0x4F88,
            0x98CB: 0x4F8F,
            0x98CC: 0x4F98,
            0x98CD: 0x4F7B,
            0x98CE: 0x4F69,
            0x98CF: 0x4F70,
            0x98D0: 0x4F91,
            0x98D1: 0x4F6F,
            0x98D2: 0x4F86,
            0x98D3: 0x4F96,
            0x98D4: 0x5118,
            0x98D5: 0x4FD4,
            0x98D6: 0x4FDF,
            0x98D7: 0x4FCE,
            0x98D8: 0x4FD8,
            0x98D9: 0x4FDB,
            0x98DA: 0x4FD1,
            0x98DB: 0x4FDA,
            0x98DC: 0x4FD0,
            0x98DD: 0x4FE4,
            0x98DE: 0x4FE5,
            0x98DF: 0x501A,
            0x98E0: 0x5028,
            0x98E1: 0x5014,
            0x98E2: 0x502A,
            0x98E3: 0x5025,
            0x98E4: 0x5005,
            0x98E5: 0x4F1C,
            0x98E6: 0x4FF6,
            0x98E7: 0x5021,
            0x98E8: 0x5029,
            0x98E9: 0x502C,
            0x98EA: 0x4FFE,
            0x98EB: 0x4FEF,
            0x98EC: 0x5011,
            0x98ED: 0x5006,
            0x98EE: 0x5043,
            0x98EF: 0x5047,
            0x98F0: 0x6703,
            0x98F1: 0x5055,
            0x98F2: 0x5050,
            0x98F3: 0x5048,
            0x98F4: 0x505A,
            0x98F5: 0x5056,
            0x98F6: 0x506C,
            0x98F7: 0x5078,
            0x98F8: 0x5080,
            0x98F9: 0x509A,
            0x98FA: 0x5085,
            0x98FB: 0x50B4,
            0x98FC: 0x50B2,
            0x9940: 0x50C9,
            0x9941: 0x50CA,
            0x9942: 0x50B3,
            0x9943: 0x50C2,
            0x9944: 0x50D6,
            0x9945: 0x50DE,
            0x9946: 0x50E5,
            0x9947: 0x50ED,
            0x9948: 0x50E3,
            0x9949: 0x50EE,
            0x994A: 0x50F9,
            0x994B: 0x50F5,
            0x994C: 0x5109,
            0x994D: 0x5101,
            0x994E: 0x5102,
            0x994F: 0x5116,
            0x9950: 0x5115,
            0x9951: 0x5114,
            0x9952: 0x511A,
            0x9953: 0x5121,
            0x9954: 0x513A,
            0x9955: 0x5137,
            0x9956: 0x513C,
            0x9957: 0x513B,
            0x9958: 0x513F,
            0x9959: 0x5140,
            0x995A: 0x5152,
            0x995B: 0x514C,
            0x995C: 0x5154,
            0x995D: 0x5162,
            0x995E: 0x7AF8,
            0x995F: 0x5169,
            0x9960: 0x516A,
            0x9961: 0x516E,
            0x9962: 0x5180,
            0x9963: 0x5182,
            0x9964: 0x56D8,
            0x9965: 0x518C,
            0x9966: 0x5189,
            0x9967: 0x518F,
            0x9968: 0x5191,
            0x9969: 0x5193,
            0x996A: 0x5195,
            0x996B: 0x5196,
            0x996C: 0x51A4,
            0x996D: 0x51A6,
            0x996E: 0x51A2,
            0x996F: 0x51A9,
            0x9970: 0x51AA,
            0x9971: 0x51AB,
            0x9972: 0x51B3,
            0x9973: 0x51B1,
            0x9974: 0x51B2,
            0x9975: 0x51B0,
            0x9976: 0x51B5,
            0x9977: 0x51BD,
            0x9978: 0x51C5,
            0x9979: 0x51C9,
            0x997A: 0x51DB,
            0x997B: 0x51E0,
            0x997C: 0x8655,
            0x997D: 0x51E9,
            0x997E: 0x51ED,
            0x9980: 0x51F0,
            0x9981: 0x51F5,
            0x9982: 0x51FE,
            0x9983: 0x5204,
            0x9984: 0x520B,
            0x9985: 0x5214,
            0x9986: 0x520E,
            0x9987: 0x5227,
            0x9988: 0x522A,
            0x9989: 0x522E,
            0x998A: 0x5233,
            0x998B: 0x5239,
            0x998C: 0x524F,
            0x998D: 0x5244,
            0x998E: 0x524B,
            0x998F: 0x524C,
            0x9990: 0x525E,
            0x9991: 0x5254,
            0x9992: 0x526A,
            0x9993: 0x5274,
            0x9994: 0x5269,
            0x9995: 0x5273,
            0x9996: 0x527F,
            0x9997: 0x527D,
            0x9998: 0x528D,
            0x9999: 0x5294,
            0x999A: 0x5292,
            0x999B: 0x5271,
            0x999C: 0x5288,
            0x999D: 0x5291,
            0x999E: 0x8FA8,
            0x999F: 0x8FA7,
            0x99A0: 0x52AC,
            0x99A1: 0x52AD,
            0x99A2: 0x52BC,
            0x99A3: 0x52B5,
            0x99A4: 0x52C1,
            0x99A5: 0x52CD,
            0x99A6: 0x52D7,
            0x99A7: 0x52DE,
            0x99A8: 0x52E3,
            0x99A9: 0x52E6,
            0x99AA: 0x98ED,
            0x99AB: 0x52E0,
            0x99AC: 0x52F3,
            0x99AD: 0x52F5,
            0x99AE: 0x52F8,
            0x99AF: 0x52F9,
            0x99B0: 0x5306,
            0x99B1: 0x5308,
            0x99B2: 0x7538,
            0x99B3: 0x530D,
            0x99B4: 0x5310,
            0x99B5: 0x530F,
            0x99B6: 0x5315,
            0x99B7: 0x531A,
            0x99B8: 0x5323,
            0x99B9: 0x532F,
            0x99BA: 0x5331,
            0x99BB: 0x5333,
            0x99BC: 0x5338,
            0x99BD: 0x5340,
            0x99BE: 0x5346,
            0x99BF: 0x5345,
            0x99C0: 0x4E17,
            0x99C1: 0x5349,
            0x99C2: 0x534D,
            0x99C3: 0x51D6,
            0x99C4: 0x535E,
            0x99C5: 0x5369,
            0x99C6: 0x536E,
            0x99C7: 0x5918,
            0x99C8: 0x537B,
            0x99C9: 0x5377,
            0x99CA: 0x5382,
            0x99CB: 0x5396,
            0x99CC: 0x53A0,
            0x99CD: 0x53A6,
            0x99CE: 0x53A5,
            0x99CF: 0x53AE,
            0x99D0: 0x53B0,
            0x99D1: 0x53B6,
            0x99D2: 0x53C3,
            0x99D3: 0x7C12,
            0x99D4: 0x96D9,
            0x99D5: 0x53DF,
            0x99D6: 0x66FC,
            0x99D7: 0x71EE,
            0x99D8: 0x53EE,
            0x99D9: 0x53E8,
            0x99DA: 0x53ED,
            0x99DB: 0x53FA,
            0x99DC: 0x5401,
            0x99DD: 0x543D,
            0x99DE: 0x5440,
            0x99DF: 0x542C,
            0x99E0: 0x542D,
            0x99E1: 0x543C,
            0x99E2: 0x542E,
            0x99E3: 0x5436,
            0x99E4: 0x5429,
            0x99E5: 0x541D,
            0x99E6: 0x544E,
            0x99E7: 0x548F,
            0x99E8: 0x5475,
            0x99E9: 0x548E,
            0x99EA: 0x545F,
            0x99EB: 0x5471,
            0x99EC: 0x5477,
            0x99ED: 0x5470,
            0x99EE: 0x5492,
            0x99EF: 0x547B,
            0x99F0: 0x5480,
            0x99F1: 0x5476,
            0x99F2: 0x5484,
            0x99F3: 0x5490,
            0x99F4: 0x5486,
            0x99F5: 0x54C7,
            0x99F6: 0x54A2,
            0x99F7: 0x54B8,
            0x99F8: 0x54A5,
            0x99F9: 0x54AC,
            0x99FA: 0x54C4,
            0x99FB: 0x54C8,
            0x99FC: 0x54A8,
            0x9A40: 0x54AB,
            0x9A41: 0x54C2,
            0x9A42: 0x54A4,
            0x9A43: 0x54BE,
            0x9A44: 0x54BC,
            0x9A45: 0x54D8,
            0x9A46: 0x54E5,
            0x9A47: 0x54E6,
            0x9A48: 0x550F,
            0x9A49: 0x5514,
            0x9A4A: 0x54FD,
            0x9A4B: 0x54EE,
            0x9A4C: 0x54ED,
            0x9A4D: 0x54FA,
            0x9A4E: 0x54E2,
            0x9A4F: 0x5539,
            0x9A50: 0x5540,
            0x9A51: 0x5563,
            0x9A52: 0x554C,
            0x9A53: 0x552E,
            0x9A54: 0x555C,
            0x9A55: 0x5545,
            0x9A56: 0x5556,
            0x9A57: 0x5557,
            0x9A58: 0x5538,
            0x9A59: 0x5533,
            0x9A5A: 0x555D,
            0x9A5B: 0x5599,
            0x9A5C: 0x5580,
            0x9A5D: 0x54AF,
            0x9A5E: 0x558A,
            0x9A5F: 0x559F,
            0x9A60: 0x557B,
            0x9A61: 0x557E,
            0x9A62: 0x5598,
            0x9A63: 0x559E,
            0x9A64: 0x55AE,
            0x9A65: 0x557C,
            0x9A66: 0x5583,
            0x9A67: 0x55A9,
            0x9A68: 0x5587,
            0x9A69: 0x55A8,
            0x9A6A: 0x55DA,
            0x9A6B: 0x55C5,
            0x9A6C: 0x55DF,
            0x9A6D: 0x55C4,
            0x9A6E: 0x55DC,
            0x9A6F: 0x55E4,
            0x9A70: 0x55D4,
            0x9A71: 0x5614,
            0x9A72: 0x55F7,
            0x9A73: 0x5616,
            0x9A74: 0x55FE,
            0x9A75: 0x55FD,
            0x9A76: 0x561B,
            0x9A77: 0x55F9,
            0x9A78: 0x564E,
            0x9A79: 0x5650,
            0x9A7A: 0x71DF,
            0x9A7B: 0x5634,
            0x9A7C: 0x5636,
            0x9A7D: 0x5632,
            0x9A7E: 0x5638,
            0x9A80: 0x566B,
            0x9A81: 0x5664,
            0x9A82: 0x562F,
            0x9A83: 0x566C,
            0x9A84: 0x566A,
            0x9A85: 0x5686,
            0x9A86: 0x5680,
            0x9A87: 0x568A,
            0x9A88: 0x56A0,
            0x9A89: 0x5694,
            0x9A8A: 0x568F,
            0x9A8B: 0x56A5,
            0x9A8C: 0x56AE,
            0x9A8D: 0x56B6,
            0x9A8E: 0x56B4,
            0x9A8F: 0x56C2,
            0x9A90: 0x56BC,
            0x9A91: 0x56C1,
            0x9A92: 0x56C3,
            0x9A93: 0x56C0,
            0x9A94: 0x56C8,
            0x9A95: 0x56CE,
            0x9A96: 0x56D1,
            0x9A97: 0x56D3,
            0x9A98: 0x56D7,
            0x9A99: 0x56EE,
            0x9A9A: 0x56F9,
            0x9A9B: 0x5700,
            0x9A9C: 0x56FF,
            0x9A9D: 0x5704,
            0x9A9E: 0x5709,
            0x9A9F: 0x5708,
            0x9AA0: 0x570B,
            0x9AA1: 0x570D,
            0x9AA2: 0x5713,
            0x9AA3: 0x5718,
            0x9AA4: 0x5716,
            0x9AA5: 0x55C7,
            0x9AA6: 0x571C,
            0x9AA7: 0x5726,
            0x9AA8: 0x5737,
            0x9AA9: 0x5738,
            0x9AAA: 0x574E,
            0x9AAB: 0x573B,
            0x9AAC: 0x5740,
            0x9AAD: 0x574F,
            0x9AAE: 0x5769,
            0x9AAF: 0x57C0,
            0x9AB0: 0x5788,
            0x9AB1: 0x5761,
            0x9AB2: 0x577F,
            0x9AB3: 0x5789,
            0x9AB4: 0x5793,
            0x9AB5: 0x57A0,
            0x9AB6: 0x57B3,
            0x9AB7: 0x57A4,
            0x9AB8: 0x57AA,
            0x9AB9: 0x57B0,
            0x9ABA: 0x57C3,
            0x9ABB: 0x57C6,
            0x9ABC: 0x57D4,
            0x9ABD: 0x57D2,
            0x9ABE: 0x57D3,
            0x9ABF: 0x580A,
            0x9AC0: 0x57D6,
            0x9AC1: 0x57E3,
            0x9AC2: 0x580B,
            0x9AC3: 0x5819,
            0x9AC4: 0x581D,
            0x9AC5: 0x5872,
            0x9AC6: 0x5821,
            0x9AC7: 0x5862,
            0x9AC8: 0x584B,
            0x9AC9: 0x5870,
            0x9ACA: 0x6BC0,
            0x9ACB: 0x5852,
            0x9ACC: 0x583D,
            0x9ACD: 0x5879,
            0x9ACE: 0x5885,
            0x9ACF: 0x58B9,
            0x9AD0: 0x589F,
            0x9AD1: 0x58AB,
            0x9AD2: 0x58BA,
            0x9AD3: 0x58DE,
            0x9AD4: 0x58BB,
            0x9AD5: 0x58B8,
            0x9AD6: 0x58AE,
            0x9AD7: 0x58C5,
            0x9AD8: 0x58D3,
            0x9AD9: 0x58D1,
            0x9ADA: 0x58D7,
            0x9ADB: 0x58D9,
            0x9ADC: 0x58D8,
            0x9ADD: 0x58E5,
            0x9ADE: 0x58DC,
            0x9ADF: 0x58E4,
            0x9AE0: 0x58DF,
            0x9AE1: 0x58EF,
            0x9AE2: 0x58FA,
            0x9AE3: 0x58F9,
            0x9AE4: 0x58FB,
            0x9AE5: 0x58FC,
            0x9AE6: 0x58FD,
            0x9AE7: 0x5902,
            0x9AE8: 0x590A,
            0x9AE9: 0x5910,
            0x9AEA: 0x591B,
            0x9AEB: 0x68A6,
            0x9AEC: 0x5925,
            0x9AED: 0x592C,
            0x9AEE: 0x592D,
            0x9AEF: 0x5932,
            0x9AF0: 0x5938,
            0x9AF1: 0x593E,
            0x9AF2: 0x7AD2,
            0x9AF3: 0x5955,
            0x9AF4: 0x5950,
            0x9AF5: 0x594E,
            0x9AF6: 0x595A,
            0x9AF7: 0x5958,
            0x9AF8: 0x5962,
            0x9AF9: 0x5960,
            0x9AFA: 0x5967,
            0x9AFB: 0x596C,
            0x9AFC: 0x5969,
            0x9B40: 0x5978,
            0x9B41: 0x5981,
            0x9B42: 0x599D,
            0x9B43: 0x4F5E,
            0x9B44: 0x4FAB,
            0x9B45: 0x59A3,
            0x9B46: 0x59B2,
            0x9B47: 0x59C6,
            0x9B48: 0x59E8,
            0x9B49: 0x59DC,
            0x9B4A: 0x598D,
            0x9B4B: 0x59D9,
            0x9B4C: 0x59DA,
            0x9B4D: 0x5A25,
            0x9B4E: 0x5A1F,
            0x9B4F: 0x5A11,
            0x9B50: 0x5A1C,
            0x9B51: 0x5A09,
            0x9B52: 0x5A1A,
            0x9B53: 0x5A40,
            0x9B54: 0x5A6C,
            0x9B55: 0x5A49,
            0x9B56: 0x5A35,
            0x9B57: 0x5A36,
            0x9B58: 0x5A62,
            0x9B59: 0x5A6A,
            0x9B5A: 0x5A9A,
            0x9B5B: 0x5ABC,
            0x9B5C: 0x5ABE,
            0x9B5D: 0x5ACB,
            0x9B5E: 0x5AC2,
            0x9B5F: 0x5ABD,
            0x9B60: 0x5AE3,
            0x9B61: 0x5AD7,
            0x9B62: 0x5AE6,
            0x9B63: 0x5AE9,
            0x9B64: 0x5AD6,
            0x9B65: 0x5AFA,
            0x9B66: 0x5AFB,
            0x9B67: 0x5B0C,
            0x9B68: 0x5B0B,
            0x9B69: 0x5B16,
            0x9B6A: 0x5B32,
            0x9B6B: 0x5AD0,
            0x9B6C: 0x5B2A,
            0x9B6D: 0x5B36,
            0x9B6E: 0x5B3E,
            0x9B6F: 0x5B43,
            0x9B70: 0x5B45,
            0x9B71: 0x5B40,
            0x9B72: 0x5B51,
            0x9B73: 0x5B55,
            0x9B74: 0x5B5A,
            0x9B75: 0x5B5B,
            0x9B76: 0x5B65,
            0x9B77: 0x5B69,
            0x9B78: 0x5B70,
            0x9B79: 0x5B73,
            0x9B7A: 0x5B75,
            0x9B7B: 0x5B78,
            0x9B7C: 0x6588,
            0x9B7D: 0x5B7A,
            0x9B7E: 0x5B80,
            0x9B80: 0x5B83,
            0x9B81: 0x5BA6,
            0x9B82: 0x5BB8,
            0x9B83: 0x5BC3,
            0x9B84: 0x5BC7,
            0x9B85: 0x5BC9,
            0x9B86: 0x5BD4,
            0x9B87: 0x5BD0,
            0x9B88: 0x5BE4,
            0x9B89: 0x5BE6,
            0x9B8A: 0x5BE2,
            0x9B8B: 0x5BDE,
            0x9B8C: 0x5BE5,
            0x9B8D: 0x5BEB,
            0x9B8E: 0x5BF0,
            0x9B8F: 0x5BF6,
            0x9B90: 0x5BF3,
            0x9B91: 0x5C05,
            0x9B92: 0x5C07,
            0x9B93: 0x5C08,
            0x9B94: 0x5C0D,
            0x9B95: 0x5C13,
            0x9B96: 0x5C20,
            0x9B97: 0x5C22,
            0x9B98: 0x5C28,
            0x9B99: 0x5C38,
            0x9B9A: 0x5C39,
            0x9B9B: 0x5C41,
            0x9B9C: 0x5C46,
            0x9B9D: 0x5C4E,
            0x9B9E: 0x5C53,
            0x9B9F: 0x5C50,
            0x9BA0: 0x5C4F,
            0x9BA1: 0x5B71,
            0x9BA2: 0x5C6C,
            0x9BA3: 0x5C6E,
            0x9BA4: 0x4E62,
            0x9BA5: 0x5C76,
            0x9BA6: 0x5C79,
            0x9BA7: 0x5C8C,
            0x9BA8: 0x5C91,
            0x9BA9: 0x5C94,
            0x9BAA: 0x599B,
            0x9BAB: 0x5CAB,
            0x9BAC: 0x5CBB,
            0x9BAD: 0x5CB6,
            0x9BAE: 0x5CBC,
            0x9BAF: 0x5CB7,
            0x9BB0: 0x5CC5,
            0x9BB1: 0x5CBE,
            0x9BB2: 0x5CC7,
            0x9BB3: 0x5CD9,
            0x9BB4: 0x5CE9,
            0x9BB5: 0x5CFD,
            0x9BB6: 0x5CFA,
            0x9BB7: 0x5CED,
            0x9BB8: 0x5D8C,
            0x9BB9: 0x5CEA,
            0x9BBA: 0x5D0B,
            0x9BBB: 0x5D15,
            0x9BBC: 0x5D17,
            0x9BBD: 0x5D5C,
            0x9BBE: 0x5D1F,
            0x9BBF: 0x5D1B,
            0x9BC0: 0x5D11,
            0x9BC1: 0x5D14,
            0x9BC2: 0x5D22,
            0x9BC3: 0x5D1A,
            0x9BC4: 0x5D19,
            0x9BC5: 0x5D18,
            0x9BC6: 0x5D4C,
            0x9BC7: 0x5D52,
            0x9BC8: 0x5D4E,
            0x9BC9: 0x5D4B,
            0x9BCA: 0x5D6C,
            0x9BCB: 0x5D73,
            0x9BCC: 0x5D76,
            0x9BCD: 0x5D87,
            0x9BCE: 0x5D84,
            0x9BCF: 0x5D82,
            0x9BD0: 0x5DA2,
            0x9BD1: 0x5D9D,
            0x9BD2: 0x5DAC,
            0x9BD3: 0x5DAE,
            0x9BD4: 0x5DBD,
            0x9BD5: 0x5D90,
            0x9BD6: 0x5DB7,
            0x9BD7: 0x5DBC,
            0x9BD8: 0x5DC9,
            0x9BD9: 0x5DCD,
            0x9BDA: 0x5DD3,
            0x9BDB: 0x5DD2,
            0x9BDC: 0x5DD6,
            0x9BDD: 0x5DDB,
            0x9BDE: 0x5DEB,
            0x9BDF: 0x5DF2,
            0x9BE0: 0x5DF5,
            0x9BE1: 0x5E0B,
            0x9BE2: 0x5E1A,
            0x9BE3: 0x5E19,
            0x9BE4: 0x5E11,
            0x9BE5: 0x5E1B,
            0x9BE6: 0x5E36,
            0x9BE7: 0x5E37,
            0x9BE8: 0x5E44,
            0x9BE9: 0x5E43,
            0x9BEA: 0x5E40,
            0x9BEB: 0x5E4E,
            0x9BEC: 0x5E57,
            0x9BED: 0x5E54,
            0x9BEE: 0x5E5F,
            0x9BEF: 0x5E62,
            0x9BF0: 0x5E64,
            0x9BF1: 0x5E47,
            0x9BF2: 0x5E75,
            0x9BF3: 0x5E76,
            0x9BF4: 0x5E7A,
            0x9BF5: 0x9EBC,
            0x9BF6: 0x5E7F,
            0x9BF7: 0x5EA0,
            0x9BF8: 0x5EC1,
            0x9BF9: 0x5EC2,
            0x9BFA: 0x5EC8,
            0x9BFB: 0x5ED0,
            0x9BFC: 0x5ECF,
            0x9C40: 0x5ED6,
            0x9C41: 0x5EE3,
            0x9C42: 0x5EDD,
            0x9C43: 0x5EDA,
            0x9C44: 0x5EDB,
            0x9C45: 0x5EE2,
            0x9C46: 0x5EE1,
            0x9C47: 0x5EE8,
            0x9C48: 0x5EE9,
            0x9C49: 0x5EEC,
            0x9C4A: 0x5EF1,
            0x9C4B: 0x5EF3,
            0x9C4C: 0x5EF0,
            0x9C4D: 0x5EF4,
            0x9C4E: 0x5EF8,
            0x9C4F: 0x5EFE,
            0x9C50: 0x5F03,
            0x9C51: 0x5F09,
            0x9C52: 0x5F5D,
            0x9C53: 0x5F5C,
            0x9C54: 0x5F0B,
            0x9C55: 0x5F11,
            0x9C56: 0x5F16,
            0x9C57: 0x5F29,
            0x9C58: 0x5F2D,
            0x9C59: 0x5F38,
            0x9C5A: 0x5F41,
            0x9C5B: 0x5F48,
            0x9C5C: 0x5F4C,
            0x9C5D: 0x5F4E,
            0x9C5E: 0x5F2F,
            0x9C5F: 0x5F51,
            0x9C60: 0x5F56,
            0x9C61: 0x5F57,
            0x9C62: 0x5F59,
            0x9C63: 0x5F61,
            0x9C64: 0x5F6D,
            0x9C65: 0x5F73,
            0x9C66: 0x5F77,
            0x9C67: 0x5F83,
            0x9C68: 0x5F82,
            0x9C69: 0x5F7F,
            0x9C6A: 0x5F8A,
            0x9C6B: 0x5F88,
            0x9C6C: 0x5F91,
            0x9C6D: 0x5F87,
            0x9C6E: 0x5F9E,
            0x9C6F: 0x5F99,
            0x9C70: 0x5F98,
            0x9C71: 0x5FA0,
            0x9C72: 0x5FA8,
            0x9C73: 0x5FAD,
            0x9C74: 0x5FBC,
            0x9C75: 0x5FD6,
            0x9C76: 0x5FFB,
            0x9C77: 0x5FE4,
            0x9C78: 0x5FF8,
            0x9C79: 0x5FF1,
            0x9C7A: 0x5FDD,
            0x9C7B: 0x60B3,
            0x9C7C: 0x5FFF,
            0x9C7D: 0x6021,
            0x9C7E: 0x6060,
            0x9C80: 0x6019,
            0x9C81: 0x6010,
            0x9C82: 0x6029,
            0x9C83: 0x600E,
            0x9C84: 0x6031,
            0x9C85: 0x601B,
            0x9C86: 0x6015,
            0x9C87: 0x602B,
            0x9C88: 0x6026,
            0x9C89: 0x600F,
            0x9C8A: 0x603A,
            0x9C8B: 0x605A,
            0x9C8C: 0x6041,
            0x9C8D: 0x606A,
            0x9C8E: 0x6077,
            0x9C8F: 0x605F,
            0x9C90: 0x604A,
            0x9C91: 0x6046,
            0x9C92: 0x604D,
            0x9C93: 0x6063,
            0x9C94: 0x6043,
            0x9C95: 0x6064,
            0x9C96: 0x6042,
            0x9C97: 0x606C,
            0x9C98: 0x606B,
            0x9C99: 0x6059,
            0x9C9A: 0x6081,
            0x9C9B: 0x608D,
            0x9C9C: 0x60E7,
            0x9C9D: 0x6083,
            0x9C9E: 0x609A,
            0x9C9F: 0x6084,
            0x9CA0: 0x609B,
            0x9CA1: 0x6096,
            0x9CA2: 0x6097,
            0x9CA3: 0x6092,
            0x9CA4: 0x60A7,
            0x9CA5: 0x608B,
            0x9CA6: 0x60E1,
            0x9CA7: 0x60B8,
            0x9CA8: 0x60E0,
            0x9CA9: 0x60D3,
            0x9CAA: 0x60B4,
            0x9CAB: 0x5FF0,
            0x9CAC: 0x60BD,
            0x9CAD: 0x60C6,
            0x9CAE: 0x60B5,
            0x9CAF: 0x60D8,
            0x9CB0: 0x614D,
            0x9CB1: 0x6115,
            0x9CB2: 0x6106,
            0x9CB3: 0x60F6,
            0x9CB4: 0x60F7,
            0x9CB5: 0x6100,
            0x9CB6: 0x60F4,
            0x9CB7: 0x60FA,
            0x9CB8: 0x6103,
            0x9CB9: 0x6121,
            0x9CBA: 0x60FB,
            0x9CBB: 0x60F1,
            0x9CBC: 0x610D,
            0x9CBD: 0x610E,
            0x9CBE: 0x6147,
            0x9CBF: 0x613E,
            0x9CC0: 0x6128,
            0x9CC1: 0x6127,
            0x9CC2: 0x614A,
            0x9CC3: 0x613F,
            0x9CC4: 0x613C,
            0x9CC5: 0x612C,
            0x9CC6: 0x6134,
            0x9CC7: 0x613D,
            0x9CC8: 0x6142,
            0x9CC9: 0x6144,
            0x9CCA: 0x6173,
            0x9CCB: 0x6177,
            0x9CCC: 0x6158,
            0x9CCD: 0x6159,
            0x9CCE: 0x615A,
            0x9CCF: 0x616B,
            0x9CD0: 0x6174,
            0x9CD1: 0x616F,
            0x9CD2: 0x6165,
            0x9CD3: 0x6171,
            0x9CD4: 0x615F,
            0x9CD5: 0x615D,
            0x9CD6: 0x6153,
            0x9CD7: 0x6175,
            0x9CD8: 0x6199,
            0x9CD9: 0x6196,
            0x9CDA: 0x6187,
            0x9CDB: 0x61AC,
            0x9CDC: 0x6194,
            0x9CDD: 0x619A,
            0x9CDE: 0x618A,
            0x9CDF: 0x6191,
            0x9CE0: 0x61AB,
            0x9CE1: 0x61AE,
            0x9CE2: 0x61CC,
            0x9CE3: 0x61CA,
            0x9CE4: 0x61C9,
            0x9CE5: 0x61F7,
            0x9CE6: 0x61C8,
            0x9CE7: 0x61C3,
            0x9CE8: 0x61C6,
            0x9CE9: 0x61BA,
            0x9CEA: 0x61CB,
            0x9CEB: 0x7F79,
            0x9CEC: 0x61CD,
            0x9CED: 0x61E6,
            0x9CEE: 0x61E3,
            0x9CEF: 0x61F6,
            0x9CF0: 0x61FA,
            0x9CF1: 0x61F4,
            0x9CF2: 0x61FF,
            0x9CF3: 0x61FD,
            0x9CF4: 0x61FC,
            0x9CF5: 0x61FE,
            0x9CF6: 0x6200,
            0x9CF7: 0x6208,
            0x9CF8: 0x6209,
            0x9CF9: 0x620D,
            0x9CFA: 0x620C,
            0x9CFB: 0x6214,
            0x9CFC: 0x621B,
            0x9D40: 0x621E,
            0x9D41: 0x6221,
            0x9D42: 0x622A,
            0x9D43: 0x622E,
            0x9D44: 0x6230,
            0x9D45: 0x6232,
            0x9D46: 0x6233,
            0x9D47: 0x6241,
            0x9D48: 0x624E,
            0x9D49: 0x625E,
            0x9D4A: 0x6263,
            0x9D4B: 0x625B,
            0x9D4C: 0x6260,
            0x9D4D: 0x6268,
            0x9D4E: 0x627C,
            0x9D4F: 0x6282,
            0x9D50: 0x6289,
            0x9D51: 0x627E,
            0x9D52: 0x6292,
            0x9D53: 0x6293,
            0x9D54: 0x6296,
            0x9D55: 0x62D4,
            0x9D56: 0x6283,
            0x9D57: 0x6294,
            0x9D58: 0x62D7,
            0x9D59: 0x62D1,
            0x9D5A: 0x62BB,
            0x9D5B: 0x62CF,
            0x9D5C: 0x62FF,
            0x9D5D: 0x62C6,
            0x9D5E: 0x64D4,
            0x9D5F: 0x62C8,
            0x9D60: 0x62DC,
            0x9D61: 0x62CC,
            0x9D62: 0x62CA,
            0x9D63: 0x62C2,
            0x9D64: 0x62C7,
            0x9D65: 0x629B,
            0x9D66: 0x62C9,
            0x9D67: 0x630C,
            0x9D68: 0x62EE,
            0x9D69: 0x62F1,
            0x9D6A: 0x6327,
            0x9D6B: 0x6302,
            0x9D6C: 0x6308,
            0x9D6D: 0x62EF,
            0x9D6E: 0x62F5,
            0x9D6F: 0x6350,
            0x9D70: 0x633E,
            0x9D71: 0x634D,
            0x9D72: 0x641C,
            0x9D73: 0x634F,
            0x9D74: 0x6396,
            0x9D75: 0x638E,
            0x9D76: 0x6380,
            0x9D77: 0x63AB,
            0x9D78: 0x6376,
            0x9D79: 0x63A3,
            0x9D7A: 0x638F,
            0x9D7B: 0x6389,
            0x9D7C: 0x639F,
            0x9D7D: 0x63B5,
            0x9D7E: 0x636B,
            0x9D80: 0x6369,
            0x9D81: 0x63BE,
            0x9D82: 0x63E9,
            0x9D83: 0x63C0,
            0x9D84: 0x63C6,
            0x9D85: 0x63E3,
            0x9D86: 0x63C9,
            0x9D87: 0x63D2,
            0x9D88: 0x63F6,
            0x9D89: 0x63C4,
            0x9D8A: 0x6416,
            0x9D8B: 0x6434,
            0x9D8C: 0x6406,
            0x9D8D: 0x6413,
            0x9D8E: 0x6426,
            0x9D8F: 0x6436,
            0x9D90: 0x651D,
            0x9D91: 0x6417,
            0x9D92: 0x6428,
            0x9D93: 0x640F,
            0x9D94: 0x6467,
            0x9D95: 0x646F,
            0x9D96: 0x6476,
            0x9D97: 0x644E,
            0x9D98: 0x652A,
            0x9D99: 0x6495,
            0x9D9A: 0x6493,
            0x9D9B: 0x64A5,
            0x9D9C: 0x64A9,
            0x9D9D: 0x6488,
            0x9D9E: 0x64BC,
            0x9D9F: 0x64DA,
            0x9DA0: 0x64D2,
            0x9DA1: 0x64C5,
            0x9DA2: 0x64C7,
            0x9DA3: 0x64BB,
            0x9DA4: 0x64D8,
            0x9DA5: 0x64C2,
            0x9DA6: 0x64F1,
            0x9DA7: 0x64E7,
            0x9DA8: 0x8209,
            0x9DA9: 0x64E0,
            0x9DAA: 0x64E1,
            0x9DAB: 0x62AC,
            0x9DAC: 0x64E3,
            0x9DAD: 0x64EF,
            0x9DAE: 0x652C,
            0x9DAF: 0x64F6,
            0x9DB0: 0x64F4,
            0x9DB1: 0x64F2,
            0x9DB2: 0x64FA,
            0x9DB3: 0x6500,
            0x9DB4: 0x64FD,
            0x9DB5: 0x6518,
            0x9DB6: 0x651C,
            0x9DB7: 0x6505,
            0x9DB8: 0x6524,
            0x9DB9: 0x6523,
            0x9DBA: 0x652B,
            0x9DBB: 0x6534,
            0x9DBC: 0x6535,
            0x9DBD: 0x6537,
            0x9DBE: 0x6536,
            0x9DBF: 0x6538,
            0x9DC0: 0x754B,
            0x9DC1: 0x6548,
            0x9DC2: 0x6556,
            0x9DC3: 0x6555,
            0x9DC4: 0x654D,
            0x9DC5: 0x6558,
            0x9DC6: 0x655E,
            0x9DC7: 0x655D,
            0x9DC8: 0x6572,
            0x9DC9: 0x6578,
            0x9DCA: 0x6582,
            0x9DCB: 0x6583,
            0x9DCC: 0x8B8A,
            0x9DCD: 0x659B,
            0x9DCE: 0x659F,
            0x9DCF: 0x65AB,
            0x9DD0: 0x65B7,
            0x9DD1: 0x65C3,
            0x9DD2: 0x65C6,
            0x9DD3: 0x65C1,
            0x9DD4: 0x65C4,
            0x9DD5: 0x65CC,
            0x9DD6: 0x65D2,
            0x9DD7: 0x65DB,
            0x9DD8: 0x65D9,
            0x9DD9: 0x65E0,
            0x9DDA: 0x65E1,
            0x9DDB: 0x65F1,
            0x9DDC: 0x6772,
            0x9DDD: 0x660A,
            0x9DDE: 0x6603,
            0x9DDF: 0x65FB,
            0x9DE0: 0x6773,
            0x9DE1: 0x6635,
            0x9DE2: 0x6636,
            0x9DE3: 0x6634,
            0x9DE4: 0x661C,
            0x9DE5: 0x664F,
            0x9DE6: 0x6644,
            0x9DE7: 0x6649,
            0x9DE8: 0x6641,
            0x9DE9: 0x665E,
            0x9DEA: 0x665D,
            0x9DEB: 0x6664,
            0x9DEC: 0x6667,
            0x9DED: 0x6668,
            0x9DEE: 0x665F,
            0x9DEF: 0x6662,
            0x9DF0: 0x6670,
            0x9DF1: 0x6683,
            0x9DF2: 0x6688,
            0x9DF3: 0x668E,
            0x9DF4: 0x6689,
            0x9DF5: 0x6684,
            0x9DF6: 0x6698,
            0x9DF7: 0x669D,
            0x9DF8: 0x66C1,
            0x9DF9: 0x66B9,
            0x9DFA: 0x66C9,
            0x9DFB: 0x66BE,
            0x9DFC: 0x66BC,
            0x9E40: 0x66C4,
            0x9E41: 0x66B8,
            0x9E42: 0x66D6,
            0x9E43: 0x66DA,
            0x9E44: 0x66E0,
            0x9E45: 0x663F,
            0x9E46: 0x66E6,
            0x9E47: 0x66E9,
            0x9E48: 0x66F0,
            0x9E49: 0x66F5,
            0x9E4A: 0x66F7,
            0x9E4B: 0x670F,
            0x9E4C: 0x6716,
            0x9E4D: 0x671E,
            0x9E4E: 0x6726,
            0x9E4F: 0x6727,
            0x9E50: 0x9738,
            0x9E51: 0x672E,
            0x9E52: 0x673F,
            0x9E53: 0x6736,
            0x9E54: 0x6741,
            0x9E55: 0x6738,
            0x9E56: 0x6737,
            0x9E57: 0x6746,
            0x9E58: 0x675E,
            0x9E59: 0x6760,
            0x9E5A: 0x6759,
            0x9E5B: 0x6763,
            0x9E5C: 0x6764,
            0x9E5D: 0x6789,
            0x9E5E: 0x6770,
            0x9E5F: 0x67A9,
            0x9E60: 0x677C,
            0x9E61: 0x676A,
            0x9E62: 0x678C,
            0x9E63: 0x678B,
            0x9E64: 0x67A6,
            0x9E65: 0x67A1,
            0x9E66: 0x6785,
            0x9E67: 0x67B7,
            0x9E68: 0x67EF,
            0x9E69: 0x67B4,
            0x9E6A: 0x67EC,
            0x9E6B: 0x67B3,
            0x9E6C: 0x67E9,
            0x9E6D: 0x67B8,
            0x9E6E: 0x67E4,
            0x9E6F: 0x67DE,
            0x9E70: 0x67DD,
            0x9E71: 0x67E2,
            0x9E72: 0x67EE,
            0x9E73: 0x67B9,
            0x9E74: 0x67CE,
            0x9E75: 0x67C6,
            0x9E76: 0x67E7,
            0x9E77: 0x6A9C,
            0x9E78: 0x681E,
            0x9E79: 0x6846,
            0x9E7A: 0x6829,
            0x9E7B: 0x6840,
            0x9E7C: 0x684D,
            0x9E7D: 0x6832,
            0x9E7E: 0x684E,
            0x9E80: 0x68B3,
            0x9E81: 0x682B,
            0x9E82: 0x6859,
            0x9E83: 0x6863,
            0x9E84: 0x6877,
            0x9E85: 0x687F,
            0x9E86: 0x689F,
            0x9E87: 0x688F,
            0x9E88: 0x68AD,
            0x9E89: 0x6894,
            0x9E8A: 0x689D,
            0x9E8B: 0x689B,
            0x9E8C: 0x6883,
            0x9E8D: 0x6AAE,
            0x9E8E: 0x68B9,
            0x9E8F: 0x6874,
            0x9E90: 0x68B5,
            0x9E91: 0x68A0,
            0x9E92: 0x68BA,
            0x9E93: 0x690F,
            0x9E94: 0x688D,
            0x9E95: 0x687E,
            0x9E96: 0x6901,
            0x9E97: 0x68CA,
            0x9E98: 0x6908,
            0x9E99: 0x68D8,
            0x9E9A: 0x6922,
            0x9E9B: 0x6926,
            0x9E9C: 0x68E1,
            0x9E9D: 0x690C,
            0x9E9E: 0x68CD,
            0x9E9F: 0x68D4,
            0x9EA0: 0x68E7,
            0x9EA1: 0x68D5,
            0x9EA2: 0x6936,
            0x9EA3: 0x6912,
            0x9EA4: 0x6904,
            0x9EA5: 0x68D7,
            0x9EA6: 0x68E3,
            0x9EA7: 0x6925,
            0x9EA8: 0x68F9,
            0x9EA9: 0x68E0,
            0x9EAA: 0x68EF,
            0x9EAB: 0x6928,
            0x9EAC: 0x692A,
            0x9EAD: 0x691A,
            0x9EAE: 0x6923,
            0x9EAF: 0x6921,
            0x9EB0: 0x68C6,
            0x9EB1: 0x6979,
            0x9EB2: 0x6977,
            0x9EB3: 0x695C,
            0x9EB4: 0x6978,
            0x9EB5: 0x696B,
            0x9EB6: 0x6954,
            0x9EB7: 0x697E,
            0x9EB8: 0x696E,
            0x9EB9: 0x6939,
            0x9EBA: 0x6974,
            0x9EBB: 0x693D,
            0x9EBC: 0x6959,
            0x9EBD: 0x6930,
            0x9EBE: 0x6961,
            0x9EBF: 0x695E,
            0x9EC0: 0x695D,
            0x9EC1: 0x6981,
            0x9EC2: 0x696A,
            0x9EC3: 0x69B2,
            0x9EC4: 0x69AE,
            0x9EC5: 0x69D0,
            0x9EC6: 0x69BF,
            0x9EC7: 0x69C1,
            0x9EC8: 0x69D3,
            0x9EC9: 0x69BE,
            0x9ECA: 0x69CE,
            0x9ECB: 0x5BE8,
            0x9ECC: 0x69CA,
            0x9ECD: 0x69DD,
            0x9ECE: 0x69BB,
            0x9ECF: 0x69C3,
            0x9ED0: 0x69A7,
            0x9ED1: 0x6A2E,
            0x9ED2: 0x6991,
            0x9ED3: 0x69A0,
            0x9ED4: 0x699C,
            0x9ED5: 0x6995,
            0x9ED6: 0x69B4,
            0x9ED7: 0x69DE,
            0x9ED8: 0x69E8,
            0x9ED9: 0x6A02,
            0x9EDA: 0x6A1B,
            0x9EDB: 0x69FF,
            0x9EDC: 0x6B0A,
            0x9EDD: 0x69F9,
            0x9EDE: 0x69F2,
            0x9EDF: 0x69E7,
            0x9EE0: 0x6A05,
            0x9EE1: 0x69B1,
            0x9EE2: 0x6A1E,
            0x9EE3: 0x69ED,
            0x9EE4: 0x6A14,
            0x9EE5: 0x69EB,
            0x9EE6: 0x6A0A,
            0x9EE7: 0x6A12,
            0x9EE8: 0x6AC1,
            0x9EE9: 0x6A23,
            0x9EEA: 0x6A13,
            0x9EEB: 0x6A44,
            0x9EEC: 0x6A0C,
            0x9EED: 0x6A72,
            0x9EEE: 0x6A36,
            0x9EEF: 0x6A78,
            0x9EF0: 0x6A47,
            0x9EF1: 0x6A62,
            0x9EF2: 0x6A59,
            0x9EF3: 0x6A66,
            0x9EF4: 0x6A48,
            0x9EF5: 0x6A38,
            0x9EF6: 0x6A22,
            0x9EF7: 0x6A90,
            0x9EF8: 0x6A8D,
            0x9EF9: 0x6AA0,
            0x9EFA: 0x6A84,
            0x9EFB: 0x6AA2,
            0x9EFC: 0x6AA3,
            0x9F40: 0x6A97,
            0x9F41: 0x8617,
            0x9F42: 0x6ABB,
            0x9F43: 0x6AC3,
            0x9F44: 0x6AC2,
            0x9F45: 0x6AB8,
            0x9F46: 0x6AB3,
            0x9F47: 0x6AAC,
            0x9F48: 0x6ADE,
            0x9F49: 0x6AD1,
            0x9F4A: 0x6ADF,
            0x9F4B: 0x6AAA,
            0x9F4C: 0x6ADA,
            0x9F4D: 0x6AEA,
            0x9F4E: 0x6AFB,
            0x9F4F: 0x6B05,
            0x9F50: 0x8616,
            0x9F51: 0x6AFA,
            0x9F52: 0x6B12,
            0x9F53: 0x6B16,
            0x9F54: 0x9B31,
            0x9F55: 0x6B1F,
            0x9F56: 0x6B38,
            0x9F57: 0x6B37,
            0x9F58: 0x76DC,
            0x9F59: 0x6B39,
            0x9F5A: 0x98EE,
            0x9F5B: 0x6B47,
            0x9F5C: 0x6B43,
            0x9F5D: 0x6B49,
            0x9F5E: 0x6B50,
            0x9F5F: 0x6B59,
            0x9F60: 0x6B54,
            0x9F61: 0x6B5B,
            0x9F62: 0x6B5F,
            0x9F63: 0x6B61,
            0x9F64: 0x6B78,
            0x9F65: 0x6B79,
            0x9F66: 0x6B7F,
            0x9F67: 0x6B80,
            0x9F68: 0x6B84,
            0x9F69: 0x6B83,
            0x9F6A: 0x6B8D,
            0x9F6B: 0x6B98,
            0x9F6C: 0x6B95,
            0x9F6D: 0x6B9E,
            0x9F6E: 0x6BA4,
            0x9F6F: 0x6BAA,
            0x9F70: 0x6BAB,
            0x9F71: 0x6BAF,
            0x9F72: 0x6BB2,
            0x9F73: 0x6BB1,
            0x9F74: 0x6BB3,
            0x9F75: 0x6BB7,
            0x9F76: 0x6BBC,
            0x9F77: 0x6BC6,
            0x9F78: 0x6BCB,
            0x9F79: 0x6BD3,
            0x9F7A: 0x6BDF,
            0x9F7B: 0x6BEC,
            0x9F7C: 0x6BEB,
            0x9F7D: 0x6BF3,
            0x9F7E: 0x6BEF,
            0x9F80: 0x9EBE,
            0x9F81: 0x6C08,
            0x9F82: 0x6C13,
            0x9F83: 0x6C14,
            0x9F84: 0x6C1B,
            0x9F85: 0x6C24,
            0x9F86: 0x6C23,
            0x9F87: 0x6C5E,
            0x9F88: 0x6C55,
            0x9F89: 0x6C62,
            0x9F8A: 0x6C6A,
            0x9F8B: 0x6C82,
            0x9F8C: 0x6C8D,
            0x9F8D: 0x6C9A,
            0x9F8E: 0x6C81,
            0x9F8F: 0x6C9B,
            0x9F90: 0x6C7E,
            0x9F91: 0x6C68,
            0x9F92: 0x6C73,
            0x9F93: 0x6C92,
            0x9F94: 0x6C90,
            0x9F95: 0x6CC4,
            0x9F96: 0x6CF1,
            0x9F97: 0x6CD3,
            0x9F98: 0x6CBD,
            0x9F99: 0x6CD7,
            0x9F9A: 0x6CC5,
            0x9F9B: 0x6CDD,
            0x9F9C: 0x6CAE,
            0x9F9D: 0x6CB1,
            0x9F9E: 0x6CBE,
            0x9F9F: 0x6CBA,
            0x9FA0: 0x6CDB,
            0x9FA1: 0x6CEF,
            0x9FA2: 0x6CD9,
            0x9FA3: 0x6CEA,
            0x9FA4: 0x6D1F,
            0x9FA5: 0x884D,
            0x9FA6: 0x6D36,
            0x9FA7: 0x6D2B,
            0x9FA8: 0x6D3D,
            0x9FA9: 0x6D38,
            0x9FAA: 0x6D19,
            0x9FAB: 0x6D35,
            0x9FAC: 0x6D33,
            0x9FAD: 0x6D12,
            0x9FAE: 0x6D0C,
            0x9FAF: 0x6D63,
            0x9FB0: 0x6D93,
            0x9FB1: 0x6D64,
            0x9FB2: 0x6D5A,
            0x9FB3: 0x6D79,
            0x9FB4: 0x6D59,
            0x9FB5: 0x6D8E,
            0x9FB6: 0x6D95,
            0x9FB7: 0x6FE4,
            0x9FB8: 0x6D85,
            0x9FB9: 0x6DF9,
            0x9FBA: 0x6E15,
            0x9FBB: 0x6E0A,
            0x9FBC: 0x6DB5,
            0x9FBD: 0x6DC7,
            0x9FBE: 0x6DE6,
            0x9FBF: 0x6DB8,
            0x9FC0: 0x6DC6,
            0x9FC1: 0x6DEC,
            0x9FC2: 0x6DDE,
            0x9FC3: 0x6DCC,
            0x9FC4: 0x6DE8,
            0x9FC5: 0x6DD2,
            0x9FC6: 0x6DC5,
            0x9FC7: 0x6DFA,
            0x9FC8: 0x6DD9,
            0x9FC9: 0x6DE4,
            0x9FCA: 0x6DD5,
            0x9FCB: 0x6DEA,
            0x9FCC: 0x6DEE,
            0x9FCD: 0x6E2D,
            0x9FCE: 0x6E6E,
            0x9FCF: 0x6E2E,
            0x9FD0: 0x6E19,
            0x9FD1: 0x6E72,
            0x9FD2: 0x6E5F,
            0x9FD3: 0x6E3E,
            0x9FD4: 0x6E23,
            0x9FD5: 0x6E6B,
            0x9FD6: 0x6E2B,
            0x9FD7: 0x6E76,
            0x9FD8: 0x6E4D,
            0x9FD9: 0x6E1F,
            0x9FDA: 0x6E43,
            0x9FDB: 0x6E3A,
            0x9FDC: 0x6E4E,
            0x9FDD: 0x6E24,
            0x9FDE: 0x6EFF,
            0x9FDF: 0x6E1D,
            0x9FE0: 0x6E38,
            0x9FE1: 0x6E82,
            0x9FE2: 0x6EAA,
            0x9FE3: 0x6E98,
            0x9FE4: 0x6EC9,
            0x9FE5: 0x6EB7,
            0x9FE6: 0x6ED3,
            0x9FE7: 0x6EBD,
            0x9FE8: 0x6EAF,
            0x9FE9: 0x6EC4,
            0x9FEA: 0x6EB2,
            0x9FEB: 0x6ED4,
            0x9FEC: 0x6ED5,
            0x9FED: 0x6E8F,
            0x9FEE: 0x6EA5,
            0x9FEF: 0x6EC2,
            0x9FF0: 0x6E9F,
            0x9FF1: 0x6F41,
            0x9FF2: 0x6F11,
            0x9FF3: 0x704C,
            0x9FF4: 0x6EEC,
            0x9FF5: 0x6EF8,
            0x9FF6: 0x6EFE,
            0x9FF7: 0x6F3F,
            0x9FF8: 0x6EF2,
            0x9FF9: 0x6F31,
            0x9FFA: 0x6EEF,
            0x9FFB: 0x6F32,
            0x9FFC: 0x6ECC,
            0xA1: 0xFF61,
            0xA2: 0xFF62,
            0xA3: 0xFF63,
            0xA4: 0xFF64,
            0xA5: 0xFF65,
            0xA6: 0xFF66,
            0xA7: 0xFF67,
            0xA8: 0xFF68,
            0xA9: 0xFF69,
            0xAA: 0xFF6A,
            0xAB: 0xFF6B,
            0xAC: 0xFF6C,
            0xAD: 0xFF6D,
            0xAE: 0xFF6E,
            0xAF: 0xFF6F,
            0xB0: 0xFF70,
            0xB1: 0xFF71,
            0xB2: 0xFF72,
            0xB3: 0xFF73,
            0xB4: 0xFF74,
            0xB5: 0xFF75,
            0xB6: 0xFF76,
            0xB7: 0xFF77,
            0xB8: 0xFF78,
            0xB9: 0xFF79,
            0xBA: 0xFF7A,
            0xBB: 0xFF7B,
            0xBC: 0xFF7C,
            0xBD: 0xFF7D,
            0xBE: 0xFF7E,
            0xBF: 0xFF7F,
            0xC0: 0xFF80,
            0xC1: 0xFF81,
            0xC2: 0xFF82,
            0xC3: 0xFF83,
            0xC4: 0xFF84,
            0xC5: 0xFF85,
            0xC6: 0xFF86,
            0xC7: 0xFF87,
            0xC8: 0xFF88,
            0xC9: 0xFF89,
            0xCA: 0xFF8A,
            0xCB: 0xFF8B,
            0xCC: 0xFF8C,
            0xCD: 0xFF8D,
            0xCE: 0xFF8E,
            0xCF: 0xFF8F,
            0xD0: 0xFF90,
            0xD1: 0xFF91,
            0xD2: 0xFF92,
            0xD3: 0xFF93,
            0xD4: 0xFF94,
            0xD5: 0xFF95,
            0xD6: 0xFF96,
            0xD7: 0xFF97,
            0xD8: 0xFF98,
            0xD9: 0xFF99,
            0xDA: 0xFF9A,
            0xDB: 0xFF9B,
            0xDC: 0xFF9C,
            0xDD: 0xFF9D,
            0xDE: 0xFF9E,
            0xDF: 0xFF9F,
            0xE040: 0x6F3E,
            0xE041: 0x6F13,
            0xE042: 0x6EF7,
            0xE043: 0x6F86,
            0xE044: 0x6F7A,
            0xE045: 0x6F78,
            0xE046: 0x6F81,
            0xE047: 0x6F80,
            0xE048: 0x6F6F,
            0xE049: 0x6F5B,
            0xE04A: 0x6FF3,
            0xE04B: 0x6F6D,
            0xE04C: 0x6F82,
            0xE04D: 0x6F7C,
            0xE04E: 0x6F58,
            0xE04F: 0x6F8E,
            0xE050: 0x6F91,
            0xE051: 0x6FC2,
            0xE052: 0x6F66,
            0xE053: 0x6FB3,
            0xE054: 0x6FA3,
            0xE055: 0x6FA1,
            0xE056: 0x6FA4,
            0xE057: 0x6FB9,
            0xE058: 0x6FC6,
            0xE059: 0x6FAA,
            0xE05A: 0x6FDF,
            0xE05B: 0x6FD5,
            0xE05C: 0x6FEC,
            0xE05D: 0x6FD4,
            0xE05E: 0x6FD8,
            0xE05F: 0x6FF1,
            0xE060: 0x6FEE,
            0xE061: 0x6FDB,
            0xE062: 0x7009,
            0xE063: 0x700B,
            0xE064: 0x6FFA,
            0xE065: 0x7011,
            0xE066: 0x7001,
            0xE067: 0x700F,
            0xE068: 0x6FFE,
            0xE069: 0x701B,
            0xE06A: 0x701A,
            0xE06B: 0x6F74,
            0xE06C: 0x701D,
            0xE06D: 0x7018,
            0xE06E: 0x701F,
            0xE06F: 0x7030,
            0xE070: 0x703E,
            0xE071: 0x7032,
            0xE072: 0x7051,
            0xE073: 0x7063,
            0xE074: 0x7099,
            0xE075: 0x7092,
            0xE076: 0x70AF,
            0xE077: 0x70F1,
            0xE078: 0x70AC,
            0xE079: 0x70B8,
            0xE07A: 0x70B3,
            0xE07B: 0x70AE,
            0xE07C: 0x70DF,
            0xE07D: 0x70CB,
            0xE07E: 0x70DD,
            0xE080: 0x70D9,
            0xE081: 0x7109,
            0xE082: 0x70FD,
            0xE083: 0x711C,
            0xE084: 0x7119,
            0xE085: 0x7165,
            0xE086: 0x7155,
            0xE087: 0x7188,
            0xE088: 0x7166,
            0xE089: 0x7162,
            0xE08A: 0x714C,
            0xE08B: 0x7156,
            0xE08C: 0x716C,
            0xE08D: 0x718F,
            0xE08E: 0x71FB,
            0xE08F: 0x7184,
            0xE090: 0x7195,
            0xE091: 0x71A8,
            0xE092: 0x71AC,
            0xE093: 0x71D7,
            0xE094: 0x71B9,
            0xE095: 0x71BE,
            0xE096: 0x71D2,
            0xE097: 0x71C9,
            0xE098: 0x71D4,
            0xE099: 0x71CE,
            0xE09A: 0x71E0,
            0xE09B: 0x71EC,
            0xE09C: 0x71E7,
            0xE09D: 0x71F5,
            0xE09E: 0x71FC,
            0xE09F: 0x71F9,
            0xE0A0: 0x71FF,
            0xE0A1: 0x720D,
            0xE0A2: 0x7210,
            0xE0A3: 0x721B,
            0xE0A4: 0x7228,
            0xE0A5: 0x722D,
            0xE0A6: 0x722C,
            0xE0A7: 0x7230,
            0xE0A8: 0x7232,
            0xE0A9: 0x723B,
            0xE0AA: 0x723C,
            0xE0AB: 0x723F,
            0xE0AC: 0x7240,
            0xE0AD: 0x7246,
            0xE0AE: 0x724B,
            0xE0AF: 0x7258,
            0xE0B0: 0x7274,
            0xE0B1: 0x727E,
            0xE0B2: 0x7282,
            0xE0B3: 0x7281,
            0xE0B4: 0x7287,
            0xE0B5: 0x7292,
            0xE0B6: 0x7296,
            0xE0B7: 0x72A2,
            0xE0B8: 0x72A7,
            0xE0B9: 0x72B9,
            0xE0BA: 0x72B2,
            0xE0BB: 0x72C3,
            0xE0BC: 0x72C6,
            0xE0BD: 0x72C4,
            0xE0BE: 0x72CE,
            0xE0BF: 0x72D2,
            0xE0C0: 0x72E2,
            0xE0C1: 0x72E0,
            0xE0C2: 0x72E1,
            0xE0C3: 0x72F9,
            0xE0C4: 0x72F7,
            0xE0C5: 0x500F,
            0xE0C6: 0x7317,
            0xE0C7: 0x730A,
            0xE0C8: 0x731C,
            0xE0C9: 0x7316,
            0xE0CA: 0x731D,
            0xE0CB: 0x7334,
            0xE0CC: 0x732F,
            0xE0CD: 0x7329,
            0xE0CE: 0x7325,
            0xE0CF: 0x733E,
            0xE0D0: 0x734E,
            0xE0D1: 0x734F,
            0xE0D2: 0x9ED8,
            0xE0D3: 0x7357,
            0xE0D4: 0x736A,
            0xE0D5: 0x7368,
            0xE0D6: 0x7370,
            0xE0D7: 0x7378,
            0xE0D8: 0x7375,
            0xE0D9: 0x737B,
            0xE0DA: 0x737A,
            0xE0DB: 0x73C8,
            0xE0DC: 0x73B3,
            0xE0DD: 0x73CE,
            0xE0DE: 0x73BB,
            0xE0DF: 0x73C0,
            0xE0E0: 0x73E5,
            0xE0E1: 0x73EE,
            0xE0E2: 0x73DE,
            0xE0E3: 0x74A2,
            0xE0E4: 0x7405,
            0xE0E5: 0x746F,
            0xE0E6: 0x7425,
            0xE0E7: 0x73F8,
            0xE0E8: 0x7432,
            0xE0E9: 0x743A,
            0xE0EA: 0x7455,
            0xE0EB: 0x743F,
            0xE0EC: 0x745F,
            0xE0ED: 0x7459,
            0xE0EE: 0x7441,
            0xE0EF: 0x745C,
            0xE0F0: 0x7469,
            0xE0F1: 0x7470,
            0xE0F2: 0x7463,
            0xE0F3: 0x746A,
            0xE0F4: 0x7476,
            0xE0F5: 0x747E,
            0xE0F6: 0x748B,
            0xE0F7: 0x749E,
            0xE0F8: 0x74A7,
            0xE0F9: 0x74CA,
            0xE0FA: 0x74CF,
            0xE0FB: 0x74D4,
            0xE0FC: 0x73F1,
            0xE140: 0x74E0,
            0xE141: 0x74E3,
            0xE142: 0x74E7,
            0xE143: 0x74E9,
            0xE144: 0x74EE,
            0xE145: 0x74F2,
            0xE146: 0x74F0,
            0xE147: 0x74F1,
            0xE148: 0x74F8,
            0xE149: 0x74F7,
            0xE14A: 0x7504,
            0xE14B: 0x7503,
            0xE14C: 0x7505,
            0xE14D: 0x750C,
            0xE14E: 0x750E,
            0xE14F: 0x750D,
            0xE150: 0x7515,
            0xE151: 0x7513,
            0xE152: 0x751E,
            0xE153: 0x7526,
            0xE154: 0x752C,
            0xE155: 0x753C,
            0xE156: 0x7544,
            0xE157: 0x754D,
            0xE158: 0x754A,
            0xE159: 0x7549,
            0xE15A: 0x755B,
            0xE15B: 0x7546,
            0xE15C: 0x755A,
            0xE15D: 0x7569,
            0xE15E: 0x7564,
            0xE15F: 0x7567,
            0xE160: 0x756B,
            0xE161: 0x756D,
            0xE162: 0x7578,
            0xE163: 0x7576,
            0xE164: 0x7586,
            0xE165: 0x7587,
            0xE166: 0x7574,
            0xE167: 0x758A,
            0xE168: 0x7589,
            0xE169: 0x7582,
            0xE16A: 0x7594,
            0xE16B: 0x759A,
            0xE16C: 0x759D,
            0xE16D: 0x75A5,
            0xE16E: 0x75A3,
            0xE16F: 0x75C2,
            0xE170: 0x75B3,
            0xE171: 0x75C3,
            0xE172: 0x75B5,
            0xE173: 0x75BD,
            0xE174: 0x75B8,
            0xE175: 0x75BC,
            0xE176: 0x75B1,
            0xE177: 0x75CD,
            0xE178: 0x75CA,
            0xE179: 0x75D2,
            0xE17A: 0x75D9,
            0xE17B: 0x75E3,
            0xE17C: 0x75DE,
            0xE17D: 0x75FE,
            0xE17E: 0x75FF,
            0xE180: 0x75FC,
            0xE181: 0x7601,
            0xE182: 0x75F0,
            0xE183: 0x75FA,
            0xE184: 0x75F2,
            0xE185: 0x75F3,
            0xE186: 0x760B,
            0xE187: 0x760D,
            0xE188: 0x7609,
            0xE189: 0x761F,
            0xE18A: 0x7627,
            0xE18B: 0x7620,
            0xE18C: 0x7621,
            0xE18D: 0x7622,
            0xE18E: 0x7624,
            0xE18F: 0x7634,
            0xE190: 0x7630,
            0xE191: 0x763B,
            0xE192: 0x7647,
            0xE193: 0x7648,
            0xE194: 0x7646,
            0xE195: 0x765C,
            0xE196: 0x7658,
            0xE197: 0x7661,
            0xE198: 0x7662,
            0xE199: 0x7668,
            0xE19A: 0x7669,
            0xE19B: 0x766A,
            0xE19C: 0x7667,
            0xE19D: 0x766C,
            0xE19E: 0x7670,
            0xE19F: 0x7672,
            0xE1A0: 0x7676,
            0xE1A1: 0x7678,
            0xE1A2: 0x767C,
            0xE1A3: 0x7680,
            0xE1A4: 0x7683,
            0xE1A5: 0x7688,
            0xE1A6: 0x768B,
            0xE1A7: 0x768E,
            0xE1A8: 0x7696,
            0xE1A9: 0x7693,
            0xE1AA: 0x7699,
            0xE1AB: 0x769A,
            0xE1AC: 0x76B0,
            0xE1AD: 0x76B4,
            0xE1AE: 0x76B8,
            0xE1AF: 0x76B9,
            0xE1B0: 0x76BA,
            0xE1B1: 0x76C2,
            0xE1B2: 0x76CD,
            0xE1B3: 0x76D6,
            0xE1B4: 0x76D2,
            0xE1B5: 0x76DE,
            0xE1B6: 0x76E1,
            0xE1B7: 0x76E5,
            0xE1B8: 0x76E7,
            0xE1B9: 0x76EA,
            0xE1BA: 0x862F,
            0xE1BB: 0x76FB,
            0xE1BC: 0x7708,
            0xE1BD: 0x7707,
            0xE1BE: 0x7704,
            0xE1BF: 0x7729,
            0xE1C0: 0x7724,
            0xE1C1: 0x771E,
            0xE1C2: 0x7725,
            0xE1C3: 0x7726,
            0xE1C4: 0x771B,
            0xE1C5: 0x7737,
            0xE1C6: 0x7738,
            0xE1C7: 0x7747,
            0xE1C8: 0x775A,
            0xE1C9: 0x7768,
            0xE1CA: 0x776B,
            0xE1CB: 0x775B,
            0xE1CC: 0x7765,
            0xE1CD: 0x777F,
            0xE1CE: 0x777E,
            0xE1CF: 0x7779,
            0xE1D0: 0x778E,
            0xE1D1: 0x778B,
            0xE1D2: 0x7791,
            0xE1D3: 0x77A0,
            0xE1D4: 0x779E,
            0xE1D5: 0x77B0,
            0xE1D6: 0x77B6,
            0xE1D7: 0x77B9,
            0xE1D8: 0x77BF,
            0xE1D9: 0x77BC,
            0xE1DA: 0x77BD,
            0xE1DB: 0x77BB,
            0xE1DC: 0x77C7,
            0xE1DD: 0x77CD,
            0xE1DE: 0x77D7,
            0xE1DF: 0x77DA,
            0xE1E0: 0x77DC,
            0xE1E1: 0x77E3,
            0xE1E2: 0x77EE,
            0xE1E3: 0x77FC,
            0xE1E4: 0x780C,
            0xE1E5: 0x7812,
            0xE1E6: 0x7926,
            0xE1E7: 0x7820,
            0xE1E8: 0x792A,
            0xE1E9: 0x7845,
            0xE1EA: 0x788E,
            0xE1EB: 0x7874,
            0xE1EC: 0x7886,
            0xE1ED: 0x787C,
            0xE1EE: 0x789A,
            0xE1EF: 0x788C,
            0xE1F0: 0x78A3,
            0xE1F1: 0x78B5,
            0xE1F2: 0x78AA,
            0xE1F3: 0x78AF,
            0xE1F4: 0x78D1,
            0xE1F5: 0x78C6,
            0xE1F6: 0x78CB,
            0xE1F7: 0x78D4,
            0xE1F8: 0x78BE,
            0xE1F9: 0x78BC,
            0xE1FA: 0x78C5,
            0xE1FB: 0x78CA,
            0xE1FC: 0x78EC,
            0xE240: 0x78E7,
            0xE241: 0x78DA,
            0xE242: 0x78FD,
            0xE243: 0x78F4,
            0xE244: 0x7907,
            0xE245: 0x7912,
            0xE246: 0x7911,
            0xE247: 0x7919,
            0xE248: 0x792C,
            0xE249: 0x792B,
            0xE24A: 0x7940,
            0xE24B: 0x7960,
            0xE24C: 0x7957,
            0xE24D: 0x795F,
            0xE24E: 0x795A,
            0xE24F: 0x7955,
            0xE250: 0x7953,
            0xE251: 0x797A,
            0xE252: 0x797F,
            0xE253: 0x798A,
            0xE254: 0x799D,
            0xE255: 0x79A7,
            0xE256: 0x9F4B,
            0xE257: 0x79AA,
            0xE258: 0x79AE,
            0xE259: 0x79B3,
            0xE25A: 0x79B9,
            0xE25B: 0x79BA,
            0xE25C: 0x79C9,
            0xE25D: 0x79D5,
            0xE25E: 0x79E7,
            0xE25F: 0x79EC,
            0xE260: 0x79E1,
            0xE261: 0x79E3,
            0xE262: 0x7A08,
            0xE263: 0x7A0D,
            0xE264: 0x7A18,
            0xE265: 0x7A19,
            0xE266: 0x7A20,
            0xE267: 0x7A1F,
            0xE268: 0x7980,
            0xE269: 0x7A31,
            0xE26A: 0x7A3B,
            0xE26B: 0x7A3E,
            0xE26C: 0x7A37,
            0xE26D: 0x7A43,
            0xE26E: 0x7A57,
            0xE26F: 0x7A49,
            0xE270: 0x7A61,
            0xE271: 0x7A62,
            0xE272: 0x7A69,
            0xE273: 0x9F9D,
            0xE274: 0x7A70,
            0xE275: 0x7A79,
            0xE276: 0x7A7D,
            0xE277: 0x7A88,
            0xE278: 0x7A97,
            0xE279: 0x7A95,
            0xE27A: 0x7A98,
            0xE27B: 0x7A96,
            0xE27C: 0x7AA9,
            0xE27D: 0x7AC8,
            0xE27E: 0x7AB0,
            0xE280: 0x7AB6,
            0xE281: 0x7AC5,
            0xE282: 0x7AC4,
            0xE283: 0x7ABF,
            0xE284: 0x9083,
            0xE285: 0x7AC7,
            0xE286: 0x7ACA,
            0xE287: 0x7ACD,
            0xE288: 0x7ACF,
            0xE289: 0x7AD5,
            0xE28A: 0x7AD3,
            0xE28B: 0x7AD9,
            0xE28C: 0x7ADA,
            0xE28D: 0x7ADD,
            0xE28E: 0x7AE1,
            0xE28F: 0x7AE2,
            0xE290: 0x7AE6,
            0xE291: 0x7AED,
            0xE292: 0x7AF0,
            0xE293: 0x7B02,
            0xE294: 0x7B0F,
            0xE295: 0x7B0A,
            0xE296: 0x7B06,
            0xE297: 0x7B33,
            0xE298: 0x7B18,
            0xE299: 0x7B19,
            0xE29A: 0x7B1E,
            0xE29B: 0x7B35,
            0xE29C: 0x7B28,
            0xE29D: 0x7B36,
            0xE29E: 0x7B50,
            0xE29F: 0x7B7A,
            0xE2A0: 0x7B04,
            0xE2A1: 0x7B4D,
            0xE2A2: 0x7B0B,
            0xE2A3: 0x7B4C,
            0xE2A4: 0x7B45,
            0xE2A5: 0x7B75,
            0xE2A6: 0x7B65,
            0xE2A7: 0x7B74,
            0xE2A8: 0x7B67,
            0xE2A9: 0x7B70,
            0xE2AA: 0x7B71,
            0xE2AB: 0x7B6C,
            0xE2AC: 0x7B6E,
            0xE2AD: 0x7B9D,
            0xE2AE: 0x7B98,
            0xE2AF: 0x7B9F,
            0xE2B0: 0x7B8D,
            0xE2B1: 0x7B9C,
            0xE2B2: 0x7B9A,
            0xE2B3: 0x7B8B,
            0xE2B4: 0x7B92,
            0xE2B5: 0x7B8F,
            0xE2B6: 0x7B5D,
            0xE2B7: 0x7B99,
            0xE2B8: 0x7BCB,
            0xE2B9: 0x7BC1,
            0xE2BA: 0x7BCC,
            0xE2BB: 0x7BCF,
            0xE2BC: 0x7BB4,
            0xE2BD: 0x7BC6,
            0xE2BE: 0x7BDD,
            0xE2BF: 0x7BE9,
            0xE2C0: 0x7C11,
            0xE2C1: 0x7C14,
            0xE2C2: 0x7BE6,
            0xE2C3: 0x7BE5,
            0xE2C4: 0x7C60,
            0xE2C5: 0x7C00,
            0xE2C6: 0x7C07,
            0xE2C7: 0x7C13,
            0xE2C8: 0x7BF3,
            0xE2C9: 0x7BF7,
            0xE2CA: 0x7C17,
            0xE2CB: 0x7C0D,
            0xE2CC: 0x7BF6,
            0xE2CD: 0x7C23,
            0xE2CE: 0x7C27,
            0xE2CF: 0x7C2A,
            0xE2D0: 0x7C1F,
            0xE2D1: 0x7C37,
            0xE2D2: 0x7C2B,
            0xE2D3: 0x7C3D,
            0xE2D4: 0x7C4C,
            0xE2D5: 0x7C43,
            0xE2D6: 0x7C54,
            0xE2D7: 0x7C4F,
            0xE2D8: 0x7C40,
            0xE2D9: 0x7C50,
            0xE2DA: 0x7C58,
            0xE2DB: 0x7C5F,
            0xE2DC: 0x7C64,
            0xE2DD: 0x7C56,
            0xE2DE: 0x7C65,
            0xE2DF: 0x7C6C,
            0xE2E0: 0x7C75,
            0xE2E1: 0x7C83,
            0xE2E2: 0x7C90,
            0xE2E3: 0x7CA4,
            0xE2E4: 0x7CAD,
            0xE2E5: 0x7CA2,
            0xE2E6: 0x7CAB,
            0xE2E7: 0x7CA1,
            0xE2E8: 0x7CA8,
            0xE2E9: 0x7CB3,
            0xE2EA: 0x7CB2,
            0xE2EB: 0x7CB1,
            0xE2EC: 0x7CAE,
            0xE2ED: 0x7CB9,
            0xE2EE: 0x7CBD,
            0xE2EF: 0x7CC0,
            0xE2F0: 0x7CC5,
            0xE2F1: 0x7CC2,
            0xE2F2: 0x7CD8,
            0xE2F3: 0x7CD2,
            0xE2F4: 0x7CDC,
            0xE2F5: 0x7CE2,
            0xE2F6: 0x9B3B,
            0xE2F7: 0x7CEF,
            0xE2F8: 0x7CF2,
            0xE2F9: 0x7CF4,
            0xE2FA: 0x7CF6,
            0xE2FB: 0x7CFA,
            0xE2FC: 0x7D06,
            0xE340: 0x7D02,
            0xE341: 0x7D1C,
            0xE342: 0x7D15,
            0xE343: 0x7D0A,
            0xE344: 0x7D45,
            0xE345: 0x7D4B,
            0xE346: 0x7D2E,
            0xE347: 0x7D32,
            0xE348: 0x7D3F,
            0xE349: 0x7D35,
            0xE34A: 0x7D46,
            0xE34B: 0x7D73,
            0xE34C: 0x7D56,
            0xE34D: 0x7D4E,
            0xE34E: 0x7D72,
            0xE34F: 0x7D68,
            0xE350: 0x7D6E,
            0xE351: 0x7D4F,
            0xE352: 0x7D63,
            0xE353: 0x7D93,
            0xE354: 0x7D89,
            0xE355: 0x7D5B,
            0xE356: 0x7D8F,
            0xE357: 0x7D7D,
            0xE358: 0x7D9B,
            0xE359: 0x7DBA,
            0xE35A: 0x7DAE,
            0xE35B: 0x7DA3,
            0xE35C: 0x7DB5,
            0xE35D: 0x7DC7,
            0xE35E: 0x7DBD,
            0xE35F: 0x7DAB,
            0xE360: 0x7E3D,
            0xE361: 0x7DA2,
            0xE362: 0x7DAF,
            0xE363: 0x7DDC,
            0xE364: 0x7DB8,
            0xE365: 0x7D9F,
            0xE366: 0x7DB0,
            0xE367: 0x7DD8,
            0xE368: 0x7DDD,
            0xE369: 0x7DE4,
            0xE36A: 0x7DDE,
            0xE36B: 0x7DFB,
            0xE36C: 0x7DF2,
            0xE36D: 0x7DE1,
            0xE36E: 0x7E05,
            0xE36F: 0x7E0A,
            0xE370: 0x7E23,
            0xE371: 0x7E21,
            0xE372: 0x7E12,
            0xE373: 0x7E31,
            0xE374: 0x7E1F,
            0xE375: 0x7E09,
            0xE376: 0x7E0B,
            0xE377: 0x7E22,
            0xE378: 0x7E46,
            0xE379: 0x7E66,
            0xE37A: 0x7E3B,
            0xE37B: 0x7E35,
            0xE37C: 0x7E39,
            0xE37D: 0x7E43,
            0xE37E: 0x7E37,
            0xE380: 0x7E32,
            0xE381: 0x7E3A,
            0xE382: 0x7E67,
            0xE383: 0x7E5D,
            0xE384: 0x7E56,
            0xE385: 0x7E5E,
            0xE386: 0x7E59,
            0xE387: 0x7E5A,
            0xE388: 0x7E79,
            0xE389: 0x7E6A,
            0xE38A: 0x7E69,
            0xE38B: 0x7E7C,
            0xE38C: 0x7E7B,
            0xE38D: 0x7E83,
            0xE38E: 0x7DD5,
            0xE38F: 0x7E7D,
            0xE390: 0x8FAE,
            0xE391: 0x7E7F,
            0xE392: 0x7E88,
            0xE393: 0x7E89,
            0xE394: 0x7E8C,
            0xE395: 0x7E92,
            0xE396: 0x7E90,
            0xE397: 0x7E93,
            0xE398: 0x7E94,
            0xE399: 0x7E96,
            0xE39A: 0x7E8E,
            0xE39B: 0x7E9B,
            0xE39C: 0x7E9C,
            0xE39D: 0x7F38,
            0xE39E: 0x7F3A,
            0xE39F: 0x7F45,
            0xE3A0: 0x7F4C,
            0xE3A1: 0x7F4D,
            0xE3A2: 0x7F4E,
            0xE3A3: 0x7F50,
            0xE3A4: 0x7F51,
            0xE3A5: 0x7F55,
            0xE3A6: 0x7F54,
            0xE3A7: 0x7F58,
            0xE3A8: 0x7F5F,
            0xE3A9: 0x7F60,
            0xE3AA: 0x7F68,
            0xE3AB: 0x7F69,
            0xE3AC: 0x7F67,
            0xE3AD: 0x7F78,
            0xE3AE: 0x7F82,
            0xE3AF: 0x7F86,
            0xE3B0: 0x7F83,
            0xE3B1: 0x7F88,
            0xE3B2: 0x7F87,
            0xE3B3: 0x7F8C,
            0xE3B4: 0x7F94,
            0xE3B5: 0x7F9E,
            0xE3B6: 0x7F9D,
            0xE3B7: 0x7F9A,
            0xE3B8: 0x7FA3,
            0xE3B9: 0x7FAF,
            0xE3BA: 0x7FB2,
            0xE3BB: 0x7FB9,
            0xE3BC: 0x7FAE,
            0xE3BD: 0x7FB6,
            0xE3BE: 0x7FB8,
            0xE3BF: 0x8B71,
            0xE3C0: 0x7FC5,
            0xE3C1: 0x7FC6,
            0xE3C2: 0x7FCA,
            0xE3C3: 0x7FD5,
            0xE3C4: 0x7FD4,
            0xE3C5: 0x7FE1,
            0xE3C6: 0x7FE6,
            0xE3C7: 0x7FE9,
            0xE3C8: 0x7FF3,
            0xE3C9: 0x7FF9,
            0xE3CA: 0x98DC,
            0xE3CB: 0x8006,
            0xE3CC: 0x8004,
            0xE3CD: 0x800B,
            0xE3CE: 0x8012,
            0xE3CF: 0x8018,
            0xE3D0: 0x8019,
            0xE3D1: 0x801C,
            0xE3D2: 0x8021,
            0xE3D3: 0x8028,
            0xE3D4: 0x803F,
            0xE3D5: 0x803B,
            0xE3D6: 0x804A,
            0xE3D7: 0x8046,
            0xE3D8: 0x8052,
            0xE3D9: 0x8058,
            0xE3DA: 0x805A,
            0xE3DB: 0x805F,
            0xE3DC: 0x8062,
            0xE3DD: 0x8068,
            0xE3DE: 0x8073,
            0xE3DF: 0x8072,
            0xE3E0: 0x8070,
            0xE3E1: 0x8076,
            0xE3E2: 0x8079,
            0xE3E3: 0x807D,
            0xE3E4: 0x807F,
            0xE3E5: 0x8084,
            0xE3E6: 0x8086,
            0xE3E7: 0x8085,
            0xE3E8: 0x809B,
            0xE3E9: 0x8093,
            0xE3EA: 0x809A,
            0xE3EB: 0x80AD,
            0xE3EC: 0x5190,
            0xE3ED: 0x80AC,
            0xE3EE: 0x80DB,
            0xE3EF: 0x80E5,
            0xE3F0: 0x80D9,
            0xE3F1: 0x80DD,
            0xE3F2: 0x80C4,
            0xE3F3: 0x80DA,
            0xE3F4: 0x80D6,
            0xE3F5: 0x8109,
            0xE3F6: 0x80EF,
            0xE3F7: 0x80F1,
            0xE3F8: 0x811B,
            0xE3F9: 0x8129,
            0xE3FA: 0x8123,
            0xE3FB: 0x812F,
            0xE3FC: 0x814B,
            0xE440: 0x968B,
            0xE441: 0x8146,
            0xE442: 0x813E,
            0xE443: 0x8153,
            0xE444: 0x8151,
            0xE445: 0x80FC,
            0xE446: 0x8171,
            0xE447: 0x816E,
            0xE448: 0x8165,
            0xE449: 0x8166,
            0xE44A: 0x8174,
            0xE44B: 0x8183,
            0xE44C: 0x8188,
            0xE44D: 0x818A,
            0xE44E: 0x8180,
            0xE44F: 0x8182,
            0xE450: 0x81A0,
            0xE451: 0x8195,
            0xE452: 0x81A4,
            0xE453: 0x81A3,
            0xE454: 0x815F,
            0xE455: 0x8193,
            0xE456: 0x81A9,
            0xE457: 0x81B0,
            0xE458: 0x81B5,
            0xE459: 0x81BE,
            0xE45A: 0x81B8,
            0xE45B: 0x81BD,
            0xE45C: 0x81C0,
            0xE45D: 0x81C2,
            0xE45E: 0x81BA,
            0xE45F: 0x81C9,
            0xE460: 0x81CD,
            0xE461: 0x81D1,
            0xE462: 0x81D9,
            0xE463: 0x81D8,
            0xE464: 0x81C8,
            0xE465: 0x81DA,
            0xE466: 0x81DF,
            0xE467: 0x81E0,
            0xE468: 0x81E7,
            0xE469: 0x81FA,
            0xE46A: 0x81FB,
            0xE46B: 0x81FE,
            0xE46C: 0x8201,
            0xE46D: 0x8202,
            0xE46E: 0x8205,
            0xE46F: 0x8207,
            0xE470: 0x820A,
            0xE471: 0x820D,
            0xE472: 0x8210,
            0xE473: 0x8216,
            0xE474: 0x8229,
            0xE475: 0x822B,
            0xE476: 0x8238,
            0xE477: 0x8233,
            0xE478: 0x8240,
            0xE479: 0x8259,
            0xE47A: 0x8258,
            0xE47B: 0x825D,
            0xE47C: 0x825A,
            0xE47D: 0x825F,
            0xE47E: 0x8264,
            0xE480: 0x8262,
            0xE481: 0x8268,
            0xE482: 0x826A,
            0xE483: 0x826B,
            0xE484: 0x822E,
            0xE485: 0x8271,
            0xE486: 0x8277,
            0xE487: 0x8278,
            0xE488: 0x827E,
            0xE489: 0x828D,
            0xE48A: 0x8292,
            0xE48B: 0x82AB,
            0xE48C: 0x829F,
            0xE48D: 0x82BB,
            0xE48E: 0x82AC,
            0xE48F: 0x82E1,
            0xE490: 0x82E3,
            0xE491: 0x82DF,
            0xE492: 0x82D2,
            0xE493: 0x82F4,
            0xE494: 0x82F3,
            0xE495: 0x82FA,
            0xE496: 0x8393,
            0xE497: 0x8303,
            0xE498: 0x82FB,
            0xE499: 0x82F9,
            0xE49A: 0x82DE,
            0xE49B: 0x8306,
            0xE49C: 0x82DC,
            0xE49D: 0x8309,
            0xE49E: 0x82D9,
            0xE49F: 0x8335,
            0xE4A0: 0x8334,
            0xE4A1: 0x8316,
            0xE4A2: 0x8332,
            0xE4A3: 0x8331,
            0xE4A4: 0x8340,
            0xE4A5: 0x8339,
            0xE4A6: 0x8350,
            0xE4A7: 0x8345,
            0xE4A8: 0x832F,
            0xE4A9: 0x832B,
            0xE4AA: 0x8317,
            0xE4AB: 0x8318,
            0xE4AC: 0x8385,
            0xE4AD: 0x839A,
            0xE4AE: 0x83AA,
            0xE4AF: 0x839F,
            0xE4B0: 0x83A2,
            0xE4B1: 0x8396,
            0xE4B2: 0x8323,
            0xE4B3: 0x838E,
            0xE4B4: 0x8387,
            0xE4B5: 0x838A,
            0xE4B6: 0x837C,
            0xE4B7: 0x83B5,
            0xE4B8: 0x8373,
            0xE4B9: 0x8375,
            0xE4BA: 0x83A0,
            0xE4BB: 0x8389,
            0xE4BC: 0x83A8,
            0xE4BD: 0x83F4,
            0xE4BE: 0x8413,
            0xE4BF: 0x83EB,
            0xE4C0: 0x83CE,
            0xE4C1: 0x83FD,
            0xE4C2: 0x8403,
            0xE4C3: 0x83D8,
            0xE4C4: 0x840B,
            0xE4C5: 0x83C1,
            0xE4C6: 0x83F7,
            0xE4C7: 0x8407,
            0xE4C8: 0x83E0,
            0xE4C9: 0x83F2,
            0xE4CA: 0x840D,
            0xE4CB: 0x8422,
            0xE4CC: 0x8420,
            0xE4CD: 0x83BD,
            0xE4CE: 0x8438,
            0xE4CF: 0x8506,
            0xE4D0: 0x83FB,
            0xE4D1: 0x846D,
            0xE4D2: 0x842A,
            0xE4D3: 0x843C,
            0xE4D4: 0x855A,
            0xE4D5: 0x8484,
            0xE4D6: 0x8477,
            0xE4D7: 0x846B,
            0xE4D8: 0x84AD,
            0xE4D9: 0x846E,
            0xE4DA: 0x8482,
            0xE4DB: 0x8469,
            0xE4DC: 0x8446,
            0xE4DD: 0x842C,
            0xE4DE: 0x846F,
            0xE4DF: 0x8479,
            0xE4E0: 0x8435,
            0xE4E1: 0x84CA,
            0xE4E2: 0x8462,
            0xE4E3: 0x84B9,
            0xE4E4: 0x84BF,
            0xE4E5: 0x849F,
            0xE4E6: 0x84D9,
            0xE4E7: 0x84CD,
            0xE4E8: 0x84BB,
            0xE4E9: 0x84DA,
            0xE4EA: 0x84D0,
            0xE4EB: 0x84C1,
            0xE4EC: 0x84C6,
            0xE4ED: 0x84D6,
            0xE4EE: 0x84A1,
            0xE4EF: 0x8521,
            0xE4F0: 0x84FF,
            0xE4F1: 0x84F4,
            0xE4F2: 0x8517,
            0xE4F3: 0x8518,
            0xE4F4: 0x852C,
            0xE4F5: 0x851F,
            0xE4F6: 0x8515,
            0xE4F7: 0x8514,
            0xE4F8: 0x84FC,
            0xE4F9: 0x8540,
            0xE4FA: 0x8563,
            0xE4FB: 0x8558,
            0xE4FC: 0x8548,
            0xE540: 0x8541,
            0xE541: 0x8602,
            0xE542: 0x854B,
            0xE543: 0x8555,
            0xE544: 0x8580,
            0xE545: 0x85A4,
            0xE546: 0x8588,
            0xE547: 0x8591,
            0xE548: 0x858A,
            0xE549: 0x85A8,
            0xE54A: 0x856D,
            0xE54B: 0x8594,
            0xE54C: 0x859B,
            0xE54D: 0x85EA,
            0xE54E: 0x8587,
            0xE54F: 0x859C,
            0xE550: 0x8577,
            0xE551: 0x857E,
            0xE552: 0x8590,
            0xE553: 0x85C9,
            0xE554: 0x85BA,
            0xE555: 0x85CF,
            0xE556: 0x85B9,
            0xE557: 0x85D0,
            0xE558: 0x85D5,
            0xE559: 0x85DD,
            0xE55A: 0x85E5,
            0xE55B: 0x85DC,
            0xE55C: 0x85F9,
            0xE55D: 0x860A,
            0xE55E: 0x8613,
            0xE55F: 0x860B,
            0xE560: 0x85FE,
            0xE561: 0x85FA,
            0xE562: 0x8606,
            0xE563: 0x8622,
            0xE564: 0x861A,
            0xE565: 0x8630,
            0xE566: 0x863F,
            0xE567: 0x864D,
            0xE568: 0x4E55,
            0xE569: 0x8654,
            0xE56A: 0x865F,
            0xE56B: 0x8667,
            0xE56C: 0x8671,
            0xE56D: 0x8693,
            0xE56E: 0x86A3,
            0xE56F: 0x86A9,
            0xE570: 0x86AA,
            0xE571: 0x868B,
            0xE572: 0x868C,
            0xE573: 0x86B6,
            0xE574: 0x86AF,
            0xE575: 0x86C4,
            0xE576: 0x86C6,
            0xE577: 0x86B0,
            0xE578: 0x86C9,
            0xE579: 0x8823,
            0xE57A: 0x86AB,
            0xE57B: 0x86D4,
            0xE57C: 0x86DE,
            0xE57D: 0x86E9,
            0xE57E: 0x86EC,
            0xE580: 0x86DF,
            0xE581: 0x86DB,
            0xE582: 0x86EF,
            0xE583: 0x8712,
            0xE584: 0x8706,
            0xE585: 0x8708,
            0xE586: 0x8700,
            0xE587: 0x8703,
            0xE588: 0x86FB,
            0xE589: 0x8711,
            0xE58A: 0x8709,
            0xE58B: 0x870D,
            0xE58C: 0x86F9,
            0xE58D: 0x870A,
            0xE58E: 0x8734,
            0xE58F: 0x873F,
            0xE590: 0x8737,
            0xE591: 0x873B,
            0xE592: 0x8725,
            0xE593: 0x8729,
            0xE594: 0x871A,
            0xE595: 0x8760,
            0xE596: 0x875F,
            0xE597: 0x8778,
            0xE598: 0x874C,
            0xE599: 0x874E,
            0xE59A: 0x8774,
            0xE59B: 0x8757,
            0xE59C: 0x8768,
            0xE59D: 0x876E,
            0xE59E: 0x8759,
            0xE59F: 0x8753,
            0xE5A0: 0x8763,
            0xE5A1: 0x876A,
            0xE5A2: 0x8805,
            0xE5A3: 0x87A2,
            0xE5A4: 0x879F,
            0xE5A5: 0x8782,
            0xE5A6: 0x87AF,
            0xE5A7: 0x87CB,
            0xE5A8: 0x87BD,
            0xE5A9: 0x87C0,
            0xE5AA: 0x87D0,
            0xE5AB: 0x96D6,
            0xE5AC: 0x87AB,
            0xE5AD: 0x87C4,
            0xE5AE: 0x87B3,
            0xE5AF: 0x87C7,
            0xE5B0: 0x87C6,
            0xE5B1: 0x87BB,
            0xE5B2: 0x87EF,
            0xE5B3: 0x87F2,
            0xE5B4: 0x87E0,
            0xE5B5: 0x880F,
            0xE5B6: 0x880D,
            0xE5B7: 0x87FE,
            0xE5B8: 0x87F6,
            0xE5B9: 0x87F7,
            0xE5BA: 0x880E,
            0xE5BB: 0x87D2,
            0xE5BC: 0x8811,
            0xE5BD: 0x8816,
            0xE5BE: 0x8815,
            0xE5BF: 0x8822,
            0xE5C0: 0x8821,
            0xE5C1: 0x8831,
            0xE5C2: 0x8836,
            0xE5C3: 0x8839,
            0xE5C4: 0x8827,
            0xE5C5: 0x883B,
            0xE5C6: 0x8844,
            0xE5C7: 0x8842,
            0xE5C8: 0x8852,
            0xE5C9: 0x8859,
            0xE5CA: 0x885E,
            0xE5CB: 0x8862,
            0xE5CC: 0x886B,
            0xE5CD: 0x8881,
            0xE5CE: 0x887E,
            0xE5CF: 0x889E,
            0xE5D0: 0x8875,
            0xE5D1: 0x887D,
            0xE5D2: 0x88B5,
            0xE5D3: 0x8872,
            0xE5D4: 0x8882,
            0xE5D5: 0x8897,
            0xE5D6: 0x8892,
            0xE5D7: 0x88AE,
            0xE5D8: 0x8899,
            0xE5D9: 0x88A2,
            0xE5DA: 0x888D,
            0xE5DB: 0x88A4,
            0xE5DC: 0x88B0,
            0xE5DD: 0x88BF,
            0xE5DE: 0x88B1,
            0xE5DF: 0x88C3,
            0xE5E0: 0x88C4,
            0xE5E1: 0x88D4,
            0xE5E2: 0x88D8,
            0xE5E3: 0x88D9,
            0xE5E4: 0x88DD,
            0xE5E5: 0x88F9,
            0xE5E6: 0x8902,
            0xE5E7: 0x88FC,
            0xE5E8: 0x88F4,
            0xE5E9: 0x88E8,
            0xE5EA: 0x88F2,
            0xE5EB: 0x8904,
            0xE5EC: 0x890C,
            0xE5ED: 0x890A,
            0xE5EE: 0x8913,
            0xE5EF: 0x8943,
            0xE5F0: 0x891E,
            0xE5F1: 0x8925,
            0xE5F2: 0x892A,
            0xE5F3: 0x892B,
            0xE5F4: 0x8941,
            0xE5F5: 0x8944,
            0xE5F6: 0x893B,
            0xE5F7: 0x8936,
            0xE5F8: 0x8938,
            0xE5F9: 0x894C,
            0xE5FA: 0x891D,
            0xE5FB: 0x8960,
            0xE5FC: 0x895E,
            0xE640: 0x8966,
            0xE641: 0x8964,
            0xE642: 0x896D,
            0xE643: 0x896A,
            0xE644: 0x896F,
            0xE645: 0x8974,
            0xE646: 0x8977,
            0xE647: 0x897E,
            0xE648: 0x8983,
            0xE649: 0x8988,
            0xE64A: 0x898A,
            0xE64B: 0x8993,
            0xE64C: 0x8998,
            0xE64D: 0x89A1,
            0xE64E: 0x89A9,
            0xE64F: 0x89A6,
            0xE650: 0x89AC,
            0xE651: 0x89AF,
            0xE652: 0x89B2,
            0xE653: 0x89BA,
            0xE654: 0x89BD,
            0xE655: 0x89BF,
            0xE656: 0x89C0,
            0xE657: 0x89DA,
            0xE658: 0x89DC,
            0xE659: 0x89DD,
            0xE65A: 0x89E7,
            0xE65B: 0x89F4,
            0xE65C: 0x89F8,
            0xE65D: 0x8A03,
            0xE65E: 0x8A16,
            0xE65F: 0x8A10,
            0xE660: 0x8A0C,
            0xE661: 0x8A1B,
            0xE662: 0x8A1D,
            0xE663: 0x8A25,
            0xE664: 0x8A36,
            0xE665: 0x8A41,
            0xE666: 0x8A5B,
            0xE667: 0x8A52,
            0xE668: 0x8A46,
            0xE669: 0x8A48,
            0xE66A: 0x8A7C,
            0xE66B: 0x8A6D,
            0xE66C: 0x8A6C,
            0xE66D: 0x8A62,
            0xE66E: 0x8A85,
            0xE66F: 0x8A82,
            0xE670: 0x8A84,
            0xE671: 0x8AA8,
            0xE672: 0x8AA1,
            0xE673: 0x8A91,
            0xE674: 0x8AA5,
            0xE675: 0x8AA6,
            0xE676: 0x8A9A,
            0xE677: 0x8AA3,
            0xE678: 0x8AC4,
            0xE679: 0x8ACD,
            0xE67A: 0x8AC2,
            0xE67B: 0x8ADA,
            0xE67C: 0x8AEB,
            0xE67D: 0x8AF3,
            0xE67E: 0x8AE7,
            0xE680: 0x8AE4,
            0xE681: 0x8AF1,
            0xE682: 0x8B14,
            0xE683: 0x8AE0,
            0xE684: 0x8AE2,
            0xE685: 0x8AF7,
            0xE686: 0x8ADE,
            0xE687: 0x8ADB,
            0xE688: 0x8B0C,
            0xE689: 0x8B07,
            0xE68A: 0x8B1A,
            0xE68B: 0x8AE1,
            0xE68C: 0x8B16,
            0xE68D: 0x8B10,
            0xE68E: 0x8B17,
            0xE68F: 0x8B20,
            0xE690: 0x8B33,
            0xE691: 0x97AB,
            0xE692: 0x8B26,
            0xE693: 0x8B2B,
            0xE694: 0x8B3E,
            0xE695: 0x8B28,
            0xE696: 0x8B41,
            0xE697: 0x8B4C,
            0xE698: 0x8B4F,
            0xE699: 0x8B4E,
            0xE69A: 0x8B49,
            0xE69B: 0x8B56,
            0xE69C: 0x8B5B,
            0xE69D: 0x8B5A,
            0xE69E: 0x8B6B,
            0xE69F: 0x8B5F,
            0xE6A0: 0x8B6C,
            0xE6A1: 0x8B6F,
            0xE6A2: 0x8B74,
            0xE6A3: 0x8B7D,
            0xE6A4: 0x8B80,
            0xE6A5: 0x8B8C,
            0xE6A6: 0x8B8E,
            0xE6A7: 0x8B92,
            0xE6A8: 0x8B93,
            0xE6A9: 0x8B96,
            0xE6AA: 0x8B99,
            0xE6AB: 0x8B9A,
            0xE6AC: 0x8C3A,
            0xE6AD: 0x8C41,
            0xE6AE: 0x8C3F,
            0xE6AF: 0x8C48,
            0xE6B0: 0x8C4C,
            0xE6B1: 0x8C4E,
            0xE6B2: 0x8C50,
            0xE6B3: 0x8C55,
            0xE6B4: 0x8C62,
            0xE6B5: 0x8C6C,
            0xE6B6: 0x8C78,
            0xE6B7: 0x8C7A,
            0xE6B8: 0x8C82,
            0xE6B9: 0x8C89,
            0xE6BA: 0x8C85,
            0xE6BB: 0x8C8A,
            0xE6BC: 0x8C8D,
            0xE6BD: 0x8C8E,
            0xE6BE: 0x8C94,
            0xE6BF: 0x8C7C,
            0xE6C0: 0x8C98,
            0xE6C1: 0x621D,
            0xE6C2: 0x8CAD,
            0xE6C3: 0x8CAA,
            0xE6C4: 0x8CBD,
            0xE6C5: 0x8CB2,
            0xE6C6: 0x8CB3,
            0xE6C7: 0x8CAE,
            0xE6C8: 0x8CB6,
            0xE6C9: 0x8CC8,
            0xE6CA: 0x8CC1,
            0xE6CB: 0x8CE4,
            0xE6CC: 0x8CE3,
            0xE6CD: 0x8CDA,
            0xE6CE: 0x8CFD,
            0xE6CF: 0x8CFA,
            0xE6D0: 0x8CFB,
            0xE6D1: 0x8D04,
            0xE6D2: 0x8D05,
            0xE6D3: 0x8D0A,
            0xE6D4: 0x8D07,
            0xE6D5: 0x8D0F,
            0xE6D6: 0x8D0D,
            0xE6D7: 0x8D10,
            0xE6D8: 0x9F4E,
            0xE6D9: 0x8D13,
            0xE6DA: 0x8CCD,
            0xE6DB: 0x8D14,
            0xE6DC: 0x8D16,
            0xE6DD: 0x8D67,
            0xE6DE: 0x8D6D,
            0xE6DF: 0x8D71,
            0xE6E0: 0x8D73,
            0xE6E1: 0x8D81,
            0xE6E2: 0x8D99,
            0xE6E3: 0x8DC2,
            0xE6E4: 0x8DBE,
            0xE6E5: 0x8DBA,
            0xE6E6: 0x8DCF,
            0xE6E7: 0x8DDA,
            0xE6E8: 0x8DD6,
            0xE6E9: 0x8DCC,
            0xE6EA: 0x8DDB,
            0xE6EB: 0x8DCB,
            0xE6EC: 0x8DEA,
            0xE6ED: 0x8DEB,
            0xE6EE: 0x8DDF,
            0xE6EF: 0x8DE3,
            0xE6F0: 0x8DFC,
            0xE6F1: 0x8E08,
            0xE6F2: 0x8E09,
            0xE6F3: 0x8DFF,
            0xE6F4: 0x8E1D,
            0xE6F5: 0x8E1E,
            0xE6F6: 0x8E10,
            0xE6F7: 0x8E1F,
            0xE6F8: 0x8E42,
            0xE6F9: 0x8E35,
            0xE6FA: 0x8E30,
            0xE6FB: 0x8E34,
            0xE6FC: 0x8E4A,
            0xE740: 0x8E47,
            0xE741: 0x8E49,
            0xE742: 0x8E4C,
            0xE743: 0x8E50,
            0xE744: 0x8E48,
            0xE745: 0x8E59,
            0xE746: 0x8E64,
            0xE747: 0x8E60,
            0xE748: 0x8E2A,
            0xE749: 0x8E63,
            0xE74A: 0x8E55,
            0xE74B: 0x8E76,
            0xE74C: 0x8E72,
            0xE74D: 0x8E7C,
            0xE74E: 0x8E81,
            0xE74F: 0x8E87,
            0xE750: 0x8E85,
            0xE751: 0x8E84,
            0xE752: 0x8E8B,
            0xE753: 0x8E8A,
            0xE754: 0x8E93,
            0xE755: 0x8E91,
            0xE756: 0x8E94,
            0xE757: 0x8E99,
            0xE758: 0x8EAA,
            0xE759: 0x8EA1,
            0xE75A: 0x8EAC,
            0xE75B: 0x8EB0,
            0xE75C: 0x8EC6,
            0xE75D: 0x8EB1,
            0xE75E: 0x8EBE,
            0xE75F: 0x8EC5,
            0xE760: 0x8EC8,
            0xE761: 0x8ECB,
            0xE762: 0x8EDB,
            0xE763: 0x8EE3,
            0xE764: 0x8EFC,
            0xE765: 0x8EFB,
            0xE766: 0x8EEB,
            0xE767: 0x8EFE,
            0xE768: 0x8F0A,
            0xE769: 0x8F05,
            0xE76A: 0x8F15,
            0xE76B: 0x8F12,
            0xE76C: 0x8F19,
            0xE76D: 0x8F13,
            0xE76E: 0x8F1C,
            0xE76F: 0x8F1F,
            0xE770: 0x8F1B,
            0xE771: 0x8F0C,
            0xE772: 0x8F26,
            0xE773: 0x8F33,
            0xE774: 0x8F3B,
            0xE775: 0x8F39,
            0xE776: 0x8F45,
            0xE777: 0x8F42,
            0xE778: 0x8F3E,
            0xE779: 0x8F4C,
            0xE77A: 0x8F49,
            0xE77B: 0x8F46,
            0xE77C: 0x8F4E,
            0xE77D: 0x8F57,
            0xE77E: 0x8F5C,
            0xE780: 0x8F62,
            0xE781: 0x8F63,
            0xE782: 0x8F64,
            0xE783: 0x8F9C,
            0xE784: 0x8F9F,
            0xE785: 0x8FA3,
            0xE786: 0x8FAD,
            0xE787: 0x8FAF,
            0xE788: 0x8FB7,
            0xE789: 0x8FDA,
            0xE78A: 0x8FE5,
            0xE78B: 0x8FE2,
            0xE78C: 0x8FEA,
            0xE78D: 0x8FEF,
            0xE78E: 0x9087,
            0xE78F: 0x8FF4,
            0xE790: 0x9005,
            0xE791: 0x8FF9,
            0xE792: 0x8FFA,
            0xE793: 0x9011,
            0xE794: 0x9015,
            0xE795: 0x9021,
            0xE796: 0x900D,
            0xE797: 0x901E,
            0xE798: 0x9016,
            0xE799: 0x900B,
            0xE79A: 0x9027,
            0xE79B: 0x9036,
            0xE79C: 0x9035,
            0xE79D: 0x9039,
            0xE79E: 0x8FF8,
            0xE79F: 0x904F,
            0xE7A0: 0x9050,
            0xE7A1: 0x9051,
            0xE7A2: 0x9052,
            0xE7A3: 0x900E,
            0xE7A4: 0x9049,
            0xE7A5: 0x903E,
            0xE7A6: 0x9056,
            0xE7A7: 0x9058,
            0xE7A8: 0x905E,
            0xE7A9: 0x9068,
            0xE7AA: 0x906F,
            0xE7AB: 0x9076,
            0xE7AC: 0x96A8,
            0xE7AD: 0x9072,
            0xE7AE: 0x9082,
            0xE7AF: 0x907D,
            0xE7B0: 0x9081,
            0xE7B1: 0x9080,
            0xE7B2: 0x908A,
            0xE7B3: 0x9089,
            0xE7B4: 0x908F,
            0xE7B5: 0x90A8,
            0xE7B6: 0x90AF,
            0xE7B7: 0x90B1,
            0xE7B8: 0x90B5,
            0xE7B9: 0x90E2,
            0xE7BA: 0x90E4,
            0xE7BB: 0x6248,
            0xE7BC: 0x90DB,
            0xE7BD: 0x9102,
            0xE7BE: 0x9112,
            0xE7BF: 0x9119,
            0xE7C0: 0x9132,
            0xE7C1: 0x9130,
            0xE7C2: 0x914A,
            0xE7C3: 0x9156,
            0xE7C4: 0x9158,
            0xE7C5: 0x9163,
            0xE7C6: 0x9165,
            0xE7C7: 0x9169,
            0xE7C8: 0x9173,
            0xE7C9: 0x9172,
            0xE7CA: 0x918B,
            0xE7CB: 0x9189,
            0xE7CC: 0x9182,
            0xE7CD: 0x91A2,
            0xE7CE: 0x91AB,
            0xE7CF: 0x91AF,
            0xE7D0: 0x91AA,
            0xE7D1: 0x91B5,
            0xE7D2: 0x91B4,
            0xE7D3: 0x91BA,
            0xE7D4: 0x91C0,
            0xE7D5: 0x91C1,
            0xE7D6: 0x91C9,
            0xE7D7: 0x91CB,
            0xE7D8: 0x91D0,
            0xE7D9: 0x91D6,
            0xE7DA: 0x91DF,
            0xE7DB: 0x91E1,
            0xE7DC: 0x91DB,
            0xE7DD: 0x91FC,
            0xE7DE: 0x91F5,
            0xE7DF: 0x91F6,
            0xE7E0: 0x921E,
            0xE7E1: 0x91FF,
            0xE7E2: 0x9214,
            0xE7E3: 0x922C,
            0xE7E4: 0x9215,
            0xE7E5: 0x9211,
            0xE7E6: 0x925E,
            0xE7E7: 0x9257,
            0xE7E8: 0x9245,
            0xE7E9: 0x9249,
            0xE7EA: 0x9264,
            0xE7EB: 0x9248,
            0xE7EC: 0x9295,
            0xE7ED: 0x923F,
            0xE7EE: 0x924B,
            0xE7EF: 0x9250,
            0xE7F0: 0x929C,
            0xE7F1: 0x9296,
            0xE7F2: 0x9293,
            0xE7F3: 0x929B,
            0xE7F4: 0x925A,
            0xE7F5: 0x92CF,
            0xE7F6: 0x92B9,
            0xE7F7: 0x92B7,
            0xE7F8: 0x92E9,
            0xE7F9: 0x930F,
            0xE7FA: 0x92FA,
            0xE7FB: 0x9344,
            0xE7FC: 0x932E,
            0xE840: 0x9319,
            0xE841: 0x9322,
            0xE842: 0x931A,
            0xE843: 0x9323,
            0xE844: 0x933A,
            0xE845: 0x9335,
            0xE846: 0x933B,
            0xE847: 0x935C,
            0xE848: 0x9360,
            0xE849: 0x937C,
            0xE84A: 0x936E,
            0xE84B: 0x9356,
            0xE84C: 0x93B0,
            0xE84D: 0x93AC,
            0xE84E: 0x93AD,
            0xE84F: 0x9394,
            0xE850: 0x93B9,
            0xE851: 0x93D6,
            0xE852: 0x93D7,
            0xE853: 0x93E8,
            0xE854: 0x93E5,
            0xE855: 0x93D8,
            0xE856: 0x93C3,
            0xE857: 0x93DD,
            0xE858: 0x93D0,
            0xE859: 0x93C8,
            0xE85A: 0x93E4,
            0xE85B: 0x941A,
            0xE85C: 0x9414,
            0xE85D: 0x9413,
            0xE85E: 0x9403,
            0xE85F: 0x9407,
            0xE860: 0x9410,
            0xE861: 0x9436,
            0xE862: 0x942B,
            0xE863: 0x9435,
            0xE864: 0x9421,
            0xE865: 0x943A,
            0xE866: 0x9441,
            0xE867: 0x9452,
            0xE868: 0x9444,
            0xE869: 0x945B,
            0xE86A: 0x9460,
            0xE86B: 0x9462,
            0xE86C: 0x945E,
            0xE86D: 0x946A,
            0xE86E: 0x9229,
            0xE86F: 0x9470,
            0xE870: 0x9475,
            0xE871: 0x9477,
            0xE872: 0x947D,
            0xE873: 0x945A,
            0xE874: 0x947C,
            0xE875: 0x947E,
            0xE876: 0x9481,
            0xE877: 0x947F,
            0xE878: 0x9582,
            0xE879: 0x9587,
            0xE87A: 0x958A,
            0xE87B: 0x9594,
            0xE87C: 0x9596,
            0xE87D: 0x9598,
            0xE87E: 0x9599,
            0xE880: 0x95A0,
            0xE881: 0x95A8,
            0xE882: 0x95A7,
            0xE883: 0x95AD,
            0xE884: 0x95BC,
            0xE885: 0x95BB,
            0xE886: 0x95B9,
            0xE887: 0x95BE,
            0xE888: 0x95CA,
            0xE889: 0x6FF6,
            0xE88A: 0x95C3,
            0xE88B: 0x95CD,
            0xE88C: 0x95CC,
            0xE88D: 0x95D5,
            0xE88E: 0x95D4,
            0xE88F: 0x95D6,
            0xE890: 0x95DC,
            0xE891: 0x95E1,
            0xE892: 0x95E5,
            0xE893: 0x95E2,
            0xE894: 0x9621,
            0xE895: 0x9628,
            0xE896: 0x962E,
            0xE897: 0x962F,
            0xE898: 0x9642,
            0xE899: 0x964C,
            0xE89A: 0x964F,
            0xE89B: 0x964B,
            0xE89C: 0x9677,
            0xE89D: 0x965C,
            0xE89E: 0x965E,
            0xE89F: 0x965D,
            0xE8A0: 0x965F,
            0xE8A1: 0x9666,
            0xE8A2: 0x9672,
            0xE8A3: 0x966C,
            0xE8A4: 0x968D,
            0xE8A5: 0x9698,
            0xE8A6: 0x9695,
            0xE8A7: 0x9697,
            0xE8A8: 0x96AA,
            0xE8A9: 0x96A7,
            0xE8AA: 0x96B1,
            0xE8AB: 0x96B2,
            0xE8AC: 0x96B0,
            0xE8AD: 0x96B4,
            0xE8AE: 0x96B6,
            0xE8AF: 0x96B8,
            0xE8B0: 0x96B9,
            0xE8B1: 0x96CE,
            0xE8B2: 0x96CB,
            0xE8B3: 0x96C9,
            0xE8B4: 0x96CD,
            0xE8B5: 0x894D,
            0xE8B6: 0x96DC,
            0xE8B7: 0x970D,
            0xE8B8: 0x96D5,
            0xE8B9: 0x96F9,
            0xE8BA: 0x9704,
            0xE8BB: 0x9706,
            0xE8BC: 0x9708,
            0xE8BD: 0x9713,
            0xE8BE: 0x970E,
            0xE8BF: 0x9711,
            0xE8C0: 0x970F,
            0xE8C1: 0x9716,
            0xE8C2: 0x9719,
            0xE8C3: 0x9724,
            0xE8C4: 0x972A,
            0xE8C5: 0x9730,
            0xE8C6: 0x9739,
            0xE8C7: 0x973D,
            0xE8C8: 0x973E,
            0xE8C9: 0x9744,
            0xE8CA: 0x9746,
            0xE8CB: 0x9748,
            0xE8CC: 0x9742,
            0xE8CD: 0x9749,
            0xE8CE: 0x975C,
            0xE8CF: 0x9760,
            0xE8D0: 0x9764,
            0xE8D1: 0x9766,
            0xE8D2: 0x9768,
            0xE8D3: 0x52D2,
            0xE8D4: 0x976B,
            0xE8D5: 0x9771,
            0xE8D6: 0x9779,
            0xE8D7: 0x9785,
            0xE8D8: 0x977C,
            0xE8D9: 0x9781,
            0xE8DA: 0x977A,
            0xE8DB: 0x9786,
            0xE8DC: 0x978B,
            0xE8DD: 0x978F,
            0xE8DE: 0x9790,
            0xE8DF: 0x979C,
            0xE8E0: 0x97A8,
            0xE8E1: 0x97A6,
            0xE8E2: 0x97A3,
            0xE8E3: 0x97B3,
            0xE8E4: 0x97B4,
            0xE8E5: 0x97C3,
            0xE8E6: 0x97C6,
            0xE8E7: 0x97C8,
            0xE8E8: 0x97CB,
            0xE8E9: 0x97DC,
            0xE8EA: 0x97ED,
            0xE8EB: 0x9F4F,
            0xE8EC: 0x97F2,
            0xE8ED: 0x7ADF,
            0xE8EE: 0x97F6,
            0xE8EF: 0x97F5,
            0xE8F0: 0x980F,
            0xE8F1: 0x980C,
            0xE8F2: 0x9838,
            0xE8F3: 0x9824,
            0xE8F4: 0x9821,
            0xE8F5: 0x9837,
            0xE8F6: 0x983D,
            0xE8F7: 0x9846,
            0xE8F8: 0x984F,
            0xE8F9: 0x984B,
            0xE8FA: 0x986B,
            0xE8FB: 0x986F,
            0xE8FC: 0x9870,
            0xE940: 0x9871,
            0xE941: 0x9874,
            0xE942: 0x9873,
            0xE943: 0x98AA,
            0xE944: 0x98AF,
            0xE945: 0x98B1,
            0xE946: 0x98B6,
            0xE947: 0x98C4,
            0xE948: 0x98C3,
            0xE949: 0x98C6,
            0xE94A: 0x98E9,
            0xE94B: 0x98EB,
            0xE94C: 0x9903,
            0xE94D: 0x9909,
            0xE94E: 0x9912,
            0xE94F: 0x9914,
            0xE950: 0x9918,
            0xE951: 0x9921,
            0xE952: 0x991D,
            0xE953: 0x991E,
            0xE954: 0x9924,
            0xE955: 0x9920,
            0xE956: 0x992C,
            0xE957: 0x992E,
            0xE958: 0x993D,
            0xE959: 0x993E,
            0xE95A: 0x9942,
            0xE95B: 0x9949,
            0xE95C: 0x9945,
            0xE95D: 0x9950,
            0xE95E: 0x994B,
            0xE95F: 0x9951,
            0xE960: 0x9952,
            0xE961: 0x994C,
            0xE962: 0x9955,
            0xE963: 0x9997,
            0xE964: 0x9998,
            0xE965: 0x99A5,
            0xE966: 0x99AD,
            0xE967: 0x99AE,
            0xE968: 0x99BC,
            0xE969: 0x99DF,
            0xE96A: 0x99DB,
            0xE96B: 0x99DD,
            0xE96C: 0x99D8,
            0xE96D: 0x99D1,
            0xE96E: 0x99ED,
            0xE96F: 0x99EE,
            0xE970: 0x99F1,
            0xE971: 0x99F2,
            0xE972: 0x99FB,
            0xE973: 0x99F8,
            0xE974: 0x9A01,
            0xE975: 0x9A0F,
            0xE976: 0x9A05,
            0xE977: 0x99E2,
            0xE978: 0x9A19,
            0xE979: 0x9A2B,
            0xE97A: 0x9A37,
            0xE97B: 0x9A45,
            0xE97C: 0x9A42,
            0xE97D: 0x9A40,
            0xE97E: 0x9A43,
            0xE980: 0x9A3E,
            0xE981: 0x9A55,
            0xE982: 0x9A4D,
            0xE983: 0x9A5B,
            0xE984: 0x9A57,
            0xE985: 0x9A5F,
            0xE986: 0x9A62,
            0xE987: 0x9A65,
            0xE988: 0x9A64,
            0xE989: 0x9A69,
            0xE98A: 0x9A6B,
            0xE98B: 0x9A6A,
            0xE98C: 0x9AAD,
            0xE98D: 0x9AB0,
            0xE98E: 0x9ABC,
            0xE98F: 0x9AC0,
            0xE990: 0x9ACF,
            0xE991: 0x9AD1,
            0xE992: 0x9AD3,
            0xE993: 0x9AD4,
            0xE994: 0x9ADE,
            0xE995: 0x9ADF,
            0xE996: 0x9AE2,
            0xE997: 0x9AE3,
            0xE998: 0x9AE6,
            0xE999: 0x9AEF,
            0xE99A: 0x9AEB,
            0xE99B: 0x9AEE,
            0xE99C: 0x9AF4,
            0xE99D: 0x9AF1,
            0xE99E: 0x9AF7,
            0xE99F: 0x9AFB,
            0xE9A0: 0x9B06,
            0xE9A1: 0x9B18,
            0xE9A2: 0x9B1A,
            0xE9A3: 0x9B1F,
            0xE9A4: 0x9B22,
            0xE9A5: 0x9B23,
            0xE9A6: 0x9B25,
            0xE9A7: 0x9B27,
            0xE9A8: 0x9B28,
            0xE9A9: 0x9B29,
            0xE9AA: 0x9B2A,
            0xE9AB: 0x9B2E,
            0xE9AC: 0x9B2F,
            0xE9AD: 0x9B32,
            0xE9AE: 0x9B44,
            0xE9AF: 0x9B43,
            0xE9B0: 0x9B4F,
            0xE9B1: 0x9B4D,
            0xE9B2: 0x9B4E,
            0xE9B3: 0x9B51,
            0xE9B4: 0x9B58,
            0xE9B5: 0x9B74,
            0xE9B6: 0x9B93,
            0xE9B7: 0x9B83,
            0xE9B8: 0x9B91,
            0xE9B9: 0x9B96,
            0xE9BA: 0x9B97,
            0xE9BB: 0x9B9F,
            0xE9BC: 0x9BA0,
            0xE9BD: 0x9BA8,
            0xE9BE: 0x9BB4,
            0xE9BF: 0x9BC0,
            0xE9C0: 0x9BCA,
            0xE9C1: 0x9BB9,
            0xE9C2: 0x9BC6,
            0xE9C3: 0x9BCF,
            0xE9C4: 0x9BD1,
            0xE9C5: 0x9BD2,
            0xE9C6: 0x9BE3,
            0xE9C7: 0x9BE2,
            0xE9C8: 0x9BE4,
            0xE9C9: 0x9BD4,
            0xE9CA: 0x9BE1,
            0xE9CB: 0x9C3A,
            0xE9CC: 0x9BF2,
            0xE9CD: 0x9BF1,
            0xE9CE: 0x9BF0,
            0xE9CF: 0x9C15,
            0xE9D0: 0x9C14,
            0xE9D1: 0x9C09,
            0xE9D2: 0x9C13,
            0xE9D3: 0x9C0C,
            0xE9D4: 0x9C06,
            0xE9D5: 0x9C08,
            0xE9D6: 0x9C12,
            0xE9D7: 0x9C0A,
            0xE9D8: 0x9C04,
            0xE9D9: 0x9C2E,
            0xE9DA: 0x9C1B,
            0xE9DB: 0x9C25,
            0xE9DC: 0x9C24,
            0xE9DD: 0x9C21,
            0xE9DE: 0x9C30,
            0xE9DF: 0x9C47,
            0xE9E0: 0x9C32,
            0xE9E1: 0x9C46,
            0xE9E2: 0x9C3E,
            0xE9E3: 0x9C5A,
            0xE9E4: 0x9C60,
            0xE9E5: 0x9C67,
            0xE9E6: 0x9C76,
            0xE9E7: 0x9C78,
            0xE9E8: 0x9CE7,
            0xE9E9: 0x9CEC,
            0xE9EA: 0x9CF0,
            0xE9EB: 0x9D09,
            0xE9EC: 0x9D08,
            0xE9ED: 0x9CEB,
            0xE9EE: 0x9D03,
            0xE9EF: 0x9D06,
            0xE9F0: 0x9D2A,
            0xE9F1: 0x9D26,
            0xE9F2: 0x9DAF,
            0xE9F3: 0x9D23,
            0xE9F4: 0x9D1F,
            0xE9F5: 0x9D44,
            0xE9F6: 0x9D15,
            0xE9F7: 0x9D12,
            0xE9F8: 0x9D41,
            0xE9F9: 0x9D3F,
            0xE9FA: 0x9D3E,
            0xE9FB: 0x9D46,
            0xE9FC: 0x9D48,
            0xEA40: 0x9D5D,
            0xEA41: 0x9D5E,
            0xEA42: 0x9D64,
            0xEA43: 0x9D51,
            0xEA44: 0x9D50,
            0xEA45: 0x9D59,
            0xEA46: 0x9D72,
            0xEA47: 0x9D89,
            0xEA48: 0x9D87,
            0xEA49: 0x9DAB,
            0xEA4A: 0x9D6F,
            0xEA4B: 0x9D7A,
            0xEA4C: 0x9D9A,
            0xEA4D: 0x9DA4,
            0xEA4E: 0x9DA9,
            0xEA4F: 0x9DB2,
            0xEA50: 0x9DC4,
            0xEA51: 0x9DC1,
            0xEA52: 0x9DBB,
            0xEA53: 0x9DB8,
            0xEA54: 0x9DBA,
            0xEA55: 0x9DC6,
            0xEA56: 0x9DCF,
            0xEA57: 0x9DC2,
            0xEA58: 0x9DD9,
            0xEA59: 0x9DD3,
            0xEA5A: 0x9DF8,
            0xEA5B: 0x9DE6,
            0xEA5C: 0x9DED,
            0xEA5D: 0x9DEF,
            0xEA5E: 0x9DFD,
            0xEA5F: 0x9E1A,
            0xEA60: 0x9E1B,
            0xEA61: 0x9E1E,
            0xEA62: 0x9E75,
            0xEA63: 0x9E79,
            0xEA64: 0x9E7D,
            0xEA65: 0x9E81,
            0xEA66: 0x9E88,
            0xEA67: 0x9E8B,
            0xEA68: 0x9E8C,
            0xEA69: 0x9E92,
            0xEA6A: 0x9E95,
            0xEA6B: 0x9E91,
            0xEA6C: 0x9E9D,
            0xEA6D: 0x9EA5,
            0xEA6E: 0x9EA9,
            0xEA6F: 0x9EB8,
            0xEA70: 0x9EAA,
            0xEA71: 0x9EAD,
            0xEA72: 0x9761,
            0xEA73: 0x9ECC,
            0xEA74: 0x9ECE,
            0xEA75: 0x9ECF,
            0xEA76: 0x9ED0,
            0xEA77: 0x9ED4,
            0xEA78: 0x9EDC,
            0xEA79: 0x9EDE,
            0xEA7A: 0x9EDD,
            0xEA7B: 0x9EE0,
            0xEA7C: 0x9EE5,
            0xEA7D: 0x9EE8,
            0xEA7E: 0x9EEF,
            0xEA80: 0x9EF4,
            0xEA81: 0x9EF6,
            0xEA82: 0x9EF7,
            0xEA83: 0x9EF9,
            0xEA84: 0x9EFB,
            0xEA85: 0x9EFC,
            0xEA86: 0x9EFD,
            0xEA87: 0x9F07,
            0xEA88: 0x9F08,
            0xEA89: 0x76B7,
            0xEA8A: 0x9F15,
            0xEA8B: 0x9F21,
            0xEA8C: 0x9F2C,
            0xEA8D: 0x9F3E,
            0xEA8E: 0x9F4A,
            0xEA8F: 0x9F52,
            0xEA90: 0x9F54,
            0xEA91: 0x9F63,
            0xEA92: 0x9F5F,
            0xEA93: 0x9F60,
            0xEA94: 0x9F61,
            0xEA95: 0x9F66,
            0xEA96: 0x9F67,
            0xEA97: 0x9F6C,
            0xEA98: 0x9F6A,
            0xEA99: 0x9F77,
            0xEA9A: 0x9F72,
            0xEA9B: 0x9F76,
            0xEA9C: 0x9F95,
            0xEA9D: 0x9F9C,
            0xEA9E: 0x9FA0,
            0xEA9F: 0x582F,
            0xEAA0: 0x69C7,
            0xEAA1: 0x9059,
            0xEAA2: 0x7464,
            0xEAA3: 0x51DC,
            0xEAA4: 0x7199,
          };


          /***/
        }),
/* 9 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var GenericGF_1 = __webpack_require__(1);
          var GenericGFPoly_1 = __webpack_require__(2);
          function runEuclideanAlgorithm(field, a, b, R) {
            var _a;
            // Assume a's degree is >= b's
            if (a.degree() < b.degree()) {
              _a = [b, a], a = _a[0], b = _a[1];
            }
            var rLast = a;
            var r = b;
            var tLast = field.zero;
            var t = field.one;
            // Run Euclidean algorithm until r's degree is less than R/2
            while (r.degree() >= R / 2) {
              var rLastLast = rLast;
              var tLastLast = tLast;
              rLast = r;
              tLast = t;
              // Divide rLastLast by rLast, with quotient in q and remainder in r
              if (rLast.isZero()) {
                // Euclidean algorithm already terminated?
                return null;
              }
              r = rLastLast;
              var q = field.zero;
              var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
              var dltInverse = field.inverse(denominatorLeadingTerm);
              while (r.degree() >= rLast.degree() && !r.isZero()) {
                var degreeDiff = r.degree() - rLast.degree();
                var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
                q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
                r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
              }
              t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);
              if (r.degree() >= rLast.degree()) {
                return null;
              }
            }
            var sigmaTildeAtZero = t.getCoefficient(0);
            if (sigmaTildeAtZero === 0) {
              return null;
            }
            var inverse = field.inverse(sigmaTildeAtZero);
            return [t.multiply(inverse), r.multiply(inverse)];
          }
          function findErrorLocations(field, errorLocator) {
            // This is a direct application of Chien's search
            var numErrors = errorLocator.degree();
            if (numErrors === 1) {
              return [errorLocator.getCoefficient(1)];
            }
            var result = new Array(numErrors);
            var errorCount = 0;
            for (var i = 1; i < field.size && errorCount < numErrors; i++) {
              if (errorLocator.evaluateAt(i) === 0) {
                result[errorCount] = field.inverse(i);
                errorCount++;
              }
            }
            if (errorCount !== numErrors) {
              return null;
            }
            return result;
          }
          function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
            // This is directly applying Forney's Formula
            var s = errorLocations.length;
            var result = new Array(s);
            for (var i = 0; i < s; i++) {
              var xiInverse = field.inverse(errorLocations[i]);
              var denominator = 1;
              for (var j = 0; j < s; j++) {
                if (i !== j) {
                  denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
                }
              }
              result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
              if (field.generatorBase !== 0) {
                result[i] = field.multiply(result[i], xiInverse);
              }
            }
            return result;
          }
          function decode(bytes, twoS) {
            var outputBytes = new Uint8ClampedArray(bytes.length);
            outputBytes.set(bytes);
            var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1
            var poly = new GenericGFPoly_1.default(field, outputBytes);
            var syndromeCoefficients = new Uint8ClampedArray(twoS);
            var error = false;
            for (var s = 0; s < twoS; s++) {
              var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
              syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;
              if (evaluation !== 0) {
                error = true;
              }
            }
            if (!error) {
              return outputBytes;
            }
            var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
            var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);
            if (sigmaOmega === null) {
              return null;
            }
            var errorLocations = findErrorLocations(field, sigmaOmega[0]);
            if (errorLocations == null) {
              return null;
            }
            var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);
            for (var i = 0; i < errorLocations.length; i++) {
              var position = outputBytes.length - 1 - field.log(errorLocations[i]);
              if (position < 0) {
                return null;
              }
              outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
            }
            return outputBytes;
          }
          exports.decode = decode;


          /***/
        }),
/* 10 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          exports.VERSIONS = [
            {
              infoBits: null,
              versionNumber: 1,
              alignmentPatternCenters: [],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 7,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],
                },
                {
                  ecCodewordsPerBlock: 10,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],
                },
                {
                  ecCodewordsPerBlock: 13,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],
                },
                {
                  ecCodewordsPerBlock: 17,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],
                },
              ],
            },
            {
              infoBits: null,
              versionNumber: 2,
              alignmentPatternCenters: [6, 18],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 10,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],
                },
                {
                  ecCodewordsPerBlock: 16,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],
                },
              ],
            },
            {
              infoBits: null,
              versionNumber: 3,
              alignmentPatternCenters: [6, 22],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 15,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],
                },
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],
                },
              ],
            },
            {
              infoBits: null,
              versionNumber: 4,
              alignmentPatternCenters: [6, 26],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],
                },
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],
                },
                {
                  ecCodewordsPerBlock: 16,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],
                },
              ],
            },
            {
              infoBits: null,
              versionNumber: 5,
              alignmentPatternCenters: [6, 30],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],
                },
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 15 },
                    { numBlocks: 2, dataCodewordsPerBlock: 16 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 11 },
                    { numBlocks: 2, dataCodewordsPerBlock: 12 },
                  ],
                },
              ],
            },
            {
              infoBits: null,
              versionNumber: 6,
              alignmentPatternCenters: [6, 34],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],
                },
                {
                  ecCodewordsPerBlock: 16,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],
                },
              ],
            },
            {
              infoBits: 0x07C94,
              versionNumber: 7,
              alignmentPatternCenters: [6, 22, 38],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],
                },
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],
                },
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 14 },
                    { numBlocks: 4, dataCodewordsPerBlock: 15 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 13 },
                    { numBlocks: 1, dataCodewordsPerBlock: 14 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x085BC,
              versionNumber: 8,
              alignmentPatternCenters: [6, 24, 42],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 38 },
                    { numBlocks: 2, dataCodewordsPerBlock: 39 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 18 },
                    { numBlocks: 2, dataCodewordsPerBlock: 19 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 14 },
                    { numBlocks: 2, dataCodewordsPerBlock: 15 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x09A99,
              versionNumber: 9,
              alignmentPatternCenters: [6, 26, 46],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 36 },
                    { numBlocks: 2, dataCodewordsPerBlock: 37 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 16 },
                    { numBlocks: 4, dataCodewordsPerBlock: 17 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 12 },
                    { numBlocks: 4, dataCodewordsPerBlock: 13 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x0A4D3,
              versionNumber: 10,
              alignmentPatternCenters: [6, 28, 50],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 18,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 68 },
                    { numBlocks: 2, dataCodewordsPerBlock: 69 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 43 },
                    { numBlocks: 1, dataCodewordsPerBlock: 44 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 19 },
                    { numBlocks: 2, dataCodewordsPerBlock: 20 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 15 },
                    { numBlocks: 2, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x0BBF6,
              versionNumber: 11,
              alignmentPatternCenters: [6, 30, 54],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 1, dataCodewordsPerBlock: 50 },
                    { numBlocks: 4, dataCodewordsPerBlock: 51 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 22 },
                    { numBlocks: 4, dataCodewordsPerBlock: 23 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 12 },
                    { numBlocks: 8, dataCodewordsPerBlock: 13 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x0C762,
              versionNumber: 12,
              alignmentPatternCenters: [6, 32, 58],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 92 },
                    { numBlocks: 2, dataCodewordsPerBlock: 93 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 36 },
                    { numBlocks: 2, dataCodewordsPerBlock: 37 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 20 },
                    { numBlocks: 6, dataCodewordsPerBlock: 21 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 7, dataCodewordsPerBlock: 14 },
                    { numBlocks: 4, dataCodewordsPerBlock: 15 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x0D847,
              versionNumber: 13,
              alignmentPatternCenters: [6, 34, 62],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 8, dataCodewordsPerBlock: 37 },
                    { numBlocks: 1, dataCodewordsPerBlock: 38 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 8, dataCodewordsPerBlock: 20 },
                    { numBlocks: 4, dataCodewordsPerBlock: 21 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 12, dataCodewordsPerBlock: 11 },
                    { numBlocks: 4, dataCodewordsPerBlock: 12 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x0E60D,
              versionNumber: 14,
              alignmentPatternCenters: [6, 26, 46, 66],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 115 },
                    { numBlocks: 1, dataCodewordsPerBlock: 116 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 40 },
                    { numBlocks: 5, dataCodewordsPerBlock: 41 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 20,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 16 },
                    { numBlocks: 5, dataCodewordsPerBlock: 17 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 12 },
                    { numBlocks: 5, dataCodewordsPerBlock: 13 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x0F928,
              versionNumber: 15,
              alignmentPatternCenters: [6, 26, 48, 70],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 22,
                  ecBlocks: [
                    { numBlocks: 5, dataCodewordsPerBlock: 87 },
                    { numBlocks: 1, dataCodewordsPerBlock: 88 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 5, dataCodewordsPerBlock: 41 },
                    { numBlocks: 5, dataCodewordsPerBlock: 42 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 5, dataCodewordsPerBlock: 24 },
                    { numBlocks: 7, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 12 },
                    { numBlocks: 7, dataCodewordsPerBlock: 13 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x10B78,
              versionNumber: 16,
              alignmentPatternCenters: [6, 26, 50, 74],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 5, dataCodewordsPerBlock: 98 },
                    { numBlocks: 1, dataCodewordsPerBlock: 99 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 7, dataCodewordsPerBlock: 45 },
                    { numBlocks: 3, dataCodewordsPerBlock: 46 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [
                    { numBlocks: 15, dataCodewordsPerBlock: 19 },
                    { numBlocks: 2, dataCodewordsPerBlock: 20 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 15 },
                    { numBlocks: 13, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1145D,
              versionNumber: 17,
              alignmentPatternCenters: [6, 30, 54, 78],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 1, dataCodewordsPerBlock: 107 },
                    { numBlocks: 5, dataCodewordsPerBlock: 108 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 10, dataCodewordsPerBlock: 46 },
                    { numBlocks: 1, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 1, dataCodewordsPerBlock: 22 },
                    { numBlocks: 15, dataCodewordsPerBlock: 23 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 14 },
                    { numBlocks: 17, dataCodewordsPerBlock: 15 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x12A17,
              versionNumber: 18,
              alignmentPatternCenters: [6, 30, 56, 82],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 5, dataCodewordsPerBlock: 120 },
                    { numBlocks: 1, dataCodewordsPerBlock: 121 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 9, dataCodewordsPerBlock: 43 },
                    { numBlocks: 4, dataCodewordsPerBlock: 44 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 17, dataCodewordsPerBlock: 22 },
                    { numBlocks: 1, dataCodewordsPerBlock: 23 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 14 },
                    { numBlocks: 19, dataCodewordsPerBlock: 15 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x13532,
              versionNumber: 19,
              alignmentPatternCenters: [6, 30, 58, 86],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 113 },
                    { numBlocks: 4, dataCodewordsPerBlock: 114 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 44 },
                    { numBlocks: 11, dataCodewordsPerBlock: 45 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 17, dataCodewordsPerBlock: 21 },
                    { numBlocks: 4, dataCodewordsPerBlock: 22 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 9, dataCodewordsPerBlock: 13 },
                    { numBlocks: 16, dataCodewordsPerBlock: 14 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x149A6,
              versionNumber: 20,
              alignmentPatternCenters: [6, 34, 62, 90],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 107 },
                    { numBlocks: 5, dataCodewordsPerBlock: 108 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 41 },
                    { numBlocks: 13, dataCodewordsPerBlock: 42 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 15, dataCodewordsPerBlock: 24 },
                    { numBlocks: 5, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 15, dataCodewordsPerBlock: 15 },
                    { numBlocks: 10, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x15683,
              versionNumber: 21,
              alignmentPatternCenters: [6, 28, 50, 72, 94],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 116 },
                    { numBlocks: 4, dataCodewordsPerBlock: 117 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 17, dataCodewordsPerBlock: 22 },
                    { numBlocks: 6, dataCodewordsPerBlock: 23 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 19, dataCodewordsPerBlock: 16 },
                    { numBlocks: 6, dataCodewordsPerBlock: 17 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x168C9,
              versionNumber: 22,
              alignmentPatternCenters: [6, 26, 50, 74, 98],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 111 },
                    { numBlocks: 7, dataCodewordsPerBlock: 112 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 7, dataCodewordsPerBlock: 24 },
                    { numBlocks: 16, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 24,
                  ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],
                },
              ],
            },
            {
              infoBits: 0x177EC,
              versionNumber: 23,
              alignmentPatternCenters: [6, 30, 54, 74, 102],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 121 },
                    { numBlocks: 5, dataCodewordsPerBlock: 122 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 47 },
                    { numBlocks: 14, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 24 },
                    { numBlocks: 14, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 16, dataCodewordsPerBlock: 15 },
                    { numBlocks: 14, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x18EC4,
              versionNumber: 24,
              alignmentPatternCenters: [6, 28, 54, 80, 106],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 117 },
                    { numBlocks: 4, dataCodewordsPerBlock: 118 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 45 },
                    { numBlocks: 14, dataCodewordsPerBlock: 46 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 24 },
                    { numBlocks: 16, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 30, dataCodewordsPerBlock: 16 },
                    { numBlocks: 2, dataCodewordsPerBlock: 17 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x191E1,
              versionNumber: 25,
              alignmentPatternCenters: [6, 32, 58, 84, 110],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 26,
                  ecBlocks: [
                    { numBlocks: 8, dataCodewordsPerBlock: 106 },
                    { numBlocks: 4, dataCodewordsPerBlock: 107 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 8, dataCodewordsPerBlock: 47 },
                    { numBlocks: 13, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 7, dataCodewordsPerBlock: 24 },
                    { numBlocks: 22, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 22, dataCodewordsPerBlock: 15 },
                    { numBlocks: 13, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1AFAB,
              versionNumber: 26,
              alignmentPatternCenters: [6, 30, 58, 86, 114],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 10, dataCodewordsPerBlock: 114 },
                    { numBlocks: 2, dataCodewordsPerBlock: 115 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 19, dataCodewordsPerBlock: 46 },
                    { numBlocks: 4, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 28, dataCodewordsPerBlock: 22 },
                    { numBlocks: 6, dataCodewordsPerBlock: 23 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 33, dataCodewordsPerBlock: 16 },
                    { numBlocks: 4, dataCodewordsPerBlock: 17 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1B08E,
              versionNumber: 27,
              alignmentPatternCenters: [6, 34, 62, 90, 118],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 8, dataCodewordsPerBlock: 122 },
                    { numBlocks: 4, dataCodewordsPerBlock: 123 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 22, dataCodewordsPerBlock: 45 },
                    { numBlocks: 3, dataCodewordsPerBlock: 46 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 8, dataCodewordsPerBlock: 23 },
                    { numBlocks: 26, dataCodewordsPerBlock: 24 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 12, dataCodewordsPerBlock: 15 },
                    { numBlocks: 28, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1CC1A,
              versionNumber: 28,
              alignmentPatternCenters: [6, 26, 50, 74, 98, 122],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 117 },
                    { numBlocks: 10, dataCodewordsPerBlock: 118 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 3, dataCodewordsPerBlock: 45 },
                    { numBlocks: 23, dataCodewordsPerBlock: 46 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 24 },
                    { numBlocks: 31, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 15 },
                    { numBlocks: 31, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1D33F,
              versionNumber: 29,
              alignmentPatternCenters: [6, 30, 54, 78, 102, 126],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 7, dataCodewordsPerBlock: 116 },
                    { numBlocks: 7, dataCodewordsPerBlock: 117 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 21, dataCodewordsPerBlock: 45 },
                    { numBlocks: 7, dataCodewordsPerBlock: 46 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 1, dataCodewordsPerBlock: 23 },
                    { numBlocks: 37, dataCodewordsPerBlock: 24 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 19, dataCodewordsPerBlock: 15 },
                    { numBlocks: 26, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1ED75,
              versionNumber: 30,
              alignmentPatternCenters: [6, 26, 52, 78, 104, 130],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 5, dataCodewordsPerBlock: 115 },
                    { numBlocks: 10, dataCodewordsPerBlock: 116 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 19, dataCodewordsPerBlock: 47 },
                    { numBlocks: 10, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 15, dataCodewordsPerBlock: 24 },
                    { numBlocks: 25, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 23, dataCodewordsPerBlock: 15 },
                    { numBlocks: 25, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x1F250,
              versionNumber: 31,
              alignmentPatternCenters: [6, 30, 56, 82, 108, 134],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 13, dataCodewordsPerBlock: 115 },
                    { numBlocks: 3, dataCodewordsPerBlock: 116 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 46 },
                    { numBlocks: 29, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 42, dataCodewordsPerBlock: 24 },
                    { numBlocks: 1, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 23, dataCodewordsPerBlock: 15 },
                    { numBlocks: 28, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x209D5,
              versionNumber: 32,
              alignmentPatternCenters: [6, 34, 60, 86, 112, 138],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 10, dataCodewordsPerBlock: 46 },
                    { numBlocks: 23, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 10, dataCodewordsPerBlock: 24 },
                    { numBlocks: 35, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 19, dataCodewordsPerBlock: 15 },
                    { numBlocks: 35, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x216F0,
              versionNumber: 33,
              alignmentPatternCenters: [6, 30, 58, 86, 114, 142],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 17, dataCodewordsPerBlock: 115 },
                    { numBlocks: 1, dataCodewordsPerBlock: 116 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 14, dataCodewordsPerBlock: 46 },
                    { numBlocks: 21, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 29, dataCodewordsPerBlock: 24 },
                    { numBlocks: 19, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 11, dataCodewordsPerBlock: 15 },
                    { numBlocks: 46, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x228BA,
              versionNumber: 34,
              alignmentPatternCenters: [6, 34, 62, 90, 118, 146],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 13, dataCodewordsPerBlock: 115 },
                    { numBlocks: 6, dataCodewordsPerBlock: 116 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 14, dataCodewordsPerBlock: 46 },
                    { numBlocks: 23, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 44, dataCodewordsPerBlock: 24 },
                    { numBlocks: 7, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 59, dataCodewordsPerBlock: 16 },
                    { numBlocks: 1, dataCodewordsPerBlock: 17 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x2379F,
              versionNumber: 35,
              alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 12, dataCodewordsPerBlock: 121 },
                    { numBlocks: 7, dataCodewordsPerBlock: 122 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 12, dataCodewordsPerBlock: 47 },
                    { numBlocks: 26, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 39, dataCodewordsPerBlock: 24 },
                    { numBlocks: 14, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 22, dataCodewordsPerBlock: 15 },
                    { numBlocks: 41, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x24B0B,
              versionNumber: 36,
              alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 121 },
                    { numBlocks: 14, dataCodewordsPerBlock: 122 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 6, dataCodewordsPerBlock: 47 },
                    { numBlocks: 34, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 46, dataCodewordsPerBlock: 24 },
                    { numBlocks: 10, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 2, dataCodewordsPerBlock: 15 },
                    { numBlocks: 64, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x2542E,
              versionNumber: 37,
              alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 17, dataCodewordsPerBlock: 122 },
                    { numBlocks: 4, dataCodewordsPerBlock: 123 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 29, dataCodewordsPerBlock: 46 },
                    { numBlocks: 14, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 49, dataCodewordsPerBlock: 24 },
                    { numBlocks: 10, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 24, dataCodewordsPerBlock: 15 },
                    { numBlocks: 46, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x26A64,
              versionNumber: 38,
              alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 4, dataCodewordsPerBlock: 122 },
                    { numBlocks: 18, dataCodewordsPerBlock: 123 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 13, dataCodewordsPerBlock: 46 },
                    { numBlocks: 32, dataCodewordsPerBlock: 47 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 48, dataCodewordsPerBlock: 24 },
                    { numBlocks: 14, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 42, dataCodewordsPerBlock: 15 },
                    { numBlocks: 32, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x27541,
              versionNumber: 39,
              alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 20, dataCodewordsPerBlock: 117 },
                    { numBlocks: 4, dataCodewordsPerBlock: 118 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 40, dataCodewordsPerBlock: 47 },
                    { numBlocks: 7, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 43, dataCodewordsPerBlock: 24 },
                    { numBlocks: 22, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 10, dataCodewordsPerBlock: 15 },
                    { numBlocks: 67, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
            {
              infoBits: 0x28C69,
              versionNumber: 40,
              alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],
              errorCorrectionLevels: [
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 19, dataCodewordsPerBlock: 118 },
                    { numBlocks: 6, dataCodewordsPerBlock: 119 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 28,
                  ecBlocks: [
                    { numBlocks: 18, dataCodewordsPerBlock: 47 },
                    { numBlocks: 31, dataCodewordsPerBlock: 48 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 34, dataCodewordsPerBlock: 24 },
                    { numBlocks: 34, dataCodewordsPerBlock: 25 },
                  ],
                },
                {
                  ecCodewordsPerBlock: 30,
                  ecBlocks: [
                    { numBlocks: 20, dataCodewordsPerBlock: 15 },
                    { numBlocks: 61, dataCodewordsPerBlock: 16 },
                  ],
                },
              ],
            },
          ];


          /***/
        }),
/* 11 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var BitMatrix_1 = __webpack_require__(0);
          function squareToQuadrilateral(p1, p2, p3, p4) {
            var dx3 = p1.x - p2.x + p3.x - p4.x;
            var dy3 = p1.y - p2.y + p3.y - p4.y;
            if (dx3 === 0 && dy3 === 0) { // Affine
              return {
                a11: p2.x - p1.x,
                a12: p2.y - p1.y,
                a13: 0,
                a21: p3.x - p2.x,
                a22: p3.y - p2.y,
                a23: 0,
                a31: p1.x,
                a32: p1.y,
                a33: 1,
              };
            }
            else {
              var dx1 = p2.x - p3.x;
              var dx2 = p4.x - p3.x;
              var dy1 = p2.y - p3.y;
              var dy2 = p4.y - p3.y;
              var denominator = dx1 * dy2 - dx2 * dy1;
              var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
              var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
              return {
                a11: p2.x - p1.x + a13 * p2.x,
                a12: p2.y - p1.y + a13 * p2.y,
                a13: a13,
                a21: p4.x - p1.x + a23 * p4.x,
                a22: p4.y - p1.y + a23 * p4.y,
                a23: a23,
                a31: p1.x,
                a32: p1.y,
                a33: 1,
              };
            }
          }
          function quadrilateralToSquare(p1, p2, p3, p4) {
            // Here, the adjoint serves as the inverse:
            var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
            return {
              a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
              a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
              a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
              a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
              a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
              a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
              a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
              a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
              a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,
            };
          }
          function times(a, b) {
            return {
              a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
              a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
              a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
              a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
              a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
              a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
              a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
              a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
              a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,
            };
          }
          function extract(image, location) {
            var qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });
            var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
            var transform = times(sToQ, qToS);
            var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);
            var mappingFunction = function (x, y) {
              var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
              return {
                x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
                y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,
              };
            };
            for (var y = 0; y < location.dimension; y++) {
              for (var x = 0; x < location.dimension; x++) {
                var xValue = x + 0.5;
                var yValue = y + 0.5;
                var sourcePixel = mappingFunction(xValue, yValue);
                matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
              }
            }
            return {
              matrix: matrix,
              mappingFunction: mappingFunction,
            };
          }
          exports.extract = extract;


          /***/
        }),
/* 12 */
/***/ (function (module, exports, __webpack_require__) {

          "use strict";

          Object.defineProperty(exports, "__esModule", { value: true });
          var MAX_FINDERPATTERNS_TO_SEARCH = 4;
          var MIN_QUAD_RATIO = 0.5;
          var MAX_QUAD_RATIO = 1.5;
          var distance = function (a, b) { return Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2)); };
          function sum(values) {
            return values.reduce(function (a, b) { return a + b; });
          }
          // Takes three finder patterns and organizes them into topLeft, topRight, etc
          function reorderFinderPatterns(pattern1, pattern2, pattern3) {
            var _a, _b, _c, _d;
            // Find distances between pattern centers
            var oneTwoDistance = distance(pattern1, pattern2);
            var twoThreeDistance = distance(pattern2, pattern3);
            var oneThreeDistance = distance(pattern1, pattern3);
            var bottomLeft;
            var topLeft;
            var topRight;
            // Assume one closest to other two is B; A and C will just be guesses at first
            if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {
              _a = [pattern2, pattern1, pattern3], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
            }
            else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {
              _b = [pattern1, pattern2, pattern3], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
            }
            else {
              _c = [pattern1, pattern3, pattern2], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
            }
            // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
            // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
            // we've got it flipped around and should swap topRight and bottomLeft.
            if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {
              _d = [topRight, bottomLeft], bottomLeft = _d[0], topRight = _d[1];
            }
            return { bottomLeft: bottomLeft, topLeft: topLeft, topRight: topRight };
          }
          // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns
          function computeDimension(topLeft, topRight, bottomLeft, matrix) {
            var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1
              sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +
              sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +
              sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;
            if (moduleSize < 1) {
              throw new Error("Invalid module size");
            }
            var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
            var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
            var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;
            switch (dimension % 4) {
              case 0:
                dimension++;
                break;
              case 2:
                dimension--;
                break;
            }
            return { dimension: dimension, moduleSize: moduleSize };
          }
          // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
          // Returns an array of elements, representing the pixel size of the black white run.
          // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
          function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
            var switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];
            var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
            var fromX;
            var fromY;
            var toX;
            var toY;
            if (steep) {
              fromX = Math.floor(origin.y);
              fromY = Math.floor(origin.x);
              toX = Math.floor(end.y);
              toY = Math.floor(end.x);
            }
            else {
              fromX = Math.floor(origin.x);
              fromY = Math.floor(origin.y);
              toX = Math.floor(end.x);
              toY = Math.floor(end.y);
            }
            var dx = Math.abs(toX - fromX);
            var dy = Math.abs(toY - fromY);
            var error = Math.floor(-dx / 2);
            var xStep = fromX < toX ? 1 : -1;
            var yStep = fromY < toY ? 1 : -1;
            var currentPixel = true;
            // Loop up until x == toX, but not beyond
            for (var x = fromX, y = fromY; x !== toX + xStep; x += xStep) {
              // Does current pixel mean we have moved white to black or vice versa?
              // Scanning black in state 0,2 and white in state 1, so if we find the wrong
              // color, advance to next state or end if we are in state 2 already
              var realX = steep ? y : x;
              var realY = steep ? x : y;
              if (matrix.get(realX, realY) !== currentPixel) {
                currentPixel = !currentPixel;
                switchPoints.push({ x: realX, y: realY });
                if (switchPoints.length === length + 1) {
                  break;
                }
              }
              error += dy;
              if (error > 0) {
                if (y === toY) {
                  break;
                }
                y += yStep;
                error -= dx;
              }
            }
            var distances = [];
            for (var i = 0; i < length; i++) {
              if (switchPoints[i] && switchPoints[i + 1]) {
                distances.push(distance(switchPoints[i], switchPoints[i + 1]));
              }
              else {
                distances.push(0);
              }
            }
            return distances;
          }
          // Takes an origin point and an end point and counts the sizes of the black white run in the origin point
          // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
          // of the black white run. Takes a length which represents the number of switches from black to white to look for.
          function countBlackWhiteRun(origin, end, matrix, length) {
            var _a;
            var rise = end.y - origin.y;
            var run = end.x - origin.x;
            var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
            var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));
            var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel
            return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
          }
          // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
          // that is the amount the run diverges from the expected ratio
          function scoreBlackWhiteRun(sequence, ratios) {
            var averageSize = sum(sequence) / sum(ratios);
            var error = 0;
            ratios.forEach(function (ratio, i) {
              error += Math.pow((sequence[i] - ratio * averageSize), 2);
            });
            return { averageSize: averageSize, error: error };
          }
          // Takes an X,Y point and an array of sizes and scores the point against those ratios.
          // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
          // against that.
          function scorePattern(point, ratios, matrix) {
            try {
              var horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);
              var verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);
              var topLeftPoint = {
                x: Math.max(0, point.x - point.y) - 1,
                y: Math.max(0, point.y - point.x) - 1,
              };
              var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
              var bottomLeftPoint = {
                x: Math.min(matrix.width, point.x + point.y) + 1,
                y: Math.min(matrix.height, point.y + point.x) + 1,
              };
              var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
              var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
              var vertError = scoreBlackWhiteRun(verticalRun, ratios);
              var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
              var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
              var ratioError = Math.sqrt(horzError.error * horzError.error +
                vertError.error * vertError.error +
                diagDownError.error * diagDownError.error +
                diagUpError.error * diagUpError.error);
              var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
              var sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +
                Math.pow((vertError.averageSize - avgSize), 2) +
                Math.pow((diagDownError.averageSize - avgSize), 2) +
                Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;
              return ratioError + sizeError;
            }
            catch (_a) {
              return Infinity;
            }
          }
          function recenterLocation(matrix, p) {
            var leftX = Math.round(p.x);
            while (matrix.get(leftX, Math.round(p.y))) {
              leftX--;
            }
            var rightX = Math.round(p.x);
            while (matrix.get(rightX, Math.round(p.y))) {
              rightX++;
            }
            var x = (leftX + rightX) / 2;
            var topY = Math.round(p.y);
            while (matrix.get(Math.round(x), topY)) {
              topY--;
            }
            var bottomY = Math.round(p.y);
            while (matrix.get(Math.round(x), bottomY)) {
              bottomY++;
            }
            var y = (topY + bottomY) / 2;
            return { x: x, y: y };
          }
          function locate(matrix) {
            var finderPatternQuads = [];
            var activeFinderPatternQuads = [];
            var alignmentPatternQuads = [];
            var activeAlignmentPatternQuads = [];
            var _loop_1 = function (y) {
              var length_1 = 0;
              var lastBit = false;
              var scans = [0, 0, 0, 0, 0];
              var _loop_2 = function (x) {
                var v = matrix.get(x, y);
                if (v === lastBit) {
                  length_1++;
                }
                else {
                  scans = [scans[1], scans[2], scans[3], scans[4], length_1];
                  length_1 = 1;
                  lastBit = v;
                  // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b
                  var averageFinderPatternBlocksize = sum(scans) / 7;
                  var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                    Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                    Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&
                    Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                    Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&
                    !v; // And make sure the current pixel is white since finder patterns are bordered in white
                  // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w
                  var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
                  var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
                    Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
                    Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&
                    v; // Is the current pixel black since alignment patterns are bordered in black
                  if (validFinderPattern) {
                    // Compute the start and end x values of the large center black square
                    var endX_1 = x - scans[3] - scans[4];
                    var startX_1 = endX_1 - scans[2];
                    var line = { startX: startX_1, endX: endX_1, y: y };
                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                    // that line as the starting point.
                    var matchingQuads = activeFinderPatternQuads.filter(function (q) {
                      return (startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX) ||
                        (endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX) ||
                        (startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&
                          (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO));
                    });
                    if (matchingQuads.length > 0) {
                      matchingQuads[0].bottom = line;
                    }
                    else {
                      activeFinderPatternQuads.push({ top: line, bottom: line });
                    }
                  }
                  if (validAlignmentPattern) {
                    // Compute the start and end x values of the center black square
                    var endX_2 = x - scans[4];
                    var startX_2 = endX_2 - scans[3];
                    var line = { startX: startX_2, y: y, endX: endX_2 };
                    // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                    // that line as the starting point.
                    var matchingQuads = activeAlignmentPatternQuads.filter(function (q) {
                      return (startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX) ||
                        (endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX) ||
                        (startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&
                          (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO));
                    });
                    if (matchingQuads.length > 0) {
                      matchingQuads[0].bottom = line;
                    }
                    else {
                      activeAlignmentPatternQuads.push({ top: line, bottom: line });
                    }
                  }
                }
              };
              for (var x = -1; x <= matrix.width; x++) {
                _loop_2(x);
              }
              finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) { return q.bottom.y !== y && q.bottom.y - q.top.y >= 2; }));
              activeFinderPatternQuads = activeFinderPatternQuads.filter(function (q) { return q.bottom.y === y; });
              alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function (q) { return q.bottom.y !== y; }));
              activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function (q) { return q.bottom.y === y; });
            };
            for (var y = 0; y <= matrix.height; y++) {
              _loop_1(y);
            }
            finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function (q) { return q.bottom.y - q.top.y >= 2; }));
            alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
            var finderPatternGroups = finderPatternQuads
              .filter(function (q) { return q.bottom.y - q.top.y >= 2; }) // All quads must be at least 2px tall since the center square is larger than a block
              .map(function (q) {
                var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                var y = (q.top.y + q.bottom.y + 1) / 2;
                if (!matrix.get(Math.round(x), Math.round(y))) {
                  return;
                }
                var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];
                var size = sum(lengths) / lengths.length;
                var score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);
                return { score: score, x: x, y: y, size: size };
              })
              .filter(function (q) { return !!q; }) // Filter out any rejected quads from above
              .sort(function (a, b) { return a.score - b.score; })
              // Now take the top finder pattern options and try to find 2 other options with a similar size.
              .map(function (point, i, finderPatterns) {
                if (i > MAX_FINDERPATTERNS_TO_SEARCH) {
                  return null;
                }
                var otherPoints = finderPatterns
                  .filter(function (p, ii) { return i !== ii; })
                  .map(function (p) { return ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }); })
                  .sort(function (a, b) { return a.score - b.score; });
                if (otherPoints.length < 2) {
                  return null;
                }
                var score = point.score + otherPoints[0].score + otherPoints[1].score;
                return { points: [point].concat(otherPoints.slice(0, 2)), score: score };
              })
              .filter(function (q) { return !!q; }) // Filter out any rejected finder patterns from above
              .sort(function (a, b) { return a.score - b.score; });
            if (finderPatternGroups.length === 0) {
              return null;
            }
            var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]), topRight = _a.topRight, topLeft = _a.topLeft, bottomLeft = _a.bottomLeft;
            var alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);
            var result = [];
            if (alignment) {
              result.push({
                alignmentPattern: { x: alignment.alignmentPattern.x, y: alignment.alignmentPattern.y },
                bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },
                dimension: alignment.dimension,
                topLeft: { x: topLeft.x, y: topLeft.y },
                topRight: { x: topRight.x, y: topRight.y },
              });
            }
            // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account
            // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression
            // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We
            // compute and return the location data for the naively centered points as it is little additional work and allows for multiple
            // attempts at decoding harder images.
            var midTopRight = recenterLocation(matrix, topRight);
            var midTopLeft = recenterLocation(matrix, topLeft);
            var midBottomLeft = recenterLocation(matrix, bottomLeft);
            var centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);
            if (centeredAlignment) {
              result.push({
                alignmentPattern: { x: centeredAlignment.alignmentPattern.x, y: centeredAlignment.alignmentPattern.y },
                bottomLeft: { x: midBottomLeft.x, y: midBottomLeft.y },
                topLeft: { x: midTopLeft.x, y: midTopLeft.y },
                topRight: { x: midTopRight.x, y: midTopRight.y },
                dimension: centeredAlignment.dimension,
              });
            }
            if (result.length === 0) {
              return null;
            }
            return result;
          }
          exports.locate = locate;
          function findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {
            var _a;
            // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
            // We'll use these to help find the alignment pattern but also later when we do the extraction.
            var dimension;
            var moduleSize;
            try {
              (_a = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _a.dimension, moduleSize = _a.moduleSize);
            }
            catch (e) {
              return null;
            }
            // Now find the alignment pattern
            var bottomRightFinderPattern = {
              x: topRight.x - topLeft.x + bottomLeft.x,
              y: topRight.y - topLeft.y + bottomLeft.y,
            };
            var modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);
            var correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);
            var expectedAlignmentPattern = {
              x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
              y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),
            };
            var alignmentPatterns = alignmentPatternQuads
              .map(function (q) {
                var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                var y = (q.top.y + q.bottom.y + 1) / 2;
                if (!matrix.get(Math.floor(x), Math.floor(y))) {
                  return;
                }
                var lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];
                var size = sum(lengths) / lengths.length;
                var sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);
                var score = sizeScore + distance({ x: x, y: y }, expectedAlignmentPattern);
                return { x: x, y: y, score: score };
              })
              .filter(function (v) { return !!v; })
              .sort(function (a, b) { return a.score - b.score; });
            // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
            // so we can only use our best guess.
            var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
            return { alignmentPattern: alignmentPattern, dimension: dimension };
          }


          /***/
        })
/******/])["default"];
    });
  }, {}], 210: [function (require, module, exports) {
    'use strict'
    var inherits = require('inherits')
    var HashBase = require('hash-base')
    var Buffer = require('safe-buffer').Buffer

    var ARRAY16 = new Array(16)

    function MD5() {
      HashBase.call(this, 64)

      // state
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
    }

    inherits(MD5, HashBase)

    MD5.prototype._update = function () {
      var M = ARRAY16
      for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

      var a = this._a
      var b = this._b
      var c = this._c
      var d = this._d

      a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
      d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
      c = fnF(c, d, a, b, M[2], 0x242070db, 17)
      b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
      a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
      d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
      c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
      b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
      a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
      d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
      c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
      b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
      a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
      d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
      c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
      b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

      a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
      d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
      c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
      b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
      a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
      d = fnG(d, a, b, c, M[10], 0x02441453, 9)
      c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
      b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
      a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
      d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
      c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
      b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
      a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
      d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
      c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
      b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

      a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
      d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
      c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
      b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
      a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
      d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
      c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
      b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
      a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
      d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
      c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
      b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
      a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
      d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
      c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
      b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

      a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
      d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
      c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
      b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
      a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
      d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
      c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
      b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
      a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
      d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
      c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
      b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
      a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
      d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
      c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
      b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

      this._a = (this._a + a) | 0
      this._b = (this._b + b) | 0
      this._c = (this._c + c) | 0
      this._d = (this._d + d) | 0
    }

    MD5.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64)
        this._update()
        this._blockOffset = 0
      }

      this._block.fill(0, this._blockOffset, 56)
      this._block.writeUInt32LE(this._length[0], 56)
      this._block.writeUInt32LE(this._length[1], 60)
      this._update()

      // produce result
      var buffer = Buffer.allocUnsafe(16)
      buffer.writeInt32LE(this._a, 0)
      buffer.writeInt32LE(this._b, 4)
      buffer.writeInt32LE(this._c, 8)
      buffer.writeInt32LE(this._d, 12)
      return buffer
    }

    function rotl(x, n) {
      return (x << n) | (x >>> (32 - n))
    }

    function fnF(a, b, c, d, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
    }

    function fnG(a, b, c, d, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
    }

    function fnH(a, b, c, d, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
    }

    function fnI(a, b, c, d, m, k, s) {
      return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
    }

    module.exports = MD5

  }, { "hash-base": 172, "inherits": 203, "safe-buffer": 286 }], 211: [function (require, module, exports) {
    var bn = require('bn.js');
    var brorand = require('brorand');

    function MillerRabin(rand) {
      this.rand = rand || new brorand.Rand();
    }
    module.exports = MillerRabin;

    MillerRabin.create = function create(rand) {
      return new MillerRabin(rand);
    };

    MillerRabin.prototype._randbelow = function _randbelow(n) {
      var len = n.bitLength();
      var min_bytes = Math.ceil(len / 8);

      // Generage random bytes until a number less than n is found.
      // This ensures that 0..n-1 have an equal probability of being selected.
      do
        var a = new bn(this.rand.generate(min_bytes));
      while (a.cmp(n) >= 0);

      return a;
    };

    MillerRabin.prototype._randrange = function _randrange(start, stop) {
      // Generate a random number greater than or equal to start and less than stop.
      var size = stop.sub(start);
      return start.add(this._randbelow(size));
    };

    MillerRabin.prototype.test = function test(n, k, cb) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);

      if (!k)
        k = Math.max(1, (len / 48) | 0);

      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) { }
      var d = n.shrn(s);

      var rn1 = n1.toRed(red);

      var prime = true;
      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);
        if (cb)
          cb(a);

        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();

          if (x.cmp(rone) === 0)
            return false;
          if (x.cmp(rn1) === 0)
            break;
        }

        if (i === s)
          return false;
      }

      return prime;
    };

    MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
      var len = n.bitLength();
      var red = bn.mont(n);
      var rone = new bn(1).toRed(red);

      if (!k)
        k = Math.max(1, (len / 48) | 0);

      // Find d and s, (n - 1) = (2 ^ s) * d;
      var n1 = n.subn(1);
      for (var s = 0; !n1.testn(s); s++) { }
      var d = n.shrn(s);

      var rn1 = n1.toRed(red);

      for (; k > 0; k--) {
        var a = this._randrange(new bn(2), n1);

        var g = n.gcd(a);
        if (g.cmpn(1) !== 0)
          return g;

        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
          continue;

        for (var i = 1; i < s; i++) {
          x = x.redSqr();

          if (x.cmp(rone) === 0)
            return x.fromRed().subn(1).gcd(n);
          if (x.cmp(rn1) === 0)
            break;
        }

        if (i === s) {
          x = x.redSqr();
          return x.fromRed().subn(1).gcd(n);
        }
      }

      return false;
    };

  }, { "bn.js": 46, "brorand": 47 }], 212: [function (require, module, exports) {
    module.exports = assert;

    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

  }, {}], 213: [function (require, module, exports) {
    'use strict';

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };

  }, {}], 214: [function (require, module, exports) {
    module.exports = require("./lib/hkdf");
  }, { "./lib/hkdf": 215 }], 215: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        //
        // a straightforward implementation of HKDF
        //
        // https://tools.ietf.org/html/rfc5869
        //

        var crypto = require("crypto");

        function zeros(length) {
          var buf = new Buffer(length);

          buf.fill(0);

          return buf.toString();
        }
        // imk is initial keying material
        function HKDF(hashAlg, salt, ikm) {
          this.hashAlg = hashAlg;

          // create the hash alg to see if it exists and get its length
          var hash = crypto.createHash(this.hashAlg);
          this.hashLength = hash.digest().length;

          this.salt = salt || zeros(this.hashLength);
          this.ikm = ikm;

          // now we compute the PRK
          var hmac = crypto.createHmac(this.hashAlg, this.salt);
          hmac.update(this.ikm);
          this.prk = hmac.digest();
        }

        HKDF.prototype = {
          derive: function (info, size) {
            var prev = new Buffer(0);
            var output;
            var buffers = [];
            var num_blocks = Math.ceil(size / this.hashLength);
            info = new Buffer(info);

            for (var i = 0; i < num_blocks; i++) {
              var hmac = crypto.createHmac(this.hashAlg, this.prk);
              // XXX is there a more optimal way to build up buffers?
              var input = Buffer.concat([
                prev,
                info,
                new Buffer(String.fromCharCode(i + 1))
              ]);
              hmac.update(input);
              prev = hmac.digest();
              buffers.push(prev);
            }
            output = Buffer.concat(buffers, size);
            return output;
          }
        };

        module.exports = HKDF;

      }).call(this)
    }).call(this, require("buffer").Buffer)

  }, { "buffer": 96, "crypto": 132 }], 216: [function (require, module, exports) {
    'use strict'

    const stream = require('stream')
    const { Buffer } = require('buffer')
    const td = new TextDecoder('utf8', { fatal: true, ignoreBOM: true })

    /**
     * @typedef {object} NoFilterOptions
     * @property {string|Buffer} [input=null] Input source data.
     * @property {BufferEncoding} [inputEncoding=null] Encoding name for input,
     *   ignored if input is not a String.
     * @property {number} [highWaterMark=16384] The maximum number of bytes to
     *   store in the internal buffer before ceasing to read from the underlying
     *   resource. Default=16kb, or 16 for objectMode streams.
     * @property {BufferEncoding} [encoding=null] If specified, then buffers
     *   will be decoded to strings using the specified encoding.
     * @property {boolean} [objectMode=false] Whether this stream should behave
     *   as a stream of objects. Meaning that stream.read(n) returns a single
     *   value instead of a Buffer of size n.
     * @property {boolean} [decodeStrings=true] Whether or not to decode
     *   strings into Buffers before passing them to _write().
     * @property {boolean} [watchPipe=true] Whether to watch for 'pipe' events,
     *   setting this stream's objectMode based on the objectMode of the input
     *   stream.
     * @property {boolean} [readError=false] If true, when a read() underflows,
     *   throw an error.
     * @property {boolean} [allowHalfOpen=true] If set to false, then the
     *   stream will automatically end the writable side when the readable side
     *   ends.
     * @property {boolean} [autoDestroy=true] Whether this stream should
     *   automatically call .destroy() on itself after ending.
     * @property {BufferEncoding} [defaultEncoding='utf8'] The default encoding
     *   that is used when no encoding is specified as an argument to
     *   stream.write().
     * @property {boolean} [emitClose=true] Whether or not the stream should
     *   emit 'close' after it has been destroyed.
     * @property {number} [readableHighWaterMark] Sets highWaterMark for the
     *   readable side of the stream. Has no effect if highWaterMark is provided.
     * @property {boolean} [readableObjectMode=false] Sets objectMode for
     *   readable side of the stream. Has no effect if objectMode is true.
     * @property {number} [writableHighWaterMark] Sets highWaterMark for the
     *   writable side of the stream. Has no effect if highWaterMark is provided.
     * @property {boolean} [writableObjectMode=false] Sets objectMode for
     *   writable side of the stream. Has no effect if objectMode is true.
     */

    /**
     * NoFilter stream.  Can be used to sink or source data to and from
     * other node streams.  Implemented as the "identity" Transform stream
     * (hence the name), but allows for inspecting data that is in-flight.
     *
     * Allows passing in source data (input, inputEncoding) at creation
     * time.  Source data can also be passed in the options object.
     *
     * @example <caption>source and sink</caption>
     * const source = new NoFilter('Zm9v', 'base64')
     * source.pipe(process.stdout)
     * const sink = new Nofilter()
     * // NOTE: 'finish' fires when the input is done writing
     * sink.on('finish', () => console.log(n.toString('base64')))
     * process.stdin.pipe(sink)
     */
    class NoFilter extends stream.Transform {
      /**
       * Create an instance of NoFilter.
       *
       * @param {string|Buffer|BufferEncoding|NoFilterOptions} [input] Source data.
       * @param {BufferEncoding|NoFilterOptions} [inputEncoding] Encoding
       *   name for input, ignored if input is not a String.
       * @param {NoFilterOptions} [options] Other options.
       */
      constructor(input, inputEncoding, options = {}) {
        let inp = null
        let inpE = /** @type {BufferEncoding?} */ (null)
        switch (typeof input) {
          case 'object':
            if (Buffer.isBuffer(input)) {
              inp = input
            } else if (input) {
              options = input
            }
            break
          case 'string':
            inp = input
            break
          case 'undefined':
            break
          default:
            throw new TypeError('Invalid input')
        }
        switch (typeof inputEncoding) {
          case 'object':
            if (inputEncoding) {
              options = inputEncoding
            }
            break
          case 'string':
            inpE = /** @type {BufferEncoding} */ (inputEncoding)
            break
          case 'undefined':
            break
          default:
            throw new TypeError('Invalid inputEncoding')
        }
        if (!options || typeof options !== 'object') {
          throw new TypeError('Invalid options')
        }
        if (inp == null) {
          inp = options.input
        }
        if (inpE == null) {
          inpE = options.inputEncoding
        }
        delete options.input
        delete options.inputEncoding
        const watchPipe = options.watchPipe == null ? true : options.watchPipe
        delete options.watchPipe
        const readError = Boolean(options.readError)
        delete options.readError
        super(options)

        this.readError = readError

        if (watchPipe) {
          this.on('pipe', readable => {
            // @ts-ignore: TS2339 (using internal interface)
            const om = readable._readableState.objectMode
            // @ts-ignore: TS2339 (using internal interface)
            if ((this.length > 0) && (om !== this._readableState.objectMode)) {
              throw new Error(
                'Do not switch objectMode in the middle of the stream'
              )
            }

            // @ts-ignore: TS2339 (using internal interface)
            this._readableState.objectMode = om
            // @ts-ignore: TS2339 (using internal interface)
            this._writableState.objectMode = om
          })
        }

        if (inp != null) {
          this.end(inp, inpE)
        }
      }

      /**
       * Is the given object a {NoFilter}?
       *
       * @param {object} obj The object to test.
       * @returns {boolean} True if obj is a NoFilter.
       */
      static isNoFilter(obj) {
        return obj instanceof this
      }

      /**
       * The same as nf1.compare(nf2). Useful for sorting an Array of NoFilters.
       *
       * @param {NoFilter} nf1 The first object to compare.
       * @param {NoFilter} nf2 The second object to compare.
       * @returns {number} -1, 0, 1 for less, equal, greater.
       * @throws {TypeError} Arguments not NoFilter instances.
       * @example
       * const arr = [new NoFilter('1234'), new NoFilter('0123')]
       * arr.sort(NoFilter.compare)
       */
      static compare(nf1, nf2) {
        if (!(nf1 instanceof this)) {
          throw new TypeError('Arguments must be NoFilters')
        }
        if (nf1 === nf2) {
          return 0
        }
        return nf1.compare(nf2)
      }

      /**
       * Returns a buffer which is the result of concatenating all the
       * NoFilters in the list together. If the list has no items, or if
       * the totalLength is 0, then it returns a zero-length buffer.
       *
       * If length is not provided, it is read from the buffers in the
       * list. However, this adds an additional loop to the function, so
       * it is faster to provide the length explicitly if you already know it.
       *
       * @param {Array<NoFilter>} list Inputs.  Must not be all either in object
       *   mode, or all not in object mode.
       * @param {number} [length=null] Number of bytes or objects to read.
       * @returns {Buffer|Array} The concatenated values as an array if in object
       *   mode, otherwise a Buffer.
       * @throws {TypeError} List not array of NoFilters.
       */
      static concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('list argument must be an Array of NoFilters')
        }
        if ((list.length === 0) || (length === 0)) {
          return Buffer.alloc(0)
        }
        if ((length == null)) {
          length = list.reduce((tot, nf) => {
            if (!(nf instanceof NoFilter)) {
              throw new TypeError('list argument must be an Array of NoFilters')
            }
            return tot + nf.length
          }, 0)
        }
        let allBufs = true
        let allObjs = true
        const bufs = list.map(nf => {
          if (!(nf instanceof NoFilter)) {
            throw new TypeError('list argument must be an Array of NoFilters')
          }
          const buf = nf.slice()
          if (Buffer.isBuffer(buf)) {
            allObjs = false
          } else {
            allBufs = false
          }
          return buf
        })
        if (allBufs) {
          // @ts-ignore: TS2322, tsc can't see the type checking above
          return Buffer.concat(bufs, length)
        }
        if (allObjs) {
          return [].concat(...bufs).slice(0, length)
        }
        // TODO: maybe coalesce buffers, counting bytes, and flatten in arrays
        // counting objects?  I can't imagine why that would be useful.
        throw new Error('Concatenating mixed object and byte streams not supported')
      }

      /**
       * @ignore
       */
      _transform(chunk, encoding, callback) {
        // @ts-ignore: TS2339 (using internal interface)
        if (!this._readableState.objectMode && !Buffer.isBuffer(chunk)) {
          chunk = Buffer.from(chunk, encoding)
        }
        this.push(chunk)
        callback()
      }

      /**
       * @returns {Buffer[]} The current internal buffers.  They are layed out
       *   end to end.
       * @ignore
       */
      _bufArray() {
        // @ts-ignore: TS2339 (using internal interface)
        let bufs = this._readableState.buffer
        // HACK: replace with something else one day.  This is what I get for
        // relying on internals.
        if (!Array.isArray(bufs)) {
          let b = bufs.head
          bufs = []
          while (b != null) {
            bufs.push(b.data)
            b = b.next
          }
        }
        return bufs
      }

      /**
       * Pulls some data out of the internal buffer and returns it.
       * If there is no data available, then it will return null.
       *
       * If you pass in a size argument, then it will return that many bytes. If
       * size bytes are not available, then it will return null, unless we've
       * ended, in which case it will return the data remaining in the buffer.
       *
       * If you do not specify a size argument, then it will return all the data in
       * the internal buffer.
       *
       * @param {number} [size=null] Number of bytes to read.
       * @returns {string|Buffer|null} If no data or not enough data, null.  If
       *   decoding output a string, otherwise a Buffer.
       * @throws Error If readError is true and there was underflow.
       * @fires NoFilter#read When read from.
       */
      read(size) {
        const buf = super.read(size)
        if (buf != null) {
          /**
           * Read event. Fired whenever anything is read from the stream.
           *
           * @event NoFilter#read
           * @param {Buffer|string|object} buf What was read.
           */
          this.emit('read', buf)
          if (this.readError && (buf.length < size)) {
            throw new Error(`Read ${buf.length}, wanted ${size}`)
          }
        } else if (this.readError) {
          throw new Error(`No data available, wanted ${size}`)
        }
        return buf
      }

      /**
       * Read the full number of bytes asked for, no matter how long it takes.
       * Fail if an error occurs in the meantime, or if the stream finishes before
       * enough data is available.
       *
       * Note: This function won't work fully correctly if you are using
       * stream-browserify (for example, on the Web).
       *
       * @param {number} size The number of bytes to read.
       * @returns {Promise<string|Buffer>} A promise for the data read.
       */
      readFull(size) {
        let onReadable = null
        let onFinish = null
        let onError = null
        return new Promise((resolve, reject) => {
          if (this.length >= size) {
            resolve(this.read(size))
            return
          }

          // Added in Node 12.19.  This won't work with stream-browserify yet.
          // If it's needed, file a bug, and I'll do a work-around.
          if (this.writableFinished) {
            // Already finished writing, so no more coming.
            reject(new Error(`Stream finished before ${size} bytes were available`))
            return
          }

          onReadable = chunk => {
            if (this.length >= size) {
              resolve(this.read(size))
            }
          }
          onFinish = () => {
            reject(new Error(`Stream finished before ${size} bytes were available`))
          }
          onError = reject
          this.on('readable', onReadable)
          this.on('error', onError)
          this.on('finish', onFinish)
        }).finally(() => {
          if (onReadable) {
            this.removeListener('readable', onReadable)
            this.removeListener('error', onError)
            this.removeListener('finish', onFinish)
          }
        })
      }

      /**
       * Return a promise fulfilled with the full contents, after the 'finish'
       * event fires.  Errors on the stream cause the promise to be rejected.
       *
       * @param {Function} [cb=null] Finished/error callback used in *addition*
       *   to the promise.
       * @returns {Promise<Buffer|string>} Fulfilled when complete.
       */
      promise(cb) {
        let done = false
        return new Promise((resolve, reject) => {
          this.on('finish', () => {
            const data = this.read()
            if ((cb != null) && !done) {
              done = true
              cb(null, data)
            }
            resolve(data)
          })
          this.on('error', er => {
            if ((cb != null) && !done) {
              done = true
              cb(er)
            }
            reject(er)
          })
        })
      }

      /**
       * Returns a number indicating whether this comes before or after or is the
       * same as the other NoFilter in sort order.
       *
       * @param {NoFilter} other The other object to compare.
       * @returns {number} -1, 0, 1 for less, equal, greater.
       * @throws {TypeError} Arguments must be NoFilters.
       */
      compare(other) {
        if (!(other instanceof NoFilter)) {
          throw new TypeError('Arguments must be NoFilters')
        }
        if (this === other) {
          return 0
        }

        const buf1 = this.slice()
        const buf2 = other.slice()
        // These will both be buffers because of the check above.
        if (Buffer.isBuffer(buf1) && Buffer.isBuffer(buf2)) {
          return buf1.compare(buf2)
        }
        throw new Error('Cannot compare streams in object mode')
      }

      /**
       * Do these NoFilter's contain the same bytes?  Doesn't work if either is
       * in object mode.
       *
       * @param {NoFilter} other Other NoFilter to compare against.
       * @returns {boolean} Equal?
       */
      equals(other) {
        return this.compare(other) === 0
      }

      /**
       * Read bytes or objects without consuming them.  Useful for diagnostics.
       * Note: as a side-effect, concatenates multiple writes together into what
       * looks like a single write, so that this concat doesn't have to happen
       * multiple times when you're futzing with the same NoFilter.
       *
       * @param {number} [start=0] Beginning offset.
       * @param {number} [end=length] Ending offset.
       * @returns {Buffer|Array} If in object mode, an array of objects.  Otherwise,
       *   concatenated array of contents.
       */
      slice(start, end) {
        // @ts-ignore: TS2339 (using internal interface)
        if (this._readableState.objectMode) {
          return this._bufArray().slice(start, end)
        }
        const bufs = this._bufArray()
        switch (bufs.length) {
          case 0: return Buffer.alloc(0)
          case 1: return bufs[0].slice(start, end)
          default: {
            const b = Buffer.concat(bufs)
            // TODO: store the concatented bufs back
            // @_readableState.buffer = [b]
            return b.slice(start, end)
          }
        }
      }

      /**
       * Get a byte by offset.  I didn't want to get into metaprogramming
       * to give you the `NoFilter[0]` syntax.
       *
       * @param {number} index The byte to retrieve.
       * @returns {number} 0-255.
       */
      get(index) {
        return this.slice()[index]
      }

      /**
       * Return an object compatible with Buffer's toJSON implementation, so that
       * round-tripping will produce a Buffer.
       *
       * @returns {string|Array|{type: 'Buffer',data: number[]}} If in object mode,
       *   the objects.  Otherwise, JSON text.
       * @example <caption>output for 'foo', not in object mode</caption>
       * ({
       *   type: 'Buffer',
       *   data: [102, 111, 111],
       * })
       */
      toJSON() {
        const b = this.slice()
        if (Buffer.isBuffer(b)) {
          return b.toJSON()
        }
        return b
      }

      /**
       * Decodes and returns a string from buffer data encoded using the specified
       * character set encoding. If encoding is undefined or null, then encoding
       * defaults to 'utf8'. The start and end parameters default to 0 and
       * NoFilter.length when undefined.
       *
       * @param {BufferEncoding} [encoding='utf8'] Which to use for decoding?
       * @param {number} [start=0] Start offset.
       * @param {number} [end=length] End offset.
       * @returns {string} String version of the contents.
       */
      toString(encoding, start, end) {
        const buf = this.slice(start, end)
        if (!Buffer.isBuffer(buf)) {
          return JSON.stringify(buf)
        }
        if (!encoding || (encoding === 'utf8')) {
          return td.decode(buf)
        }
        return buf.toString(encoding)
      }

      /**
       * @ignore
       */
      [Symbol.for('nodejs.util.inspect.custom')](depth, options) {
        const bufs = this._bufArray()
        const hex = bufs.map(b => {
          if (Buffer.isBuffer(b)) {
            return options.stylize(b.toString('hex'), 'string')
          }
          return JSON.stringify(b)
        }).join(', ')
        return `${this.constructor.name} [${hex}]`
      }

      /**
       * Current readable length, in bytes.
       *
       * @returns {number} Length of the contents.
       */
      get length() {
        // @ts-ignore: TS2339 (using internal interface)
        return this._readableState.length
      }

      /**
       * Write a JavaScript BigInt to the stream.  Negative numbers will be
       * written as their 2's complement version.
       *
       * @param {bigint} val The value to write.
       * @returns {boolean} True on success.
       */
      writeBigInt(val) {
        let str = val.toString(16)
        if (val < 0) {
          // Two's complement
          // Note: str always starts with '-' here.
          const sz = BigInt(Math.floor(str.length / 2))
          const mask = BigInt(1) << (sz * BigInt(8))
          val = mask + val
          str = val.toString(16)
        }
        if (str.length % 2) {
          str = `0${str}`
        }
        return this.push(Buffer.from(str, 'hex'))
      }

      /**
       * Read a variable-sized JavaScript unsigned BigInt from the stream.
       *
       * @param {number} [len=null] Number of bytes to read or all remaining
       *   if null.
       * @returns {bigint} A BigInt.
       */
      readUBigInt(len) {
        const b = this.read(len)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return BigInt(`0x${b.toString('hex')}`)
      }

      /**
       * Read a variable-sized JavaScript signed BigInt from the stream in 2's
       * complement format.
       *
       * @param {number} [len=null] Number of bytes to read or all remaining
       *   if null.
       * @returns {bigint} A BigInt.
       */
      readBigInt(len) {
        const b = this.read(len)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        let ret = BigInt(`0x${b.toString('hex')}`)
        // Negative?
        if (b[0] & 0x80) {
          // Two's complement
          const mask = BigInt(1) << (BigInt(b.length) * BigInt(8))
          ret -= mask
        }
        return ret
      }

      /**
       * Write an 8-bit unsigned integer to the stream.  Adds 1 byte.
       *
       * @param {number} value 0..255.
       * @returns {boolean} True on success.
       */
      writeUInt8(value) {
        const b = Buffer.from([value])
        return this.push(b)
      }

      /**
       * Write a little-endian 16-bit unsigned integer to the stream.  Adds
       * 2 bytes.
       *
       * @param {number} value 0..65535.
       * @returns {boolean} True on success.
       */
      writeUInt16LE(value) {
        const b = Buffer.alloc(2)
        b.writeUInt16LE(value)
        return this.push(b)
      }

      /**
       * Write a big-endian 16-bit unsigned integer to the stream.  Adds
       * 2 bytes.
       *
       * @param {number} value 0..65535.
       * @returns {boolean} True on success.
       */
      writeUInt16BE(value) {
        const b = Buffer.alloc(2)
        b.writeUInt16BE(value)
        return this.push(b)
      }

      /**
       * Write a little-endian 32-bit unsigned integer to the stream.  Adds
       * 4 bytes.
       *
       * @param {number} value 0..2**32-1.
       * @returns {boolean} True on success.
       */
      writeUInt32LE(value) {
        const b = Buffer.alloc(4)
        b.writeUInt32LE(value)
        return this.push(b)
      }

      /**
       * Write a big-endian 32-bit unsigned integer to the stream.  Adds
       * 4 bytes.
       *
       * @param {number} value 0..2**32-1.
       * @returns {boolean} True on success.
       */
      writeUInt32BE(value) {
        const b = Buffer.alloc(4)
        b.writeUInt32BE(value)
        return this.push(b)
      }

      /**
       * Write a signed 8-bit integer to the stream.  Adds 1 byte.
       *
       * @param {number} value (-128)..127.
       * @returns {boolean} True on success.
       */
      writeInt8(value) {
        const b = Buffer.from([value])
        return this.push(b)
      }

      /**
       * Write a signed little-endian 16-bit integer to the stream.  Adds 2 bytes.
       *
       * @param {number} value (-32768)..32767.
       * @returns {boolean} True on success.
       */
      writeInt16LE(value) {
        const b = Buffer.alloc(2)
        b.writeUInt16LE(value)
        return this.push(b)
      }

      /**
       * Write a signed big-endian 16-bit integer to the stream.  Adds 2 bytes.
       *
       * @param {number} value (-32768)..32767.
       * @returns {boolean} True on success.
       */
      writeInt16BE(value) {
        const b = Buffer.alloc(2)
        b.writeUInt16BE(value)
        return this.push(b)
      }

      /**
       * Write a signed little-endian 32-bit integer to the stream.  Adds 4 bytes.
       *
       * @param {number} value (-2**31)..(2**31-1).
       * @returns {boolean} True on success.
       */
      writeInt32LE(value) {
        const b = Buffer.alloc(4)
        b.writeUInt32LE(value)
        return this.push(b)
      }

      /**
       * Write a signed big-endian 32-bit integer to the stream.  Adds 4 bytes.
       *
       * @param {number} value (-2**31)..(2**31-1).
       * @returns {boolean} True on success.
       */
      writeInt32BE(value) {
        const b = Buffer.alloc(4)
        b.writeUInt32BE(value)
        return this.push(b)
      }

      /**
       * Write a little-endian 32-bit float to the stream.  Adds 4 bytes.
       *
       * @param {number} value 32-bit float.
       * @returns {boolean} True on success.
       */
      writeFloatLE(value) {
        const b = Buffer.alloc(4)
        b.writeFloatLE(value)
        return this.push(b)
      }

      /**
       * Write a big-endian 32-bit float to the stream.  Adds 4 bytes.
       *
       * @param {number} value 32-bit float.
       * @returns {boolean} True on success.
       */
      writeFloatBE(value) {
        const b = Buffer.alloc(4)
        b.writeFloatBE(value)
        return this.push(b)
      }

      /**
       * Write a little-endian 64-bit double to the stream.  Adds 8 bytes.
       *
       * @param {number} value 64-bit float.
       * @returns {boolean} True on success.
       */
      writeDoubleLE(value) {
        const b = Buffer.alloc(8)
        b.writeDoubleLE(value)
        return this.push(b)
      }

      /**
       * Write a big-endian 64-bit float to the stream.  Adds 8 bytes.
       *
       * @param {number} value 64-bit float.
       * @returns {boolean} True on success.
       */
      writeDoubleBE(value) {
        const b = Buffer.alloc(8)
        b.writeDoubleBE(value)
        return this.push(b)
      }

      /**
       * Write a signed little-endian 64-bit BigInt to the stream.  Adds 8 bytes.
       *
       * @param {bigint} value BigInt.
       * @returns {boolean} True on success.
       */
      writeBigInt64LE(value) {
        const b = Buffer.alloc(8)
        b.writeBigInt64LE(value)
        return this.push(b)
      }

      /**
       * Write a signed big-endian 64-bit BigInt to the stream.  Adds 8 bytes.
       *
       * @param {bigint} value BigInt.
       * @returns {boolean} True on success.
       */
      writeBigInt64BE(value) {
        const b = Buffer.alloc(8)
        b.writeBigInt64BE(value)
        return this.push(b)
      }

      /**
       * Write an unsigned little-endian 64-bit BigInt to the stream.  Adds 8 bytes.
       *
       * @param {bigint} value Non-negative BigInt.
       * @returns {boolean} True on success.
       */
      writeBigUInt64LE(value) {
        const b = Buffer.alloc(8)
        b.writeBigUInt64LE(value)
        return this.push(b)
      }

      /**
       * Write an unsigned big-endian 64-bit BigInt to the stream.  Adds 8 bytes.
       *
       * @param {bigint} value Non-negative BigInt.
       * @returns {boolean} True on success.
       */
      writeBigUInt64BE(value) {
        const b = Buffer.alloc(8)
        b.writeBigUInt64BE(value)
        return this.push(b)
      }

      /**
       * Read an unsigned 8-bit integer from the stream.  Consumes 1 byte.
       *
       * @returns {number} Value read.
       */
      readUInt8() {
        const b = this.read(1)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readUInt8()
      }

      /**
       * Read a little-endian unsigned 16-bit integer from the stream.
       * Consumes 2 bytes.
       *
       * @returns {number} Value read.
       */
      readUInt16LE() {
        const b = this.read(2)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readUInt16LE()
      }

      /**
       * Read a little-endian unsigned 16-bit integer from the stream.
       * Consumes 2 bytes.
       *
       * @returns {number} Value read.
       */
      readUInt16BE() {
        const b = this.read(2)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readUInt16BE()
      }

      /**
       * Read a little-endian unsigned 32-bit integer from the stream.
       * Consumes 4 bytes.
       *
       * @returns {number} Value read.
       */
      readUInt32LE() {
        const b = this.read(4)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readUInt32LE()
      }

      /**
       * Read a little-endian unsigned 16-bit integer from the stream.
       * Consumes 4 bytes.
       *
       * @returns {number} Value read.
       */
      readUInt32BE() {
        const b = this.read(4)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readUInt32BE()
      }

      /**
       * Read a signed 8-bit integer from the stream.  Consumes 1 byte.
       *
       * @returns {number} Value read.
       */
      readInt8() {
        const b = this.read(1)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readInt8()
      }

      /**
       * Read a little-endian signed 16-bit integer from the stream.
       * Consumes 2 bytes.
       *
       * @returns {number} Value read.
       */
      readInt16LE() {
        const b = this.read(2)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readInt16LE()
      }

      /**
       * Read a little-endian signed 16-bit integer from the stream.
       * Consumes 2 bytes.
       *
       * @returns {number} Value read.
       */
      readInt16BE() {
        const b = this.read(2)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readInt16BE()
      }

      /**
       * Read a little-endian signed 32-bit integer from the stream.
       * Consumes 4 bytes.
       *
       * @returns {number} Value read.
       */
      readInt32LE() {
        const b = this.read(4)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readInt32LE()
      }

      /**
       * Read a little-endian signed 16-bit integer from the stream.
       * Consumes 4 bytes.
       *
       * @returns {number} Value read.
       */
      readInt32BE() {
        const b = this.read(4)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readInt32BE()
      }

      /**
       * Read a 32-bit little-endian float from the stream.
       * Consumes 4 bytes.
       *
       * @returns {number} Value read.
       */
      readFloatLE() {
        const b = this.read(4)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readFloatLE()
      }

      /**
       * Read a 32-bit big-endian float from the stream.
       * Consumes 4 bytes.
       *
       * @returns {number} Value read.
       */
      readFloatBE() {
        const b = this.read(4)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readFloatBE()
      }

      /**
       * Read a 64-bit little-endian float from the stream.
       * Consumes 8 bytes.
       *
       * @returns {number} Value read.
       */
      readDoubleLE() {
        const b = this.read(8)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readDoubleLE()
      }

      /**
       * Read a 64-bit big-endian float from the stream.
       * Consumes 8 bytes.
       *
       * @returns {number} Value read.
       */
      readDoubleBE() {
        const b = this.read(8)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readDoubleBE()
      }

      /**
       * Read a signed 64-bit little-endian BigInt from the stream.
       * Consumes 8 bytes.
       *
       * @returns {bigint} Value read.
       */
      readBigInt64LE() {
        const b = this.read(8)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readBigInt64LE()
      }

      /**
       * Read a signed 64-bit big-endian BigInt from the stream.
       * Consumes 8 bytes.
       *
       * @returns {bigint} Value read.
       */
      readBigInt64BE() {
        const b = this.read(8)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readBigInt64BE()
      }

      /**
       * Read an unsigned 64-bit little-endian BigInt from the stream.
       * Consumes 8 bytes.
       *
       * @returns {bigint} Value read.
       */
      readBigUInt64LE() {
        const b = this.read(8)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readBigUInt64LE()
      }

      /**
       * Read an unsigned 64-bit big-endian BigInt from the stream.
       * Consumes 8 bytes.
       *
       * @returns {bigint} Value read.
       */
      readBigUInt64BE() {
        const b = this.read(8)
        if (!Buffer.isBuffer(b)) {
          return null
        }
        return b.readBigUInt64BE()
      }
    }

    module.exports = NoFilter

  }, { "buffer": 96, "stream": 296 }], 217: [function (require, module, exports) {
    // Top level file is just a mixin of submodules & constants
    'use strict';

    const { Deflate, deflate, deflateRaw, gzip } = require('./lib/deflate');

    const { Inflate, inflate, inflateRaw, ungzip } = require('./lib/inflate');

    const constants = require('./lib/zlib/constants');

    module.exports.Deflate = Deflate;
    module.exports.deflate = deflate;
    module.exports.deflateRaw = deflateRaw;
    module.exports.gzip = gzip;
    module.exports.Inflate = Inflate;
    module.exports.inflate = inflate;
    module.exports.inflateRaw = inflateRaw;
    module.exports.ungzip = ungzip;
    module.exports.constants = constants;

  }, { "./lib/deflate": 218, "./lib/inflate": 219, "./lib/zlib/constants": 223 }], 218: [function (require, module, exports) {
    'use strict';


    const zlib_deflate = require('./zlib/deflate');
    const utils = require('./utils/common');
    const strings = require('./utils/strings');
    const msg = require('./zlib/messages');
    const ZStream = require('./zlib/zstream');

    const toString = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH,
      Z_OK, Z_STREAM_END,
      Z_DEFAULT_COMPRESSION,
      Z_DEFAULT_STRATEGY,
      Z_DEFLATED
    } = require('./zlib/constants');

    /* ===========================================================================*/


    /**
     * class Deflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[deflate]],
     * [[deflateRaw]] and [[gzip]].
     **/

    /* internal
     * Deflate.chunks -> Array
     *
     * Chunks of output data, if [[Deflate#onData]] not overridden.
     **/

    /**
     * Deflate.result -> Uint8Array
     *
     * Compressed result, generated by default [[Deflate#onData]]
     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
     **/

    /**
     * Deflate.err -> Number
     *
     * Error code after deflate finished. 0 (Z_OK) on success.
     * You will not need it in real life, because deflate errors
     * are possible only on wrong options or bad `onData` / `onEnd`
     * custom handlers.
     **/

    /**
     * Deflate.msg -> String
     *
     * Error message, if [[Deflate.err]] != 0
     **/


    /**
     * new Deflate(options)
     * - options (Object): zlib deflate options.
     *
     * Creates new deflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `level`
     * - `windowBits`
     * - `memLevel`
     * - `strategy`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw deflate
     * - `gzip` (Boolean) - create gzip wrapper
     * - `header` (Object) - custom header for gzip
     *   - `text` (Boolean) - true if compressed data believed to be text
     *   - `time` (Number) - modification time, unix timestamp
     *   - `os` (Number) - operation system code
     *   - `extra` (Array) - array of bytes with extra data (max 65536)
     *   - `name` (String) - file name (binary string)
     *   - `comment` (String) - comment (binary string)
     *   - `hcrc` (Boolean) - true if header crc should be added
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * const deflate = new pako.Deflate({ level: 3});
     *
     * deflate.push(chunk1, false);
     * deflate.push(chunk2, true);  // true -> last chunk
     *
     * if (deflate.err) { throw new Error(deflate.err); }
     *
     * console.log(deflate.result);
     * ```
     **/
    function Deflate(options) {
      this.options = utils.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY
      }, options || {});

      let opt = this.options;

      if (opt.raw && (opt.windowBits > 0)) {
        opt.windowBits = -opt.windowBits;
      }

      else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
        opt.windowBits += 16;
      }

      this.err = 0;      // error code, if happens (0 = Z_OK)
      this.msg = '';     // error message
      this.ended = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm = new ZStream();
      this.strm.avail_out = 0;

      let status = zlib_deflate.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );

      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }

      if (opt.header) {
        zlib_deflate.deflateSetHeader(this.strm, opt.header);
      }

      if (opt.dictionary) {
        let dict;
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          // If we need to compress text, change encoding to utf8.
          dict = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
          dict = new Uint8Array(opt.dictionary);
        } else {
          dict = opt.dictionary;
        }

        status = zlib_deflate.deflateSetDictionary(this.strm, dict);

        if (status !== Z_OK) {
          throw new Error(msg[status]);
        }

        this._dict_set = true;
      }
    }

    /**
     * Deflate#push(data[, flush_mode]) -> Boolean
     * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
     *   converted to utf8 byte sequence.
     * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
     *
     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
     * new compressed chunks. Returns `true` on success. The last data block must
     * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
     * buffers and call [[Deflate#onEnd]].
     *
     * On fail call [[Deflate#onEnd]] with error code and return false.
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Deflate.prototype.push = function (data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      let status, _flush_mode;

      if (this.ended) { return false; }

      if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
      else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

      // Convert data if needed
      if (typeof data === 'string') {
        // If we need to compress text, change encoding to utf8.
        strm.input = strings.string2buf(data);
      } else if (toString.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      for (; ;) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        // Make sure avail_out > 6 to avoid repeating markers
        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }

        status = zlib_deflate.deflate(strm, _flush_mode);

        // Ended => flush and finish
        if (status === Z_STREAM_END) {
          if (strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
          }
          status = zlib_deflate.deflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === Z_OK;
        }

        // Flush if out buffer full
        if (strm.avail_out === 0) {
          this.onData(strm.output);
          continue;
        }

        // Flush if requested and has data
        if (_flush_mode > 0 && strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }

        if (strm.avail_in === 0) break;
      }

      return true;
    };


    /**
     * Deflate#onData(chunk) -> Void
     * - chunk (Uint8Array): output data.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Deflate.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Deflate#onEnd(status) -> Void
     * - status (Number): deflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called once after you tell deflate that the input stream is
     * complete (Z_FINISH). By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Deflate.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK) {
        this.result = utils.flattenChunks(this.chunks);
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * deflate(data[, options]) -> Uint8Array
     * - data (Uint8Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * Compress `data` with deflate algorithm and `options`.
     *
     * Supported options are:
     *
     * - level
     * - windowBits
     * - memLevel
     * - strategy
     * - dictionary
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
     *
     * console.log(pako.deflate(data));
     * ```
     **/
    function deflate(input, options) {
      const deflator = new Deflate(options);

      deflator.push(input, true);

      // That will never happens, if you don't cheat with options :)
      if (deflator.err) { throw deflator.msg || msg[deflator.err]; }

      return deflator.result;
    }


    /**
     * deflateRaw(data[, options]) -> Uint8Array
     * - data (Uint8Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function deflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return deflate(input, options);
    }


    /**
     * gzip(data[, options]) -> Uint8Array
     * - data (Uint8Array|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but create gzip wrapper instead of
     * deflate one.
     **/
    function gzip(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate(input, options);
    }


    module.exports.Deflate = Deflate;
    module.exports.deflate = deflate;
    module.exports.deflateRaw = deflateRaw;
    module.exports.gzip = gzip;
    module.exports.constants = require('./zlib/constants');

  }, { "./utils/common": 220, "./utils/strings": 221, "./zlib/constants": 223, "./zlib/deflate": 225, "./zlib/messages": 230, "./zlib/zstream": 232 }], 219: [function (require, module, exports) {
    'use strict';


    const zlib_inflate = require('./zlib/inflate');
    const utils = require('./utils/common');
    const strings = require('./utils/strings');
    const msg = require('./zlib/messages');
    const ZStream = require('./zlib/zstream');
    const GZheader = require('./zlib/gzheader');

    const toString = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH, Z_FINISH,
      Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
    } = require('./zlib/constants');

    /* ===========================================================================*/


    /**
     * class Inflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[inflate]]
     * and [[inflateRaw]].
     **/

    /* internal
     * inflate.chunks -> Array
     *
     * Chunks of output data, if [[Inflate#onData]] not overridden.
     **/

    /**
     * Inflate.result -> Uint8Array|String
     *
     * Uncompressed result, generated by default [[Inflate#onData]]
     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
     **/

    /**
     * Inflate.err -> Number
     *
     * Error code after inflate finished. 0 (Z_OK) on success.
     * Should be checked if broken data possible.
     **/

    /**
     * Inflate.msg -> String
     *
     * Error message, if [[Inflate.err]] != 0
     **/


    /**
     * new Inflate(options)
     * - options (Object): zlib inflate options.
     *
     * Creates new inflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `windowBits`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw inflate
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     * By default, when no options set, autodetect deflate/gzip data format via
     * wrapper header.
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
     * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * const inflate = new pako.Inflate({ level: 3});
     *
     * inflate.push(chunk1, false);
     * inflate.push(chunk2, true);  // true -> last chunk
     *
     * if (inflate.err) { throw new Error(inflate.err); }
     *
     * console.log(inflate.result);
     * ```
     **/
    function Inflate(options) {
      this.options = utils.assign({
        chunkSize: 1024 * 64,
        windowBits: 15,
        to: ''
      }, options || {});

      const opt = this.options;

      // Force window size for `raw` data, if not set directly,
      // because we have no header for autodetect.
      if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) { opt.windowBits = -15; }
      }

      // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
      if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
        !(options && options.windowBits)) {
        opt.windowBits += 32;
      }

      // Gzip header has no info about windows size, we can do autodetect only
      // for deflate. So, if window size not set, force it to max when gzip possible
      if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
        // bit 3 (16) -> gzipped data
        // bit 4 (32) -> autodetect gzip/deflate
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }

      this.err = 0;      // error code, if happens (0 = Z_OK)
      this.msg = '';     // error message
      this.ended = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm = new ZStream();
      this.strm.avail_out = 0;

      let status = zlib_inflate.inflateInit2(
        this.strm,
        opt.windowBits
      );

      if (status !== Z_OK) {
        throw new Error(msg[status]);
      }

      this.header = new GZheader();

      zlib_inflate.inflateGetHeader(this.strm, this.header);

      // Setup dictionary
      if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          opt.dictionary = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
          opt.dictionary = new Uint8Array(opt.dictionary);
        }
        if (opt.raw) { //In raw mode we need to set the dictionary early
          status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
          if (status !== Z_OK) {
            throw new Error(msg[status]);
          }
        }
      }
    }

    /**
     * Inflate#push(data[, flush_mode]) -> Boolean
     * - data (Uint8Array|ArrayBuffer): input data
     * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
     *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
     *   `true` means Z_FINISH.
     *
     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
     * new output chunks. Returns `true` on success. If end of stream detected,
     * [[Inflate#onEnd]] will be called.
     *
     * `flush_mode` is not needed for normal operation, because end of stream
     * detected automatically. You may try to use it for advanced things, but
     * this functionality was not tested.
     *
     * On fail call [[Inflate#onEnd]] with error code and return false.
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Inflate.prototype.push = function (data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      const dictionary = this.options.dictionary;
      let status, _flush_mode, last_avail_out;

      if (this.ended) return false;

      if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
      else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

      // Convert data if needed
      if (toString.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      for (; ;) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        status = zlib_inflate.inflate(strm, _flush_mode);

        if (status === Z_NEED_DICT && dictionary) {
          status = zlib_inflate.inflateSetDictionary(strm, dictionary);

          if (status === Z_OK) {
            status = zlib_inflate.inflate(strm, _flush_mode);
          } else if (status === Z_DATA_ERROR) {
            // Replace code with more verbose
            status = Z_NEED_DICT;
          }
        }

        // Skip snyc markers if more data follows and not raw mode
        while (strm.avail_in > 0 &&
          status === Z_STREAM_END &&
          strm.state.wrap > 0 &&
          data[strm.next_in] !== 0) {
          zlib_inflate.inflateReset(strm);
          status = zlib_inflate.inflate(strm, _flush_mode);
        }

        switch (status) {
          case Z_STREAM_ERROR:
          case Z_DATA_ERROR:
          case Z_NEED_DICT:
          case Z_MEM_ERROR:
            this.onEnd(status);
            this.ended = true;
            return false;
        }

        // Remember real `avail_out` value, because we may patch out buffer content
        // to align utf8 strings boundaries.
        last_avail_out = strm.avail_out;

        if (strm.next_out) {
          if (strm.avail_out === 0 || status === Z_STREAM_END) {

            if (this.options.to === 'string') {

              let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

              let tail = strm.next_out - next_out_utf8;
              let utf8str = strings.buf2string(strm.output, next_out_utf8);

              // move tail & realign counters
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

              this.onData(utf8str);

            } else {
              this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
          }
        }

        // Must repeat iteration if out buffer is full
        if (status === Z_OK && last_avail_out === 0) continue;

        // Finalize if end of stream reached.
        if (status === Z_STREAM_END) {
          status = zlib_inflate.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return true;
        }

        if (strm.avail_in === 0) break;
      }

      return true;
    };


    /**
     * Inflate#onData(chunk) -> Void
     * - chunk (Uint8Array|String): output data. When string output requested,
     *   each chunk will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Inflate.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Inflate#onEnd(status) -> Void
     * - status (Number): inflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called either after you tell inflate that the input stream is
     * complete (Z_FINISH). By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Inflate.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK) {
        if (this.options.to === 'string') {
          this.result = this.chunks.join('');
        } else {
          this.result = utils.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * inflate(data[, options]) -> Uint8Array|String
     * - data (Uint8Array): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Decompress `data` with inflate/ungzip and `options`. Autodetect
     * format via wrapper header by default. That's why we don't provide
     * separate `ungzip` method.
     *
     * Supported options are:
     *
     * - windowBits
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako');
     * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
     * let output;
     *
     * try {
     *   output = pako.inflate(input);
     * } catch (err) {
     *   console.log(err);
     * }
     * ```
     **/
    function inflate(input, options) {
      const inflator = new Inflate(options);

      inflator.push(input);

      // That will never happens, if you don't cheat with options :)
      if (inflator.err) throw inflator.msg || msg[inflator.err];

      return inflator.result;
    }


    /**
     * inflateRaw(data[, options]) -> Uint8Array|String
     * - data (Uint8Array): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * The same as [[inflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function inflateRaw(input, options) {
      options = options || {};
      options.raw = true;
      return inflate(input, options);
    }


    /**
     * ungzip(data[, options]) -> Uint8Array|String
     * - data (Uint8Array): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Just shortcut to [[inflate]], because it autodetects format
     * by header.content. Done for convenience.
     **/


    module.exports.Inflate = Inflate;
    module.exports.inflate = inflate;
    module.exports.inflateRaw = inflateRaw;
    module.exports.ungzip = inflate;
    module.exports.constants = require('./zlib/constants');

  }, { "./utils/common": 220, "./utils/strings": 221, "./zlib/constants": 223, "./zlib/gzheader": 226, "./zlib/inflate": 228, "./zlib/messages": 230, "./zlib/zstream": 232 }], 220: [function (require, module, exports) {
    'use strict';


    const _has = (obj, key) => {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };

    module.exports.assign = function (obj /*from1, from2, from3, ...*/) {
      const sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        const source = sources.shift();
        if (!source) { continue; }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be non-object');
        }

        for (const p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }

      return obj;
    };


    // Join array of chunks to single array.
    module.exports.flattenChunks = (chunks) => {
      // calculate data length
      let len = 0;

      for (let i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      const result = new Uint8Array(len);

      for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }

      return result;
    };

  }, {}], 221: [function (require, module, exports) {
    // String encode/decode helpers
    'use strict';


    // Quick check if we can use fast array to bin string conversion
    //
    // - apply(Array) can fail on Android 2.2
    // - apply(Uint8Array) can fail on iOS 5.1 Safari
    //
    let STR_APPLY_UIA_OK = true;

    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


    // Table with utf8 lengths (calculated by first byte of sequence)
    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
    // because max possible codepoint is 0x10ffff
    const _utf8len = new Uint8Array(256);
    for (let q = 0; q < 256; q++) {
      _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
    }
    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


    // convert string to array (typed, when possible)
    module.exports.string2buf = (str) => {
      if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
        return new TextEncoder().encode(str);
      }

      let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

      // count binary size
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
      }

      // allocate buffer
      buf = new Uint8Array(buf_len);

      // convert
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        if (c < 0x80) {
          /* one byte */
          buf[i++] = c;
        } else if (c < 0x800) {
          /* two bytes */
          buf[i++] = 0xC0 | (c >>> 6);
          buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
          /* three bytes */
          buf[i++] = 0xE0 | (c >>> 12);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        } else {
          /* four bytes */
          buf[i++] = 0xf0 | (c >>> 18);
          buf[i++] = 0x80 | (c >>> 12 & 0x3f);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        }
      }

      return buf;
    };

    // Helper
    const buf2binstring = (buf, len) => {
      // On Chrome, the arguments in a function call that are allowed is `65534`.
      // If the length of the buffer is smaller than that, we can use this optimization,
      // otherwise we will take a slower path.
      if (len < 65534) {
        if (buf.subarray && STR_APPLY_UIA_OK) {
          return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
        }
      }

      let result = '';
      for (let i = 0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    };


    // convert array to string
    module.exports.buf2string = (buf, max) => {
      const len = max || buf.length;

      if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
        return new TextDecoder().decode(buf.subarray(0, max));
      }

      let i, out;

      // Reserve max possible length (2 words per char)
      // NB: by unknown reasons, Array is significantly faster for
      //     String.fromCharCode.apply than Uint16Array.
      const utf16buf = new Array(len * 2);

      for (out = 0, i = 0; i < len;) {
        let c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        let c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
          c = (c << 6) | (buf[i++] & 0x3f);
          c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
          utf16buf[out++] = c;
        } else {
          c -= 0x10000;
          utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
          utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
      }

      return buf2binstring(utf16buf, out);
    };


    // Calculate max possible position in utf8 buffer,
    // that will not break sequence. If that's not possible
    // - (very small limits) return max size as is.
    //
    // buf[] - utf8 bytes array
    // max   - length limit (mandatory);
    module.exports.utf8border = (buf, max) => {

      max = max || buf.length;
      if (max > buf.length) { max = buf.length; }

      // go back from last position, until start of sequence found
      let pos = max - 1;
      while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

      // Very small and broken sequence,
      // return max, because we should return something anyway.
      if (pos < 0) { return max; }

      // If we came to start of buffer - that means buffer is too small,
      // return max too.
      if (pos === 0) { return max; }

      return (pos + _utf8len[buf[pos]] > max) ? pos : max;
    };

  }, {}], 222: [function (require, module, exports) {
    'use strict';

    // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It isn't worth it to make additional optimizations as in original.
    // Small size is preferable.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const adler32 = (adler, buf, len, pos) => {
      let s1 = (adler & 0xffff) | 0,
        s2 = ((adler >>> 16) & 0xffff) | 0,
        n = 0;

      while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;

        do {
          s1 = (s1 + buf[pos++]) | 0;
          s2 = (s2 + s1) | 0;
        } while (--n);

        s1 %= 65521;
        s2 %= 65521;
      }

      return (s1 | (s2 << 16)) | 0;
    };


    module.exports = adler32;

  }, {}], 223: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    module.exports = {

      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,

      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_MEM_ERROR: -4,
      Z_BUF_ERROR: -5,
      //Z_VERSION_ERROR: -6,

      /* compression levels */
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,


      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,

      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY: 0,
      Z_TEXT: 1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN: 2,

      /* The deflate compression method */
      Z_DEFLATED: 8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };

  }, {}], 224: [function (require, module, exports) {
    'use strict';

    // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // Use ordinary array, since untyped makes no boost here
    const makeTable = () => {
      let c, table = [];

      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
      }

      return table;
    };

    // Create table on load. Just 255 signed longs. Not a problem.
    const crcTable = new Uint32Array(makeTable());


    const crc32 = (crc, buf, len, pos) => {
      const t = crcTable;
      const end = pos + len;

      crc ^= -1;

      for (let i = pos; i < end; i++) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
      }

      return (crc ^ (-1)); // >>> 0;
    };


    module.exports = crc32;

  }, {}], 225: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = require('./trees');
    const adler32 = require('./adler32');
    const crc32 = require('./crc32');
    const msg = require('./messages');

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK,
      Z_OK, Z_STREAM_END, Z_STREAM_ERROR, Z_DATA_ERROR, Z_BUF_ERROR,
      Z_DEFAULT_COMPRESSION,
      Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY,
      Z_UNKNOWN,
      Z_DEFLATED
    } = require('./constants');

    /*============================================================================*/


    const MAX_MEM_LEVEL = 9;
    /* Maximum value for memLevel in deflateInit2 */
    const MAX_WBITS = 15;
    /* 32K LZ77 window */
    const DEF_MEM_LEVEL = 8;


    const LENGTH_CODES = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    const LITERALS = 256;
    /* number of literal bytes 0..255 */
    const L_CODES = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    const D_CODES = 30;
    /* number of distance codes */
    const BL_CODES = 19;
    /* number of codes used to transfer the bit lengths */
    const HEAP_SIZE = 2 * L_CODES + 1;
    /* maximum heap size */
    const MAX_BITS = 15;
    /* All codes must not exceed MAX_BITS bits */

    const MIN_MATCH = 3;
    const MAX_MATCH = 258;
    const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

    const PRESET_DICT = 0x20;

    const INIT_STATE = 42;
    const EXTRA_STATE = 69;
    const NAME_STATE = 73;
    const COMMENT_STATE = 91;
    const HCRC_STATE = 103;
    const BUSY_STATE = 113;
    const FINISH_STATE = 666;

    const BS_NEED_MORE = 1; /* block not completed, need more input or more output */
    const BS_BLOCK_DONE = 2; /* block flush performed */
    const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
    const BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

    const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

    const err = (strm, errorCode) => {
      strm.msg = msg[errorCode];
      return errorCode;
    };

    const rank = (f) => {
      return ((f) << 1) - ((f) > 4 ? 9 : 0);
    };

    const zero = (buf) => {
      let len = buf.length; while (--len >= 0) { buf[len] = 0; }
    };


    /* eslint-disable new-cap */
    let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
    // This hash causes less collisions, https://github.com/nodeca/pako/issues/135
    // But breaks binary compatibility
    //let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
    let HASH = HASH_ZLIB;

    /* =========================================================================
     * Flush as much pending output as possible. All deflate() output goes
     * through this function so some applications may wish to modify it
     * to avoid allocating a large strm->output buffer and copying into it.
     * (See also read_buf()).
     */
    const flush_pending = (strm) => {
      const s = strm.state;

      //_tr_flush_bits(s);
      let len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) { return; }

      strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
      strm.next_out += len;
      s.pending_out += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    };


    const flush_block_only = (s, last) => {
      _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    };


    const put_byte = (s, b) => {
      s.pending_buf[s.pending++] = b;
    };


    /* =========================================================================
     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
     * IN assertion: the stream state is correct and there is enough room in
     * pending_buf.
     */
    const putShortMSB = (s, b) => {

      //  put_byte(s, (Byte)(b >> 8));
      //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
      s.pending_buf[s.pending++] = b & 0xff;
    };


    /* ===========================================================================
     * Read a new buffer from the current input stream, update the adler32
     * and total number of bytes read.  All deflate() input goes through
     * this function so some applications may wish to modify it to avoid
     * allocating a large strm->input buffer and copying from it.
     * (See also flush_pending()).
     */
    const read_buf = (strm, buf, start, size) => {

      let len = strm.avail_in;

      if (len > size) { len = size; }
      if (len === 0) { return 0; }

      strm.avail_in -= len;

      // zmemcpy(buf, strm->next_in, len);
      buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32(strm.adler, buf, len, start);
      }

      else if (strm.state.wrap === 2) {
        strm.adler = crc32(strm.adler, buf, len, start);
      }

      strm.next_in += len;
      strm.total_in += len;

      return len;
    };


    /* ===========================================================================
     * Set match_start to the longest match starting at the given string and
     * return its length. Matches shorter or equal to prev_length are discarded,
     * in which case the result is equal to prev_length and match_start is
     * garbage.
     * IN assertions: cur_match is the head of the hash chain for the current
     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
     * OUT assertion: the match length is not greater than s->lookahead.
     */
    const longest_match = (s, cur_match) => {

      let chain_length = s.max_chain_length;      /* max hash chain length */
      let scan = s.strstart; /* current string */
      let match;                       /* matched string */
      let len;                           /* length of current match */
      let best_len = s.prev_length;              /* best match length so far */
      let nice_match = s.nice_match;             /* stop if match long enough */
      const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
        s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

      const _win = s.window; // shortcut

      const wmask = s.w_mask;
      const prev = s.prev;

      /* Stop when cur_match becomes <= limit. To simplify the code,
       * we prevent matches with the string of window index 0.
       */

      const strend = s.strstart + MAX_MATCH;
      let scan_end1 = _win[scan + best_len - 1];
      let scan_end = _win[scan + best_len];

      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
       * It is easy to get rid of this optimization if necessary.
       */
      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

      /* Do not waste too much time if we already have a good match: */
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      /* Do not look for matches beyond the end of the input. This is necessary
       * to make deflate deterministic.
       */
      if (nice_match > s.lookahead) { nice_match = s.lookahead; }

      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;

        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2.  Note that the checks below
         * for insufficient lookahead only occur occasionally for performance
         * reasons.  Therefore uninitialized memory will be accessed, and
         * conditional jumps will be made that depend on those values.
         * However the length of the match is limited to the lookahead, so
         * the output of deflate is not affected by the uninitialized values.
         */

        if (_win[match + best_len] !== scan_end ||
          _win[match + best_len - 1] !== scan_end1 ||
          _win[match] !== _win[scan] ||
          _win[++match] !== _win[scan + 1]) {
          continue;
        }

        /* The check at best_len-1 can be removed because it will be made
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
          /*jshint noempty:false*/
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
        _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
          scan < strend);

        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;

        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1 = _win[scan + best_len - 1];
          scan_end = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    };


    /* ===========================================================================
     * Fill the window when the lookahead becomes insufficient.
     * Updates strstart and lookahead.
     *
     * IN assertion: lookahead < MIN_LOOKAHEAD
     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
     *    At least one byte has been read, or avail_in == 0; reads are
     *    performed for at least two bytes (required for the zip translate_eol
     *    option -- not supported here).
     */
    const fill_window = (s) => {

      const _w_size = s.w_size;
      let p, n, m, more, str;

      //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

      do {
        more = s.window_size - s.lookahead - s.strstart;

        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */
        //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}


        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

          s.window.set(s.window.subarray(_w_size, _w_size + _w_size), 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          /* we now have strstart >= MAX_DIST */
          s.block_start -= _w_size;

          /* Slide the hash table (could be avoided with 32 bit values
           at the expense of memory usage). We slide even when level == 0
           to keep the hash table consistent if we switch back to level > 0
           later. (Using level 0 permanently is not an optimal usage of
           zlib, so we don't care about this pathological case.)
           */

          n = s.hash_size;
          p = n;

          do {
            m = s.head[--p];
            s.head[p] = (m >= _w_size ? m - _w_size : 0);
          } while (--n);

          n = _w_size;
          p = n;

          do {
            m = s.prev[--p];
            s.prev[p] = (m >= _w_size ? m - _w_size : 0);
            /* If n is not on any hash chain, prev[n] is garbage but
             * its value will never be used.
             */
          } while (--n);

          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }

        /* If there was no sliding:
         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
         *    more == window_size - lookahead - strstart
         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
         * => more >= window_size - 2*WSIZE + 2
         * In the BIG_MEM or MMAP case (not yet supported),
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];

          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
          //#if MIN_MATCH != 3
          //        Call update_hash() MIN_MATCH-3 more times
          //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

      /* If the WIN_INIT bytes after the end of the current data have never been
       * written, then zero those bytes in order to avoid memory check reports of
       * the use of uninitialized (or uninitialised as Julian writes) bytes by
       * the longest match routines.  Update the high water mark for the next
       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
       */
      //  if (s.high_water < s.window_size) {
      //    const curr = s.strstart + s.lookahead;
      //    let init = 0;
      //
      //    if (s.high_water < curr) {
      //      /* Previous high water mark below current data -- zero WIN_INIT
      //       * bytes or up to end of window, whichever is less.
      //       */
      //      init = s.window_size - curr;
      //      if (init > WIN_INIT)
      //        init = WIN_INIT;
      //      zmemzero(s->window + curr, (unsigned)init);
      //      s->high_water = curr + init;
      //    }
      //    else if (s->high_water < (ulg)curr + WIN_INIT) {
      //      /* High water mark at or above current data, but below current data
      //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
      //       * to end of window, whichever is less.
      //       */
      //      init = (ulg)curr + WIN_INIT - s->high_water;
      //      if (init > s->window_size - s->high_water)
      //        init = s->window_size - s->high_water;
      //      zmemzero(s->window + s->high_water, (unsigned)init);
      //      s->high_water += init;
      //    }
      //  }
      //
      //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
      //    "not enough room for search");
    };

    /* ===========================================================================
     * Copy without compression as much as possible from the input stream, return
     * the current block state.
     * This function does not insert new strings in the dictionary since
     * uncompressible data is probably not useful. This function is used
     * only for the level=0 compression option.
     * NOTE: this function should be optimized to avoid extra copying from
     * window to pending_buf.
     */
    const deflate_stored = (s, flush) => {

      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
       * to pending_buf_size, and each stored block has a 5 byte header:
       */
      let max_block_size = 0xffff;

      if (max_block_size > s.pending_buf_size - 5) {
        max_block_size = s.pending_buf_size - 5;
      }

      /* Copy as much as possible from input to output: */
      for (; ;) {
        /* Fill the window as much as possible: */
        if (s.lookahead <= 1) {

          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
          //  s->block_start >= (long)s->w_size, "slide too late");
          //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
          //        s.block_start >= s.w_size)) {
          //        throw  new Error("slide too late");
          //      }

          fill_window(s);
          if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }

          if (s.lookahead === 0) {
            break;
          }
          /* flush the current block */
        }
        //Assert(s->block_start >= 0L, "block gone");
        //    if (s.block_start < 0) throw new Error("block gone");

        s.strstart += s.lookahead;
        s.lookahead = 0;

        /* Emit a stored block if pending_buf will be full: */
        const max_start = s.block_start + max_block_size;

        if (s.strstart === 0 || s.strstart >= max_start) {
          /* strstart == 0 is possible when wraparound on 16-bit machine */
          s.lookahead = s.strstart - max_start;
          s.strstart = max_start;
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/


        }
        /* Flush if we may have to slide, otherwise block_start may become
         * negative and the data will be gone:
         */
        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }

      s.insert = 0;

      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }

      if (s.strstart > s.block_start) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_NEED_MORE;
    };

    /* ===========================================================================
     * Compress as much as possible from the input stream, return the current
     * block state.
     * This function does not perform lazy evaluation of matches and inserts
     * new strings in the dictionary only for unmatched strings or for short
     * matches. It is used only for the fast compression options.
     */
    const deflate_fast = (s, flush) => {

      let hash_head;        /* head of the hash chain */
      let bflush;           /* set if current block must be flushed */

      for (; ;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
        }
        if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;

          /* Insert new strings in the hash table only if the match length
           * is not too large. This saves time but degrades compression.
           */
          if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */
            do {
              s.strstart++;
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
              /* strstart never exceeds WSIZE-MAX_MATCH, so there are
               * always MIN_MATCH bytes ahead.
               */
            } while (--s.match_length !== 0);
            s.strstart++;
          } else {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

            //#if MIN_MATCH != 3
            //                Call UPDATE_HASH() MIN_MATCH-3 more times
            //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
             * matter since it will be recomputed at next deflate call.
             */
          }
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* ===========================================================================
     * Same as above, but achieves better compression. We use a lazy
     * evaluation for matches: a match is finally adopted only if there is
     * no better match at the next window position.
     */
    const deflate_slow = (s, flush) => {

      let hash_head;          /* head of hash chain */
      let bflush;              /* set if current block must be flushed */

      let max_insert;

      /* Process the input block. */
      for (; ;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;

        if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
          s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */

          if (s.match_length <= 5 &&
            (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH - 1;
          }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          /* Do not insert strings in hash table beyond this. */

          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
          bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          /* Insert in hash table all strings up to the end of the match.
           * strstart-1 and strstart are already inserted. If there is not
           * enough lookahead, the last two strings are not inserted in
           * the hash table.
           */
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/
          }

        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
           * single literal. If there was a match but the current match
           * is longer, truncate the previous match to a single literal.
           */
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

          if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
            flush_block_only(s, false);
            /***/
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
           * the next step to decide.
           */
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_BLOCK_DONE;
    };


    /* ===========================================================================
     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
     * deflate switches away from Z_RLE.)
     */
    const deflate_rle = (s, flush) => {

      let bflush;            /* set if current block must be flushed */
      let prev;              /* byte at distance one to match */
      let scan, strend;      /* scan goes up to strend for length of run */

      const _win = s.window;

      for (; ;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* See how many times the previous byte repeats */
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
              /*jshint noempty:false*/
            } while (prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
            prev === _win[++scan] && prev === _win[++scan] &&
              scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
          //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }

        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);

          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* ===========================================================================
     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
     * (It will be regenerated if this run of deflate switches away from Huffman.)
     */
    const deflate_huff = (s, flush) => {

      let bflush;             /* set if current block must be flushed */

      for (; ;) {
        /* Make sure that we have a literal to write. */
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH) {
              return BS_NEED_MORE;
            }
            break;      /* flush the current block */
          }
        }

        /* Output a literal byte */
        s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.last_lit) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* Values for max_lazy_match, good_match and max_chain_length, depending on
     * the desired pack level (0..9). The values given below have been tuned to
     * exclude worst case performance for pathological files. Better values may be
     * found for specific files.
     */
    function Config(good_length, max_lazy, nice_length, max_chain, func) {

      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }

    const configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

      new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
    ];


    /* ===========================================================================
     * Initialize the "longest match" routines for a new zlib stream
     */
    const lm_init = (s) => {

      s.window_size = 2 * s.w_size;

      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);

      /* Set the default configuration parameters:
       */
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;

      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    };


    function DeflateState() {
      this.strm = null;            /* pointer back to this zlib stream */
      this.status = 0;            /* as the name implies */
      this.pending_buf = null;      /* output still pending */
      this.pending_buf_size = 0;  /* size of pending_buf */
      this.pending_out = 0;       /* next pending byte to output to the stream */
      this.pending = 0;           /* nb of bytes in the pending buffer */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.gzhead = null;         /* gzip header information to write */
      this.gzindex = 0;           /* where in extra, name, or comment */
      this.method = Z_DEFLATED; /* can only be DEFLATED */
      this.last_flush = -1;   /* value of flush param for previous deflate call */

      this.w_size = 0;  /* LZ77 window size (32K by default) */
      this.w_bits = 0;  /* log2(w_size)  (8..16) */
      this.w_mask = 0;  /* w_size - 1 */

      this.window = null;
      /* Sliding window. Input bytes are read into the second half of the window,
       * and move to the first half later to keep a dictionary of at least wSize
       * bytes. With this organization, matches are limited to a distance of
       * wSize-MAX_MATCH bytes, but this ensures that IO is always
       * performed with a length multiple of the block size.
       */

      this.window_size = 0;
      /* Actual size of window: 2*wSize, except when the user input buffer
       * is directly used as sliding window.
       */

      this.prev = null;
      /* Link to older string with same hash index. To limit the size of this
       * array to 64K, this link is maintained only for the last 32K strings.
       * An index in this array is thus a window index modulo 32K.
       */

      this.head = null;   /* Heads of the hash chains or NIL. */

      this.ins_h = 0;       /* hash index of string to be inserted */
      this.hash_size = 0;   /* number of elements in hash table */
      this.hash_bits = 0;   /* log2(hash_size) */
      this.hash_mask = 0;   /* hash_size-1 */

      this.hash_shift = 0;
      /* Number of bits by which ins_h must be shifted at each input
       * step. It must be such that after MIN_MATCH steps, the oldest
       * byte no longer takes part in the hash key, that is:
       *   hash_shift * MIN_MATCH >= hash_bits
       */

      this.block_start = 0;
      /* Window position at the beginning of the current output block. Gets
       * negative when the window is moved backwards.
       */

      this.match_length = 0;      /* length of best match */
      this.prev_match = 0;        /* previous match */
      this.match_available = 0;   /* set if previous match exists */
      this.strstart = 0;          /* start of string to insert */
      this.match_start = 0;       /* start of matching string */
      this.lookahead = 0;         /* number of valid bytes ahead in window */

      this.prev_length = 0;
      /* Length of the best match at previous step. Matches not greater than this
       * are discarded. This is used in the lazy match evaluation.
       */

      this.max_chain_length = 0;
      /* To speed up deflation, hash chains are never searched beyond this
       * length.  A higher limit improves compression ratio but degrades the
       * speed.
       */

      this.max_lazy_match = 0;
      /* Attempt to find a better match only when the current match is strictly
       * smaller than this value. This mechanism is used only for compression
       * levels >= 4.
       */
      // That's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
       * greater than this length. This saves time but degrades compression.
       * max_insert_length is used only for compression levels <= 3.
       */

      this.level = 0;     /* compression level (1..9) */
      this.strategy = 0;  /* favor or force Huffman coding*/

      this.good_match = 0;
      /* Use a faster search when the previous match is longer than this */

      this.nice_match = 0; /* Stop searching when current match exceeds this */

      /* used by trees.c: */

      /* Didn't use ct_data typedef below to suppress compiler warning */

      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
      this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
      this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);

      this.l_desc = null;         /* desc. for literal tree */
      this.d_desc = null;         /* desc. for distance tree */
      this.bl_desc = null;         /* desc. for bit length tree */

      //ush bl_count[MAX_BITS+1];
      this.bl_count = new Uint16Array(MAX_BITS + 1);
      /* number of codes at each bit length for an optimal tree */

      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
      zero(this.heap);

      this.heap_len = 0;               /* number of elements in the heap */
      this.heap_max = 0;               /* element of largest frequency */
      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
       * The same heap array is used to build all trees.
       */

      this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
      zero(this.depth);
      /* Depth of each subtree used as tie breaker for trees of equal frequency
       */

      this.l_buf = 0;          /* buffer index for literals or lengths */

      this.lit_bufsize = 0;
      /* Size of match buffer for literals/lengths.  There are 4 reasons for
       * limiting lit_bufsize to 64K:
       *   - frequencies can be kept in 16 bit counters
       *   - if compression is not successful for the first block, all input
       *     data is still in the window so we can still emit a stored block even
       *     when input comes from standard input.  (This can also be done for
       *     all blocks if lit_bufsize is not greater than 32K.)
       *   - if compression is not successful for a file smaller than 64K, we can
       *     even emit a stored file instead of a stored block (saving 5 bytes).
       *     This is applicable only for zip (not gzip or zlib).
       *   - creating new Huffman trees less frequently may not provide fast
       *     adaptation to changes in the input data statistics. (Take for
       *     example a binary file with poorly compressible code followed by
       *     a highly compressible string table.) Smaller buffer sizes give
       *     fast adaptation but have of course the overhead of transmitting
       *     trees more frequently.
       *   - I can't count above 4
       */

      this.last_lit = 0;      /* running index in l_buf */

      this.d_buf = 0;
      /* Buffer index for distances. To simplify the code, d_buf and l_buf have
       * the same number of elements. To use different lengths, an extra flag
       * array would be necessary.
       */

      this.opt_len = 0;       /* bit length of current block with optimal trees */
      this.static_len = 0;    /* bit length of current block with static trees */
      this.matches = 0;       /* number of string matches in current block */
      this.insert = 0;        /* bytes at end of window left to insert */


      this.bi_buf = 0;
      /* Output buffer. bits are inserted starting at the bottom (least
       * significant bits).
       */
      this.bi_valid = 0;
      /* Number of valid bits in bi_buf.  All bits above the last valid bit
       * are always zero.
       */

      // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
       * this are set to zero in order to avoid memory check warnings when
       * longest match routines access bytes past the input.  This is then
       * updated to the new high water mark.
       */
    }


    const deflateResetKeep = (strm) => {

      if (!strm || !strm.state) {
        return err(strm, Z_STREAM_ERROR);
      }

      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;

      const s = strm.state;
      s.pending = 0;
      s.pending_out = 0;

      if (s.wrap < 0) {
        s.wrap = -s.wrap;
        /* was made negative by deflate(..., Z_FINISH); */
      }
      s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
      strm.adler = (s.wrap === 2) ?
        0  // crc32(0, Z_NULL, 0)
        :
        1; // adler32(0, Z_NULL, 0)
      s.last_flush = Z_NO_FLUSH;
      _tr_init(s);
      return Z_OK;
    };


    const deflateReset = (strm) => {

      const ret = deflateResetKeep(strm);
      if (ret === Z_OK) {
        lm_init(strm.state);
      }
      return ret;
    };


    const deflateSetHeader = (strm, head) => {

      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
      strm.state.gzhead = head;
      return Z_OK;
    };


    const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

      if (!strm) { // === Z_NULL
        return Z_STREAM_ERROR;
      }
      let wrap = 1;

      if (level === Z_DEFAULT_COMPRESSION) {
        level = 6;
      }

      if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
      }

      else if (windowBits > 15) {
        wrap = 2;           /* write gzip wrapper instead */
        windowBits -= 16;
      }


      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED) {
        return err(strm, Z_STREAM_ERROR);
      }


      if (windowBits === 8) {
        windowBits = 9;
      }
      /* until 256-byte window bug fixed */

      const s = new DeflateState();

      strm.state = s;
      s.strm = strm;

      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;

      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

      s.window = new Uint8Array(s.w_size * 2);
      s.head = new Uint16Array(s.hash_size);
      s.prev = new Uint16Array(s.w_size);

      // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */

      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

      s.pending_buf_size = s.lit_bufsize * 4;

      //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
      //s->pending_buf = (uchf *) overlay;
      s.pending_buf = new Uint8Array(s.pending_buf_size);

      // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
      //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
      s.d_buf = 1 * s.lit_bufsize;

      //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
      s.l_buf = (1 + 2) * s.lit_bufsize;

      s.level = level;
      s.strategy = strategy;
      s.method = method;

      return deflateReset(strm);
    };

    const deflateInit = (strm, level) => {

      return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
    };


    const deflate = (strm, flush) => {

      let beg, val; // for gzip header write only

      if (!strm || !strm.state ||
        flush > Z_BLOCK || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
      }

      const s = strm.state;

      if (!strm.output ||
        (!strm.input && strm.avail_in !== 0) ||
        (s.status === FINISH_STATE && flush !== Z_FINISH)) {
        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
      }

      s.strm = strm; /* just in case */
      const old_flush = s.last_flush;
      s.last_flush = flush;

      /* Write the header */
      if (s.status === INIT_STATE) {

        if (s.wrap === 2) { // GZIP header
          strm.adler = 0;  //crc32(0L, Z_NULL, 0);
          put_byte(s, 31);
          put_byte(s, 139);
          put_byte(s, 8);
          if (!s.gzhead) { // s->gzhead == Z_NULL
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 :
              (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                4 : 0));
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
          }
          else {
            put_byte(s, (s.gzhead.text ? 1 : 0) +
              (s.gzhead.hcrc ? 2 : 0) +
              (!s.gzhead.extra ? 0 : 4) +
              (!s.gzhead.name ? 0 : 8) +
              (!s.gzhead.comment ? 0 : 16)
            );
            put_byte(s, s.gzhead.time & 0xff);
            put_byte(s, (s.gzhead.time >> 8) & 0xff);
            put_byte(s, (s.gzhead.time >> 16) & 0xff);
            put_byte(s, (s.gzhead.time >> 24) & 0xff);
            put_byte(s, s.level === 9 ? 2 :
              (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                4 : 0));
            put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
              put_byte(s, s.gzhead.extra.length & 0xff);
              put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
            }
            if (s.gzhead.hcrc) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
            }
            s.gzindex = 0;
            s.status = EXTRA_STATE;
          }
        }
        else // DEFLATE header
        {
          let header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
          let level_flags = -1;

          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
            level_flags = 0;
          } else if (s.level < 6) {
            level_flags = 1;
          } else if (s.level === 6) {
            level_flags = 2;
          } else {
            level_flags = 3;
          }
          header |= (level_flags << 6);
          if (s.strstart !== 0) { header |= PRESET_DICT; }
          header += 31 - (header % 31);

          s.status = BUSY_STATE;
          putShortMSB(s, header);

          /* Save the adler32 of the preset dictionary: */
          if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
          }
          strm.adler = 1; // adler32(0L, Z_NULL, 0);
        }
      }

      //#ifdef GZIP
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */

          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                break;
              }
            }
            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
            s.gzindex++;
          }
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (s.gzindex === s.gzhead.extra.length) {
            s.gzindex = 0;
            s.status = NAME_STATE;
          }
        }
        else {
          s.status = NAME_STATE;
        }
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.gzindex = 0;
            s.status = COMMENT_STATE;
          }
        }
        else {
          s.status = COMMENT_STATE;
        }
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment/* != Z_NULL*/) {
          beg = s.pending;  /* start of bytes to update crc */
          //int val;

          do {
            if (s.pending === s.pending_buf_size) {
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              flush_pending(strm);
              beg = s.pending;
              if (s.pending === s.pending_buf_size) {
                val = 1;
                break;
              }
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);

          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          if (val === 0) {
            s.status = HCRC_STATE;
          }
        }
        else {
          s.status = HCRC_STATE;
        }
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
          }
          if (s.pending + 2 <= s.pending_buf_size) {
            put_byte(s, strm.adler & 0xff);
            put_byte(s, (strm.adler >> 8) & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
            s.status = BUSY_STATE;
          }
        }
        else {
          s.status = BUSY_STATE;
        }
      }
      //#endif

      /* Flush as much pending output as possible */
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
           * more output space, but possibly with both pending and
           * avail_in equal to zero. There won't be anything to do,
           * but this is not an error situation so make sure we
           * return OK instead of BUF_ERROR at next call of deflate:
           */
          s.last_flush = -1;
          return Z_OK;
        }

        /* Make sure there is something to do and avoid duplicate consecutive
         * flushes. For repeated and useless calls with Z_FINISH, we keep
         * returning Z_STREAM_END instead of Z_BUF_ERROR.
         */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
        flush !== Z_FINISH) {
        return err(strm, Z_BUF_ERROR);
      }

      /* User must not provide more input after the first FINISH: */
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR);
      }

      /* Start a new block or continue the current one.
       */
      if (strm.avail_in !== 0 || s.lookahead !== 0 ||
        (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
        let bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
          (s.strategy === Z_RLE ? deflate_rle(s, flush) :
            configuration_table[s.level].func(s, flush));

        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            /* avoid BUF_ERROR next call, see above */
          }
          return Z_OK;
          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
           * of deflate should use the same flush parameter to make sure
           * that the flush is complete. So we don't have to output an
           * empty block here, this will be done at next call. This also
           * ensures that for a very small output buffer, we emit at most
           * one empty block.
           */
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            _tr_align(s);
          }
          else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

            _tr_stored_block(s, 0, 0, false);
            /* For a full flush, this empty block will be recognized
             * as a special marker by inflate_sync().
             */
            if (flush === Z_FULL_FLUSH) {
              /*** CLEAR_HASH(s); ***/             /* forget history */
              zero(s.head); // Fill with NIL (= 0);

              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
            return Z_OK;
          }
        }
      }
      //Assert(strm->avail_out > 0, "bug2");
      //if (strm.avail_out <= 0) { throw new Error("bug2");}

      if (flush !== Z_FINISH) { return Z_OK; }
      if (s.wrap <= 0) { return Z_STREAM_END; }

      /* Write the trailer */
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        put_byte(s, (strm.adler >> 16) & 0xff);
        put_byte(s, (strm.adler >> 24) & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, (strm.total_in >> 8) & 0xff);
        put_byte(s, (strm.total_in >> 16) & 0xff);
        put_byte(s, (strm.total_in >> 24) & 0xff);
      }
      else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }

      flush_pending(strm);
      /* If avail_out is zero, the application will call deflate again
       * to flush the rest.
       */
      if (s.wrap > 0) { s.wrap = -s.wrap; }
      /* write the trailer only once! */
      return s.pending !== 0 ? Z_OK : Z_STREAM_END;
    };


    const deflateEnd = (strm) => {

      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR;
      }

      const status = strm.state.status;
      if (status !== INIT_STATE &&
        status !== EXTRA_STATE &&
        status !== NAME_STATE &&
        status !== COMMENT_STATE &&
        status !== HCRC_STATE &&
        status !== BUSY_STATE &&
        status !== FINISH_STATE
      ) {
        return err(strm, Z_STREAM_ERROR);
      }

      strm.state = null;

      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
    };


    /* =========================================================================
     * Initializes the compression dictionary from the given byte
     * sequence without producing any compressed output.
     */
    const deflateSetDictionary = (strm, dictionary) => {

      let dictLength = dictionary.length;

      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
        return Z_STREAM_ERROR;
      }

      const s = strm.state;
      const wrap = s.wrap;

      if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
        return Z_STREAM_ERROR;
      }

      /* when using zlib wrappers, compute Adler-32 for provided dictionary */
      if (wrap === 1) {
        /* adler32(strm->adler, dictionary, dictLength); */
        strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
      }

      s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

      /* if dictionary would fill window, just replace the history */
      if (dictLength >= s.w_size) {
        if (wrap === 0) {            /* already empty otherwise */
          /*** CLEAR_HASH(s); ***/
          zero(s.head); // Fill with NIL (= 0);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        /* use the tail */
        // dictionary = dictionary.slice(dictLength - s.w_size);
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      /* insert dictionary into window and hash */
      const avail = strm.avail_in;
      const next = strm.next_in;
      const input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        let str = s.strstart;
        let n = s.lookahead - (MIN_MATCH - 1);
        do {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

          s.prev[str & s.w_mask] = s.head[s.ins_h];

          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK;
    };


    module.exports.deflateInit = deflateInit;
    module.exports.deflateInit2 = deflateInit2;
    module.exports.deflateReset = deflateReset;
    module.exports.deflateResetKeep = deflateResetKeep;
    module.exports.deflateSetHeader = deflateSetHeader;
    module.exports.deflate = deflate;
    module.exports.deflateEnd = deflateEnd;
    module.exports.deflateSetDictionary = deflateSetDictionary;
    module.exports.deflateInfo = 'pako deflate (from Nodeca project)';

    /* Not implemented
    module.exports.deflateBound = deflateBound;
    module.exports.deflateCopy = deflateCopy;
    module.exports.deflateParams = deflateParams;
    module.exports.deflatePending = deflatePending;
    module.exports.deflatePrime = deflatePrime;
    module.exports.deflateTune = deflateTune;
    */

  }, { "./adler32": 222, "./constants": 223, "./crc32": 224, "./messages": 230, "./trees": 231 }], 226: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function GZheader() {
      /* true if compressed data believed to be text */
      this.text = 0;
      /* modification time */
      this.time = 0;
      /* extra flags (not used when writing a gzip file) */
      this.xflags = 0;
      /* operating system */
      this.os = 0;
      /* pointer to extra field or Z_NULL if none */
      this.extra = null;
      /* extra field length (valid if extra != Z_NULL) */
      this.extra_len = 0; // Actually, we don't need it in JS,
      // but leave for few code modifications

      //
      // Setup limits is not necessary because in js we should not preallocate memory
      // for inflate use constant limit in 65536 bytes
      //

      /* space at extra (only when reading header) */
      // this.extra_max  = 0;
      /* pointer to zero-terminated file name or Z_NULL */
      this.name = '';
      /* space at name (only when reading header) */
      // this.name_max   = 0;
      /* pointer to zero-terminated comment or Z_NULL */
      this.comment = '';
      /* space at comment (only when reading header) */
      // this.comm_max   = 0;
      /* true if there was or will be a header crc */
      this.hcrc = 0;
      /* true when done reading gzip header (not used when writing a gzip file) */
      this.done = false;
    }

    module.exports = GZheader;

  }, {}], 227: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // See state defs from inflate.js
    const BAD = 30;       /* got a data error -- remain here until reset */
    const TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

    /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.
    
       Entry assumptions:
    
            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8
    
       On return, state.mode is one of:
    
            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data
    
       Notes:
    
        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.
    
        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
    module.exports = function inflate_fast(strm, start) {
      let _in;                    /* local strm.input */
      let last;                   /* have enough input while in < last */
      let _out;                   /* local strm.output */
      let beg;                    /* inflate()'s initial strm.output */
      let end;                    /* while out < end, enough space available */
      //#ifdef INFLATE_STRICT
      let dmax;                   /* maximum distance from zlib header */
      //#endif
      let wsize;                  /* window size or zero if not using window */
      let whave;                  /* valid bytes in the window */
      let wnext;                  /* window write index */
      // Use `s_window` instead `window`, avoid conflict with instrumentation tools
      let s_window;               /* allocated sliding window, if wsize != 0 */
      let hold;                   /* local strm.hold */
      let bits;                   /* local strm.bits */
      let lcode;                  /* local strm.lencode */
      let dcode;                  /* local strm.distcode */
      let lmask;                  /* mask for first level of length codes */
      let dmask;                  /* mask for first level of distance codes */
      let here;                   /* retrieved table entry */
      let op;                     /* code bits, operation, extra bits, or */
      /*  window position, window bytes to copy */
      let len;                    /* match length, unused bytes */
      let dist;                   /* match distance */
      let from;                   /* where to copy match from */
      let from_source;


      let input, output; // JS specific, because we have no pointers

      /* copy state to local variables */
      const state = strm.state;
      //here = state.here;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
      //#ifdef INFLATE_STRICT
      dmax = state.dmax;
      //#endif
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;


      /* decode literals and length/distances until end-of-block or not enough
         input data or output space */

      top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }

        here = lcode[hold & lmask];

        dolen:
        for (; ;) { // Goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op === 0) {                          /* literal */
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff/*here.val*/;
          }
          else if (op & 16) {                     /* length base */
            len = here & 0xffff/*here.val*/;
            op &= 15;                           /* number of extra bits */
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & ((1 << op) - 1);
              hold >>>= op;
              bits -= op;
            }
            //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];

            dodist:
            for (; ;) { // goto emulation
              op = here >>> 24/*here.bits*/;
              hold >>>= op;
              bits -= op;
              op = (here >>> 16) & 0xff/*here.op*/;

              if (op & 16) {                      /* distance base */
                dist = here & 0xffff/*here.val*/;
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                }
                dist += hold & ((1 << op) - 1);
                //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }
                //#endif
                hold >>>= op;
                bits -= op;
                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg;                /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                  op = dist - op;               /* distance back in window */
                  if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD;
                      break top;
                    }

                    // (!) This block is disabled in zlib defaults,
                    // don't enable it for binary compatibility
                    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                    //                if (len <= op - whave) {
                    //                  do {
                    //                    output[_out++] = 0;
                    //                  } while (--len);
                    //                  continue top;
                    //                }
                    //                len -= op - whave;
                    //                do {
                    //                  output[_out++] = 0;
                    //                } while (--op > whave);
                    //                if (op === 0) {
                    //                  from = _out - dist;
                    //                  do {
                    //                    output[_out++] = output[from++];
                    //                  } while (--len);
                    //                  continue top;
                    //                }
                    //#endif
                  }
                  from = 0; // window index
                  from_source = s_window;
                  if (wnext === 0) {           /* very common case */
                    from += wsize - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  else if (wnext < op) {      /* wrap around window */
                    from += wsize + wnext - op;
                    op -= wnext;
                    if (op < len) {         /* some from end of window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = 0;
                      if (wnext < len) {  /* some from start of window */
                        op = wnext;
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;      /* rest from output */
                        from_source = output;
                      }
                    }
                  }
                  else {                      /* contiguous in window */
                    from += wnext - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  while (len > 2) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len -= 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                }
                else {
                  from = _out - dist;          /* copy direct from output */
                  do {                        /* minimum length is three */
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len -= 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              }
              else if ((op & 64) === 0) {          /* 2nd level distance code */
                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                continue dodist;
              }
              else {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break top;
              }

              break; // need to emulate goto via "continue"
            }
          }
          else if ((op & 64) === 0) {              /* 2nd level length code */
            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dolen;
          }
          else if (op & 32) {                     /* end-of-block */
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE;
            break top;
          }
          else {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end);

      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;

      /* update state and return */
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
      state.hold = hold;
      state.bits = bits;
      return;
    };

  }, {}], 228: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const adler32 = require('./adler32');
    const crc32 = require('./crc32');
    const inflate_fast = require('./inffast');
    const inflate_table = require('./inftrees');

    const CODES = 0;
    const LENS = 1;
    const DISTS = 2;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_FINISH, Z_BLOCK, Z_TREES,
      Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR,
      Z_DEFLATED
    } = require('./constants');


    /* STATES ====================================================================*/
    /* ===========================================================================*/


    const HEAD = 1;       /* i: waiting for magic header */
    const FLAGS = 2;      /* i: waiting for method and flags (gzip) */
    const TIME = 3;       /* i: waiting for modification time (gzip) */
    const OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
    const EXLEN = 5;      /* i: waiting for extra length (gzip) */
    const EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
    const NAME = 7;       /* i: waiting for end of file name (gzip) */
    const COMMENT = 8;    /* i: waiting for end of comment (gzip) */
    const HCRC = 9;       /* i: waiting for header crc (gzip) */
    const DICTID = 10;    /* i: waiting for dictionary check value */
    const DICT = 11;      /* waiting for inflateSetDictionary() call */
    const TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
    const TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
    const STORED = 14;    /* i: waiting for stored size (length and complement) */
    const COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
    const COPY = 16;      /* i/o: waiting for input or output to copy stored block */
    const TABLE = 17;     /* i: waiting for dynamic block table lengths */
    const LENLENS = 18;   /* i: waiting for code length code lengths */
    const CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
    const LEN_ = 20;      /* i: same as LEN below, but only first time in */
    const LEN = 21;       /* i: waiting for length/lit/eob code */
    const LENEXT = 22;    /* i: waiting for length extra bits */
    const DIST = 23;      /* i: waiting for distance code */
    const DISTEXT = 24;   /* i: waiting for distance extra bits */
    const MATCH = 25;     /* o: waiting for output space to copy string */
    const LIT = 26;       /* o: waiting for output space to write literal */
    const CHECK = 27;     /* i: waiting for 32-bit check value */
    const LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
    const DONE = 29;      /* finished check, done -- remain here until reset */
    const BAD = 30;       /* got a data error -- remain here until reset */
    const MEM = 31;       /* got an inflate() memory error -- remain here until reset */
    const SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

    /* ===========================================================================*/



    const ENOUGH_LENS = 852;
    const ENOUGH_DISTS = 592;
    //const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

    const MAX_WBITS = 15;
    /* 32K LZ77 window */
    const DEF_WBITS = MAX_WBITS;


    const zswap32 = (q) => {

      return (((q >>> 24) & 0xff) +
        ((q >>> 8) & 0xff00) +
        ((q & 0xff00) << 8) +
        ((q & 0xff) << 24));
    };


    function InflateState() {
      this.mode = 0;             /* current inflate mode */
      this.last = false;          /* true if processing last block */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.havedict = false;      /* true if dictionary provided */
      this.flags = 0;             /* gzip header method and flags (0 if zlib) */
      this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
      this.check = 0;             /* protected copy of check value */
      this.total = 0;             /* protected copy of output count */
      // TODO: may be {}
      this.head = null;           /* where to save gzip header information */

      /* sliding window */
      this.wbits = 0;             /* log base 2 of requested window size */
      this.wsize = 0;             /* window size or zero if not using window */
      this.whave = 0;             /* valid bytes in the window */
      this.wnext = 0;             /* window write index */
      this.window = null;         /* allocated sliding window, if needed */

      /* bit accumulator */
      this.hold = 0;              /* input bit accumulator */
      this.bits = 0;              /* number of bits in "in" */

      /* for string and stored block copying */
      this.length = 0;            /* literal or length of data to copy */
      this.offset = 0;            /* distance back to copy string from */

      /* for table and code decoding */
      this.extra = 0;             /* extra bits needed */

      /* fixed and dynamic code tables */
      this.lencode = null;          /* starting table for length/literal codes */
      this.distcode = null;         /* starting table for distance codes */
      this.lenbits = 0;           /* index bits for lencode */
      this.distbits = 0;          /* index bits for distcode */

      /* dynamic table building */
      this.ncode = 0;             /* number of code length code lengths */
      this.nlen = 0;              /* number of length code lengths */
      this.ndist = 0;             /* number of distance code lengths */
      this.have = 0;              /* number of code lengths in lens[] */
      this.next = null;              /* next available space in codes[] */

      this.lens = new Uint16Array(320); /* temporary storage for code lengths */
      this.work = new Uint16Array(288); /* work area for code table building */

      /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
      //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
      this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
      this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
      this.sane = 0;                   /* if false, allow invalid distance too far */
      this.back = 0;                   /* bits back of last unprocessed length/lit */
      this.was = 0;                    /* initial length of match */
    }


    const inflateResetKeep = (strm) => {

      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      const state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = ''; /*Z_NULL*/
      if (state.wrap) {       /* to support ill-conceived Java test suite */
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.dmax = 32768;
      state.head = null/*Z_NULL*/;
      state.hold = 0;
      state.bits = 0;
      //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
      state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

      state.sane = 1;
      state.back = -1;
      //Tracev((stderr, "inflate: reset\n"));
      return Z_OK;
    };


    const inflateReset = (strm) => {

      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      const state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);

    };


    const inflateReset2 = (strm, windowBits) => {
      let wrap;

      /* get the state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      const state = strm.state;

      /* extract wrap request from windowBits parameter */
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      }
      else {
        wrap = (windowBits >> 4) + 1;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }

      /* set number of window bits, free window if different */
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }

      /* update state and reset the rest of it */
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    };


    const inflateInit2 = (strm, windowBits) => {

      if (!strm) { return Z_STREAM_ERROR; }
      //strm.msg = Z_NULL;                 /* in case we return an error */

      const state = new InflateState();

      //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;
      state.window = null/*Z_NULL*/;
      const ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK) {
        strm.state = null/*Z_NULL*/;
      }
      return ret;
    };


    const inflateInit = (strm) => {

      return inflateInit2(strm, DEF_WBITS);
    };


    /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
    let virgin = true;

    let lenfix, distfix; // We have no pointers in JS, so keep tables separate


    const fixedtables = (state) => {

      /* build fixed huffman tables if first call (may not be thread safe) */
      if (virgin) {
        lenfix = new Int32Array(512);
        distfix = new Int32Array(32);

        /* literal/length table */
        let sym = 0;
        while (sym < 144) { state.lens[sym++] = 8; }
        while (sym < 256) { state.lens[sym++] = 9; }
        while (sym < 280) { state.lens[sym++] = 7; }
        while (sym < 288) { state.lens[sym++] = 8; }

        inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });

        /* distance table */
        sym = 0;
        while (sym < 32) { state.lens[sym++] = 5; }

        inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });

        /* do this just once */
        virgin = false;
      }

      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    };


    /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.
    
     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
    const updatewindow = (strm, src, end, copy) => {

      let dist;
      const state = strm.state;

      /* if it hasn't been done already, allocate space for the window */
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;

        state.window = new Uint8Array(state.wsize);
      }

      /* copy state->wsize or less output bytes into the circular window */
      if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
      }
      else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          state.window.set(src.subarray(end - copy, end), 0);
          state.wnext = copy;
          state.whave = state.wsize;
        }
        else {
          state.wnext += dist;
          if (state.wnext === state.wsize) { state.wnext = 0; }
          if (state.whave < state.wsize) { state.whave += dist; }
        }
      }
      return 0;
    };


    const inflate = (strm, flush) => {

      let state;
      let input, output;          // input/output buffers
      let next;                   /* next input INDEX */
      let put;                    /* next output INDEX */
      let have, left;             /* available input and output */
      let hold;                   /* bit buffer */
      let bits;                   /* bits in bit buffer */
      let _in, _out;              /* save starting available input and output */
      let copy;                   /* number of stored or match bytes to copy */
      let from;                   /* where to copy match bytes from */
      let from_source;
      let here = 0;               /* current decoding table entry */
      let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //let last;                   /* parent table entry */
      let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      let len;                    /* length to copy for repeats, bits to drop */
      let ret;                    /* return code */
      const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
      let opts;

      let n; // temporary variable for NEED_BITS

      const order = /* permutation of code lengths */
        new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);


      if (!strm || !strm.state || !strm.output ||
        (!strm.input && strm.avail_in !== 0)) {
        return Z_STREAM_ERROR;
      }

      state = strm.state;
      if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


      //--- LOAD() ---
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      //---

      _in = have;
      _out = left;
      ret = Z_OK;

      inf_leave: // goto emulation
      for (; ;) {
        switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            //=== NEEDBITS(16);
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
              state.check = 0/*crc32(0L, Z_NULL, 0)*/;
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//

              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              state.mode = FLAGS;
              break;
            }
            state.flags = 0;           /* expect zlib header */
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) ||   /* check if zlib header allowed */
              (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
              strm.msg = 'incorrect header check';
              state.mode = BAD;
              break;
            }
            if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f)/*BITS(4)*/ + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            }
            else if (len > state.wbits) {
              strm.msg = 'invalid window size';
              state.mode = BAD;
              break;
            }

            // !!! pako patch. Force use `options.windowBits` if passed.
            // Required to always use max window size by default.
            state.dmax = 1 << state.wbits;
            //state.dmax = 1 << len;

            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = hold & 0x200 ? DICTID : TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            break;
          case FLAGS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            if (state.flags & 0xe000) {
              strm.msg = 'unknown header flags set';
              state.mode = BAD;
              break;
            }
            if (state.head) {
              state.head.text = ((hold >> 8) & 1);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = TIME;
          /* falls through */
          case TIME:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.time = hold;
            }
            if (state.flags & 0x0200) {
              //=== CRC4(state.check, hold)
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              hbuf[2] = (hold >>> 16) & 0xff;
              hbuf[3] = (hold >>> 24) & 0xff;
              state.check = crc32(state.check, hbuf, 4, 0);
              //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = OS;
          /* falls through */
          case OS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.xflags = (hold & 0xff);
              state.head.os = (hold >> 8);
            }
            if (state.flags & 0x0200) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = EXLEN;
          /* falls through */
          case EXLEN:
            if (state.flags & 0x0400) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = (hold >>> 8) & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0);
                //===//
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            else if (state.head) {
              state.head.extra = null/*Z_NULL*/;
            }
            state.mode = EXTRA;
          /* falls through */
          case EXTRA:
            if (state.flags & 0x0400) {
              copy = state.length;
              if (copy > have) { copy = have; }
              if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    // Use untyped array for more convenient processing later
                    state.head.extra = new Uint8Array(state.head.extra_len);
                  }
                  state.head.extra.set(
                    input.subarray(
                      next,
                      // extra field is limited to 65536 bytes
                      // - no need for additional size check
                      next + copy
                    ),
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                  //zmemcpy(state.head.extra + len, next,
                  //        len + copy > state.head.extra_max ?
                  //        state.head.extra_max - len : copy);
                }
                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                state.length -= copy;
              }
              if (state.length) { break inf_leave; }
            }
            state.length = 0;
            state.mode = NAME;
          /* falls through */
          case NAME:
            if (state.flags & 0x0800) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                // TODO: 2 or 1 bytes?
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                  (state.length < 65536 /*state.head.name_max*/)) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy < have);

              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
          /* falls through */
          case COMMENT:
            if (state.flags & 0x1000) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                  (state.length < 65536 /*state.head.comm_max*/)) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if (state.flags & 0x0200) {
                state.check = crc32(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
          /* falls through */
          case HCRC:
            if (state.flags & 0x0200) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.check & 0xffff)) {
                strm.msg = 'header crc mismatch';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            if (state.head) {
              state.head.hcrc = ((state.flags >> 9) & 1);
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
          case DICTID:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            strm.adler = state.check = zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = DICT;
          /* falls through */
          case DICT:
            if (state.havedict === 0) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              return Z_NEED_DICT;
            }
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = TYPE;
          /* falls through */
          case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
          /* falls through */
          case TYPEDO:
            if (state.last) {
              //--- BYTEBITS() ---//
              hold >>>= bits & 7;
              bits -= bits & 7;
              //---//
              state.mode = CHECK;
              break;
            }
            //=== NEEDBITS(3); */
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.last = (hold & 0x01)/*BITS(1)*/;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//

            switch ((hold & 0x03)/*BITS(2)*/) {
              case 0:                             /* stored block */
                //Tracev((stderr, "inflate:     stored block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = STORED;
                break;
              case 1:                             /* fixed block */
                fixedtables(state);
                //Tracev((stderr, "inflate:     fixed codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = LEN_;             /* decode codes */
                if (flush === Z_TREES) {
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                  break inf_leave;
                }
                break;
              case 2:                             /* dynamic block */
                //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = TABLE;
                break;
              case 3:
                strm.msg = 'invalid block type';
                state.mode = BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break;
          case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
              strm.msg = 'invalid stored block lengths';
              state.mode = BAD;
              break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = COPY_;
            if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
          case COPY_:
            state.mode = COPY;
          /* falls through */
          case COPY:
            copy = state.length;
            if (copy) {
              if (copy > have) { copy = have; }
              if (copy > left) { copy = left; }
              if (copy === 0) { break inf_leave; }
              //--- zmemcpy(put, next, copy); ---
              output.set(input.subarray(next, next + copy), put);
              //---//
              have -= copy;
              next += copy;
              left -= copy;
              put += copy;
              state.length -= copy;
              break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;
            break;
          case TABLE:
            //=== NEEDBITS(14); */
            while (bits < 14) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = 'too many length or distance symbols';
              state.mode = BAD;
              break;
            }
            //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = LENLENS;
          /* falls through */
          case LENLENS:
            while (state.have < state.ncode) {
              //=== NEEDBITS(3);
              while (bits < 3) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;

            opts = { bits: state.lenbits };
            ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;

            if (ret) {
              strm.msg = 'invalid code lengths set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = CODELENS;
          /* falls through */
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (; ;) {
                here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              if (here_val < 16) {
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                state.lens[state.have++] = here_val;
              }
              else {
                if (here_val === 16) {
                  //=== NEEDBITS(here.bits + 2);
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  if (state.have === 0) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy = 3 + (hold & 0x03);//BITS(2);
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                }
                else if (here_val === 17) {
                  //=== NEEDBITS(here.bits + 3);
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 3 + (hold & 0x07);//BITS(3);
                  //--- DROPBITS(3) ---//
                  hold >>>= 3;
                  bits -= 3;
                  //---//
                }
                else {
                  //=== NEEDBITS(here.bits + 7);
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 11 + (hold & 0x7f);//BITS(7);
                  //--- DROPBITS(7) ---//
                  hold >>>= 7;
                  bits -= 7;
                  //---//
                }
                if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            }

            /* handle error breaks in while */
            if (state.mode === BAD) { break; }

            /* check for end-of-block code (better have one) */
            if (state.lens[256] === 0) {
              strm.msg = 'invalid code -- missing end-of-block';
              state.mode = BAD;
              break;
            }

            /* build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftrees.h
               concerning the ENOUGH constants, which depend on those values */
            state.lenbits = 9;

            opts = { bits: state.lenbits };
            ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;

            if (ret) {
              strm.msg = 'invalid literal/lengths set';
              state.mode = BAD;
              break;
            }

            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = { bits: state.distbits };
            ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;

            if (ret) {
              strm.msg = 'invalid distances set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;
            if (flush === Z_TREES) { break inf_leave; }
          /* falls through */
          case LEN_:
            state.mode = LEN;
          /* falls through */
          case LEN:
            if (have >= 6 && left >= 258) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              inflate_fast(strm, _out);
              //--- LOAD() ---
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              //---

              if (state.mode === TYPE) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (; ;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if (here_bits <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (; ;) {
                here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.back = -1;
              state.mode = TYPE;
              break;
            }
            if (here_op & 64) {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
          /* falls through */
          case LENEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = DIST;
          /* falls through */
          case DIST:
            for (; ;) {
              here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if ((here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (; ;) {
                here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break;
            }
            state.offset = here_val;
            state.extra = (here_op) & 15;
            state.mode = DISTEXT;
          /* falls through */
          case DISTEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
            //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH;
          /* falls through */
          case MATCH:
            if (left === 0) { break inf_leave; }
            copy = _out - left;
            if (state.offset > copy) {         /* copy from window */
              copy = state.offset - copy;
              if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break;
                }
                // (!) This block is disabled in zlib defaults,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //          Trace((stderr, "inflate.c too far\n"));
                //          copy -= state.whave;
                //          if (copy > state.length) { copy = state.length; }
                //          if (copy > left) { copy = left; }
                //          left -= copy;
                //          state.length -= copy;
                //          do {
                //            output[put++] = 0;
                //          } while (--copy);
                //          if (state.length === 0) { state.mode = LEN; }
                //          break;
                //#endif
              }
              if (copy > state.wnext) {
                copy -= state.wnext;
                from = state.wsize - copy;
              }
              else {
                from = state.wnext - copy;
              }
              if (copy > state.length) { copy = state.length; }
              from_source = state.window;
            }
            else {                              /* copy from output */
              from_source = output;
              from = put - state.offset;
              copy = state.length;
            }
            if (copy > left) { copy = left; }
            left -= copy;
            state.length -= copy;
            do {
              output[put++] = from_source[from++];
            } while (--copy);
            if (state.length === 0) { state.mode = LEN; }
            break;
          case LIT:
            if (left === 0) { break inf_leave; }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                // Use '|' instead of '+' to make sure that result is signed
                hold |= input[next++] << bits;
                bits += 8;
              }
              //===//
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if (_out) {
                strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

              }
              _out = left;
              // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
              if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = 'incorrect data check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = LENGTH;
          /* falls through */
          case LENGTH:
            if (state.wrap && state.flags) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if (hold !== (state.total & 0xffffffff)) {
                strm.msg = 'incorrect length check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = DONE;
          /* falls through */
          case DONE:
            ret = Z_STREAM_END;
            break inf_leave;
          case BAD:
            ret = Z_DATA_ERROR;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR;
          case SYNC:
          /* falls through */
          default:
            return Z_STREAM_ERROR;
        }
      }

      // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

      /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */

      //--- RESTORE() ---
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      //---

      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
        (state.mode < CHECK || flush !== Z_FINISH))) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if (state.wrap && _out) {
        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
          (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) +
        (state.mode === TYPE ? 128 : 0) +
        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    };


    const inflateEnd = (strm) => {

      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
        return Z_STREAM_ERROR;
      }

      let state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK;
    };


    const inflateGetHeader = (strm, head) => {

      /* check state */
      if (!strm || !strm.state) { return Z_STREAM_ERROR; }
      const state = strm.state;
      if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

      /* save header structure */
      state.head = head;
      head.done = false;
      return Z_OK;
    };


    const inflateSetDictionary = (strm, dictionary) => {
      const dictLength = dictionary.length;

      let state;
      let dictid;
      let ret;

      /* check state */
      if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
      state = strm.state;

      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR;
      }

      /* check for correct dictionary identifier */
      if (state.mode === DICT) {
        dictid = 1; /* adler32(0, null, 0)*/
        /* dictid = adler32(dictid, dictionary, dictLength); */
        dictid = adler32(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR;
        }
      }
      /* copy dictionary to window using updatewindow(), which will amend the
       existing dictionary if appropriate */
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR;
      }
      state.havedict = 1;
      // Tracev((stderr, "inflate:   dictionary set\n"));
      return Z_OK;
    };


    module.exports.inflateReset = inflateReset;
    module.exports.inflateReset2 = inflateReset2;
    module.exports.inflateResetKeep = inflateResetKeep;
    module.exports.inflateInit = inflateInit;
    module.exports.inflateInit2 = inflateInit2;
    module.exports.inflate = inflate;
    module.exports.inflateEnd = inflateEnd;
    module.exports.inflateGetHeader = inflateGetHeader;
    module.exports.inflateSetDictionary = inflateSetDictionary;
    module.exports.inflateInfo = 'pako inflate (from Nodeca project)';

    /* Not implemented
    module.exports.inflateCopy = inflateCopy;
    module.exports.inflateGetDictionary = inflateGetDictionary;
    module.exports.inflateMark = inflateMark;
    module.exports.inflatePrime = inflatePrime;
    module.exports.inflateSync = inflateSync;
    module.exports.inflateSyncPoint = inflateSyncPoint;
    module.exports.inflateUndermine = inflateUndermine;
    */

  }, { "./adler32": 222, "./constants": 223, "./crc32": 224, "./inffast": 227, "./inftrees": 229 }], 229: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const MAXBITS = 15;
    const ENOUGH_LENS = 852;
    const ENOUGH_DISTS = 592;
    //const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

    const CODES = 0;
    const LENS = 1;
    const DISTS = 2;

    const lbase = new Uint16Array([ /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
    ]);

    const lext = new Uint8Array([ /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
    ]);

    const dbase = new Uint16Array([ /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
      8193, 12289, 16385, 24577, 0, 0
    ]);

    const dext = new Uint8Array([ /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
      28, 28, 29, 29, 64, 64
    ]);

    const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
      const bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

      let len = 0;               /* a code's length in bits */
      let sym = 0;               /* index of code symbols */
      let min = 0, max = 0;          /* minimum and maximum code lengths */
      let root = 0;              /* number of index bits for root table */
      let curr = 0;              /* number of index bits for current table */
      let drop = 0;              /* code bits to drop for sub-table */
      let left = 0;                   /* number of prefix codes available */
      let used = 0;              /* code entries in table used */
      let huff = 0;              /* Huffman code */
      let incr;              /* for incrementing code, index */
      let fill;              /* index for replicating entries */
      let low;               /* low bits for current root entry */
      let mask;              /* mask for low root bits */
      let next;             /* next available space in table */
      let base = null;     /* base value table to use */
      let base_index = 0;
      //  let shoextra;    /* extra bits table to use */
      let end;                    /* use base and extra for symbol > end */
      const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
      const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
      let extra = null;
      let extra_index = 0;

      let here_bits, here_op, here_val;

      /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.
    
       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.
    
       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.
    
       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */

      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }

      /* bound code lengths, force root to be within code lengths */
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) { break; }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {                     /* no symbols to code at all */
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;


        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;

        opts.bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) { break; }
      }
      if (root < min) {
        root = min;
      }

      /* check for an over-subscribed or incomplete set of lengths */
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }        /* over-subscribed */
      }
      if (left > 0 && (type === CODES || max !== 1)) {
        return -1;                      /* incomplete set */
      }

      /* generate offsets into symbol table for each length for sorting */
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }

      /* sort symbols by length, by symbol order within each length */
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }

      /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.
    
       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.
    
       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.
    
       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.
    
       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */

      /* set up for code type */
      // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES) {
        base = extra = work;    /* dummy value--not used */
        end = 19;

      } else if (type === LENS) {
        base = lbase;
        base_index -= 257;
        extra = lext;
        extra_index -= 257;
        end = 256;

      } else {                    /* DISTS */
        base = dbase;
        extra = dext;
        end = -1;
      }

      /* initialize opts for loop */
      huff = 0;                   /* starting code */
      sym = 0;                    /* starting code symbol */
      len = min;                  /* starting code length */
      next = table_index;              /* current table to fill in */
      curr = root;                /* current table index bits */
      drop = 0;                   /* current bits to drop from code for index */
      low = -1;                   /* trigger new sub-table when len > root */
      used = 1 << root;          /* use root table entries */
      mask = used - 1;            /* mask for comparing low */

      /* check available table space */
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* process all codes and make table entries */
      for (; ;) {
        /* create table entry */
        here_bits = len - drop;
        if (work[sym] < end) {
          here_op = 0;
          here_val = work[sym];
        }
        else if (work[sym] > end) {
          here_op = extra[extra_index + work[sym]];
          here_val = base[base_index + work[sym]];
        }
        else {
          here_op = 32 + 64;         /* end of block */
          here_val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1 << (len - drop);
        fill = 1 << curr;
        min = fill;                 /* save offset to next table */
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val | 0;
        } while (fill !== 0);

        /* backwards increment the len-bit code huff */
        incr = 1 << (len - 1);
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }

        /* go to next symbol, update count, len */
        sym++;
        if (--count[len] === 0) {
          if (len === max) { break; }
          len = lens[lens_index + work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */
          if (drop === 0) {
            drop = root;
          }

          /* increment past last table */
          next += min;            /* here min is 1 << curr */

          /* determine length of next table */
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) { break; }
            curr++;
            left <<= 1;
          }

          /* check for enough space */
          used += 1 << curr;
          if ((type === LENS && used > ENOUGH_LENS) ||
            (type === DISTS && used > ENOUGH_DISTS)) {
            return 1;
          }

          /* point entry in root table to sub-table */
          low = huff & mask;
          /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
          table[low] = (root << 24) | (curr << 16) | (next - table_index) | 0;
        }
      }

      /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
      if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = ((len - drop) << 24) | (64 << 16) | 0;
      }

      /* set return parameters */
      //opts.table_index += used;
      opts.bits = root;
      return 0;
    };


    module.exports = inflate_table;

  }, {}], 230: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    module.exports = {
      2: 'need dictionary',     /* Z_NEED_DICT       2  */
      1: 'stream end',          /* Z_STREAM_END      1  */
      0: '',                    /* Z_OK              0  */
      '-1': 'file error',          /* Z_ERRNO         (-1) */
      '-2': 'stream error',        /* Z_STREAM_ERROR  (-2) */
      '-3': 'data error',          /* Z_DATA_ERROR    (-3) */
      '-4': 'insufficient memory', /* Z_MEM_ERROR     (-4) */
      '-5': 'buffer error',        /* Z_BUF_ERROR     (-5) */
      '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
    };

  }, {}], 231: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    /* eslint-disable space-unary-ops */

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    //const Z_FILTERED          = 1;
    //const Z_HUFFMAN_ONLY      = 2;
    //const Z_RLE               = 3;
    const Z_FIXED = 4;
    //const Z_DEFAULT_STRATEGY  = 0;

    /* Possible values of the data_type field (though see inflate()) */
    const Z_BINARY = 0;
    const Z_TEXT = 1;
    //const Z_ASCII             = 1; // = Z_TEXT
    const Z_UNKNOWN = 2;

    /*============================================================================*/


    function zero(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

    // From zutil.h

    const STORED_BLOCK = 0;
    const STATIC_TREES = 1;
    const DYN_TREES = 2;
    /* The three kinds of block type */

    const MIN_MATCH = 3;
    const MAX_MATCH = 258;
    /* The minimum and maximum match lengths */

    // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */

    const LENGTH_CODES = 29;
    /* number of length codes, not counting the special END_BLOCK code */

    const LITERALS = 256;
    /* number of literal bytes 0..255 */

    const L_CODES = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */

    const D_CODES = 30;
    /* number of distance codes */

    const BL_CODES = 19;
    /* number of codes used to transfer the bit lengths */

    const HEAP_SIZE = 2 * L_CODES + 1;
    /* maximum heap size */

    const MAX_BITS = 15;
    /* All codes must not exceed MAX_BITS bits */

    const Buf_size = 16;
    /* size of bit buffer in bi_buf */


    /* ===========================================================================
     * Constants
     */

    const MAX_BL_BITS = 7;
    /* Bit length codes must not exceed MAX_BL_BITS bits */

    const END_BLOCK = 256;
    /* end of block literal code */

    const REP_3_6 = 16;
    /* repeat previous bit length 3-6 times (2 bits of repeat count) */

    const REPZ_3_10 = 17;
    /* repeat a zero length 3-10 times  (3 bits of repeat count) */

    const REPZ_11_138 = 18;
    /* repeat a zero length 11-138 times  (7 bits of repeat count) */

    /* eslint-disable comma-spacing,array-bracket-spacing */
    const extra_lbits =   /* extra bits for each length code */
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]);

    const extra_dbits =   /* extra bits for each distance code */
      new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);

    const extra_blbits =  /* extra bits for each bit length code */
      new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]);

    const bl_order =
      new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    /* eslint-enable comma-spacing,array-bracket-spacing */

    /* The lengths of the bit length codes are sent in order of decreasing
     * probability, to avoid transmitting the lengths for unused bit length codes.
     */

    /* ===========================================================================
     * Local data. These are initialized only once.
     */

    // We pre-fill arrays with 0 to avoid uninitialized gaps

    const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

    // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
    const static_ltree = new Array((L_CODES + 2) * 2);
    zero(static_ltree);
    /* The static literal tree. Since the bit lengths are imposed, there is no
     * need for the L_CODES extra codes used during heap construction. However
     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     * below).
     */

    const static_dtree = new Array(D_CODES * 2);
    zero(static_dtree);
    /* The static distance tree. (Actually a trivial tree since all codes use
     * 5 bits.)
     */

    const _dist_code = new Array(DIST_CODE_LEN);
    zero(_dist_code);
    /* Distance codes. The first 256 values correspond to the distances
     * 3 .. 258, the last 256 values correspond to the top 8 bits of
     * the 15 bit distances.
     */

    const _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
    zero(_length_code);
    /* length code for each normalized match length (0 == MIN_MATCH) */

    const base_length = new Array(LENGTH_CODES);
    zero(base_length);
    /* First normalized length for each code (0 = MIN_MATCH) */

    const base_dist = new Array(D_CODES);
    zero(base_dist);
    /* First normalized distance for each code (0 = distance of 1) */


    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

      this.static_tree = static_tree;  /* static tree or NULL */
      this.extra_bits = extra_bits;   /* extra bits for each code or NULL */
      this.extra_base = extra_base;   /* base index for extra_bits */
      this.elems = elems;        /* max number of elements in the tree */
      this.max_length = max_length;   /* max bit length for the codes */

      // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree = static_tree && static_tree.length;
    }


    let static_l_desc;
    let static_d_desc;
    let static_bl_desc;


    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;     /* the dynamic tree */
      this.max_code = 0;            /* largest code with non zero frequency */
      this.stat_desc = stat_desc;   /* the corresponding static tree */
    }



    const d_code = (dist) => {

      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    };


    /* ===========================================================================
     * Output a short LSB first on the stream.
     * IN assertion: there is enough room in pendingBuf.
     */
    const put_short = (s, w) => {
      //    put_byte(s, (uch)((w) & 0xff));
      //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = (w) & 0xff;
      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
    };


    /* ===========================================================================
     * Send a value on a given number of bits.
     * IN assertion: length <= 16 and value fits in length bits.
     */
    const send_bits = (s, value, length) => {

      if (s.bi_valid > (Buf_size - length)) {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> (Buf_size - s.bi_valid);
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        s.bi_valid += length;
      }
    };


    const send_code = (s, c, tree) => {

      send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
    };


    /* ===========================================================================
     * Reverse the first len bits of a code, using straightforward code (a faster
     * method would use a table)
     * IN assertion: 1 <= len <= 15
     */
    const bi_reverse = (code, len) => {

      let res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    };


    /* ===========================================================================
     * Flush the bit buffer, keeping at most 7 bits in it.
     */
    const bi_flush = (s) => {

      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;

      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    };


    /* ===========================================================================
     * Compute the optimal bit lengths for a tree and update the total bit length
     * for the current block.
     * IN assertion: the fields freq and dad are set, heap[heap_max] and
     *    above are the tree nodes sorted by increasing frequency.
     * OUT assertions: the field len is set to the optimal bit length, the
     *     array bl_count contains the frequencies for each bit length.
     *     The length opt_len is updated; static_len is also updated if stree is
     *     not null.
     */
    const gen_bitlen = (s, desc) =>
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    {
      const tree = desc.dyn_tree;
      const max_code = desc.max_code;
      const stree = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const extra = desc.stat_desc.extra_bits;
      const base = desc.stat_desc.extra_base;
      const max_length = desc.stat_desc.max_length;
      let h;              /* heap index */
      let n, m;           /* iterate over the tree elements */
      let bits;           /* bit length */
      let xbits;          /* extra bits */
      let f;              /* frequency */
      let overflow = 0;   /* number of elements with bit length too large */

      for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      }

      /* In a first pass, compute the optimal bit lengths (which may
       * overflow in the case of the bit length tree).
       */
      tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1]/*.Len*/ = bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) { continue; } /* not a leaf node */

        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2]/*.Freq*/;
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
        }
      }
      if (overflow === 0) { return; }

      // Trace((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */

      /* Find the first bit length which could increase: */
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) { bits--; }
        s.bl_count[bits]--;      /* move one leaf down the tree */
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
      } while (overflow > 0);

      /* Now recompute all bit lengths, scanning in increasing frequency.
       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
       * lengths instead of fixing only the wrong ones. This idea is taken
       * from 'ar' written by Haruhiko Okumura.)
       */
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) { continue; }
          if (tree[m * 2 + 1]/*.Len*/ !== bits) {
            // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
            tree[m * 2 + 1]/*.Len*/ = bits;
          }
          n--;
        }
      }
    };


    /* ===========================================================================
     * Generate the codes for a given tree and bit counts (which need not be
     * optimal).
     * IN assertion: the array bl_count contains the bit length statistics for
     * the given tree and the field len is set for all tree elements.
     * OUT assertion: the field code is set for all tree elements of non
     *     zero code length.
     */
    const gen_codes = (tree, max_code, bl_count) =>
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    {
      const next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
      let code = 0;              /* running code value */
      let bits;                  /* bit index */
      let n;                     /* code index */

      /* The distribution counts are first used to generate the code values
       * without bit reversal.
       */
      for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
      }
      /* Check that the bit counts in bl_count are consistent. The last code
       * must be all ones.
       */
      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

      for (n = 0; n <= max_code; n++) {
        let len = tree[n * 2 + 1]/*.Len*/;
        if (len === 0) { continue; }
        /* Now reverse the bits */
        tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    };


    /* ===========================================================================
     * Initialize the various 'constant' tables.
     */
    const tr_static_init = () => {

      let n;        /* iterates over tree elements */
      let bits;     /* bit counter */
      let length;   /* length value */
      let code;     /* code value */
      let dist;     /* distance index */
      const bl_count = new Array(MAX_BITS + 1);
      /* number of codes at each bit length for an optimal tree */

      // do check in _tr_init()
      //if (static_init_done) return;

      /* For some embedded targets, global variables are not initialized: */
      /*#ifdef NO_INIT_GLOBAL_POINTERS
        static_l_desc.static_tree = static_ltree;
        static_l_desc.extra_bits = extra_lbits;
        static_d_desc.static_tree = static_dtree;
        static_d_desc.extra_bits = extra_dbits;
        static_bl_desc.extra_bits = extra_blbits;
      #endif*/

      /* Initialize the mapping length (0..255) -> length code (0..28) */
      length = 0;
      for (code = 0; code < LENGTH_CODES - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < (1 << extra_lbits[code]); n++) {
          _length_code[length++] = code;
        }
      }
      //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
       * in two different ways: code 284 + 5 bits or code 285, so we
       * overwrite length_code[255] to use the best encoding:
       */
      _length_code[length - 1] = code;

      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < (1 << extra_dbits[code]); n++) {
          _dist_code[dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */
      for (; code < D_CODES; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: 256+dist != 512");

      /* Construct the codes of the static literal tree */
      for (bits = 0; bits <= MAX_BITS; bits++) {
        bl_count[bits] = 0;
      }

      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1]/*.Len*/ = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1]/*.Len*/ = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      /* Codes 286 and 287 do not exist, but we must include them in the
       * tree construction to get a canonical Huffman tree (longest code
       * all ones)
       */
      gen_codes(static_ltree, L_CODES + 1, bl_count);

      /* The static distance tree is trivial: */
      for (n = 0; n < D_CODES; n++) {
        static_dtree[n * 2 + 1]/*.Len*/ = 5;
        static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
      }

      // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);

      //static_init_done = true;
    };


    /* ===========================================================================
     * Initialize a new block.
     */
    const init_block = (s) => {

      let n; /* iterates over tree elements */

      /* Initialize the trees. */
      for (n = 0; n < L_CODES; n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < D_CODES; n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

      s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
      s.opt_len = s.static_len = 0;
      s.last_lit = s.matches = 0;
    };


    /* ===========================================================================
     * Flush the bit buffer and align the output on a byte boundary
     */
    const bi_windup = (s) => {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    };

    /* ===========================================================================
     * Copy a stored block, storing first the length and its
     * one's complement if requested.
     */
    const copy_block = (s, buf, len, header) =>
    //DeflateState *s;
    //charf    *buf;    /* the input data */
    //unsigned len;     /* its length */
    //int      header;  /* true if block header must be written */
    {
      bi_windup(s);        /* align on byte boundary */

      if (header) {
        put_short(s, len);
        put_short(s, ~len);
      }
      //  while (len--) {
      //    put_byte(s, *buf++);
      //  }
      s.pending_buf.set(s.window.subarray(buf, buf + len), s.pending);
      s.pending += len;
    };

    /* ===========================================================================
     * Compares to subtrees, using the tree depth as tie breaker when
     * the subtrees have equal frequency. This minimizes the worst case length.
     */
    const smaller = (tree, n, m, depth) => {

      const _n2 = n * 2;
      const _m2 = m * 2;
      return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
        (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
    };

    /* ===========================================================================
     * Restore the heap property by moving down the tree starting at node k,
     * exchanging a node with the smallest of its two sons if necessary, stopping
     * when the heap property is re-established (each father smaller than its
     * two sons).
     */
    const pqdownheap = (s, tree, k) =>
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    {
      const v = s.heap[k];
      let j = k << 1;  /* left son of k */
      while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s.heap_len &&
          smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s.heap[j], s.depth)) { break; }

        /* Exchange v with the smallest son */
        s.heap[k] = s.heap[j];
        k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
      }
      s.heap[k] = v;
    };


    // inlined manually
    // const SMALLEST = 1;

    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */
    const compress_block = (s, ltree, dtree) =>
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    {
      let dist;           /* distance of matched string */
      let lc;             /* match length or unmatched char (if dist == 0) */
      let lx = 0;         /* running index in l_buf */
      let code;           /* the code to send */
      let extra;          /* number of extra bits to send */

      if (s.last_lit !== 0) {
        do {
          dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
          lc = s.pending_buf[s.l_buf + lx];
          lx++;

          if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */
            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code + LITERALS + 1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);       /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);   /* send the extra distance bits */
            }
          } /* literal or match pair ? */

          /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
          //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
          //       "pendingBuf overflow");

        } while (lx < s.last_lit);
      }

      send_code(s, END_BLOCK, ltree);
    };


    /* ===========================================================================
     * Construct one Huffman tree and assigns the code bit strings and lengths.
     * Update the total bit length for the current block.
     * IN assertion: the field freq is set for all tree elements.
     * OUT assertions: the fields len and code are set to the optimal bit length
     *     and corresponding code. The length opt_len is updated; static_len is
     *     also updated if stree is not null. The field max_code is set.
     */
    const build_tree = (s, desc) =>
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    {
      const tree = desc.dyn_tree;
      const stree = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const elems = desc.stat_desc.elems;
      let n, m;          /* iterate over heap elements */
      let max_code = -1; /* largest code with non zero frequency */
      let node;          /* new node being created */

      /* Construct the initial heap, with least frequent element in
       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
       * heap[0] is not used.
       */
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;

      for (n = 0; n < elems; n++) {
        if (tree[n * 2]/*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;

        } else {
          tree[n * 2 + 1]/*.Len*/ = 0;
        }
      }

      /* The pkzip format requires that at least one distance code exists,
       * and that at least one bit should be sent even if there is only one
       * possible code. So to avoid special checks later on we force at least
       * two codes of non zero frequency.
       */
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2]/*.Freq*/ = 1;
        s.depth[node] = 0;
        s.opt_len--;

        if (has_stree) {
          s.static_len -= stree[node * 2 + 1]/*.Len*/;
        }
        /* node is 0 or 1 so it does not have extra bits */
      }
      desc.max_code = max_code;

      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
       * establish sub-heaps of increasing lengths:
       */
      for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

      /* Construct the Huffman tree by repeatedly combining the least two
       * frequent nodes.
       */
      node = elems;              /* next internal node of the tree */
      do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/
        n = s.heap[1/*SMALLEST*/];
        s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1/*SMALLEST*/);
        /***/

        m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
        s.heap[--s.heap_max] = m;

        /* Create a new node father of n and m */
        tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

        /* and insert the new node in the heap */
        s.heap[1/*SMALLEST*/] = node++;
        pqdownheap(s, tree, 1/*SMALLEST*/);

      } while (s.heap_len >= 2);

      s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

      /* At this point, the fields freq and dad are set. We can now
       * generate the bit lengths.
       */
      gen_bitlen(s, desc);

      /* The field len is now set, we can generate the bit codes */
      gen_codes(tree, max_code, s.bl_count);
    };


    /* ===========================================================================
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     */
    const scan_tree = (s, tree, max_code) =>
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    {
      let n;                     /* iterates over all tree elements */
      let prevlen = -1;          /* last emitted length */
      let curlen;                /* length of current code */

      let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      let count = 0;             /* repeat count of the current code */
      let max_count = 7;         /* max repeat count */
      let min_count = 4;         /* min repeat count */

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          s.bl_tree[curlen * 2]/*.Freq*/ += count;

        } else if (curlen !== 0) {

          if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
          s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

        } else {
          s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };


    /* ===========================================================================
     * Send a literal or distance tree in compressed form, using the codes in
     * bl_tree.
     */
    const send_tree = (s, tree, max_code) =>
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    {
      let n;                     /* iterates over all tree elements */
      let prevlen = -1;          /* last emitted length */
      let curlen;                /* length of current code */

      let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      let count = 0;             /* repeat count of the current code */
      let max_count = 7;         /* max repeat count */
      let min_count = 4;         /* min repeat count */

      /* tree[max_code+1].Len = -1; */  /* guard already set */
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);

        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);

        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }

        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };


    /* ===========================================================================
     * Construct the Huffman tree for the bit lengths and return the index in
     * bl_order of the last bit length code to send.
     */
    const build_bl_tree = (s) => {

      let max_blindex;  /* index of last bit length code of non zero freq */

      /* Determine the bit length frequencies for literal and distance trees */
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

      /* Build the bit length tree: */
      build_tree(s, s.bl_desc);
      /* opt_len now includes the length of the tree representations, except
       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
       */

      /* Determine the number of bit length codes to send. The pkzip format
       * requires that at least 4 bit length codes be sent. (appnote.txt says
       * 3 but the actual value used is 4.)
       */
      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
          break;
        }
      }
      /* Update opt_len to include the bit length tree and counts */
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));

      return max_blindex;
    };


    /* ===========================================================================
     * Send the header for a block using dynamic Huffman trees: the counts, the
     * lengths of the bit length codes, the literal tree and the distance tree.
     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
     */
    const send_all_trees = (s, lcodes, dcodes, blcodes) =>
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    {
      let rank;                    /* index in bl_order */

      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
      send_bits(s, dcodes - 1, 5);
      send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
      for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
      }
      //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
      //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
      //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    };


    /* ===========================================================================
     * Check if the data type is TEXT or BINARY, using the following algorithm:
     * - TEXT if the two conditions below are satisfied:
     *    a) There are no non-portable control characters belonging to the
     *       "black list" (0..6, 14..25, 28..31).
     *    b) There is at least one printable character belonging to the
     *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
     * - BINARY otherwise.
     * - The following partially-portable control characters form a
     *   "gray list" that is ignored in this detection algorithm:
     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
     * IN assertion: the fields Freq of dyn_ltree are set.
     */
    const detect_data_type = (s) => {
      /* black_mask is the bit mask of black-listed bytes
       * set bits 0..6, 14..25, and 28..31
       * 0xf3ffc07f = binary 11110011111111111100000001111111
       */
      let black_mask = 0xf3ffc07f;
      let n;

      /* Check for non-textual ("black-listed") bytes. */
      for (n = 0; n <= 31; n++, black_mask >>>= 1) {
        if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
          return Z_BINARY;
        }
      }

      /* Check for textual ("white-listed") bytes. */
      if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
        s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS; n++) {
        if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
          return Z_TEXT;
        }
      }

      /* There are no "black-listed" or "white-listed" bytes:
       * this stream either is empty or has tolerated ("gray-listed") bytes only.
       */
      return Z_BINARY;
    };


    let static_init_done = false;

    /* ===========================================================================
     * Initialize the tree data structures for a new zlib stream.
     */
    const _tr_init = (s) => {

      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }

      s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

      s.bi_buf = 0;
      s.bi_valid = 0;

      /* Initialize the first block of the first file: */
      init_block(s);
    };


    /* ===========================================================================
     * Send a stored block
     */
    const _tr_stored_block = (s, buf, stored_len, last) =>
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
      copy_block(s, buf, stored_len, true); /* with header */
    };


    /* ===========================================================================
     * Send one empty static block to give enough lookahead for inflate.
     * This takes 10 bits, of which 7 may remain in the bit buffer.
     */
    const _tr_align = (s) => {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    };


    /* ===========================================================================
     * Determine the best encoding for the current block: dynamic trees, static
     * trees or store, and output the encoded block to the zip file.
     */
    const _tr_flush_block = (s, buf, stored_len, last) =>
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    {
      let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
      let max_blindex = 0;        /* index of last bit length code of non zero freq */

      /* Build the Huffman trees unless a stored block is forced */
      if (s.level > 0) {

        /* Check if the file is binary or text */
        if (s.strm.data_type === Z_UNKNOWN) {
          s.strm.data_type = detect_data_type(s);
        }

        /* Construct the literal and distance trees */
        build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));

        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */

        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
        static_lenb = (s.static_len + 3 + 7) >>> 3;

        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->last_lit));

        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }

      if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
        /* 4: two words for the lengths */

        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block(s, buf, stored_len, last);

      } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);

      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
       * and uLong implemented on 32 bits.
       */
      init_block(s);

      if (last) {
        bi_windup(s);
      }
      // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    };

    /* ===========================================================================
     * Save the match info and tally the frequency counts. Return true if
     * the current block must be flushed.
     */
    const _tr_tally = (s, dist, lc) =>
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    {
      //let out_length, in_length, dcode;

      s.pending_buf[s.d_buf + s.last_lit * 2] = (dist >>> 8) & 0xff;
      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

      s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
      s.last_lit++;

      if (dist === 0) {
        /* lc is the unmatched char */
        s.dyn_ltree[lc * 2]/*.Freq*/++;
      } else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
        s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
      }

      // (!) This block is disabled in zlib defaults,
      // don't enable it for binary compatibility

      //#ifdef TRUNCATE_BLOCK
      //  /* Try to guess if it is profitable to stop the current block here */
      //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
      //    /* Compute an upper bound for the compressed length */
      //    out_length = s.last_lit*8;
      //    in_length = s.strstart - s.block_start;
      //
      //    for (dcode = 0; dcode < D_CODES; dcode++) {
      //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
      //    }
      //    out_length >>>= 3;
      //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
      //    //       s->last_lit, in_length, out_length,
      //    //       100L - out_length*100L/in_length));
      //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
      //      return true;
      //    }
      //  }
      //#endif

      return (s.last_lit === s.lit_bufsize - 1);
      /* We avoid equality with lit_bufsize because of wraparound at 64K
       * on 16 bit machines and because stored blocks are restricted to
       * 64K-1 bytes.
       */
    };

    module.exports._tr_init = _tr_init;
    module.exports._tr_stored_block = _tr_stored_block;
    module.exports._tr_flush_block = _tr_flush_block;
    module.exports._tr_tally = _tr_tally;
    module.exports._tr_align = _tr_align;

  }, {}], 232: [function (require, module, exports) {
    'use strict';

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function ZStream() {
      /* next input byte */
      this.input = null; // JS specific, because we have no pointers
      this.next_in = 0;
      /* number of bytes available at input */
      this.avail_in = 0;
      /* total number of input bytes read so far */
      this.total_in = 0;
      /* next output byte should be put there */
      this.output = null; // JS specific, because we have no pointers
      this.next_out = 0;
      /* remaining free space at output */
      this.avail_out = 0;
      /* total number of bytes output so far */
      this.total_out = 0;
      /* last error message, NULL if no error */
      this.msg = ''/*Z_NULL*/;
      /* not visible by applications */
      this.state = null;
      /* best guess about the data type: binary or text */
      this.data_type = 2/*Z_UNKNOWN*/;
      /* adler32 value of the uncompressed data */
      this.adler = 0;
    }

    module.exports = ZStream;

  }, {}], 233: [function (require, module, exports) {
    module.exports = {
      "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
      "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
      "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
      "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
      "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
      "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
      "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
      "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
      "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
      "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
      "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
      "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    }
  }, {}], 234: [function (require, module, exports) {
    // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
    // Fedor, you are amazing.
    'use strict'

    var asn1 = require('asn1.js')

    exports.certificate = require('./certificate')

    var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('modulus').int(),
        this.key('publicExponent').int(),
        this.key('privateExponent').int(),
        this.key('prime1').int(),
        this.key('prime2').int(),
        this.key('exponent1').int(),
        this.key('exponent2').int(),
        this.key('coefficient').int()
      )
    })
    exports.RSAPrivateKey = RSAPrivateKey

    var RSAPublicKey = asn1.define('RSAPublicKey', function () {
      this.seq().obj(
        this.key('modulus').int(),
        this.key('publicExponent').int()
      )
    })
    exports.RSAPublicKey = RSAPublicKey

    var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      )
    })
    exports.PublicKey = PublicKey

    var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('none').null_().optional(),
        this.key('curve').objid().optional(),
        this.key('params').seq().obj(
          this.key('p').int(),
          this.key('q').int(),
          this.key('g').int()
        ).optional()
      )
    })

    var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPrivateKey').octstr()
      )
    })
    exports.PrivateKey = PrivateKeyInfo
    var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').seq().obj(
          this.key('id').objid(),
          this.key('decrypt').seq().obj(
            this.key('kde').seq().obj(
              this.key('id').objid(),
              this.key('kdeparams').seq().obj(
                this.key('salt').octstr(),
                this.key('iters').int()
              )
            ),
            this.key('cipher').seq().obj(
              this.key('algo').objid(),
              this.key('iv').octstr()
            )
          )
        ),
        this.key('subjectPrivateKey').octstr()
      )
    })

    exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

    var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('p').int(),
        this.key('q').int(),
        this.key('g').int(),
        this.key('pub_key').int(),
        this.key('priv_key').int()
      )
    })
    exports.DSAPrivateKey = DSAPrivateKey

    exports.DSAparam = asn1.define('DSAparam', function () {
      this.int()
    })

    var ECPrivateKey = asn1.define('ECPrivateKey', function () {
      this.seq().obj(
        this.key('version').int(),
        this.key('privateKey').octstr(),
        this.key('parameters').optional().explicit(0).use(ECParameters),
        this.key('publicKey').optional().explicit(1).bitstr()
      )
    })
    exports.ECPrivateKey = ECPrivateKey

    var ECParameters = asn1.define('ECParameters', function () {
      this.choice({
        namedCurve: this.objid()
      })
    })

    exports.signature = asn1.define('signature', function () {
      this.seq().obj(
        this.key('r').int(),
        this.key('s').int()
      )
    })

  }, { "./certificate": 235, "asn1.js": 27 }], 235: [function (require, module, exports) {
    // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
    // thanks to @Rantanen

    'use strict'

    var asn = require('asn1.js')

    var Time = asn.define('Time', function () {
      this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
      })
    })

    var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
      this.seq().obj(
        this.key('type').objid(),
        this.key('value').any()
      )
    })

    var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
      this.seq().obj(
        this.key('algorithm').objid(),
        this.key('parameters').optional(),
        this.key('curve').objid().optional()
      )
    })

    var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
      this.seq().obj(
        this.key('algorithm').use(AlgorithmIdentifier),
        this.key('subjectPublicKey').bitstr()
      )
    })

    var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
      this.setof(AttributeTypeValue)
    })

    var RDNSequence = asn.define('RDNSequence', function () {
      this.seqof(RelativeDistinguishedName)
    })

    var Name = asn.define('Name', function () {
      this.choice({
        rdnSequence: this.use(RDNSequence)
      })
    })

    var Validity = asn.define('Validity', function () {
      this.seq().obj(
        this.key('notBefore').use(Time),
        this.key('notAfter').use(Time)
      )
    })

    var Extension = asn.define('Extension', function () {
      this.seq().obj(
        this.key('extnID').objid(),
        this.key('critical').bool().def(false),
        this.key('extnValue').octstr()
      )
    })

    var TBSCertificate = asn.define('TBSCertificate', function () {
      this.seq().obj(
        this.key('version').explicit(0).int().optional(),
        this.key('serialNumber').int(),
        this.key('signature').use(AlgorithmIdentifier),
        this.key('issuer').use(Name),
        this.key('validity').use(Validity),
        this.key('subject').use(Name),
        this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
        this.key('issuerUniqueID').implicit(1).bitstr().optional(),
        this.key('subjectUniqueID').implicit(2).bitstr().optional(),
        this.key('extensions').explicit(3).seqof(Extension).optional()
      )
    })

    var X509Certificate = asn.define('X509Certificate', function () {
      this.seq().obj(
        this.key('tbsCertificate').use(TBSCertificate),
        this.key('signatureAlgorithm').use(AlgorithmIdentifier),
        this.key('signatureValue').bitstr()
      )
    })

    module.exports = X509Certificate

  }, { "asn1.js": 27 }], 236: [function (require, module, exports) {
    // adapted from https://github.com/apatil/pemstrip
    var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
    var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
    var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
    var evp = require('evp_bytestokey')
    var ciphers = require('browserify-aes')
    var Buffer = require('safe-buffer').Buffer
    module.exports = function (okey, password) {
      var key = okey.toString()
      var match = key.match(findProc)
      var decrypted
      if (!match) {
        var match2 = key.match(fullRegex)
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
      } else {
        var suite = 'aes' + match[1]
        var iv = Buffer.from(match[2], 'hex')
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
        var out = []
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
        out.push(cipher.update(cipherText))
        out.push(cipher.final())
        decrypted = Buffer.concat(out)
      }
      var tag = key.match(startRegex)[1]
      return {
        tag: tag,
        data: decrypted
      }
    }

  }, { "browserify-aes": 51, "evp_bytestokey": 163, "safe-buffer": 286 }], 237: [function (require, module, exports) {
    var asn1 = require('./asn1')
    var aesid = require('./aesid.json')
    var fixProc = require('./fixProc')
    var ciphers = require('browserify-aes')
    var compat = require('pbkdf2')
    var Buffer = require('safe-buffer').Buffer
    module.exports = parseKeys

    function parseKeys(buffer) {
      var password
      if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase
        buffer = buffer.key
      }
      if (typeof buffer === 'string') {
        buffer = Buffer.from(buffer)
      }

      var stripped = fixProc(buffer, password)

      var type = stripped.tag
      var data = stripped.data
      var subtype, ndata
      switch (type) {
        case 'CERTIFICATE':
          ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
        // falls through
        case 'PUBLIC KEY':
          if (!ndata) {
            ndata = asn1.PublicKey.decode(data, 'der')
          }
          subtype = ndata.algorithm.algorithm.join('.')
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
            case '1.2.840.10045.2.1':
              ndata.subjectPrivateKey = ndata.subjectPublicKey
              return {
                type: 'ec',
                data: ndata
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
              return {
                type: 'dsa',
                data: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
          data = asn1.EncryptedPrivateKey.decode(data, 'der')
          data = decrypt(data, password)
        // falls through
        case 'PRIVATE KEY':
          ndata = asn1.PrivateKey.decode(data, 'der')
          subtype = ndata.algorithm.algorithm.join('.')
          switch (subtype) {
            case '1.2.840.113549.1.1.1':
              return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
            case '1.2.840.10045.2.1':
              return {
                curve: ndata.algorithm.curve,
                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
              }
            case '1.2.840.10040.4.1':
              ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
              return {
                type: 'dsa',
                params: ndata.algorithm.params
              }
            default: throw new Error('unknown key id ' + subtype)
          }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
          return asn1.RSAPublicKey.decode(data, 'der')
        case 'RSA PRIVATE KEY':
          return asn1.RSAPrivateKey.decode(data, 'der')
        case 'DSA PRIVATE KEY':
          return {
            type: 'dsa',
            params: asn1.DSAPrivateKey.decode(data, 'der')
          }
        case 'EC PRIVATE KEY':
          data = asn1.ECPrivateKey.decode(data, 'der')
          return {
            curve: data.parameters.value,
            privateKey: data.privateKey
          }
        default: throw new Error('unknown key type ' + type)
      }
    }
    parseKeys.signature = asn1.signature
    function decrypt(data, password) {
      var salt = data.algorithm.decrypt.kde.kdeparams.salt
      var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
      var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
      var iv = data.algorithm.decrypt.cipher.iv
      var cipherText = data.subjectPrivateKey
      var keylen = parseInt(algo.split('-')[1], 10) / 8
      var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
      var cipher = ciphers.createDecipheriv(algo, key, iv)
      var out = []
      out.push(cipher.update(cipherText))
      out.push(cipher.final())
      return Buffer.concat(out)
    }

  }, { "./aesid.json": 233, "./asn1": 234, "./fixProc": 236, "browserify-aes": 51, "pbkdf2": 238, "safe-buffer": 286 }], 238: [function (require, module, exports) {
    exports.pbkdf2 = require('./lib/async')
    exports.pbkdf2Sync = require('./lib/sync')

  }, { "./lib/async": 239, "./lib/sync": 242 }], 239: [function (require, module, exports) {
    (function (global) {
      (function () {
        var Buffer = require('safe-buffer').Buffer

        var checkParameters = require('./precondition')
        var defaultEncoding = require('./default-encoding')
        var sync = require('./sync')
        var toBuffer = require('./to-buffer')

        var ZERO_BUF
        var subtle = global.crypto && global.crypto.subtle
        var toBrowser = {
          sha: 'SHA-1',
          'sha-1': 'SHA-1',
          sha1: 'SHA-1',
          sha256: 'SHA-256',
          'sha-256': 'SHA-256',
          sha384: 'SHA-384',
          'sha-384': 'SHA-384',
          'sha-512': 'SHA-512',
          sha512: 'SHA-512'
        }
        var checks = []
        function checkNative(algo) {
          if (global.process && !global.process.browser) {
            return Promise.resolve(false)
          }
          if (!subtle || !subtle.importKey || !subtle.deriveBits) {
            return Promise.resolve(false)
          }
          if (checks[algo] !== undefined) {
            return checks[algo]
          }
          ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
          var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
            .then(function () {
              return true
            }).catch(function () {
              return false
            })
          checks[algo] = prom
          return prom
        }
        var nextTick
        function getNextTick() {
          if (nextTick) {
            return nextTick
          }
          if (global.process && global.process.nextTick) {
            nextTick = global.process.nextTick
          } else if (global.queueMicrotask) {
            nextTick = global.queueMicrotask
          } else if (global.setImmediate) {
            nextTick = global.setImmediate
          } else {
            nextTick = global.setTimeout
          }
          return nextTick
        }
        function browserPbkdf2(password, salt, iterations, length, algo) {
          return subtle.importKey(
            'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
          ).then(function (key) {
            return subtle.deriveBits({
              name: 'PBKDF2',
              salt: salt,
              iterations: iterations,
              hash: {
                name: algo
              }
            }, key, length << 3)
          }).then(function (res) {
            return Buffer.from(res)
          })
        }

        function resolvePromise(promise, callback) {
          promise.then(function (out) {
            getNextTick()(function () {
              callback(null, out)
            })
          }, function (e) {
            getNextTick()(function () {
              callback(e)
            })
          })
        }
        module.exports = function (password, salt, iterations, keylen, digest, callback) {
          if (typeof digest === 'function') {
            callback = digest
            digest = undefined
          }

          digest = digest || 'sha1'
          var algo = toBrowser[digest.toLowerCase()]

          if (!algo || typeof global.Promise !== 'function') {
            getNextTick()(function () {
              var out
              try {
                out = sync(password, salt, iterations, keylen, digest)
              } catch (e) {
                return callback(e)
              }
              callback(null, out)
            })
            return
          }

          checkParameters(iterations, keylen)
          password = toBuffer(password, defaultEncoding, 'Password')
          salt = toBuffer(salt, defaultEncoding, 'Salt')
          if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

          resolvePromise(checkNative(algo).then(function (resp) {
            if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

            return sync(password, salt, iterations, keylen, digest)
          }), callback)
        }

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "./default-encoding": 240, "./precondition": 241, "./sync": 242, "./to-buffer": 243, "safe-buffer": 286 }], 240: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        var defaultEncoding
        /* istanbul ignore next */
        if (global.process && global.process.browser) {
          defaultEncoding = 'utf-8'
        } else if (global.process && global.process.version) {
          var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

          defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
        } else {
          defaultEncoding = 'utf-8'
        }
        module.exports = defaultEncoding

      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "_process": 244 }], 241: [function (require, module, exports) {
    var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

    module.exports = function (iterations, keylen) {
      if (typeof iterations !== 'number') {
        throw new TypeError('Iterations not a number')
      }

      if (iterations < 0) {
        throw new TypeError('Bad iterations')
      }

      if (typeof keylen !== 'number') {
        throw new TypeError('Key length not a number')
      }

      if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
        throw new TypeError('Bad key length')
      }
    }

  }, {}], 242: [function (require, module, exports) {
    var md5 = require('create-hash/md5')
    var RIPEMD160 = require('ripemd160')
    var sha = require('sha.js')
    var Buffer = require('safe-buffer').Buffer

    var checkParameters = require('./precondition')
    var defaultEncoding = require('./default-encoding')
    var toBuffer = require('./to-buffer')

    var ZEROS = Buffer.alloc(128)
    var sizes = {
      md5: 16,
      sha1: 20,
      sha224: 28,
      sha256: 32,
      sha384: 48,
      sha512: 64,
      rmd160: 20,
      ripemd160: 20
    }

    function Hmac(alg, key, saltLen) {
      var hash = getDigest(alg)
      var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

      if (key.length > blocksize) {
        key = hash(key)
      } else if (key.length < blocksize) {
        key = Buffer.concat([key, ZEROS], blocksize)
      }

      var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
      var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
      for (var i = 0; i < blocksize; i++) {
        ipad[i] = key[i] ^ 0x36
        opad[i] = key[i] ^ 0x5C
      }

      var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
      ipad.copy(ipad1, 0, 0, blocksize)
      this.ipad1 = ipad1
      this.ipad2 = ipad
      this.opad = opad
      this.alg = alg
      this.blocksize = blocksize
      this.hash = hash
      this.size = sizes[alg]
    }

    Hmac.prototype.run = function (data, ipad) {
      data.copy(ipad, this.blocksize)
      var h = this.hash(ipad)
      h.copy(this.opad, this.blocksize)
      return this.hash(this.opad)
    }

    function getDigest(alg) {
      function shaFunc(data) {
        return sha(alg).update(data).digest()
      }
      function rmd160Func(data) {
        return new RIPEMD160().update(data).digest()
      }

      if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
      if (alg === 'md5') return md5
      return shaFunc
    }

    function pbkdf2(password, salt, iterations, keylen, digest) {
      checkParameters(iterations, keylen)
      password = toBuffer(password, defaultEncoding, 'Password')
      salt = toBuffer(salt, defaultEncoding, 'Salt')

      digest = digest || 'sha1'

      var hmac = new Hmac(digest, password, salt.length)

      var DK = Buffer.allocUnsafe(keylen)
      var block1 = Buffer.allocUnsafe(salt.length + 4)
      salt.copy(block1, 0, 0, salt.length)

      var destPos = 0
      var hLen = sizes[digest]
      var l = Math.ceil(keylen / hLen)

      for (var i = 1; i <= l; i++) {
        block1.writeUInt32BE(i, salt.length)

        var T = hmac.run(block1, hmac.ipad1)
        var U = T

        for (var j = 1; j < iterations; j++) {
          U = hmac.run(U, hmac.ipad2)
          for (var k = 0; k < hLen; k++) T[k] ^= U[k]
        }

        T.copy(DK, destPos)
        destPos += hLen
      }

      return DK
    }

    module.exports = pbkdf2

  }, { "./default-encoding": 240, "./precondition": 241, "./to-buffer": 243, "create-hash/md5": 129, "ripemd160": 285, "safe-buffer": 286, "sha.js": 289 }], 243: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer

    module.exports = function (thing, encoding, name) {
      if (Buffer.isBuffer(thing)) {
        return thing
      } else if (typeof thing === 'string') {
        return Buffer.from(thing, encoding)
      } else if (ArrayBuffer.isView(thing)) {
        return Buffer.from(thing.buffer)
      } else {
        throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
      }
    }

  }, { "safe-buffer": 286 }], 244: [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }
    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    }())
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }


    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() { }

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) { return [] }

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };
    process.umask = function () { return 0; };

  }, {}], 245: [function (require, module, exports) {
    exports.publicEncrypt = require('./publicEncrypt')
    exports.privateDecrypt = require('./privateDecrypt')

    exports.privateEncrypt = function privateEncrypt(key, buf) {
      return exports.publicEncrypt(key, buf, true)
    }

    exports.publicDecrypt = function publicDecrypt(key, buf) {
      return exports.privateDecrypt(key, buf, true)
    }

  }, { "./privateDecrypt": 247, "./publicEncrypt": 248 }], 246: [function (require, module, exports) {
    var createHash = require('create-hash')
    var Buffer = require('safe-buffer').Buffer

    module.exports = function (seed, len) {
      var t = Buffer.alloc(0)
      var i = 0
      var c
      while (t.length < len) {
        c = i2ops(i++)
        t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
      }
      return t.slice(0, len)
    }

    function i2ops(c) {
      var out = Buffer.allocUnsafe(4)
      out.writeUInt32BE(c, 0)
      return out
    }

  }, { "create-hash": 128, "safe-buffer": 286 }], 247: [function (require, module, exports) {
    var parseKeys = require('parse-asn1')
    var mgf = require('./mgf')
    var xor = require('./xor')
    var BN = require('bn.js')
    var crt = require('browserify-rsa')
    var createHash = require('create-hash')
    var withPublic = require('./withPublic')
    var Buffer = require('safe-buffer').Buffer

    module.exports = function privateDecrypt(privateKey, enc, reverse) {
      var padding
      if (privateKey.padding) {
        padding = privateKey.padding
      } else if (reverse) {
        padding = 1
      } else {
        padding = 4
      }

      var key = parseKeys(privateKey)
      var k = key.modulus.byteLength()
      if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
        throw new Error('decryption error')
      }
      var msg
      if (reverse) {
        msg = withPublic(new BN(enc), key)
      } else {
        msg = crt(enc, key)
      }
      var zBuffer = Buffer.alloc(k - msg.length)
      msg = Buffer.concat([zBuffer, msg], k)
      if (padding === 4) {
        return oaep(key, msg)
      } else if (padding === 1) {
        return pkcs1(key, msg, reverse)
      } else if (padding === 3) {
        return msg
      } else {
        throw new Error('unknown padding')
      }
    }

    function oaep(key, msg) {
      var k = key.modulus.byteLength()
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
      var hLen = iHash.length
      if (msg[0] !== 0) {
        throw new Error('decryption error')
      }
      var maskedSeed = msg.slice(1, hLen + 1)
      var maskedDb = msg.slice(hLen + 1)
      var seed = xor(maskedSeed, mgf(maskedDb, hLen))
      var db = xor(maskedDb, mgf(seed, k - hLen - 1))
      if (compare(iHash, db.slice(0, hLen))) {
        throw new Error('decryption error')
      }
      var i = hLen
      while (db[i] === 0) {
        i++
      }
      if (db[i++] !== 1) {
        throw new Error('decryption error')
      }
      return db.slice(i)
    }

    function pkcs1(key, msg, reverse) {
      var p1 = msg.slice(0, 2)
      var i = 2
      var status = 0
      while (msg[i++] !== 0) {
        if (i >= msg.length) {
          status++
          break
        }
      }
      var ps = msg.slice(2, i - 1)

      if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
        status++
      }
      if (ps.length < 8) {
        status++
      }
      if (status) {
        throw new Error('decryption error')
      }
      return msg.slice(i)
    }
    function compare(a, b) {
      a = Buffer.from(a)
      b = Buffer.from(b)
      var dif = 0
      var len = a.length
      if (a.length !== b.length) {
        dif++
        len = Math.min(a.length, b.length)
      }
      var i = -1
      while (++i < len) {
        dif += (a[i] ^ b[i])
      }
      return dif
    }

  }, { "./mgf": 246, "./withPublic": 249, "./xor": 250, "bn.js": 46, "browserify-rsa": 69, "create-hash": 128, "parse-asn1": 237, "safe-buffer": 286 }], 248: [function (require, module, exports) {
    var parseKeys = require('parse-asn1')
    var randomBytes = require('randombytes')
    var createHash = require('create-hash')
    var mgf = require('./mgf')
    var xor = require('./xor')
    var BN = require('bn.js')
    var withPublic = require('./withPublic')
    var crt = require('browserify-rsa')
    var Buffer = require('safe-buffer').Buffer

    module.exports = function publicEncrypt(publicKey, msg, reverse) {
      var padding
      if (publicKey.padding) {
        padding = publicKey.padding
      } else if (reverse) {
        padding = 1
      } else {
        padding = 4
      }
      var key = parseKeys(publicKey)
      var paddedMsg
      if (padding === 4) {
        paddedMsg = oaep(key, msg)
      } else if (padding === 1) {
        paddedMsg = pkcs1(key, msg, reverse)
      } else if (padding === 3) {
        paddedMsg = new BN(msg)
        if (paddedMsg.cmp(key.modulus) >= 0) {
          throw new Error('data too long for modulus')
        }
      } else {
        throw new Error('unknown padding')
      }
      if (reverse) {
        return crt(paddedMsg, key)
      } else {
        return withPublic(paddedMsg, key)
      }
    }

    function oaep(key, msg) {
      var k = key.modulus.byteLength()
      var mLen = msg.length
      var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
      var hLen = iHash.length
      var hLen2 = 2 * hLen
      if (mLen > k - hLen2 - 2) {
        throw new Error('message too long')
      }
      var ps = Buffer.alloc(k - mLen - hLen2 - 2)
      var dblen = k - hLen - 1
      var seed = randomBytes(hLen)
      var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
      var maskedSeed = xor(seed, mgf(maskedDb, hLen))
      return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
    }
    function pkcs1(key, msg, reverse) {
      var mLen = msg.length
      var k = key.modulus.byteLength()
      if (mLen > k - 11) {
        throw new Error('message too long')
      }
      var ps
      if (reverse) {
        ps = Buffer.alloc(k - mLen - 3, 0xff)
      } else {
        ps = nonZero(k - mLen - 3)
      }
      return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
    }
    function nonZero(len) {
      var out = Buffer.allocUnsafe(len)
      var i = 0
      var cache = randomBytes(len * 2)
      var cur = 0
      var num
      while (i < len) {
        if (cur === cache.length) {
          cache = randomBytes(len * 2)
          cur = 0
        }
        num = cache[cur++]
        if (num) {
          out[i++] = num
        }
      }
      return out
    }

  }, { "./mgf": 246, "./withPublic": 249, "./xor": 250, "bn.js": 46, "browserify-rsa": 69, "create-hash": 128, "parse-asn1": 237, "randombytes": 283, "safe-buffer": 286 }], 249: [function (require, module, exports) {
    var BN = require('bn.js')
    var Buffer = require('safe-buffer').Buffer

    function withPublic(paddedMsg, key) {
      return Buffer.from(paddedMsg
        .toRed(BN.mont(key.modulus))
        .redPow(new BN(key.publicExponent))
        .fromRed()
        .toArray())
    }

    module.exports = withPublic

  }, { "bn.js": 46, "safe-buffer": 286 }], 250: [function (require, module, exports) {
    module.exports = function xor(a, b) {
      var len = a.length
      var i = -1
      while (++i < len) {
        a[i] ^= b[i]
      }
      return a
    }

  }, {}], 251: [function (require, module, exports) {
    (function (global) {
      (function () {
        /*! https://mths.be/punycode v1.4.1 by @mathias */
        ; (function (root) {

          /** Detect free variables */
          var freeExports = typeof exports == 'object' && exports &&
            !exports.nodeType && exports;
          var freeModule = typeof module == 'object' && module &&
            !module.nodeType && module;
          var freeGlobal = typeof global == 'object' && global;
          if (
            freeGlobal.global === freeGlobal ||
            freeGlobal.window === freeGlobal ||
            freeGlobal.self === freeGlobal
          ) {
            root = freeGlobal;
          }

          /**
           * The `punycode` object.
           * @name punycode
           * @type Object
           */
          var punycode,

            /** Highest positive signed 32-bit float value */
            maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

            /** Bootstring parameters */
            base = 36,
            tMin = 1,
            tMax = 26,
            skew = 38,
            damp = 700,
            initialBias = 72,
            initialN = 128, // 0x80
            delimiter = '-', // '\x2D'

            /** Regular expressions */
            regexPunycode = /^xn--/,
            regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
            regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

            /** Error messages */
            errors = {
              'overflow': 'Overflow: input needs wider integers to process',
              'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
              'invalid-input': 'Invalid input'
            },

            /** Convenience shortcuts */
            baseMinusTMin = base - tMin,
            floor = Math.floor,
            stringFromCharCode = String.fromCharCode,

            /** Temporary variable */
            key;

          /*--------------------------------------------------------------------------*/

          /**
           * A generic error utility function.
           * @private
           * @param {String} type The error type.
           * @returns {Error} Throws a `RangeError` with the applicable error message.
           */
          function error(type) {
            throw new RangeError(errors[type]);
          }

          /**
           * A generic `Array#map` utility function.
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} callback The function that gets called for every array
           * item.
           * @returns {Array} A new array of values returned by the callback function.
           */
          function map(array, fn) {
            var length = array.length;
            var result = [];
            while (length--) {
              result[length] = fn(array[length]);
            }
            return result;
          }

          /**
           * A simple `Array#map`-like wrapper to work with domain name strings or email
           * addresses.
           * @private
           * @param {String} domain The domain name or email address.
           * @param {Function} callback The function that gets called for every
           * character.
           * @returns {Array} A new string of characters returned by the callback
           * function.
           */
          function mapDomain(string, fn) {
            var parts = string.split('@');
            var result = '';
            if (parts.length > 1) {
              // In email addresses, only the domain name should be punycoded. Leave
              // the local part (i.e. everything up to `@`) intact.
              result = parts[0] + '@';
              string = parts[1];
            }
            // Avoid `split(regex)` for IE8 compatibility. See #17.
            string = string.replace(regexSeparators, '\x2E');
            var labels = string.split('.');
            var encoded = map(labels, fn).join('.');
            return result + encoded;
          }

          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           * @see `punycode.ucs2.encode`
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode.ucs2
           * @name decode
           * @param {String} string The Unicode input string (UCS-2).
           * @returns {Array} The new array of code points.
           */
          function ucs2decode(string) {
            var output = [],
              counter = 0,
              length = string.length,
              value,
              extra;
            while (counter < length) {
              value = string.charCodeAt(counter++);
              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // unmatched surrogate; only append this code unit, in case the next
                  // code unit is the high surrogate of a surrogate pair
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }
            return output;
          }

          /**
           * Creates a string based on an array of numeric code points.
           * @see `punycode.ucs2.decode`
           * @memberOf punycode.ucs2
           * @name encode
           * @param {Array} codePoints The array of numeric code points.
           * @returns {String} The new Unicode string (UCS-2).
           */
          function ucs2encode(array) {
            return map(array, function (value) {
              var output = '';
              if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
              }
              output += stringFromCharCode(value);
              return output;
            }).join('');
          }

          /**
           * Converts a basic code point into a digit/integer.
           * @see `digitToBasic()`
           * @private
           * @param {Number} codePoint The basic numeric code point value.
           * @returns {Number} The numeric value of a basic code point (for use in
           * representing integers) in the range `0` to `base - 1`, or `base` if
           * the code point does not represent a value.
           */
          function basicToDigit(codePoint) {
            if (codePoint - 48 < 10) {
              return codePoint - 22;
            }
            if (codePoint - 65 < 26) {
              return codePoint - 65;
            }
            if (codePoint - 97 < 26) {
              return codePoint - 97;
            }
            return base;
          }

          /**
           * Converts a digit/integer into a basic code point.
           * @see `basicToDigit()`
           * @private
           * @param {Number} digit The numeric value of a basic code point.
           * @returns {Number} The basic code point whose value (when used for
           * representing integers) is `digit`, which needs to be in the range
           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
           * used; else, the lowercase form is used. The behavior is undefined
           * if `flag` is non-zero and `digit` has no uppercase form.
           */
          function digitToBasic(digit, flag) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
          }

          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           * @private
           */
          function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          }

          /**
           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
           * symbols.
           * @memberOf punycode
           * @param {String} input The Punycode string of ASCII-only symbols.
           * @returns {String} The resulting string of Unicode symbols.
           */
          function decode(input) {
            // Don't use UCS-2
            var output = [],
              inputLength = input.length,
              out,
              i = 0,
              n = initialN,
              bias = initialBias,
              basic,
              j,
              index,
              oldi,
              w,
              k,
              digit,
              t,
              /** Cached calculation results */
              baseMinusT;

            // Handle the basic code points: let `basic` be the number of input code
            // points before the last delimiter, or `0` if there is none, then copy
            // the first basic code points to the output.

            basic = input.lastIndexOf(delimiter);
            if (basic < 0) {
              basic = 0;
            }

            for (j = 0; j < basic; ++j) {
              // if it's not a basic code point
              if (input.charCodeAt(j) >= 0x80) {
                error('not-basic');
              }
              output.push(input.charCodeAt(j));
            }

            // Main decoding loop: start just after the last delimiter if any basic code
            // points were copied; start at the beginning otherwise.

            for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

              // `index` is the index of the next character to be consumed.
              // Decode a generalized variable-length integer into `delta`,
              // which gets added to `i`. The overflow checking is easier
              // if we increase `i` as we go, then subtract off its starting
              // value at the end to obtain `delta`.
              for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

                if (index >= inputLength) {
                  error('invalid-input');
                }

                digit = basicToDigit(input.charCodeAt(index++));

                if (digit >= base || digit > floor((maxInt - i) / w)) {
                  error('overflow');
                }

                i += digit * w;
                t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                if (digit < t) {
                  break;
                }

                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) {
                  error('overflow');
                }

                w *= baseMinusT;

              }

              out = output.length + 1;
              bias = adapt(i - oldi, out, oldi == 0);

              // `i` was supposed to wrap around from `out` to `0`,
              // incrementing `n` each time, so we'll fix that now:
              if (floor(i / out) > maxInt - n) {
                error('overflow');
              }

              n += floor(i / out);
              i %= out;

              // Insert `n` at position `i` of the output
              output.splice(i++, 0, n);

            }

            return ucs2encode(output);
          }

          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           * @memberOf punycode
           * @param {String} input The string of Unicode symbols.
           * @returns {String} The resulting Punycode string of ASCII-only symbols.
           */
          function encode(input) {
            var n,
              delta,
              handledCPCount,
              basicLength,
              bias,
              j,
              m,
              q,
              k,
              t,
              currentValue,
              output = [],
              /** `inputLength` will hold the number of code points in `input`. */
              inputLength,
              /** Cached calculation results */
              handledCPCountPlusOne,
              baseMinusT,
              qMinusT;

            // Convert the input in UCS-2 to Unicode
            input = ucs2decode(input);

            // Cache the length
            inputLength = input.length;

            // Initialize the state
            n = initialN;
            delta = 0;
            bias = initialBias;

            // Handle the basic code points
            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            handledCPCount = basicLength = output.length;

            // `handledCPCount` is the number of code points that have been handled;
            // `basicLength` is the number of basic code points.

            // Finish the basic string - if it is not empty - with a delimiter
            if (basicLength) {
              output.push(delimiter);
            }

            // Main encoding loop:
            while (handledCPCount < inputLength) {

              // All non-basic code points < n have been handled already. Find the next
              // larger one:
              for (m = maxInt, j = 0; j < inputLength; ++j) {
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }

              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
              // but guard against overflow
              handledCPCountPlusOne = handledCPCount + 1;
              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                error('overflow');
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (j = 0; j < inputLength; ++j) {
                currentValue = input[j];

                if (currentValue < n && ++delta > maxInt) {
                  error('overflow');
                }

                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer
                  for (q = delta, k = base; /* no condition */; k += base) {
                    t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                    if (q < t) {
                      break;
                    }
                    qMinusT = q - t;
                    baseMinusT = base - t;
                    output.push(
                      stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                    );
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;

            }
            return output.join('');
          }

          /**
           * Converts a Punycode string representing a domain name or an email address
           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
           * it doesn't matter if you call it on a string that has already been
           * converted to Unicode.
           * @memberOf punycode
           * @param {String} input The Punycoded domain name or email address to
           * convert to Unicode.
           * @returns {String} The Unicode representation of the given Punycode
           * string.
           */
          function toUnicode(input) {
            return mapDomain(input, function (string) {
              return regexPunycode.test(string)
                ? decode(string.slice(4).toLowerCase())
                : string;
            });
          }

          /**
           * Converts a Unicode string representing a domain name or an email address to
           * Punycode. Only the non-ASCII parts of the domain name will be converted,
           * i.e. it doesn't matter if you call it with a domain that's already in
           * ASCII.
           * @memberOf punycode
           * @param {String} input The domain name or email address to convert, as a
           * Unicode string.
           * @returns {String} The Punycode representation of the given domain name or
           * email address.
           */
          function toASCII(input) {
            return mapDomain(input, function (string) {
              return regexNonASCII.test(string)
                ? 'xn--' + encode(string)
                : string;
            });
          }

          /*--------------------------------------------------------------------------*/

          /** Define the public API */
          punycode = {
            /**
             * A string representing the current Punycode.js version number.
             * @memberOf punycode
             * @type String
             */
            'version': '1.4.1',
            /**
             * An object of methods to convert from JavaScript's internal character
             * representation (UCS-2) to Unicode code points, and back.
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode
             * @type Object
             */
            'ucs2': {
              'decode': ucs2decode,
              'encode': ucs2encode
            },
            'decode': decode,
            'encode': encode,
            'toASCII': toASCII,
            'toUnicode': toUnicode
          };

          /** Expose `punycode` */
          // Some AMD build optimizers, like r.js, check for specific condition patterns
          // like the following:
          if (
            typeof define == 'function' &&
            typeof define.amd == 'object' &&
            define.amd
          ) {
            define('punycode', function () {
              return punycode;
            });
          } else if (freeExports && freeModule) {
            if (module.exports == freeExports) {
              // in Node.js, io.js, or RingoJS v0.8.0+
              freeModule.exports = punycode;
            } else {
              // in Narwhal or RingoJS v0.7.0-
              for (key in punycode) {
                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
              }
            }
          } else {
            // in Rhino or a web browser
            root.punycode = punycode;
          }

        }(this));

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, {}], 252: [function (require, module, exports) {
    'use strict'; (function (e, a) { "object" === typeof exports && "undefined" !== typeof module ? module.exports = a() : "function" === typeof define && define.amd ? define(a) : (e = "undefined" !== typeof globalThis ? globalThis : e || self, e.QrScanner = a()) })(this, function () {
      class e {
        constructor(a, b, c, d, f) {
          this._legacyCanvasSize = e.DEFAULT_CANVAS_SIZE; this._preferredCamera = "environment"; this._maxScansPerSecond = 25; this._lastScanTimestamp = -1; this._destroyed = this._flashOn = this._paused = this._active = !1; this.$video = a; this.$canvas = document.createElement("canvas");
          c && "object" === typeof c ? this._onDecode = b : (c || d || f ? console.warn("You're using a deprecated version of the QrScanner constructor which will be removed in the future") : console.warn("Note that the type of the scan result passed to onDecode will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true."), this._legacyOnDecode = b); b = "object" === typeof c ? c : {}; this._onDecodeError = b.onDecodeError || ("function" === typeof c ? c : this._onDecodeError); this._calculateScanRegion =
            b.calculateScanRegion || ("function" === typeof d ? d : this._calculateScanRegion); this._preferredCamera = b.preferredCamera || f || this._preferredCamera; this._legacyCanvasSize = "number" === typeof c ? c : "number" === typeof d ? d : this._legacyCanvasSize; this._maxScansPerSecond = b.maxScansPerSecond || this._maxScansPerSecond; this._onPlay = this._onPlay.bind(this); this._onLoadedMetaData = this._onLoadedMetaData.bind(this); this._onVisibilityChange = this._onVisibilityChange.bind(this); this._updateOverlay = this._updateOverlay.bind(this);
          a.disablePictureInPicture = !0; a.playsInline = !0; a.muted = !0; let h = !1; a.hidden && (a.hidden = !1, h = !0); document.body.contains(a) || (document.body.appendChild(a), h = !0); c = a.parentElement; if (b.highlightScanRegion || b.highlightCodeOutline) {
            d = !!b.overlay; this.$overlay = b.overlay || document.createElement("div"); f = this.$overlay.style; f.position = "absolute"; f.display = "none"; f.pointerEvents = "none"; this.$overlay.classList.add("scan-region-highlight"); if (!d && b.highlightScanRegion) {
              this.$overlay.innerHTML = '<svg class="scan-region-highlight-svg" viewBox="0 0 238 238" preserveAspectRatio="none" style="position:absolute;width:100%;height:100%;left:0;top:0;fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round"><path d="M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 0H10a8 8 0 0 1-8-8v-21"/></svg>';
              try { this.$overlay.firstElementChild.animate({ transform: ["scale(.98)", "scale(1.01)"] }, { duration: 400, iterations: Infinity, direction: "alternate", easing: "ease-in-out" }) } catch (m) { } c.insertBefore(this.$overlay, this.$video.nextSibling)
            } b.highlightCodeOutline && (this.$overlay.insertAdjacentHTML("beforeend", '<svg class="code-outline-highlight" preserveAspectRatio="none" style="display:none;width:100%;height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;stroke-linecap:round;stroke-linejoin:round"><polygon/></svg>'),
              this.$codeOutlineHighlight = this.$overlay.lastElementChild)
          } this._scanRegion = this._calculateScanRegion(a); requestAnimationFrame(() => {
            let m = window.getComputedStyle(a); "none" === m.display && (a.style.setProperty("display", "block", "important"), h = !0); "visible" !== m.visibility && (a.style.setProperty("visibility", "visible", "important"), h = !0); h && (console.warn("QrScanner has overwritten the video hiding style to avoid Safari stopping the playback."), a.style.opacity = "0", a.style.width = "0", a.style.height = "0", this.$overlay &&
              this.$overlay.parentElement && this.$overlay.parentElement.removeChild(this.$overlay), delete this.$overlay, delete this.$codeOutlineHighlight); this.$overlay && this._updateOverlay()
          }); a.addEventListener("play", this._onPlay); a.addEventListener("loadedmetadata", this._onLoadedMetaData); document.addEventListener("visibilitychange", this._onVisibilityChange); window.addEventListener("resize", this._updateOverlay); this._qrEnginePromise = e.createQrEngine()
        } static set WORKER_PATH(a) { console.warn("Setting QrScanner.WORKER_PATH is not required and not supported anymore. Have a look at the README for new setup instructions.") } static async hasCamera() { try { return !!(await e.listCameras(!1)).length } catch (a) { return !1 } } static async listCameras(a =
          !1) { if (!navigator.mediaDevices) return []; let b = async () => (await navigator.mediaDevices.enumerateDevices()).filter(d => "videoinput" === d.kind), c; try { a && (await b()).every(d => !d.label) && (c = await navigator.mediaDevices.getUserMedia({ audio: !1, video: !0 })) } catch (d) { } try { return (await b()).map((d, f) => ({ id: d.deviceId, label: d.label || (0 === f ? "Default Camera" : `Camera ${f + 1}`) })) } finally { c && (console.warn("Call listCameras after successfully starting a QR scanner to avoid creating a temporary video stream"), e._stopVideoStream(c)) } } async hasFlash() {
            let a;
            try { if (this.$video.srcObject) { if (!(this.$video.srcObject instanceof MediaStream)) return !1; a = this.$video.srcObject } else a = (await this._getCameraStream()).stream; return "torch" in a.getVideoTracks()[0].getSettings() } catch (b) { return !1 } finally { a && a !== this.$video.srcObject && (console.warn("Call hasFlash after successfully starting the scanner to avoid creating a temporary video stream"), e._stopVideoStream(a)) }
          } isFlashOn() { return this._flashOn } async toggleFlash() { this._flashOn ? await this.turnFlashOff() : await this.turnFlashOn() } async turnFlashOn() {
            if (!this._flashOn &&
              !this._destroyed && (this._flashOn = !0, this._active && !this._paused)) try { if (!await this.hasFlash()) throw "No flash available"; await this.$video.srcObject.getVideoTracks()[0].applyConstraints({ advanced: [{ torch: !0 }] }) } catch (a) { throw this._flashOn = !1, a; }
          } async turnFlashOff() { this._flashOn && (this._flashOn = !1, await this._restartVideoStream()) } destroy() {
            this.$video.removeEventListener("loadedmetadata", this._onLoadedMetaData); this.$video.removeEventListener("play", this._onPlay); document.removeEventListener("visibilitychange",
              this._onVisibilityChange); window.removeEventListener("resize", this._updateOverlay); this._destroyed = !0; this._flashOn = !1; this.stop(); e._postWorkerMessage(this._qrEnginePromise, "close")
          } async start() {
            if (this._destroyed) throw Error("The QR scanner can not be started as it had been destroyed."); if (!this._active || this._paused) if ("https:" !== window.location.protocol && console.warn("The camera stream is only accessible if the page is transferred via https."), this._active = !0, !document.hidden) if (this._paused =
              !1, this.$video.srcObject) await this.$video.play(); else try { let { stream: a, facingMode: b } = await this._getCameraStream(); !this._active || this._paused ? e._stopVideoStream(a) : (this._setVideoMirror(b), this.$video.srcObject = a, await this.$video.play(), this._flashOn && (this._flashOn = !1, this.turnFlashOn().catch(() => { }))) } catch (a) { if (!this._paused) throw this._active = !1, a; }
          } stop() { this.pause(); this._active = !1 } async pause(a = !1) {
            this._paused = !0; if (!this._active) return !0; this.$video.pause(); this.$overlay && (this.$overlay.style.display =
              "none"); let b = () => { this.$video.srcObject instanceof MediaStream && (e._stopVideoStream(this.$video.srcObject), this.$video.srcObject = null) }; if (a) return b(), !0; await new Promise(c => setTimeout(c, 300)); if (!this._paused) return !1; b(); return !0
          } async setCamera(a) { a !== this._preferredCamera && (this._preferredCamera = a, await this._restartVideoStream()) } static async scanImage(a, b, c, d, f = !1, h = !1) {
            let m, n = !1; b && ("scanRegion" in b || "qrEngine" in b || "canvas" in b || "disallowCanvasResizing" in b || "alsoTryWithoutScanRegion" in
              b || "returnDetailedScanResult" in b) ? (m = b.scanRegion, c = b.qrEngine, d = b.canvas, f = b.disallowCanvasResizing || !1, h = b.alsoTryWithoutScanRegion || !1, n = !0) : b || c || d || f || h ? console.warn("You're using a deprecated api for scanImage which will be removed in the future.") : console.warn("Note that the return type of scanImage will change in the future. To already switch to the new api today, you can pass returnDetailedScanResult: true."); b = !!c; try {
                let p, k;[c, p] = await Promise.all([c || e.createQrEngine(), e._loadImage(a)]);
                [d, k] = e._drawToCanvas(p, m, d, f); let q; if (c instanceof Worker) {
                  let g = c; b || e._postWorkerMessageSync(g, "inversionMode", "both"); q = await new Promise((l, v) => {
                    let w, u, r, y = -1; u = t => { t.data.id === y && (g.removeEventListener("message", u), g.removeEventListener("error", r), clearTimeout(w), null !== t.data.data ? l({ data: t.data.data, cornerPoints: e._convertPoints(t.data.cornerPoints, m) }) : v(e.NO_QR_CODE_FOUND)) }; r = t => {
                      g.removeEventListener("message", u); g.removeEventListener("error", r); clearTimeout(w); v("Scanner error: " + (t ?
                        t.message || t : "Unknown Error"))
                    }; g.addEventListener("message", u); g.addEventListener("error", r); w = setTimeout(() => r("timeout"), 1E4); let x = k.getImageData(0, 0, d.width, d.height); y = e._postWorkerMessageSync(g, "decode", x, [x.data.buffer])
                  })
                } else q = await Promise.race([new Promise((g, l) => window.setTimeout(() => l("Scanner error: timeout"), 1E4)), (async () => {
                  try { var [g] = await c.detect(d); if (!g) throw e.NO_QR_CODE_FOUND; return { data: g.rawValue, cornerPoints: e._convertPoints(g.cornerPoints, m) } } catch (l) {
                    g = l.message || l;
                    if (/not implemented|service unavailable/.test(g)) return e._disableBarcodeDetector = !0, e.scanImage(a, { scanRegion: m, canvas: d, disallowCanvasResizing: f, alsoTryWithoutScanRegion: h }); throw `Scanner error: ${g}`;
                  }
                })()]); return n ? q : q.data
              } catch (p) { if (!m || !h) throw p; let k = await e.scanImage(a, { qrEngine: c, canvas: d, disallowCanvasResizing: f }); return n ? k : k.data } finally { b || e._postWorkerMessage(c, "close") }
          } setGrayscaleWeights(a, b, c, d = !0) {
            e._postWorkerMessage(this._qrEnginePromise, "grayscaleWeights", {
              red: a, green: b,
              blue: c, useIntegerApproximation: d
            })
          } setInversionMode(a) { e._postWorkerMessage(this._qrEnginePromise, "inversionMode", a) } static async createQrEngine(a) { a && console.warn("Specifying a worker path is not required and not supported anymore."); return !e._disableBarcodeDetector && "BarcodeDetector" in window && BarcodeDetector.getSupportedFormats && (await BarcodeDetector.getSupportedFormats()).includes("qr_code") ? new BarcodeDetector({ formats: ["qr_code"] }) : import("./qr-scanner-worker.min.js").then(b => b.worker) } _onPlay() {
            this._scanRegion =
              this._calculateScanRegion(this.$video); this._updateOverlay(); this.$overlay && (this.$overlay.style.display = ""); this._scanFrame()
          } _onLoadedMetaData() { this._scanRegion = this._calculateScanRegion(this.$video); this._updateOverlay() } _onVisibilityChange() { document.hidden ? this.pause() : this._active && this.start() } _calculateScanRegion(a) {
            let b = Math.round(2 / 3 * Math.min(a.videoWidth, a.videoHeight)); return {
              x: Math.round((a.videoWidth - b) / 2), y: Math.round((a.videoHeight - b) / 2), width: b, height: b, downScaledWidth: this._legacyCanvasSize,
              downScaledHeight: this._legacyCanvasSize
            }
          } _updateOverlay() {
            requestAnimationFrame(() => {
              if (this.$overlay) {
                var a = this.$video, b = a.videoWidth, c = a.videoHeight, d = a.offsetWidth, f = a.offsetHeight, h = a.offsetLeft, m = a.offsetTop, n = window.getComputedStyle(a), p = n.objectFit, k = b / c, q = d / f; switch (p) { case "none": var g = b; var l = c; break; case "fill": g = d; l = f; break; default: ("cover" === p ? k > q : k < q) ? (l = f, g = l * k) : (g = d, l = g / k), "scale-down" === p && (g = Math.min(g, b), l = Math.min(l, c)) }var [v, w] = n.objectPosition.split(" ").map((r, y) => {
                  const x =
                    parseFloat(r); return r.endsWith("%") ? (y ? f - l : d - g) * x / 100 : x
                }); n = this._scanRegion.width || b; q = this._scanRegion.height || c; p = this._scanRegion.x || 0; var u = this._scanRegion.y || 0; k = this.$overlay.style; k.width = `${n / b * g}px`; k.height = `${q / c * l}px`; k.top = `${m + w + u / c * l}px`; c = /scaleX\(-1\)/.test(a.style.transform); k.left = `${h + (c ? d - v - g : v) + (c ? b - p - n : p) / b * g}px`; k.transform = a.style.transform
              }
            })
          } static _convertPoints(a, b) {
            if (!b) return a; let c = b.x || 0, d = b.y || 0, f = b.width && b.downScaledWidth ? b.width / b.downScaledWidth : 1; b = b.height &&
              b.downScaledHeight ? b.height / b.downScaledHeight : 1; for (let h of a) h.x = h.x * f + c, h.y = h.y * b + d; return a
          } _scanFrame() {
            !this._active || this.$video.paused || this.$video.ended || ("requestVideoFrameCallback" in this.$video ? this.$video.requestVideoFrameCallback.bind(this.$video) : requestAnimationFrame)(async () => {
              if (!(1 >= this.$video.readyState)) {
                var a = Date.now() - this._lastScanTimestamp, b = 1E3 / this._maxScansPerSecond; a < b && await new Promise(d => setTimeout(d, b - a)); this._lastScanTimestamp = Date.now(); try {
                  var c = await e.scanImage(this.$video,
                    { scanRegion: this._scanRegion, qrEngine: this._qrEnginePromise, canvas: this.$canvas })
                } catch (d) { if (!this._active) return; this._onDecodeError(d) } !e._disableBarcodeDetector || await this._qrEnginePromise instanceof Worker || (this._qrEnginePromise = e.createQrEngine()); c ? (this._onDecode ? this._onDecode(c) : this._legacyOnDecode && this._legacyOnDecode(c.data), this.$codeOutlineHighlight && (clearTimeout(this._codeOutlineHighlightRemovalTimeout), this._codeOutlineHighlightRemovalTimeout = void 0, this.$codeOutlineHighlight.setAttribute("viewBox",
                  `${this._scanRegion.x || 0} ` + `${this._scanRegion.y || 0} ` + `${this._scanRegion.width || this.$video.videoWidth} ` + `${this._scanRegion.height || this.$video.videoHeight}`), this.$codeOutlineHighlight.firstElementChild.setAttribute("points", c.cornerPoints.map(({ x: d, y: f }) => `${d},${f}`).join(" ")), this.$codeOutlineHighlight.style.display = "")) : this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout && (this._codeOutlineHighlightRemovalTimeout = setTimeout(() => this.$codeOutlineHighlight.style.display =
                    "none", 100))
              } this._scanFrame()
            })
          } _onDecodeError(a) { a !== e.NO_QR_CODE_FOUND && console.log(a) } async _getCameraStream() {
            if (!navigator.mediaDevices) throw "Camera not found."; let a = /^(environment|user)$/.test(this._preferredCamera) ? "facingMode" : "deviceId", b = [{ width: { min: 1024 } }, { width: { min: 768 } }, {}], c = b.map(d => Object.assign({}, d, { [a]: { exact: this._preferredCamera } })); for (let d of [...c, ...b]) try {
              let f = await navigator.mediaDevices.getUserMedia({ video: d, audio: !1 }), h = this._getFacingMode(f) || (d.facingMode ? this._preferredCamera :
                "environment" === this._preferredCamera ? "user" : "environment"); return { stream: f, facingMode: h }
            } catch (f) { } throw "Camera not found.";
          } async _restartVideoStream() { let a = this._paused; await this.pause(!0) && !a && this._active && await this.start() } static _stopVideoStream(a) { for (let b of a.getTracks()) b.stop(), a.removeTrack(b) } _setVideoMirror(a) { this.$video.style.transform = "scaleX(" + ("user" === a ? -1 : 1) + ")" } _getFacingMode(a) {
            return (a = a.getVideoTracks()[0]) ? /rear|back|environment/i.test(a.label) ? "environment" : /front|user|face/i.test(a.label) ?
              "user" : null : null
          } static _drawToCanvas(a, b, c, d = !1) { c = c || document.createElement("canvas"); let f = b && b.x ? b.x : 0, h = b && b.y ? b.y : 0, m = b && b.width ? b.width : a.videoWidth || a.width, n = b && b.height ? b.height : a.videoHeight || a.height; d || (d = b && b.downScaledWidth ? b.downScaledWidth : m, b = b && b.downScaledHeight ? b.downScaledHeight : n, c.width !== d && (c.width = d), c.height !== b && (c.height = b)); b = c.getContext("2d", { alpha: !1 }); b.imageSmoothingEnabled = !1; b.drawImage(a, f, h, m, n, 0, 0, c.width, c.height); return [c, b] } static async _loadImage(a) {
            if (a instanceof
              Image) return await e._awaitImageLoad(a), a; if (a instanceof HTMLVideoElement || a instanceof HTMLCanvasElement || a instanceof SVGImageElement || "OffscreenCanvas" in window && a instanceof OffscreenCanvas || "ImageBitmap" in window && a instanceof ImageBitmap) return a; if (a instanceof File || a instanceof Blob || a instanceof URL || "string" === typeof a) {
                let b = new Image; b.src = a instanceof File || a instanceof Blob ? URL.createObjectURL(a) : a.toString(); try { return await e._awaitImageLoad(b), b } finally {
                  (a instanceof File || a instanceof
                    Blob) && URL.revokeObjectURL(b.src)
                }
              } else throw "Unsupported image type.";
          } static async _awaitImageLoad(a) { a.complete && 0 !== a.naturalWidth || await new Promise((b, c) => { let d = f => { a.removeEventListener("load", d); a.removeEventListener("error", d); f instanceof ErrorEvent ? c("Image load error") : b() }; a.addEventListener("load", d); a.addEventListener("error", d) }) } static async _postWorkerMessage(a, b, c, d) { return e._postWorkerMessageSync(await a, b, c, d) } static _postWorkerMessageSync(a, b, c, d) {
            if (!(a instanceof Worker)) return -1;
            let f = e._workerMessageId++; a.postMessage({ id: f, type: b, data: c }, d); return f
          }
      } e.DEFAULT_CANVAS_SIZE = 400; e.NO_QR_CODE_FOUND = "No QR code found"; e._disableBarcodeDetector = !1; e._workerMessageId = 0; return e
    })


  }, {}], 253: [function (require, module, exports) {

    const canPromise = require('./can-promise')

    const QRCode = require('./core/qrcode')
    const CanvasRenderer = require('./renderer/canvas')
    const SvgRenderer = require('./renderer/svg-tag.js')

    function renderCanvas(renderFunc, canvas, text, opts, cb) {
      const args = [].slice.call(arguments, 1)
      const argsNum = args.length
      const isLastArgCb = typeof args[argsNum - 1] === 'function'

      if (!isLastArgCb && !canPromise()) {
        throw new Error('Callback required as last argument')
      }

      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error('Too few arguments provided')
        }

        if (argsNum === 2) {
          cb = text
          text = canvas
          canvas = opts = undefined
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === 'undefined') {
            cb = opts
            opts = undefined
          } else {
            cb = opts
            opts = text
            text = canvas
            canvas = undefined
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error('Too few arguments provided')
        }

        if (argsNum === 1) {
          text = canvas
          canvas = opts = undefined
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text
          text = canvas
          canvas = undefined
        }

        return new Promise(function (resolve, reject) {
          try {
            const data = QRCode.create(text, opts)
            resolve(renderFunc(data, canvas, opts))
          } catch (e) {
            reject(e)
          }
        })
      }

      try {
        const data = QRCode.create(text, opts)
        cb(null, renderFunc(data, canvas, opts))
      } catch (e) {
        cb(e)
      }
    }

    exports.create = QRCode.create
    exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render)
    exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL)

    // only svg for now.
    exports.toString = renderCanvas.bind(null, function (data, _, opts) {
      return SvgRenderer.render(data, opts)
    })

  }, { "./can-promise": 254, "./core/qrcode": 270, "./renderer/canvas": 277, "./renderer/svg-tag.js": 278 }], 254: [function (require, module, exports) {
    // can-promise has a crash in some versions of react native that dont have
    // standard global objects
    // https://github.com/soldair/node-qrcode/issues/157

    module.exports = function () {
      return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then
    }

  }, {}], 255: [function (require, module, exports) {
    /**
     * Alignment pattern are fixed reference pattern in defined positions
     * in a matrix symbology, which enables the decode software to re-synchronise
     * the coordinate mapping of the image modules in the event of moderate amounts
     * of distortion of the image.
     *
     * Alignment patterns are present only in QR Code symbols of version 2 or larger
     * and their number depends on the symbol version.
     */

    const getSymbolSize = require('./utils').getSymbolSize

    /**
     * Calculate the row/column coordinates of the center module of each alignment pattern
     * for the specified QR Code version.
     *
     * The alignment patterns are positioned symmetrically on either side of the diagonal
     * running from the top left corner of the symbol to the bottom right corner.
     *
     * Since positions are simmetrical only half of the coordinates are returned.
     * Each item of the array will represent in turn the x and y coordinate.
     * @see {@link getPositions}
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinate
     */
    exports.getRowColCoords = function getRowColCoords(version) {
      if (version === 1) return []

      const posCount = Math.floor(version / 7) + 2
      const size = getSymbolSize(version)
      const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2
      const positions = [size - 7] // Last coord is always (size - 7)

      for (let i = 1; i < posCount - 1; i++) {
        positions[i] = positions[i - 1] - intervals
      }

      positions.push(6) // First coord is always 6

      return positions.reverse()
    }

    /**
     * Returns an array containing the positions of each alignment pattern.
     * Each array's element represent the center point of the pattern as (x, y) coordinates
     *
     * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
     * and filtering out the items that overlaps with finder pattern
     *
     * @example
     * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
     * The alignment patterns, therefore, are to be centered on (row, column)
     * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
     * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
     * and are not therefore used for alignment patterns.
     *
     * let pos = getPositions(7)
     * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    exports.getPositions = function getPositions(version) {
      const coords = []
      const pos = exports.getRowColCoords(version)
      const posLength = pos.length

      for (let i = 0; i < posLength; i++) {
        for (let j = 0; j < posLength; j++) {
          // Skip if position is occupied by finder patterns
          if ((i === 0 && j === 0) || // top-left
            (i === 0 && j === posLength - 1) || // bottom-left
            (i === posLength - 1 && j === 0)) { // top-right
            continue
          }

          coords.push([pos[i], pos[j]])
        }
      }

      return coords
    }

  }, { "./utils": 274 }], 256: [function (require, module, exports) {
    const Mode = require('./mode')

    /**
     * Array of characters available in alphanumeric mode
     *
     * As per QR Code specification, to each character
     * is assigned a value from 0 to 44 which in this case coincides
     * with the array index
     *
     * @type {Array}
     */
    const ALPHA_NUM_CHARS = [
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
      'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      ' ', '$', '%', '*', '+', '-', '.', '/', ':'
    ]

    function AlphanumericData(data) {
      this.mode = Mode.ALPHANUMERIC
      this.data = data
    }

    AlphanumericData.getBitsLength = function getBitsLength(length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2)
    }

    AlphanumericData.prototype.getLength = function getLength() {
      return this.data.length
    }

    AlphanumericData.prototype.getBitsLength = function getBitsLength() {
      return AlphanumericData.getBitsLength(this.data.length)
    }

    AlphanumericData.prototype.write = function write(bitBuffer) {
      let i

      // Input data characters are divided into groups of two characters
      // and encoded as 11-bit binary codes.
      for (i = 0; i + 2 <= this.data.length; i += 2) {
        // The character value of the first character is multiplied by 45
        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45

        // The character value of the second digit is added to the product
        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1])

        // The sum is then stored as 11-bit binary number
        bitBuffer.put(value, 11)
      }

      // If the number of input data characters is not a multiple of two,
      // the character value of the final character is encoded as a 6-bit binary number.
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6)
      }
    }

    module.exports = AlphanumericData

  }, { "./mode": 267 }], 257: [function (require, module, exports) {
    function BitBuffer() {
      this.buffer = []
      this.length = 0
    }

    BitBuffer.prototype = {

      get: function (index) {
        const bufIndex = Math.floor(index / 8)
        return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) === 1
      },

      put: function (num, length) {
        for (let i = 0; i < length; i++) {
          this.putBit(((num >>> (length - i - 1)) & 1) === 1)
        }
      },

      getLengthInBits: function () {
        return this.length
      },

      putBit: function (bit) {
        const bufIndex = Math.floor(this.length / 8)
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0)
        }

        if (bit) {
          this.buffer[bufIndex] |= (0x80 >>> (this.length % 8))
        }

        this.length++
      }
    }

    module.exports = BitBuffer

  }, {}], 258: [function (require, module, exports) {
    /**
     * Helper class to handle QR Code symbol modules
     *
     * @param {Number} size Symbol size
     */
    function BitMatrix(size) {
      if (!size || size < 1) {
        throw new Error('BitMatrix size must be defined and greater than 0')
      }

      this.size = size
      this.data = new Uint8Array(size * size)
      this.reservedBit = new Uint8Array(size * size)
    }

    /**
     * Set bit value at specified location
     * If reserved flag is set, this bit will be ignored during masking process
     *
     * @param {Number}  row
     * @param {Number}  col
     * @param {Boolean} value
     * @param {Boolean} reserved
     */
    BitMatrix.prototype.set = function (row, col, value, reserved) {
      const index = row * this.size + col
      this.data[index] = value
      if (reserved) this.reservedBit[index] = true
    }

    /**
     * Returns bit value at specified location
     *
     * @param  {Number}  row
     * @param  {Number}  col
     * @return {Boolean}
     */
    BitMatrix.prototype.get = function (row, col) {
      return this.data[row * this.size + col]
    }

    /**
     * Applies xor operator at specified location
     * (used during masking process)
     *
     * @param {Number}  row
     * @param {Number}  col
     * @param {Boolean} value
     */
    BitMatrix.prototype.xor = function (row, col, value) {
      this.data[row * this.size + col] ^= value
    }

    /**
     * Check if bit at specified location is reserved
     *
     * @param {Number}   row
     * @param {Number}   col
     * @return {Boolean}
     */
    BitMatrix.prototype.isReserved = function (row, col) {
      return this.reservedBit[row * this.size + col]
    }

    module.exports = BitMatrix

  }, {}], 259: [function (require, module, exports) {
    const encodeUtf8 = require('encode-utf8')
    const Mode = require('./mode')

    function ByteData(data) {
      this.mode = Mode.BYTE
      this.data = new Uint8Array(encodeUtf8(data))
    }

    ByteData.getBitsLength = function getBitsLength(length) {
      return length * 8
    }

    ByteData.prototype.getLength = function getLength() {
      return this.data.length
    }

    ByteData.prototype.getBitsLength = function getBitsLength() {
      return ByteData.getBitsLength(this.data.length)
    }

    ByteData.prototype.write = function (bitBuffer) {
      for (let i = 0, l = this.data.length; i < l; i++) {
        bitBuffer.put(this.data[i], 8)
      }
    }

    module.exports = ByteData

  }, { "./mode": 267, "encode-utf8": 160 }], 260: [function (require, module, exports) {
    const ECLevel = require('./error-correction-level')

    const EC_BLOCKS_TABLE = [
      // L  M  Q  H
      1, 1, 1, 1,
      1, 1, 1, 1,
      1, 1, 2, 2,
      1, 2, 2, 4,
      1, 2, 4, 4,
      2, 4, 4, 4,
      2, 4, 6, 5,
      2, 4, 6, 6,
      2, 5, 8, 8,
      4, 5, 8, 8,
      4, 5, 8, 11,
      4, 8, 10, 11,
      4, 9, 12, 16,
      4, 9, 16, 16,
      6, 10, 12, 18,
      6, 10, 17, 16,
      6, 11, 16, 19,
      6, 13, 18, 21,
      7, 14, 21, 25,
      8, 16, 20, 25,
      8, 17, 23, 25,
      9, 17, 23, 34,
      9, 18, 25, 30,
      10, 20, 27, 32,
      12, 21, 29, 35,
      12, 23, 34, 37,
      12, 25, 34, 40,
      13, 26, 35, 42,
      14, 28, 38, 45,
      15, 29, 40, 48,
      16, 31, 43, 51,
      17, 33, 45, 54,
      18, 35, 48, 57,
      19, 37, 51, 60,
      19, 38, 53, 63,
      20, 40, 56, 66,
      21, 43, 59, 70,
      22, 45, 62, 74,
      24, 47, 65, 77,
      25, 49, 68, 81
    ]

    const EC_CODEWORDS_TABLE = [
      // L  M  Q  H
      7, 10, 13, 17,
      10, 16, 22, 28,
      15, 26, 36, 44,
      20, 36, 52, 64,
      26, 48, 72, 88,
      36, 64, 96, 112,
      40, 72, 108, 130,
      48, 88, 132, 156,
      60, 110, 160, 192,
      72, 130, 192, 224,
      80, 150, 224, 264,
      96, 176, 260, 308,
      104, 198, 288, 352,
      120, 216, 320, 384,
      132, 240, 360, 432,
      144, 280, 408, 480,
      168, 308, 448, 532,
      180, 338, 504, 588,
      196, 364, 546, 650,
      224, 416, 600, 700,
      224, 442, 644, 750,
      252, 476, 690, 816,
      270, 504, 750, 900,
      300, 560, 810, 960,
      312, 588, 870, 1050,
      336, 644, 952, 1110,
      360, 700, 1020, 1200,
      390, 728, 1050, 1260,
      420, 784, 1140, 1350,
      450, 812, 1200, 1440,
      480, 868, 1290, 1530,
      510, 924, 1350, 1620,
      540, 980, 1440, 1710,
      570, 1036, 1530, 1800,
      570, 1064, 1590, 1890,
      600, 1120, 1680, 1980,
      630, 1204, 1770, 2100,
      660, 1260, 1860, 2220,
      720, 1316, 1950, 2310,
      750, 1372, 2040, 2430
    ]

    /**
     * Returns the number of error correction block that the QR Code should contain
     * for the specified version and error correction level.
     *
     * @param  {Number} version              QR Code version
     * @param  {Number} errorCorrectionLevel Error correction level
     * @return {Number}                      Number of error correction blocks
     */
    exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 0]
        case ECLevel.M:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 1]
        case ECLevel.Q:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 2]
        case ECLevel.H:
          return EC_BLOCKS_TABLE[(version - 1) * 4 + 3]
        default:
          return undefined
      }
    }

    /**
     * Returns the number of error correction codewords to use for the specified
     * version and error correction level.
     *
     * @param  {Number} version              QR Code version
     * @param  {Number} errorCorrectionLevel Error correction level
     * @return {Number}                      Number of error correction codewords
     */
    exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0]
        case ECLevel.M:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1]
        case ECLevel.Q:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2]
        case ECLevel.H:
          return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3]
        default:
          return undefined
      }
    }

  }, { "./error-correction-level": 261 }], 261: [function (require, module, exports) {
    exports.L = { bit: 1 }
    exports.M = { bit: 0 }
    exports.Q = { bit: 3 }
    exports.H = { bit: 2 }

    function fromString(string) {
      if (typeof string !== 'string') {
        throw new Error('Param is not a string')
      }

      const lcStr = string.toLowerCase()

      switch (lcStr) {
        case 'l':
        case 'low':
          return exports.L

        case 'm':
        case 'medium':
          return exports.M

        case 'q':
        case 'quartile':
          return exports.Q

        case 'h':
        case 'high':
          return exports.H

        default:
          throw new Error('Unknown EC Level: ' + string)
      }
    }

    exports.isValid = function isValid(level) {
      return level && typeof level.bit !== 'undefined' &&
        level.bit >= 0 && level.bit < 4
    }

    exports.from = function from(value, defaultValue) {
      if (exports.isValid(value)) {
        return value
      }

      try {
        return fromString(value)
      } catch (e) {
        return defaultValue
      }
    }

  }, {}], 262: [function (require, module, exports) {
    const getSymbolSize = require('./utils').getSymbolSize
    const FINDER_PATTERN_SIZE = 7

    /**
     * Returns an array containing the positions of each finder pattern.
     * Each array's element represent the top-left point of the pattern as (x, y) coordinates
     *
     * @param  {Number} version QR Code version
     * @return {Array}          Array of coordinates
     */
    exports.getPositions = function getPositions(version) {
      const size = getSymbolSize(version)

      return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE]
      ]
    }

  }, { "./utils": 274 }], 263: [function (require, module, exports) {
    const Utils = require('./utils')

    const G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)
    const G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)
    const G15_BCH = Utils.getBCHDigit(G15)

    /**
     * Returns format information with relative error correction bits
     *
     * The format information is a 15-bit sequence containing 5 data bits,
     * with 10 error correction bits calculated using the (15, 5) BCH code.
     *
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Number} mask                 Mask pattern
     * @return {Number}                      Encoded format information bits
     */
    exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
      const data = ((errorCorrectionLevel.bit << 3) | mask)
      let d = data << 10

      while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
        d ^= (G15 << (Utils.getBCHDigit(d) - G15_BCH))
      }

      // xor final data with mask pattern in order to ensure that
      // no combination of Error Correction Level and data mask pattern
      // will result in an all-zero data string
      return ((data << 10) | d) ^ G15_MASK
    }

  }, { "./utils": 274 }], 264: [function (require, module, exports) {
    const EXP_TABLE = new Uint8Array(512)
    const LOG_TABLE = new Uint8Array(256)
      /**
       * Precompute the log and anti-log tables for faster computation later
       *
       * For each possible value in the galois field 2^8, we will pre-compute
       * the logarithm and anti-logarithm (exponential) of this value
       *
       * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
       */
      ; (function initTables() {
        let x = 1
        for (let i = 0; i < 255; i++) {
          EXP_TABLE[i] = x
          LOG_TABLE[x] = i

          x <<= 1 // multiply by 2

          // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
          // This means that when a number is 256 or larger, it should be XORed with 0x11D.
          if (x & 0x100) { // similar to x >= 256, but a lot faster (because 0x100 == 256)
            x ^= 0x11D
          }
        }

        // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
        // stay inside the bounds (because we will mainly use this table for the multiplication of
        // two GF numbers, no more).
        // @see {@link mul}
        for (let i = 255; i < 512; i++) {
          EXP_TABLE[i] = EXP_TABLE[i - 255]
        }
      }())

    /**
     * Returns log value of n inside Galois Field
     *
     * @param  {Number} n
     * @return {Number}
     */
    exports.log = function log(n) {
      if (n < 1) throw new Error('log(' + n + ')')
      return LOG_TABLE[n]
    }

    /**
     * Returns anti-log value of n inside Galois Field
     *
     * @param  {Number} n
     * @return {Number}
     */
    exports.exp = function exp(n) {
      return EXP_TABLE[n]
    }

    /**
     * Multiplies two number inside Galois Field
     *
     * @param  {Number} x
     * @param  {Number} y
     * @return {Number}
     */
    exports.mul = function mul(x, y) {
      if (x === 0 || y === 0) return 0

      // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
      // @see {@link initTables}
      return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]]
    }

  }, {}], 265: [function (require, module, exports) {
    const Mode = require('./mode')
    const Utils = require('./utils')

    function KanjiData(data) {
      this.mode = Mode.KANJI
      this.data = data
    }

    KanjiData.getBitsLength = function getBitsLength(length) {
      return length * 13
    }

    KanjiData.prototype.getLength = function getLength() {
      return this.data.length
    }

    KanjiData.prototype.getBitsLength = function getBitsLength() {
      return KanjiData.getBitsLength(this.data.length)
    }

    KanjiData.prototype.write = function (bitBuffer) {
      let i

      // In the Shift JIS system, Kanji characters are represented by a two byte combination.
      // These byte values are shifted from the JIS X 0208 values.
      // JIS X 0208 gives details of the shift coded representation.
      for (i = 0; i < this.data.length; i++) {
        let value = Utils.toSJIS(this.data[i])

        // For characters with Shift JIS values from 0x8140 to 0x9FFC:
        if (value >= 0x8140 && value <= 0x9FFC) {
          // Subtract 0x8140 from Shift JIS value
          value -= 0x8140

          // For characters with Shift JIS values from 0xE040 to 0xEBBF
        } else if (value >= 0xE040 && value <= 0xEBBF) {
          // Subtract 0xC140 from Shift JIS value
          value -= 0xC140
        } else {
          throw new Error(
            'Invalid SJIS character: ' + this.data[i] + '\n' +
            'Make sure your charset is UTF-8')
        }

        // Multiply most significant byte of result by 0xC0
        // and add least significant byte to product
        value = (((value >>> 8) & 0xff) * 0xC0) + (value & 0xff)

        // Convert result to a 13-bit binary string
        bitBuffer.put(value, 13)
      }
    }

    module.exports = KanjiData

  }, { "./mode": 267, "./utils": 274 }], 266: [function (require, module, exports) {
    /**
     * Data mask pattern reference
     * @type {Object}
     */
    exports.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    }

    /**
     * Weighted penalty scores for the undesirable features
     * @type {Object}
     */
    const PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    }

    /**
     * Check if mask pattern value is valid
     *
     * @param  {Number}  mask    Mask pattern
     * @return {Boolean}         true if valid, false otherwise
     */
    exports.isValid = function isValid(mask) {
      return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7
    }

    /**
     * Returns mask pattern from a value.
     * If value is not valid, returns undefined
     *
     * @param  {Number|String} value        Mask pattern value
     * @return {Number}                     Valid mask pattern or undefined
     */
    exports.from = function from(value) {
      return exports.isValid(value) ? parseInt(value, 10) : undefined
    }

    /**
    * Find adjacent modules in row/column with the same color
    * and assign a penalty value.
    *
    * Points: N1 + i
    * i is the amount by which the number of adjacent modules of the same color exceeds 5
    */
    exports.getPenaltyN1 = function getPenaltyN1(data) {
      const size = data.size
      let points = 0
      let sameCountCol = 0
      let sameCountRow = 0
      let lastCol = null
      let lastRow = null

      for (let row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0
        lastCol = lastRow = null

        for (let col = 0; col < size; col++) {
          let module = data.get(row, col)
          if (module === lastCol) {
            sameCountCol++
          } else {
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)
            lastCol = module
            sameCountCol = 1
          }

          module = data.get(col, row)
          if (module === lastRow) {
            sameCountRow++
          } else {
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)
            lastRow = module
            sameCountRow = 1
          }
        }

        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)
      }

      return points
    }

    /**
     * Find 2x2 blocks with the same color and assign a penalty value
     *
     * Points: N2 * (m - 1) * (n - 1)
     */
    exports.getPenaltyN2 = function getPenaltyN2(data) {
      const size = data.size
      let points = 0

      for (let row = 0; row < size - 1; row++) {
        for (let col = 0; col < size - 1; col++) {
          const last = data.get(row, col) +
            data.get(row, col + 1) +
            data.get(row + 1, col) +
            data.get(row + 1, col + 1)

          if (last === 4 || last === 0) points++
        }
      }

      return points * PenaltyScores.N2
    }

    /**
     * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
     * preceded or followed by light area 4 modules wide
     *
     * Points: N3 * number of pattern found
     */
    exports.getPenaltyN3 = function getPenaltyN3(data) {
      const size = data.size
      let points = 0
      let bitsCol = 0
      let bitsRow = 0

      for (let row = 0; row < size; row++) {
        bitsCol = bitsRow = 0
        for (let col = 0; col < size; col++) {
          bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col)
          if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++

          bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row)
          if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++
        }
      }

      return points * PenaltyScores.N3
    }

    /**
     * Calculate proportion of dark modules in entire symbol
     *
     * Points: N4 * k
     *
     * k is the rating of the deviation of the proportion of dark modules
     * in the symbol from 50% in steps of 5%
     */
    exports.getPenaltyN4 = function getPenaltyN4(data) {
      let darkCount = 0
      const modulesCount = data.data.length

      for (let i = 0; i < modulesCount; i++) darkCount += data.data[i]

      const k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10)

      return k * PenaltyScores.N4
    }

    /**
     * Return mask value at given position
     *
     * @param  {Number} maskPattern Pattern reference value
     * @param  {Number} i           Row
     * @param  {Number} j           Column
     * @return {Boolean}            Mask value
     */
    function getMaskAt(maskPattern, i, j) {
      switch (maskPattern) {
        case exports.Patterns.PATTERN000: return (i + j) % 2 === 0
        case exports.Patterns.PATTERN001: return i % 2 === 0
        case exports.Patterns.PATTERN010: return j % 3 === 0
        case exports.Patterns.PATTERN011: return (i + j) % 3 === 0
        case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0
        case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0
        case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0
        case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0

        default: throw new Error('bad maskPattern:' + maskPattern)
      }
    }

    /**
     * Apply a mask pattern to a BitMatrix
     *
     * @param  {Number}    pattern Pattern reference number
     * @param  {BitMatrix} data    BitMatrix data
     */
    exports.applyMask = function applyMask(pattern, data) {
      const size = data.size

      for (let col = 0; col < size; col++) {
        for (let row = 0; row < size; row++) {
          if (data.isReserved(row, col)) continue
          data.xor(row, col, getMaskAt(pattern, row, col))
        }
      }
    }

    /**
     * Returns the best mask pattern for data
     *
     * @param  {BitMatrix} data
     * @return {Number} Mask pattern reference number
     */
    exports.getBestMask = function getBestMask(data, setupFormatFunc) {
      const numPatterns = Object.keys(exports.Patterns).length
      let bestPattern = 0
      let lowerPenalty = Infinity

      for (let p = 0; p < numPatterns; p++) {
        setupFormatFunc(p)
        exports.applyMask(p, data)

        // Calculate penalty
        const penalty =
          exports.getPenaltyN1(data) +
          exports.getPenaltyN2(data) +
          exports.getPenaltyN3(data) +
          exports.getPenaltyN4(data)

        // Undo previously applied mask
        exports.applyMask(p, data)

        if (penalty < lowerPenalty) {
          lowerPenalty = penalty
          bestPattern = p
        }
      }

      return bestPattern
    }

  }, {}], 267: [function (require, module, exports) {
    const VersionCheck = require('./version-check')
    const Regex = require('./regex')

    /**
     * Numeric mode encodes data from the decimal digit set (0 - 9)
     * (byte values 30HEX to 39HEX).
     * Normally, 3 data characters are represented by 10 bits.
     *
     * @type {Object}
     */
    exports.NUMERIC = {
      id: 'Numeric',
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    }

    /**
     * Alphanumeric mode encodes data from a set of 45 characters,
     * i.e. 10 numeric digits (0 - 9),
     *      26 alphabetic characters (A - Z),
     *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
     * Normally, two input characters are represented by 11 bits.
     *
     * @type {Object}
     */
    exports.ALPHANUMERIC = {
      id: 'Alphanumeric',
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    }

    /**
     * In byte mode, data is encoded at 8 bits per character.
     *
     * @type {Object}
     */
    exports.BYTE = {
      id: 'Byte',
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    }

    /**
     * The Kanji mode efficiently encodes Kanji characters in accordance with
     * the Shift JIS system based on JIS X 0208.
     * The Shift JIS values are shifted from the JIS X 0208 values.
     * JIS X 0208 gives details of the shift coded representation.
     * Each two-byte character value is compacted to a 13-bit binary codeword.
     *
     * @type {Object}
     */
    exports.KANJI = {
      id: 'Kanji',
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    }

    /**
     * Mixed mode will contain a sequences of data in a combination of any of
     * the modes described above
     *
     * @type {Object}
     */
    exports.MIXED = {
      bit: -1
    }

    /**
     * Returns the number of bits needed to store the data length
     * according to QR Code specifications.
     *
     * @param  {Mode}   mode    Data mode
     * @param  {Number} version QR Code version
     * @return {Number}         Number of bits
     */
    exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
      if (!mode.ccBits) throw new Error('Invalid mode: ' + mode)

      if (!VersionCheck.isValid(version)) {
        throw new Error('Invalid version: ' + version)
      }

      if (version >= 1 && version < 10) return mode.ccBits[0]
      else if (version < 27) return mode.ccBits[1]
      return mode.ccBits[2]
    }

    /**
     * Returns the most efficient mode to store the specified data
     *
     * @param  {String} dataStr Input data string
     * @return {Mode}           Best mode
     */
    exports.getBestModeForData = function getBestModeForData(dataStr) {
      if (Regex.testNumeric(dataStr)) return exports.NUMERIC
      else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC
      else if (Regex.testKanji(dataStr)) return exports.KANJI
      else return exports.BYTE
    }

    /**
     * Return mode name as string
     *
     * @param {Mode} mode Mode object
     * @returns {String}  Mode name
     */
    exports.toString = function toString(mode) {
      if (mode && mode.id) return mode.id
      throw new Error('Invalid mode')
    }

    /**
     * Check if input param is a valid mode object
     *
     * @param   {Mode}    mode Mode object
     * @returns {Boolean} True if valid mode, false otherwise
     */
    exports.isValid = function isValid(mode) {
      return mode && mode.bit && mode.ccBits
    }

    /**
     * Get mode object from its name
     *
     * @param   {String} string Mode name
     * @returns {Mode}          Mode object
     */
    function fromString(string) {
      if (typeof string !== 'string') {
        throw new Error('Param is not a string')
      }

      const lcStr = string.toLowerCase()

      switch (lcStr) {
        case 'numeric':
          return exports.NUMERIC
        case 'alphanumeric':
          return exports.ALPHANUMERIC
        case 'kanji':
          return exports.KANJI
        case 'byte':
          return exports.BYTE
        default:
          throw new Error('Unknown mode: ' + string)
      }
    }

    /**
     * Returns mode from a value.
     * If value is not a valid mode, returns defaultValue
     *
     * @param  {Mode|String} value        Encoding mode
     * @param  {Mode}        defaultValue Fallback value
     * @return {Mode}                     Encoding mode
     */
    exports.from = function from(value, defaultValue) {
      if (exports.isValid(value)) {
        return value
      }

      try {
        return fromString(value)
      } catch (e) {
        return defaultValue
      }
    }

  }, { "./regex": 272, "./version-check": 275 }], 268: [function (require, module, exports) {
    const Mode = require('./mode')

    function NumericData(data) {
      this.mode = Mode.NUMERIC
      this.data = data.toString()
    }

    NumericData.getBitsLength = function getBitsLength(length) {
      return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)
    }

    NumericData.prototype.getLength = function getLength() {
      return this.data.length
    }

    NumericData.prototype.getBitsLength = function getBitsLength() {
      return NumericData.getBitsLength(this.data.length)
    }

    NumericData.prototype.write = function write(bitBuffer) {
      let i, group, value

      // The input data string is divided into groups of three digits,
      // and each group is converted to its 10-bit binary equivalent.
      for (i = 0; i + 3 <= this.data.length; i += 3) {
        group = this.data.substr(i, 3)
        value = parseInt(group, 10)

        bitBuffer.put(value, 10)
      }

      // If the number of input digits is not an exact multiple of three,
      // the final one or two digits are converted to 4 or 7 bits respectively.
      const remainingNum = this.data.length - i
      if (remainingNum > 0) {
        group = this.data.substr(i)
        value = parseInt(group, 10)

        bitBuffer.put(value, remainingNum * 3 + 1)
      }
    }

    module.exports = NumericData

  }, { "./mode": 267 }], 269: [function (require, module, exports) {
    const GF = require('./galois-field')

    /**
     * Multiplies two polynomials inside Galois Field
     *
     * @param  {Uint8Array} p1 Polynomial
     * @param  {Uint8Array} p2 Polynomial
     * @return {Uint8Array}    Product of p1 and p2
     */
    exports.mul = function mul(p1, p2) {
      const coeff = new Uint8Array(p1.length + p2.length - 1)

      for (let i = 0; i < p1.length; i++) {
        for (let j = 0; j < p2.length; j++) {
          coeff[i + j] ^= GF.mul(p1[i], p2[j])
        }
      }

      return coeff
    }

    /**
     * Calculate the remainder of polynomials division
     *
     * @param  {Uint8Array} divident Polynomial
     * @param  {Uint8Array} divisor  Polynomial
     * @return {Uint8Array}          Remainder
     */
    exports.mod = function mod(divident, divisor) {
      let result = new Uint8Array(divident)

      while ((result.length - divisor.length) >= 0) {
        const coeff = result[0]

        for (let i = 0; i < divisor.length; i++) {
          result[i] ^= GF.mul(divisor[i], coeff)
        }

        // remove all zeros from buffer head
        let offset = 0
        while (offset < result.length && result[offset] === 0) offset++
        result = result.slice(offset)
      }

      return result
    }

    /**
     * Generate an irreducible generator polynomial of specified degree
     * (used by Reed-Solomon encoder)
     *
     * @param  {Number} degree Degree of the generator polynomial
     * @return {Uint8Array}    Buffer containing polynomial coefficients
     */
    exports.generateECPolynomial = function generateECPolynomial(degree) {
      let poly = new Uint8Array([1])
      for (let i = 0; i < degree; i++) {
        poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))
      }

      return poly
    }

  }, { "./galois-field": 264 }], 270: [function (require, module, exports) {
    const Utils = require('./utils')
    const ECLevel = require('./error-correction-level')
    const BitBuffer = require('./bit-buffer')
    const BitMatrix = require('./bit-matrix')
    const AlignmentPattern = require('./alignment-pattern')
    const FinderPattern = require('./finder-pattern')
    const MaskPattern = require('./mask-pattern')
    const ECCode = require('./error-correction-code')
    const ReedSolomonEncoder = require('./reed-solomon-encoder')
    const Version = require('./version')
    const FormatInfo = require('./format-info')
    const Mode = require('./mode')
    const Segments = require('./segments')

    /**
     * QRCode for JavaScript
     *
     * modified by Ryan Day for nodejs support
     * Copyright (c) 2011 Ryan Day
     *
     * Licensed under the MIT license:
     *   http://www.opensource.org/licenses/mit-license.php
     *
    //---------------------------------------------------------------------
    // QRCode for JavaScript
    //
    // Copyright (c) 2009 Kazuhiko Arase
    //
    // URL: http://www.d-project.com/
    //
    // Licensed under the MIT license:
    //   http://www.opensource.org/licenses/mit-license.php
    //
    // The word "QR Code" is registered trademark of
    // DENSO WAVE INCORPORATED
    //   http://www.denso-wave.com/qrcode/faqpatent-e.html
    //
    //---------------------------------------------------------------------
    */

    /**
     * Add finder patterns bits to matrix
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupFinderPattern(matrix, version) {
      const size = matrix.size
      const pos = FinderPattern.getPositions(version)

      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0]
        const col = pos[i][1]

        for (let r = -1; r <= 7; r++) {
          if (row + r <= -1 || size <= row + r) continue

          for (let c = -1; c <= 7; c++) {
            if (col + c <= -1 || size <= col + c) continue

            if ((r >= 0 && r <= 6 && (c === 0 || c === 6)) ||
              (c >= 0 && c <= 6 && (r === 0 || r === 6)) ||
              (r >= 2 && r <= 4 && c >= 2 && c <= 4)) {
              matrix.set(row + r, col + c, true, true)
            } else {
              matrix.set(row + r, col + c, false, true)
            }
          }
        }
      }
    }

    /**
     * Add timing pattern bits to matrix
     *
     * Note: this function must be called before {@link setupAlignmentPattern}
     *
     * @param  {BitMatrix} matrix Modules matrix
     */
    function setupTimingPattern(matrix) {
      const size = matrix.size

      for (let r = 8; r < size - 8; r++) {
        const value = r % 2 === 0
        matrix.set(r, 6, value, true)
        matrix.set(6, r, value, true)
      }
    }

    /**
     * Add alignment patterns bits to matrix
     *
     * Note: this function must be called after {@link setupTimingPattern}
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupAlignmentPattern(matrix, version) {
      const pos = AlignmentPattern.getPositions(version)

      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0]
        const col = pos[i][1]

        for (let r = -2; r <= 2; r++) {
          for (let c = -2; c <= 2; c++) {
            if (r === -2 || r === 2 || c === -2 || c === 2 ||
              (r === 0 && c === 0)) {
              matrix.set(row + r, col + c, true, true)
            } else {
              matrix.set(row + r, col + c, false, true)
            }
          }
        }
      }
    }

    /**
     * Add version info bits to matrix
     *
     * @param  {BitMatrix} matrix  Modules matrix
     * @param  {Number}    version QR Code version
     */
    function setupVersionInfo(matrix, version) {
      const size = matrix.size
      const bits = Version.getEncodedBits(version)
      let row, col, mod

      for (let i = 0; i < 18; i++) {
        row = Math.floor(i / 3)
        col = i % 3 + size - 8 - 3
        mod = ((bits >> i) & 1) === 1

        matrix.set(row, col, mod, true)
        matrix.set(col, row, mod, true)
      }
    }

    /**
     * Add format info bits to matrix
     *
     * @param  {BitMatrix} matrix               Modules matrix
     * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
     * @param  {Number}    maskPattern          Mask pattern reference value
     */
    function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
      const size = matrix.size
      const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern)
      let i, mod

      for (i = 0; i < 15; i++) {
        mod = ((bits >> i) & 1) === 1

        // vertical
        if (i < 6) {
          matrix.set(i, 8, mod, true)
        } else if (i < 8) {
          matrix.set(i + 1, 8, mod, true)
        } else {
          matrix.set(size - 15 + i, 8, mod, true)
        }

        // horizontal
        if (i < 8) {
          matrix.set(8, size - i - 1, mod, true)
        } else if (i < 9) {
          matrix.set(8, 15 - i - 1 + 1, mod, true)
        } else {
          matrix.set(8, 15 - i - 1, mod, true)
        }
      }

      // fixed module
      matrix.set(size - 8, 8, 1, true)
    }

    /**
     * Add encoded data bits to matrix
     *
     * @param  {BitMatrix}  matrix Modules matrix
     * @param  {Uint8Array} data   Data codewords
     */
    function setupData(matrix, data) {
      const size = matrix.size
      let inc = -1
      let row = size - 1
      let bitIndex = 7
      let byteIndex = 0

      for (let col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--

        while (true) {
          for (let c = 0; c < 2; c++) {
            if (!matrix.isReserved(row, col - c)) {
              let dark = false

              if (byteIndex < data.length) {
                dark = (((data[byteIndex] >>> bitIndex) & 1) === 1)
              }

              matrix.set(row, col - c, dark)
              bitIndex--

              if (bitIndex === -1) {
                byteIndex++
                bitIndex = 7
              }
            }
          }

          row += inc

          if (row < 0 || size <= row) {
            row -= inc
            inc = -inc
            break
          }
        }
      }
    }

    /**
     * Create encoded codewords from data input
     *
     * @param  {Number}   version              QR Code version
     * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
     * @param  {ByteData} data                 Data input
     * @return {Uint8Array}                    Buffer containing encoded codewords
     */
    function createData(version, errorCorrectionLevel, segments) {
      // Prepare data buffer
      const buffer = new BitBuffer()

      segments.forEach(function (data) {
        // prefix data with mode indicator (4 bits)
        buffer.put(data.mode.bit, 4)

        // Prefix data with character count indicator.
        // The character count indicator is a string of bits that represents the
        // number of characters that are being encoded.
        // The character count indicator must be placed after the mode indicator
        // and must be a certain number of bits long, depending on the QR version
        // and data mode
        // @see {@link Mode.getCharCountIndicator}.
        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version))

        // add binary data sequence to buffer
        data.write(buffer)
      })

      // Calculate required number of bits
      const totalCodewords = Utils.getSymbolTotalCodewords(version)
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8

      // Add a terminator.
      // If the bit string is shorter than the total number of required bits,
      // a terminator of up to four 0s must be added to the right side of the string.
      // If the bit string is more than four bits shorter than the required number of bits,
      // add four 0s to the end.
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4)
      }

      // If the bit string is fewer than four bits shorter, add only the number of 0s that
      // are needed to reach the required number of bits.

      // After adding the terminator, if the number of bits in the string is not a multiple of 8,
      // pad the string on the right with 0s to make the string's length a multiple of 8.
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0)
      }

      // Add pad bytes if the string is still shorter than the total number of required bits.
      // Extend the buffer to fill the data capacity of the symbol corresponding to
      // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
      // and 00010001 (0x11) alternately.
      const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8
      for (let i = 0; i < remainingByte; i++) {
        buffer.put(i % 2 ? 0x11 : 0xEC, 8)
      }

      return createCodewords(buffer, version, errorCorrectionLevel)
    }

    /**
     * Encode input data with Reed-Solomon and return codewords with
     * relative error correction bits
     *
     * @param  {BitBuffer} bitBuffer            Data to encode
     * @param  {Number}    version              QR Code version
     * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
     * @return {Uint8Array}                     Buffer containing encoded codewords
     */
    function createCodewords(bitBuffer, version, errorCorrectionLevel) {
      // Total codewords for this QR code version (Data + Error correction)
      const totalCodewords = Utils.getSymbolTotalCodewords(version)

      // Total number of error correction codewords
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)

      // Total number of data codewords
      const dataTotalCodewords = totalCodewords - ecTotalCodewords

      // Total number of blocks
      const ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel)

      // Calculate how many blocks each group should contain
      const blocksInGroup2 = totalCodewords % ecTotalBlocks
      const blocksInGroup1 = ecTotalBlocks - blocksInGroup2

      const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks)

      const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks)
      const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1

      // Number of EC codewords is the same for both groups
      const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1

      // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount
      const rs = new ReedSolomonEncoder(ecCount)

      let offset = 0
      const dcData = new Array(ecTotalBlocks)
      const ecData = new Array(ecTotalBlocks)
      let maxDataSize = 0
      const buffer = new Uint8Array(bitBuffer.buffer)

      // Divide the buffer into the required number of blocks
      for (let b = 0; b < ecTotalBlocks; b++) {
        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2

        // extract a block of data from buffer
        dcData[b] = buffer.slice(offset, offset + dataSize)

        // Calculate EC codewords for this data block
        ecData[b] = rs.encode(dcData[b])

        offset += dataSize
        maxDataSize = Math.max(maxDataSize, dataSize)
      }

      // Create final data
      // Interleave the data and error correction codewords from each block
      const data = new Uint8Array(totalCodewords)
      let index = 0
      let i, r

      // Add data codewords
      for (i = 0; i < maxDataSize; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          if (i < dcData[r].length) {
            data[index++] = dcData[r][i]
          }
        }
      }

      // Apped EC codewords
      for (i = 0; i < ecCount; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          data[index++] = ecData[r][i]
        }
      }

      return data
    }

    /**
     * Build QR Code symbol
     *
     * @param  {String} data                 Input string
     * @param  {Number} version              QR Code version
     * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
     * @param  {MaskPattern} maskPattern     Mask pattern
     * @return {Object}                      Object containing symbol data
     */
    function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
      let segments

      if (Array.isArray(data)) {
        segments = Segments.fromArray(data)
      } else if (typeof data === 'string') {
        let estimatedVersion = version

        if (!estimatedVersion) {
          const rawSegments = Segments.rawSplit(data)

          // Estimate best version that can contain raw splitted segments
          estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel)
        }

        // Build optimized segments
        // If estimated version is undefined, try with the highest version
        segments = Segments.fromString(data, estimatedVersion || 40)
      } else {
        throw new Error('Invalid data')
      }

      // Get the min version that can contain data
      const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel)

      // If no version is found, data cannot be stored
      if (!bestVersion) {
        throw new Error('The amount of data is too big to be stored in a QR Code')
      }

      // If not specified, use min version as default
      if (!version) {
        version = bestVersion

        // Check if the specified version can contain the data
      } else if (version < bestVersion) {
        throw new Error('\n' +
          'The chosen QR Code version cannot contain this amount of data.\n' +
          'Minimum version required to store current data is: ' + bestVersion + '.\n'
        )
      }

      const dataBits = createData(version, errorCorrectionLevel, segments)

      // Allocate matrix buffer
      const moduleCount = Utils.getSymbolSize(version)
      const modules = new BitMatrix(moduleCount)

      // Add function modules
      setupFinderPattern(modules, version)
      setupTimingPattern(modules)
      setupAlignmentPattern(modules, version)

      // Add temporary dummy bits for format info just to set them as reserved.
      // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
      // since the masking operation must be performed only on the encoding region.
      // These blocks will be replaced with correct values later in code.
      setupFormatInfo(modules, errorCorrectionLevel, 0)

      if (version >= 7) {
        setupVersionInfo(modules, version)
      }

      // Add data codewords
      setupData(modules, dataBits)

      if (isNaN(maskPattern)) {
        // Find best mask pattern
        maskPattern = MaskPattern.getBestMask(modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel))
      }

      // Apply mask pattern
      MaskPattern.applyMask(maskPattern, modules)

      // Replace format info bits with correct values
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern)

      return {
        modules: modules,
        version: version,
        errorCorrectionLevel: errorCorrectionLevel,
        maskPattern: maskPattern,
        segments: segments
      }
    }

    /**
     * QR Code
     *
     * @param {String | Array} data                 Input data
     * @param {Object} options                      Optional configurations
     * @param {Number} options.version              QR Code version
     * @param {String} options.errorCorrectionLevel Error correction level
     * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
     */
    exports.create = function create(data, options) {
      if (typeof data === 'undefined' || data === '') {
        throw new Error('No input text')
      }

      let errorCorrectionLevel = ECLevel.M
      let version
      let mask

      if (typeof options !== 'undefined') {
        // Use higher error correction level as default
        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M)
        version = Version.from(options.version)
        mask = MaskPattern.from(options.maskPattern)

        if (options.toSJISFunc) {
          Utils.setToSJISFunction(options.toSJISFunc)
        }
      }

      return createSymbol(data, version, errorCorrectionLevel, mask)
    }

  }, { "./alignment-pattern": 255, "./bit-buffer": 257, "./bit-matrix": 258, "./error-correction-code": 260, "./error-correction-level": 261, "./finder-pattern": 262, "./format-info": 263, "./mask-pattern": 266, "./mode": 267, "./reed-solomon-encoder": 271, "./segments": 273, "./utils": 274, "./version": 276 }], 271: [function (require, module, exports) {
    const Polynomial = require('./polynomial')

    function ReedSolomonEncoder(degree) {
      this.genPoly = undefined
      this.degree = degree

      if (this.degree) this.initialize(this.degree)
    }

    /**
     * Initialize the encoder.
     * The input param should correspond to the number of error correction codewords.
     *
     * @param  {Number} degree
     */
    ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
      // create an irreducible generator polynomial
      this.degree = degree
      this.genPoly = Polynomial.generateECPolynomial(this.degree)
    }

    /**
     * Encodes a chunk of data
     *
     * @param  {Uint8Array} data Buffer containing input data
     * @return {Uint8Array}      Buffer containing encoded data
     */
    ReedSolomonEncoder.prototype.encode = function encode(data) {
      if (!this.genPoly) {
        throw new Error('Encoder not initialized')
      }

      // Calculate EC for this data block
      // extends data size to data+genPoly size
      const paddedData = new Uint8Array(data.length + this.degree)
      paddedData.set(data)

      // The error correction codewords are the remainder after dividing the data codewords
      // by a generator polynomial
      const remainder = Polynomial.mod(paddedData, this.genPoly)

      // return EC data blocks (last n byte, where n is the degree of genPoly)
      // If coefficients number in remainder are less than genPoly degree,
      // pad with 0s to the left to reach the needed number of coefficients
      const start = this.degree - remainder.length
      if (start > 0) {
        const buff = new Uint8Array(this.degree)
        buff.set(remainder, start)

        return buff
      }

      return remainder
    }

    module.exports = ReedSolomonEncoder

  }, { "./polynomial": 269 }], 272: [function (require, module, exports) {
    const numeric = '[0-9]+'
    const alphanumeric = '[A-Z $%*+\\-./:]+'
    let kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' +
      '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' +
      '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' +
      '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+'
    kanji = kanji.replace(/u/g, '\\u')

    const byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ')(?:.|[\r\n]))+'

    exports.KANJI = new RegExp(kanji, 'g')
    exports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g')
    exports.BYTE = new RegExp(byte, 'g')
    exports.NUMERIC = new RegExp(numeric, 'g')
    exports.ALPHANUMERIC = new RegExp(alphanumeric, 'g')

    const TEST_KANJI = new RegExp('^' + kanji + '$')
    const TEST_NUMERIC = new RegExp('^' + numeric + '$')
    const TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$')

    exports.testKanji = function testKanji(str) {
      return TEST_KANJI.test(str)
    }

    exports.testNumeric = function testNumeric(str) {
      return TEST_NUMERIC.test(str)
    }

    exports.testAlphanumeric = function testAlphanumeric(str) {
      return TEST_ALPHANUMERIC.test(str)
    }

  }, {}], 273: [function (require, module, exports) {
    const Mode = require('./mode')
    const NumericData = require('./numeric-data')
    const AlphanumericData = require('./alphanumeric-data')
    const ByteData = require('./byte-data')
    const KanjiData = require('./kanji-data')
    const Regex = require('./regex')
    const Utils = require('./utils')
    const dijkstra = require('dijkstrajs')

    /**
     * Returns UTF8 byte length
     *
     * @param  {String} str Input string
     * @return {Number}     Number of byte
     */
    function getStringByteLength(str) {
      return unescape(encodeURIComponent(str)).length
    }

    /**
     * Get a list of segments of the specified mode
     * from a string
     *
     * @param  {Mode}   mode Segment mode
     * @param  {String} str  String to process
     * @return {Array}       Array of object with segments data
     */
    function getSegments(regex, mode, str) {
      const segments = []
      let result

      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode: mode,
          length: result[0].length
        })
      }

      return segments
    }

    /**
     * Extracts a series of segments with the appropriate
     * modes from a string
     *
     * @param  {String} dataStr Input string
     * @return {Array}          Array of object with segments data
     */
    function getSegmentsFromString(dataStr) {
      const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr)
      const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr)
      let byteSegs
      let kanjiSegs

      if (Utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr)
        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr)
      } else {
        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr)
        kanjiSegs = []
      }

      const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs)

      return segs
        .sort(function (s1, s2) {
          return s1.index - s2.index
        })
        .map(function (obj) {
          return {
            data: obj.data,
            mode: obj.mode,
            length: obj.length
          }
        })
    }

    /**
     * Returns how many bits are needed to encode a string of
     * specified length with the specified mode
     *
     * @param  {Number} length String length
     * @param  {Mode} mode     Segment mode
     * @return {Number}        Bit length
     */
    function getSegmentBitsLength(length, mode) {
      switch (mode) {
        case Mode.NUMERIC:
          return NumericData.getBitsLength(length)
        case Mode.ALPHANUMERIC:
          return AlphanumericData.getBitsLength(length)
        case Mode.KANJI:
          return KanjiData.getBitsLength(length)
        case Mode.BYTE:
          return ByteData.getBitsLength(length)
      }
    }

    /**
     * Merges adjacent segments which have the same mode
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function mergeSegments(segs) {
      return segs.reduce(function (acc, curr) {
        const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data
          return acc
        }

        acc.push(curr)
        return acc
      }, [])
    }

    /**
     * Generates a list of all possible nodes combination which
     * will be used to build a segments graph.
     *
     * Nodes are divided by groups. Each group will contain a list of all the modes
     * in which is possible to encode the given text.
     *
     * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
     * The group for '12345' will contain then 3 objects, one for each
     * possible encoding mode.
     *
     * Each node represents a possible segment.
     *
     * @param  {Array} segs Array of object with segments data
     * @return {Array}      Array of object with segments data
     */
    function buildNodes(segs) {
      const nodes = []
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i]

        switch (seg.mode) {
          case Mode.NUMERIC:
            nodes.push([seg,
              { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ])
            break
          case Mode.ALPHANUMERIC:
            nodes.push([seg,
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ])
            break
          case Mode.KANJI:
            nodes.push([seg,
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ])
            break
          case Mode.BYTE:
            nodes.push([
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ])
        }
      }

      return nodes
    }

    /**
     * Builds a graph from a list of nodes.
     * All segments in each node group will be connected with all the segments of
     * the next group and so on.
     *
     * At each connection will be assigned a weight depending on the
     * segment's byte length.
     *
     * @param  {Array} nodes    Array of object with segments data
     * @param  {Number} version QR Code version
     * @return {Object}         Graph of all possible segments
     */
    function buildGraph(nodes, version) {
      const table = {}
      const graph = { start: {} }
      let prevNodeIds = ['start']

      for (let i = 0; i < nodes.length; i++) {
        const nodeGroup = nodes[i]
        const currentNodeIds = []

        for (let j = 0; j < nodeGroup.length; j++) {
          const node = nodeGroup[j]
          const key = '' + i + j

          currentNodeIds.push(key)
          table[key] = { node: node, lastCount: 0 }
          graph[key] = {}

          for (let n = 0; n < prevNodeIds.length; n++) {
            const prevNodeId = prevNodeIds[n]

            if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
              graph[prevNodeId][key] =
                getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) -
                getSegmentBitsLength(table[prevNodeId].lastCount, node.mode)

              table[prevNodeId].lastCount += node.length
            } else {
              if (table[prevNodeId]) table[prevNodeId].lastCount = node.length

              graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) +
                4 + Mode.getCharCountIndicator(node.mode, version) // switch cost
            }
          }
        }

        prevNodeIds = currentNodeIds
      }

      for (let n = 0; n < prevNodeIds.length; n++) {
        graph[prevNodeIds[n]].end = 0
      }

      return { map: graph, table: table }
    }

    /**
     * Builds a segment from a specified data and mode.
     * If a mode is not specified, the more suitable will be used.
     *
     * @param  {String} data             Input data
     * @param  {Mode | String} modesHint Data mode
     * @return {Segment}                 Segment
     */
    function buildSingleSegment(data, modesHint) {
      let mode
      const bestMode = Mode.getBestModeForData(data)

      mode = Mode.from(modesHint, bestMode)

      // Make sure data can be encoded
      if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
        throw new Error('"' + data + '"' +
          ' cannot be encoded with mode ' + Mode.toString(mode) +
          '.\n Suggested mode is: ' + Mode.toString(bestMode))
      }

      // Use Mode.BYTE if Kanji support is disabled
      if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
        mode = Mode.BYTE
      }

      switch (mode) {
        case Mode.NUMERIC:
          return new NumericData(data)

        case Mode.ALPHANUMERIC:
          return new AlphanumericData(data)

        case Mode.KANJI:
          return new KanjiData(data)

        case Mode.BYTE:
          return new ByteData(data)
      }
    }

    /**
     * Builds a list of segments from an array.
     * Array can contain Strings or Objects with segment's info.
     *
     * For each item which is a string, will be generated a segment with the given
     * string and the more appropriate encoding mode.
     *
     * For each item which is an object, will be generated a segment with the given
     * data and mode.
     * Objects must contain at least the property "data".
     * If property "mode" is not present, the more suitable mode will be used.
     *
     * @param  {Array} array Array of objects with segments data
     * @return {Array}       Array of Segments
     */
    exports.fromArray = function fromArray(array) {
      return array.reduce(function (acc, seg) {
        if (typeof seg === 'string') {
          acc.push(buildSingleSegment(seg, null))
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode))
        }

        return acc
      }, [])
    }

    /**
     * Builds an optimized sequence of segments from a string,
     * which will produce the shortest possible bitstream.
     *
     * @param  {String} data    Input string
     * @param  {Number} version QR Code version
     * @return {Array}          Array of segments
     */
    exports.fromString = function fromString(data, version) {
      const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled())

      const nodes = buildNodes(segs)
      const graph = buildGraph(nodes, version)
      const path = dijkstra.find_path(graph.map, 'start', 'end')

      const optimizedSegs = []
      for (let i = 1; i < path.length - 1; i++) {
        optimizedSegs.push(graph.table[path[i]].node)
      }

      return exports.fromArray(mergeSegments(optimizedSegs))
    }

    /**
     * Splits a string in various segments with the modes which
     * best represent their content.
     * The produced segments are far from being optimized.
     * The output of this function is only used to estimate a QR Code version
     * which may contain the data.
     *
     * @param  {string} data Input string
     * @return {Array}       Array of segments
     */
    exports.rawSplit = function rawSplit(data) {
      return exports.fromArray(
        getSegmentsFromString(data, Utils.isKanjiModeEnabled())
      )
    }

  }, { "./alphanumeric-data": 256, "./byte-data": 259, "./kanji-data": 265, "./mode": 267, "./numeric-data": 268, "./regex": 272, "./utils": 274, "dijkstrajs": 143 }], 274: [function (require, module, exports) {
    let toSJISFunction
    const CODEWORDS_COUNT = [
      0, // Not used
      26, 44, 70, 100, 134, 172, 196, 242, 292, 346,
      404, 466, 532, 581, 655, 733, 815, 901, 991, 1085,
      1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185,
      2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706
    ]

    /**
     * Returns the QR Code size for the specified version
     *
     * @param  {Number} version QR Code version
     * @return {Number}         size of QR code
     */
    exports.getSymbolSize = function getSymbolSize(version) {
      if (!version) throw new Error('"version" cannot be null or undefined')
      if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40')
      return version * 4 + 17
    }

    /**
     * Returns the total number of codewords used to store data and EC information.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Data length in bits
     */
    exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
      return CODEWORDS_COUNT[version]
    }

    /**
     * Encode data with Bose-Chaudhuri-Hocquenghem
     *
     * @param  {Number} data Value to encode
     * @return {Number}      Encoded value
     */
    exports.getBCHDigit = function (data) {
      let digit = 0

      while (data !== 0) {
        digit++
        data >>>= 1
      }

      return digit
    }

    exports.setToSJISFunction = function setToSJISFunction(f) {
      if (typeof f !== 'function') {
        throw new Error('"toSJISFunc" is not a valid function.')
      }

      toSJISFunction = f
    }

    exports.isKanjiModeEnabled = function () {
      return typeof toSJISFunction !== 'undefined'
    }

    exports.toSJIS = function toSJIS(kanji) {
      return toSJISFunction(kanji)
    }

  }, {}], 275: [function (require, module, exports) {
    /**
     * Check if QR Code version is valid
     *
     * @param  {Number}  version QR Code version
     * @return {Boolean}         true if valid version, false otherwise
     */
    exports.isValid = function isValid(version) {
      return !isNaN(version) && version >= 1 && version <= 40
    }

  }, {}], 276: [function (require, module, exports) {
    const Utils = require('./utils')
    const ECCode = require('./error-correction-code')
    const ECLevel = require('./error-correction-level')
    const Mode = require('./mode')
    const VersionCheck = require('./version-check')

    // Generator polynomial used to encode version information
    const G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)
    const G18_BCH = Utils.getBCHDigit(G18)

    function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion
        }
      }

      return undefined
    }

    function getReservedBitsCount(mode, version) {
      // Character count indicator + mode indicator bits
      return Mode.getCharCountIndicator(mode, version) + 4
    }

    function getTotalBitsFromDataArray(segments, version) {
      let totalBits = 0

      segments.forEach(function (data) {
        const reservedBits = getReservedBitsCount(data.mode, version)
        totalBits += reservedBits + data.getBitsLength()
      })

      return totalBits
    }

    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        const length = getTotalBitsFromDataArray(segments, currentVersion)
        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
          return currentVersion
        }
      }

      return undefined
    }

    /**
     * Returns version number from a value.
     * If value is not a valid version, returns defaultValue
     *
     * @param  {Number|String} value        QR Code version
     * @param  {Number}        defaultValue Fallback value
     * @return {Number}                     QR Code version number
     */
    exports.from = function from(value, defaultValue) {
      if (VersionCheck.isValid(value)) {
        return parseInt(value, 10)
      }

      return defaultValue
    }

    /**
     * Returns how much data can be stored with the specified QR code version
     * and error correction level
     *
     * @param  {Number} version              QR Code version (1-40)
     * @param  {Number} errorCorrectionLevel Error correction level
     * @param  {Mode}   mode                 Data mode
     * @return {Number}                      Quantity of storable data
     */
    exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
      if (!VersionCheck.isValid(version)) {
        throw new Error('Недійсна версія QR-коду')
      }

      // Use Byte mode as default
      if (typeof mode === 'undefined') mode = Mode.BYTE

      // Total codewords for this QR code version (Data + Error correction)
      const totalCodewords = Utils.getSymbolTotalCodewords(version)

      // Total number of error correction codewords
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)

      // Total number of data codewords
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8

      if (mode === Mode.MIXED) return dataTotalCodewordsBits

      const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)

      // Return max number of storable codewords
      switch (mode) {
        case Mode.NUMERIC:
          return Math.floor((usableBits / 10) * 3)

        case Mode.ALPHANUMERIC:
          return Math.floor((usableBits / 11) * 2)

        case Mode.KANJI:
          return Math.floor(usableBits / 13)

        case Mode.BYTE:
        default:
          return Math.floor(usableBits / 8)
      }
    }

    /**
     * Returns the minimum version needed to contain the amount of data
     *
     * @param  {Segment} data                    Segment of data
     * @param  {Number} [errorCorrectionLevel=H] Error correction level
     * @param  {Mode} mode                       Data mode
     * @return {Number}                          QR Code version
     */
    exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
      let seg

      const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)

      if (Array.isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl)
        }

        if (data.length === 0) {
          return 1
        }

        seg = data[0]
      } else {
        seg = data
      }

      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)
    }

    /**
     * Returns version information with relative error correction bits
     *
     * The version information is included in QR Code symbols of version 7 or larger.
     * It consists of an 18-bit sequence containing 6 data bits,
     * with 12 error correction bits calculated using the (18, 6) Golay code.
     *
     * @param  {Number} version QR Code version
     * @return {Number}         Encoded version info bits
     */
    exports.getEncodedBits = function getEncodedBits(version) {
      if (!VersionCheck.isValid(version) || version < 7) {
        throw new Error('Недійсна версія QR-коду')
      }

      let d = version << 12

      while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
        d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))
      }

      return (version << 12) | d
    }

  }, { "./error-correction-code": 260, "./error-correction-level": 261, "./mode": 267, "./utils": 274, "./version-check": 275 }], 277: [function (require, module, exports) {
    const Utils = require('./utils')

    function clearCanvas(ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      if (!canvas.style) canvas.style = {}
      canvas.height = size
      canvas.width = size
      canvas.style.height = size + 'px'
      canvas.style.width = size + 'px'
    }

    function getCanvasElement() {
      try {
        return document.createElement('canvas')
      } catch (e) {
        throw new Error('You need to specify a canvas element')
      }
    }

    exports.render = function render(qrData, canvas, options) {
      let opts = options
      let canvasEl = canvas

      if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
        opts = canvas
        canvas = undefined
      }

      if (!canvas) {
        canvasEl = getCanvasElement()
      }

      opts = Utils.getOptions(opts)
      const size = Utils.getImageWidth(qrData.modules.size, opts)

      const ctx = canvasEl.getContext('2d')
      const image = ctx.createImageData(size, size)
      Utils.qrToImageData(image.data, qrData, opts)

      clearCanvas(ctx, canvasEl, size)
      ctx.putImageData(image, 0, 0)

      return canvasEl
    }

    exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
      let opts = options

      if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
        opts = canvas
        canvas = undefined
      }

      if (!opts) opts = {}

      const canvasEl = exports.render(qrData, canvas, opts)

      const type = opts.type || 'image/png'
      const rendererOpts = opts.rendererOpts || {}

      return canvasEl.toDataURL(type, rendererOpts.quality)
    }

  }, { "./utils": 279 }], 278: [function (require, module, exports) {
    const Utils = require('./utils')

    function getColorAttrib(color, attrib) {
      const alpha = color.a / 255
      const str = attrib + '="' + color.hex + '"'

      return alpha < 1
        ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"'
        : str
    }

    function svgCmd(cmd, x, y) {
      let str = cmd + x
      if (typeof y !== 'undefined') str += ' ' + y

      return str
    }

    function qrToPath(data, size, margin) {
      let path = ''
      let moveBy = 0
      let newRow = false
      let lineLength = 0

      for (let i = 0; i < data.length; i++) {
        const col = Math.floor(i % size)
        const row = Math.floor(i / size)

        if (!col && !newRow) newRow = true

        if (data[i]) {
          lineLength++

          if (!(i > 0 && col > 0 && data[i - 1])) {
            path += newRow
              ? svgCmd('M', col + margin, 0.5 + row + margin)
              : svgCmd('m', moveBy, 0)

            moveBy = 0
            newRow = false
          }

          if (!(col + 1 < size && data[i + 1])) {
            path += svgCmd('h', lineLength)
            lineLength = 0
          }
        } else {
          moveBy++
        }
      }

      return path
    }

    exports.render = function render(qrData, options, cb) {
      const opts = Utils.getOptions(options)
      const size = qrData.modules.size
      const data = qrData.modules.data
      const qrcodesize = size + opts.margin * 2

      const bg = !opts.color.light.a
        ? ''
        : '<path ' + getColorAttrib(opts.color.light, 'fill') +
        ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>'

      const path =
        '<path ' + getColorAttrib(opts.color.dark, 'stroke') +
        ' d="' + qrToPath(data, size, opts.margin) + '"/>'

      const viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"'

      const width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" '

      const svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>\n'

      if (typeof cb === 'function') {
        cb(null, svgTag)
      }

      return svgTag
    }

  }, { "./utils": 279 }], 279: [function (require, module, exports) {
    function hex2rgba(hex) {
      if (typeof hex === 'number') {
        hex = hex.toString()
      }

      if (typeof hex !== 'string') {
        throw new Error('Color should be defined as hex string')
      }

      let hexCode = hex.slice().replace('#', '').split('')
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error('Invalid hex color: ' + hex)
      }

      // Convert from short to long form (fff -> ffffff)
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
          return [c, c]
        }))
      }

      // Add default alpha value
      if (hexCode.length === 6) hexCode.push('F', 'F')

      const hexValue = parseInt(hexCode.join(''), 16)

      return {
        r: (hexValue >> 24) & 255,
        g: (hexValue >> 16) & 255,
        b: (hexValue >> 8) & 255,
        a: hexValue & 255,
        hex: '#' + hexCode.slice(0, 6).join('')
      }
    }

    exports.getOptions = function getOptions(options) {
      if (!options) options = {}
      if (!options.color) options.color = {}

      const margin = typeof options.margin === 'undefined' ||
        options.margin === null ||
        options.margin < 0
        ? 4
        : options.margin

      const width = options.width && options.width >= 21 ? options.width : undefined
      const scale = options.scale || 4

      return {
        width: width,
        scale: width ? 4 : scale,
        margin: margin,
        color: {
          dark: hex2rgba(options.color.dark || '#000000ff'),
          light: hex2rgba(options.color.light || '#ffffffff')
        },
        type: options.type,
        rendererOpts: options.rendererOpts || {}
      }
    }

    exports.getScale = function getScale(qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2
        ? opts.width / (qrSize + opts.margin * 2)
        : opts.scale
    }

    exports.getImageWidth = function getImageWidth(qrSize, opts) {
      const scale = exports.getScale(qrSize, opts)
      return Math.floor((qrSize + opts.margin * 2) * scale)
    }

    exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
      const size = qr.modules.size
      const data = qr.modules.data
      const scale = exports.getScale(size, opts)
      const symbolSize = Math.floor((size + opts.margin * 2) * scale)
      const scaledMargin = opts.margin * scale
      const palette = [opts.color.light, opts.color.dark]

      for (let i = 0; i < symbolSize; i++) {
        for (let j = 0; j < symbolSize; j++) {
          let posDst = (i * symbolSize + j) * 4
          let pxColor = opts.color.light

          if (i >= scaledMargin && j >= scaledMargin &&
            i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
            const iSrc = Math.floor((i - scaledMargin) / scale)
            const jSrc = Math.floor((j - scaledMargin) / scale)
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0]
          }

          imgData[posDst++] = pxColor.r
          imgData[posDst++] = pxColor.g
          imgData[posDst++] = pxColor.b
          imgData[posDst] = pxColor.a
        }
      }
    }

  }, {}], 280: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    module.exports = function (qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);

      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };

  }, {}], 281: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    var stringifyPrimitive = function (v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    };

    module.exports = function (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map(objectKeys(obj), function (k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray(obj[k])) {
            return map(obj[k], function (v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);

      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
        encodeURIComponent(stringifyPrimitive(obj));
    };

    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };

    function map(xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };

  }, {}], 282: [function (require, module, exports) {
    'use strict';

    exports.decode = exports.parse = require('./decode');
    exports.encode = exports.stringify = require('./encode');

  }, { "./decode": 280, "./encode": 281 }], 283: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        'use strict'

        // limit of Crypto.getRandomValues()
        // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
        var MAX_BYTES = 65536

        // Node supports requesting up to this number of bytes
        // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
        var MAX_UINT32 = 4294967295

        function oldBrowser() {
          throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
        }

        var Buffer = require('safe-buffer').Buffer
        var crypto = global.crypto || global.msCrypto

        if (crypto && crypto.getRandomValues) {
          module.exports = randomBytes
        } else {
          module.exports = oldBrowser
        }

        function randomBytes(size, cb) {
          // phantomjs needs to throw
          if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

          var bytes = Buffer.allocUnsafe(size)

          if (size > 0) {  // getRandomValues fails on IE if size == 0
            if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
              // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
              for (var generated = 0; generated < size; generated += MAX_BYTES) {
                // buffer.slice automatically checks if the end is past the end of
                // the buffer so we don't have to here
                crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
              }
            } else {
              crypto.getRandomValues(bytes)
            }
          }

          if (typeof cb === 'function') {
            return process.nextTick(function () {
              cb(null, bytes)
            })
          }

          return bytes
        }

      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "_process": 244, "safe-buffer": 286 }], 284: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        'use strict'

        function oldBrowser() {
          throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
        }
        var safeBuffer = require('safe-buffer')
        var randombytes = require('randombytes')
        var Buffer = safeBuffer.Buffer
        var kBufferMaxLength = safeBuffer.kMaxLength
        var crypto = global.crypto || global.msCrypto
        var kMaxUint32 = Math.pow(2, 32) - 1
        function assertOffset(offset, length) {
          if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
            throw new TypeError('offset must be a number')
          }

          if (offset > kMaxUint32 || offset < 0) {
            throw new TypeError('offset must be a uint32')
          }

          if (offset > kBufferMaxLength || offset > length) {
            throw new RangeError('offset out of range')
          }
        }

        function assertSize(size, offset, length) {
          if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
            throw new TypeError('size must be a number')
          }

          if (size > kMaxUint32 || size < 0) {
            throw new TypeError('size must be a uint32')
          }

          if (size + offset > length || size > kBufferMaxLength) {
            throw new RangeError('buffer too small')
          }
        }
        if ((crypto && crypto.getRandomValues) || !process.browser) {
          exports.randomFill = randomFill
          exports.randomFillSync = randomFillSync
        } else {
          exports.randomFill = oldBrowser
          exports.randomFillSync = oldBrowser
        }
        function randomFill(buf, offset, size, cb) {
          if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
          }

          if (typeof offset === 'function') {
            cb = offset
            offset = 0
            size = buf.length
          } else if (typeof size === 'function') {
            cb = size
            size = buf.length - offset
          } else if (typeof cb !== 'function') {
            throw new TypeError('"cb" argument must be a function')
          }
          assertOffset(offset, buf.length)
          assertSize(size, offset, buf.length)
          return actualFill(buf, offset, size, cb)
        }

        function actualFill(buf, offset, size, cb) {
          if (process.browser) {
            var ourBuf = buf.buffer
            var uint = new Uint8Array(ourBuf, offset, size)
            crypto.getRandomValues(uint)
            if (cb) {
              process.nextTick(function () {
                cb(null, buf)
              })
              return
            }
            return buf
          }
          if (cb) {
            randombytes(size, function (err, bytes) {
              if (err) {
                return cb(err)
              }
              bytes.copy(buf, offset)
              cb(null, buf)
            })
            return
          }
          var bytes = randombytes(size)
          bytes.copy(buf, offset)
          return buf
        }
        function randomFillSync(buf, offset, size) {
          if (typeof offset === 'undefined') {
            offset = 0
          }
          if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
          }

          assertOffset(offset, buf.length)

          if (size === undefined) size = buf.length - offset

          assertSize(size, offset, buf.length)

          return actualFill(buf, offset, size)
        }

      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "_process": 244, "randombytes": 283, "safe-buffer": 286 }], 285: [function (require, module, exports) {
    'use strict'
    var Buffer = require('buffer').Buffer
    var inherits = require('inherits')
    var HashBase = require('hash-base')

    var ARRAY16 = new Array(16)

    var zl = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ]

    var zr = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ]

    var sl = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ]

    var sr = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ]

    var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
    var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

    function RIPEMD160() {
      HashBase.call(this, 64)

      // state
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0
    }

    inherits(RIPEMD160, HashBase)

    RIPEMD160.prototype._update = function () {
      var words = ARRAY16
      for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

      var al = this._a | 0
      var bl = this._b | 0
      var cl = this._c | 0
      var dl = this._d | 0
      var el = this._e | 0

      var ar = this._a | 0
      var br = this._b | 0
      var cr = this._c | 0
      var dr = this._d | 0
      var er = this._e | 0

      // computation
      for (var i = 0; i < 80; i += 1) {
        var tl
        var tr
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
        } else { // if (i<80) {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
        }

        al = el
        el = dl
        dl = rotl(cl, 10)
        cl = bl
        bl = tl

        ar = er
        er = dr
        dr = rotl(cr, 10)
        cr = br
        br = tr
      }

      // update state
      var t = (this._b + cl + dr) | 0
      this._b = (this._c + dl + er) | 0
      this._c = (this._d + el + ar) | 0
      this._d = (this._e + al + br) | 0
      this._e = (this._a + bl + cr) | 0
      this._a = t
    }

    RIPEMD160.prototype._digest = function () {
      // create padding and handle blocks
      this._block[this._blockOffset++] = 0x80
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64)
        this._update()
        this._blockOffset = 0
      }

      this._block.fill(0, this._blockOffset, 56)
      this._block.writeUInt32LE(this._length[0], 56)
      this._block.writeUInt32LE(this._length[1], 60)
      this._update()

      // produce result
      var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
      buffer.writeInt32LE(this._a, 0)
      buffer.writeInt32LE(this._b, 4)
      buffer.writeInt32LE(this._c, 8)
      buffer.writeInt32LE(this._d, 12)
      buffer.writeInt32LE(this._e, 16)
      return buffer
    }

    function rotl(x, n) {
      return (x << n) | (x >>> (32 - n))
    }

    function fn1(a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
    }

    function fn2(a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
    }

    function fn3(a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
    }

    function fn4(a, b, c, d, e, m, k, s) {
      return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
    }

    function fn5(a, b, c, d, e, m, k, s) {
      return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
    }

    module.exports = RIPEMD160

  }, { "buffer": 96, "hash-base": 172, "inherits": 203 }], 286: [function (require, module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require('buffer')
    var Buffer = buffer.Buffer

    // alternative to using Object.keys for old browsers
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key]
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports)
      exports.Buffer = SafeBuffer
    }

    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer)

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size)
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding)
        } else {
          buf.fill(fill)
        }
      } else {
        buf.fill(0)
      }
      return buf
    }

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    }

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    }

  }, { "buffer": 96 }], 287: [function (require, module, exports) {
    (function (process) {
      (function () {
        /* eslint-disable node/no-deprecated-api */

        'use strict'

        var buffer = require('buffer')
        var Buffer = buffer.Buffer

        var safer = {}

        var key

        for (key in buffer) {
          if (!buffer.hasOwnProperty(key)) continue
          if (key === 'SlowBuffer' || key === 'Buffer') continue
          safer[key] = buffer[key]
        }

        var Safer = safer.Buffer = {}
        for (key in Buffer) {
          if (!Buffer.hasOwnProperty(key)) continue
          if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
          Safer[key] = Buffer[key]
        }

        safer.Buffer.prototype = Buffer.prototype

        if (!Safer.from || Safer.from === Uint8Array.from) {
          Safer.from = function (value, encodingOrOffset, length) {
            if (typeof value === 'number') {
              throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
            }
            if (value && typeof value.length === 'undefined') {
              throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
            }
            return Buffer(value, encodingOrOffset, length)
          }
        }

        if (!Safer.alloc) {
          Safer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
              throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
            }
            if (size < 0 || size >= 2 * (1 << 30)) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"')
            }
            var buf = Buffer(size)
            if (!fill || fill.length === 0) {
              buf.fill(0)
            } else if (typeof encoding === 'string') {
              buf.fill(fill, encoding)
            } else {
              buf.fill(fill)
            }
            return buf
          }
        }

        if (!safer.kStringMaxLength) {
          try {
            safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
          } catch (e) {
            // we can't determine kStringMaxLength in environments where process.binding
            // is unsupported, so let's not set it
          }
        }

        if (!safer.constants) {
          safer.constants = {
            MAX_LENGTH: safer.kMaxLength
          }
          if (safer.kStringMaxLength) {
            safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
          }
        }

        module.exports = safer

      }).call(this)
    }).call(this, require('_process'))

  }, { "_process": 244, "buffer": 96 }], 288: [function (require, module, exports) {
    var Buffer = require('safe-buffer').Buffer

    // prototype class for hash functions
    function Hash(blockSize, finalSize) {
      this._block = Buffer.alloc(blockSize)
      this._finalSize = finalSize
      this._blockSize = blockSize
      this._len = 0
    }

    Hash.prototype.update = function (data, enc) {
      if (typeof data === 'string') {
        enc = enc || 'utf8'
        data = Buffer.from(data, enc)
      }

      var block = this._block
      var blockSize = this._blockSize
      var length = data.length
      var accum = this._len

      for (var offset = 0; offset < length;) {
        var assigned = accum % blockSize
        var remainder = Math.min(length - offset, blockSize - assigned)

        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i]
        }

        accum += remainder
        offset += remainder

        if ((accum % blockSize) === 0) {
          this._update(block)
        }
      }

      this._len += length
      return this
    }

    Hash.prototype.digest = function (enc) {
      var rem = this._len % this._blockSize

      this._block[rem] = 0x80

      // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
      // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
      this._block.fill(0, rem + 1)

      if (rem >= this._finalSize) {
        this._update(this._block)
        this._block.fill(0)
      }

      var bits = this._len * 8

      // uint32
      if (bits <= 0xffffffff) {
        this._block.writeUInt32BE(bits, this._blockSize - 4)

        // uint64
      } else {
        var lowBits = (bits & 0xffffffff) >>> 0
        var highBits = (bits - lowBits) / 0x100000000

        this._block.writeUInt32BE(highBits, this._blockSize - 8)
        this._block.writeUInt32BE(lowBits, this._blockSize - 4)
      }

      this._update(this._block)
      var hash = this._hash()

      return enc ? hash.toString(enc) : hash
    }

    Hash.prototype._update = function () {
      throw new Error('_update must be implemented by subclass')
    }

    module.exports = Hash

  }, { "safe-buffer": 286 }], 289: [function (require, module, exports) {
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase()

      var Algorithm = exports[algorithm]
      if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

      return new Algorithm()
    }

    exports.sha = require('./sha')
    exports.sha1 = require('./sha1')
    exports.sha224 = require('./sha224')
    exports.sha256 = require('./sha256')
    exports.sha384 = require('./sha384')
    exports.sha512 = require('./sha512')

  }, { "./sha": 290, "./sha1": 291, "./sha224": 292, "./sha256": 293, "./sha384": 294, "./sha512": 295 }], 290: [function (require, module, exports) {
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
     * in FIPS PUB 180-1
     * This source code is derived from sha1.js of the same repository.
     * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
     * operation was added.
     */

    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer

    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ]

    var W = new Array(80)

    function Sha() {
      this.init()
      this._w = W

      Hash.call(this, 64, 56)
    }

    inherits(Sha, Hash)

    Sha.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0

      return this
    }

    function rotl5(num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30(num) {
      return (num << 30) | (num >>> 2)
    }

    function ft(s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha.prototype._update = function (M) {
      var W = this._w

      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20)
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

        e = d
        d = c
        c = rotl30(b)
        b = a
        a = t
      }

      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
    }

    Sha.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20)

      H.writeInt32BE(this._a | 0, 0)
      H.writeInt32BE(this._b | 0, 4)
      H.writeInt32BE(this._c | 0, 8)
      H.writeInt32BE(this._d | 0, 12)
      H.writeInt32BE(this._e | 0, 16)

      return H
    }

    module.exports = Sha

  }, { "./hash": 288, "inherits": 203, "safe-buffer": 286 }], 291: [function (require, module, exports) {
    /*
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
     * in FIPS PUB 180-1
     * Version 2.1a Copyright Paul Johnston 2000 - 2002.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * Distributed under the BSD License
     * See http://pajhome.org.uk/crypt/md5 for details.
     */

    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer

    var K = [
      0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
    ]

    var W = new Array(80)

    function Sha1() {
      this.init()
      this._w = W

      Hash.call(this, 64, 56)
    }

    inherits(Sha1, Hash)

    Sha1.prototype.init = function () {
      this._a = 0x67452301
      this._b = 0xefcdab89
      this._c = 0x98badcfe
      this._d = 0x10325476
      this._e = 0xc3d2e1f0

      return this
    }

    function rotl1(num) {
      return (num << 1) | (num >>> 31)
    }

    function rotl5(num) {
      return (num << 5) | (num >>> 27)
    }

    function rotl30(num) {
      return (num << 30) | (num >>> 2)
    }

    function ft(s, b, c, d) {
      if (s === 0) return (b & c) | ((~b) & d)
      if (s === 2) return (b & c) | (b & d) | (c & d)
      return b ^ c ^ d
    }

    Sha1.prototype._update = function (M) {
      var W = this._w

      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20)
        var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

        e = d
        d = c
        c = rotl30(b)
        b = a
        a = t
      }

      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
    }

    Sha1.prototype._hash = function () {
      var H = Buffer.allocUnsafe(20)

      H.writeInt32BE(this._a | 0, 0)
      H.writeInt32BE(this._b | 0, 4)
      H.writeInt32BE(this._c | 0, 8)
      H.writeInt32BE(this._d | 0, 12)
      H.writeInt32BE(this._e | 0, 16)

      return H
    }

    module.exports = Sha1

  }, { "./hash": 288, "inherits": 203, "safe-buffer": 286 }], 292: [function (require, module, exports) {
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */

    var inherits = require('inherits')
    var Sha256 = require('./sha256')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer

    var W = new Array(64)

    function Sha224() {
      this.init()

      this._w = W // new Array(64)

      Hash.call(this, 64, 56)
    }

    inherits(Sha224, Sha256)

    Sha224.prototype.init = function () {
      this._a = 0xc1059ed8
      this._b = 0x367cd507
      this._c = 0x3070dd17
      this._d = 0xf70e5939
      this._e = 0xffc00b31
      this._f = 0x68581511
      this._g = 0x64f98fa7
      this._h = 0xbefa4fa4

      return this
    }

    Sha224.prototype._hash = function () {
      var H = Buffer.allocUnsafe(28)

      H.writeInt32BE(this._a, 0)
      H.writeInt32BE(this._b, 4)
      H.writeInt32BE(this._c, 8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)

      return H
    }

    module.exports = Sha224

  }, { "./hash": 288, "./sha256": 293, "inherits": 203, "safe-buffer": 286 }], 293: [function (require, module, exports) {
    /**
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
     * in FIPS 180-2
     * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     *
     */

    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer

    var K = [
      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
    ]

    var W = new Array(64)

    function Sha256() {
      this.init()

      this._w = W // new Array(64)

      Hash.call(this, 64, 56)
    }

    inherits(Sha256, Hash)

    Sha256.prototype.init = function () {
      this._a = 0x6a09e667
      this._b = 0xbb67ae85
      this._c = 0x3c6ef372
      this._d = 0xa54ff53a
      this._e = 0x510e527f
      this._f = 0x9b05688c
      this._g = 0x1f83d9ab
      this._h = 0x5be0cd19

      return this
    }

    function ch(x, y, z) {
      return z ^ (x & (y ^ z))
    }

    function maj(x, y, z) {
      return (x & y) | (z & (x | y))
    }

    function sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
    }

    function sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
    }

    function gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
    }

    function gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
    }

    Sha256.prototype._update = function (M) {
      var W = this._w

      var a = this._a | 0
      var b = this._b | 0
      var c = this._c | 0
      var d = this._d | 0
      var e = this._e | 0
      var f = this._f | 0
      var g = this._g | 0
      var h = this._h | 0

      for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
      for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

      for (var j = 0; j < 64; ++j) {
        var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
        var T2 = (sigma0(a) + maj(a, b, c)) | 0

        h = g
        g = f
        f = e
        e = (d + T1) | 0
        d = c
        c = b
        b = a
        a = (T1 + T2) | 0
      }

      this._a = (a + this._a) | 0
      this._b = (b + this._b) | 0
      this._c = (c + this._c) | 0
      this._d = (d + this._d) | 0
      this._e = (e + this._e) | 0
      this._f = (f + this._f) | 0
      this._g = (g + this._g) | 0
      this._h = (h + this._h) | 0
    }

    Sha256.prototype._hash = function () {
      var H = Buffer.allocUnsafe(32)

      H.writeInt32BE(this._a, 0)
      H.writeInt32BE(this._b, 4)
      H.writeInt32BE(this._c, 8)
      H.writeInt32BE(this._d, 12)
      H.writeInt32BE(this._e, 16)
      H.writeInt32BE(this._f, 20)
      H.writeInt32BE(this._g, 24)
      H.writeInt32BE(this._h, 28)

      return H
    }

    module.exports = Sha256

  }, { "./hash": 288, "inherits": 203, "safe-buffer": 286 }], 294: [function (require, module, exports) {
    var inherits = require('inherits')
    var SHA512 = require('./sha512')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer

    var W = new Array(160)

    function Sha384() {
      this.init()
      this._w = W

      Hash.call(this, 128, 112)
    }

    inherits(Sha384, SHA512)

    Sha384.prototype.init = function () {
      this._ah = 0xcbbb9d5d
      this._bh = 0x629a292a
      this._ch = 0x9159015a
      this._dh = 0x152fecd8
      this._eh = 0x67332667
      this._fh = 0x8eb44a87
      this._gh = 0xdb0c2e0d
      this._hh = 0x47b5481d

      this._al = 0xc1059ed8
      this._bl = 0x367cd507
      this._cl = 0x3070dd17
      this._dl = 0xf70e5939
      this._el = 0xffc00b31
      this._fl = 0x68581511
      this._gl = 0x64f98fa7
      this._hl = 0xbefa4fa4

      return this
    }

    Sha384.prototype._hash = function () {
      var H = Buffer.allocUnsafe(48)

      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }

      writeInt64BE(this._ah, this._al, 0)
      writeInt64BE(this._bh, this._bl, 8)
      writeInt64BE(this._ch, this._cl, 16)
      writeInt64BE(this._dh, this._dl, 24)
      writeInt64BE(this._eh, this._el, 32)
      writeInt64BE(this._fh, this._fl, 40)

      return H
    }

    module.exports = Sha384

  }, { "./hash": 288, "./sha512": 295, "inherits": 203, "safe-buffer": 286 }], 295: [function (require, module, exports) {
    var inherits = require('inherits')
    var Hash = require('./hash')
    var Buffer = require('safe-buffer').Buffer

    var K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ]

    var W = new Array(160)

    function Sha512() {
      this.init()
      this._w = W

      Hash.call(this, 128, 112)
    }

    inherits(Sha512, Hash)

    Sha512.prototype.init = function () {
      this._ah = 0x6a09e667
      this._bh = 0xbb67ae85
      this._ch = 0x3c6ef372
      this._dh = 0xa54ff53a
      this._eh = 0x510e527f
      this._fh = 0x9b05688c
      this._gh = 0x1f83d9ab
      this._hh = 0x5be0cd19

      this._al = 0xf3bcc908
      this._bl = 0x84caa73b
      this._cl = 0xfe94f82b
      this._dl = 0x5f1d36f1
      this._el = 0xade682d1
      this._fl = 0x2b3e6c1f
      this._gl = 0xfb41bd6b
      this._hl = 0x137e2179

      return this
    }

    function Ch(x, y, z) {
      return z ^ (x & (y ^ z))
    }

    function maj(x, y, z) {
      return (x & y) | (z & (x | y))
    }

    function sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
    }

    function sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
    }

    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
    }

    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
    }

    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
    }

    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
    }

    function getCarry(a, b) {
      return (a >>> 0) < (b >>> 0) ? 1 : 0
    }

    Sha512.prototype._update = function (M) {
      var W = this._w

      var ah = this._ah | 0
      var bh = this._bh | 0
      var ch = this._ch | 0
      var dh = this._dh | 0
      var eh = this._eh | 0
      var fh = this._fh | 0
      var gh = this._gh | 0
      var hh = this._hh | 0

      var al = this._al | 0
      var bl = this._bl | 0
      var cl = this._cl | 0
      var dl = this._dl | 0
      var el = this._el | 0
      var fl = this._fl | 0
      var gl = this._gl | 0
      var hl = this._hl | 0

      for (var i = 0; i < 32; i += 2) {
        W[i] = M.readInt32BE(i * 4)
        W[i + 1] = M.readInt32BE(i * 4 + 4)
      }
      for (; i < 160; i += 2) {
        var xh = W[i - 15 * 2]
        var xl = W[i - 15 * 2 + 1]
        var gamma0 = Gamma0(xh, xl)
        var gamma0l = Gamma0l(xl, xh)

        xh = W[i - 2 * 2]
        xl = W[i - 2 * 2 + 1]
        var gamma1 = Gamma1(xh, xl)
        var gamma1l = Gamma1l(xl, xh)

        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 7 * 2]
        var Wi7l = W[i - 7 * 2 + 1]

        var Wi16h = W[i - 16 * 2]
        var Wi16l = W[i - 16 * 2 + 1]

        var Wil = (gamma0l + Wi7l) | 0
        var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
        Wil = (Wil + gamma1l) | 0
        Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
        Wil = (Wil + Wi16l) | 0
        Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

        W[i] = Wih
        W[i + 1] = Wil
      }

      for (var j = 0; j < 160; j += 2) {
        Wih = W[j]
        Wil = W[j + 1]

        var majh = maj(ah, bh, ch)
        var majl = maj(al, bl, cl)

        var sigma0h = sigma0(ah, al)
        var sigma0l = sigma0(al, ah)
        var sigma1h = sigma1(eh, el)
        var sigma1l = sigma1(el, eh)

        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j]
        var Kil = K[j + 1]

        var chh = Ch(eh, fh, gh)
        var chl = Ch(el, fl, gl)

        var t1l = (hl + sigma1l) | 0
        var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
        t1l = (t1l + chl) | 0
        t1h = (t1h + chh + getCarry(t1l, chl)) | 0
        t1l = (t1l + Kil) | 0
        t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
        t1l = (t1l + Wil) | 0
        t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

        // t2 = sigma0 + maj
        var t2l = (sigma0l + majl) | 0
        var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

        hh = gh
        hl = gl
        gh = fh
        gl = fl
        fh = eh
        fl = el
        el = (dl + t1l) | 0
        eh = (dh + t1h + getCarry(el, dl)) | 0
        dh = ch
        dl = cl
        ch = bh
        cl = bl
        bh = ah
        bl = al
        al = (t1l + t2l) | 0
        ah = (t1h + t2h + getCarry(al, t1l)) | 0
      }

      this._al = (this._al + al) | 0
      this._bl = (this._bl + bl) | 0
      this._cl = (this._cl + cl) | 0
      this._dl = (this._dl + dl) | 0
      this._el = (this._el + el) | 0
      this._fl = (this._fl + fl) | 0
      this._gl = (this._gl + gl) | 0
      this._hl = (this._hl + hl) | 0

      this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
      this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
      this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
      this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
      this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
      this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
      this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
      this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
    }

    Sha512.prototype._hash = function () {
      var H = Buffer.allocUnsafe(64)

      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset)
        H.writeInt32BE(l, offset + 4)
      }

      writeInt64BE(this._ah, this._al, 0)
      writeInt64BE(this._bh, this._bl, 8)
      writeInt64BE(this._ch, this._cl, 16)
      writeInt64BE(this._dh, this._dl, 24)
      writeInt64BE(this._eh, this._el, 32)
      writeInt64BE(this._fh, this._fl, 40)
      writeInt64BE(this._gh, this._gl, 48)
      writeInt64BE(this._hh, this._hl, 56)

      return H
    }

    module.exports = Sha512

  }, { "./hash": 288, "inherits": 203, "safe-buffer": 286 }], 296: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    module.exports = Stream;

    var EE = require('events').EventEmitter;
    var inherits = require('inherits');

    inherits(Stream, EE);
    Stream.Readable = require('readable-stream/lib/_stream_readable.js');
    Stream.Writable = require('readable-stream/lib/_stream_writable.js');
    Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
    Stream.Transform = require('readable-stream/lib/_stream_transform.js');
    Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
    Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
    Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;



    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EE.call(this);
    }

    Stream.prototype.pipe = function (dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

  }, { "events": 162, "inherits": 203, "readable-stream/lib/_stream_duplex.js": 298, "readable-stream/lib/_stream_passthrough.js": 299, "readable-stream/lib/_stream_readable.js": 300, "readable-stream/lib/_stream_transform.js": 301, "readable-stream/lib/_stream_writable.js": 302, "readable-stream/lib/internal/streams/end-of-stream.js": 306, "readable-stream/lib/internal/streams/pipeline.js": 308 }], 297: [function (require, module, exports) {
    arguments[4][78][0].apply(exports, arguments)
  }, { "dup": 78 }], 298: [function (require, module, exports) {
    (function (process) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // a duplex stream is just a stream that is both readable and writable.
        // Since JS doesn't have multiple prototypal inheritance, this class
        // prototypally inherits from Readable, and then parasitically from
        // Writable.
        'use strict';
        /*<replacement>*/

        var objectKeys = Object.keys || function (obj) {
          var keys = [];

          for (var key in obj) {
            keys.push(key);
          }

          return keys;
        };
        /*</replacement>*/


        module.exports = Duplex;

        var Readable = require('./_stream_readable');

        var Writable = require('./_stream_writable');

        require('inherits')(Duplex, Readable);

        {
          // Allow the keys array to be GC'ed.
          var keys = objectKeys(Writable.prototype);

          for (var v = 0; v < keys.length; v++) {
            var method = keys[v];
            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
          }
        }

        function Duplex(options) {
          if (!(this instanceof Duplex)) return new Duplex(options);
          Readable.call(this, options);
          Writable.call(this, options);
          this.allowHalfOpen = true;

          if (options) {
            if (options.readable === false) this.readable = false;
            if (options.writable === false) this.writable = false;

            if (options.allowHalfOpen === false) {
              this.allowHalfOpen = false;
              this.once('end', onend);
            }
          }
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });
        Object.defineProperty(Duplex.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        }); // the no-half-open enforcer

        function onend() {
          // If the writable side ended, then we're ok.
          if (this._writableState.ended) return; // no more data can be written.
          // But allow more writes to happen in this tick.

          process.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
          self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined || this._writableState === undefined) {
              return false;
            }

            return this._readableState.destroyed && this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (this._readableState === undefined || this._writableState === undefined) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        });
      }).call(this)
    }).call(this, require('_process'))

  }, { "./_stream_readable": 300, "./_stream_writable": 302, "_process": 244, "inherits": 203 }], 299: [function (require, module, exports) {
    arguments[4][80][0].apply(exports, arguments)
  }, { "./_stream_transform": 301, "dup": 80, "inherits": 203 }], 300: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        'use strict';

        module.exports = Readable;
        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = require('events').EventEmitter;

        var EElistenerCount = function EElistenerCount(emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () { };

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }
        /*<replacement>*/


        var debugUtil = require('util');

        var debug;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function debug() { };
        }
        /*</replacement>*/


        var BufferList = require('./internal/streams/buffer_list');

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
          getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
          ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
          ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


        var StringDecoder;
        var createReadableStreamAsyncIterator;
        var from;

        require('inherits')(Readable, Stream);

        var errorOrDestroy = destroyImpl.errorOrDestroy;
        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
          // userland ones.  NEVER DO THIS. This is here only because this code needs
          // to continue to work with older versions of Node.js that do not include
          // the prependListener() method. The goal is to eventually remove this hack.

          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
        }

        function ReadableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream.
          // These options can be provided separately as readableXXX and writableXXX.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
          // immediately, or on a later tick.  We set this to true at first, because
          // any actions that shouldn't happen until "later" should generally also
          // not happen before the first read call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;
          this.paused = true; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

          this.autoDestroy = !!options.autoDestroy; // has it been destroyed

          this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || require('./_stream_duplex');
          if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
          // the ReadableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          this._readableState = new ReadableState(options, this, isDuplex); // legacy

          this.readable = true;

          if (options) {
            if (typeof options.read === 'function') this._read = options.read;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
          }

          Stream.call(this);
        }

        Object.defineProperty(Readable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._readableState === undefined) {
              return false;
            }

            return this._readableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._readableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._readableState.destroyed = value;
          }
        });
        Readable.prototype.destroy = destroyImpl.destroy;
        Readable.prototype._undestroy = destroyImpl.undestroy;

        Readable.prototype._destroy = function (err, cb) {
          cb(err);
        }; // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;
          var skipChunkCheck;

          if (!state.objectMode) {
            if (typeof chunk === 'string') {
              encoding = encoding || state.defaultEncoding;

              if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
              }

              skipChunkCheck = true;
            }
          } else {
            skipChunkCheck = true;
          }

          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          return readableAddChunk(this, chunk, null, true, false);
        };

        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
          debug('readableAddChunk', chunk);
          var state = stream._readableState;

          if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else {
            var er;
            if (!skipChunkCheck) er = chunkInvalid(state, chunk);

            if (er) {
              errorOrDestroy(stream, er);
            } else if (state.objectMode || chunk && chunk.length > 0) {
              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                chunk = _uint8ArrayToBuffer(chunk);
              }

              if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()); else addChunk(stream, state, chunk, true);
              } else if (state.ended) {
                errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
              } else if (state.destroyed) {
                return false;
              } else {
                state.reading = false;

                if (state.decoder && !encoding) {
                  chunk = state.decoder.write(chunk);
                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                } else {
                  addChunk(stream, state, chunk, false);
                }
              }
            } else if (!addToFront) {
              state.reading = false;
              maybeReadMore(stream, state);
            }
          } // We can push more data if we are below the highWaterMark.
          // Also, if we have no data yet, we can stand some more bytes.
          // This is to work around cases where hwm=0, such as the repl.


          return !state.ended && (state.length < state.highWaterMark || state.length === 0);
        }

        function addChunk(stream, state, chunk, addToFront) {
          if (state.flowing && state.length === 0 && !state.sync) {
            state.awaitDrain = 0;
            stream.emit('data', chunk);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
            if (state.needReadable) emitReadable(stream);
          }

          maybeReadMore(stream, state);
        }

        function chunkInvalid(state, chunk) {
          var er;

          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
          }

          return er;
        }

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        }; // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
          var decoder = new StringDecoder(enc);
          this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

          this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

          var p = this._readableState.buffer.head;
          var content = '';

          while (p !== null) {
            content += decoder.write(p.data);
            p = p.next;
          }

          this._readableState.buffer.clear();

          if (content !== '') this._readableState.buffer.push(content);
          this._readableState.length = content.length;
          return this;
        }; // Don't raise the hwm > 1GB


        var MAX_HWM = 0x40000000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state); else ret = null;

          if (ret === null) {
            state.needReadable = state.length <= state.highWaterMark;
            n = 0;
          } else {
            state.length -= n;
            state.awaitDrain = 0;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function onEofChunk(stream, state) {
          debug('onEofChunk');
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true;

          if (state.sync) {
            // if we are sync, wait until next tick to emit the data.
            // Otherwise we risk emitting data in the flow()
            // the readable code triggers during a read() call
            emitReadable(stream);
          } else {
            // emit 'readable' now to make sure it gets picked up.
            state.needReadable = false;

            if (!state.emittedReadable) {
              state.emittedReadable = true;
              emitReadable_(stream);
            }
          }
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          debug('emitReadable', state.needReadable, state.emittedReadable);
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            process.nextTick(emitReadable_, stream);
          }
        }

        function emitReadable_(stream) {
          var state = stream._readableState;
          debug('emitReadable_', state.destroyed, state.length, state.ended);

          if (!state.destroyed && (state.length || state.ended)) {
            stream.emit('readable');
            state.emittedReadable = false;
          } // The stream needs another readable event if
          // 1. It is not flowing, as the flow mechanism will take
          //    care of it.
          // 2. It is not ended.
          // 3. It is below the highWaterMark, so we can schedule
          //    another readable later.


          state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            process.nextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          // Attempt to read more data if we should.
          //
          // The conditions for reading more data are (one of):
          // - Not enough data buffered (state.length < state.highWaterMark). The loop
          //   is responsible for filling the buffer with enough data if such data
          //   is available. If highWaterMark is 0 and we are not in the flowing mode
          //   we should _not_ attempt to buffer any extra data. We'll get more data
          //   when the stream consumer calls read() instead.
          // - No data in the buffer, and the stream is in flowing mode. In this mode
          //   the loop below is responsible for ensuring read() is called. Failing to
          //   call read here would abort the flow and there's no other mechanism for
          //   continuing the flow if the stream consumer has just subscribed to the
          //   'data' event.
          //
          // In addition to the above conditions to keep reading data, the following
          // conditions prevent the data from being read:
          // - The stream has ended (state.ended).
          // - There is already a pending 'read' operation (state.reading). This is a
          //   case where the the stream has called the implementation defined _read()
          //   method, but they are processing the call asynchronously and have _not_
          //   called push() with new data. In this case we skip performing more
          //   read()s. The execution ends in this method again after the _read() ends
          //   up calling push() with more data.
          while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
            var len = state.length;
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : unpipe;
          if (state.endEmitted) process.nextTick(endFn); else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable, unpipeInfo) {
            debug('onunpipe');

            if (readable === src) {
              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
              }
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', unpipe);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          }

          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            var ret = dest.write(chunk);
            debug('dest.write', ret);

            if (ret === false) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function pipeOnDrainFunctionResult() {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var unpipeInfo = {
            hasUnpiped: false
          }; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this, unpipeInfo);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this, {
                hasUnpiped: false
              });
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this, unpipeInfo);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);
          var state = this._readableState;

          if (ev === 'data') {
            // update readableListening so that resume() may be a no-op
            // a few lines down. This is needed to support once('readable').
            state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

            if (state.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.flowing = false;
              state.emittedReadable = false;
              debug('on readable', state.length, state.reading);

              if (state.length) {
                emitReadable(this);
              } else if (!state.reading) {
                process.nextTick(nReadingNextTick, this);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        Readable.prototype.removeListener = function (ev, fn) {
          var res = Stream.prototype.removeListener.call(this, ev, fn);

          if (ev === 'readable') {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        Readable.prototype.removeAllListeners = function (ev) {
          var res = Stream.prototype.removeAllListeners.apply(this, arguments);

          if (ev === 'readable' || ev === undefined) {
            // We need to check if there is someone still listening to
            // readable and reset the state. However this needs to happen
            // after readable has been emitted but before I/O (nextTick) to
            // support once('readable', fn) cycles. This means that calling
            // resume within the same tick will have no
            // effect.
            process.nextTick(updateReadableListening, this);
          }

          return res;
        };

        function updateReadableListening(self) {
          var state = self._readableState;
          state.readableListening = self.listenerCount('readable') > 0;

          if (state.resumeScheduled && !state.paused) {
            // flowing needs to be set to true now, otherwise
            // the upcoming resume will not flow.
            state.flowing = true; // crude way to check if we should resume
          } else if (self.listenerCount('data') > 0) {
            self.resume();
          }
        }

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume'); // we flow only if there is no one listening
            // for readable, but we still have to call
            // resume()

            state.flowing = !state.readableListening;
            resume(this, state);
          }

          state.paused = false;
          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            process.nextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          debug('resume', state.reading);

          if (!state.reading) {
            stream.read(0);
          }

          state.resumeScheduled = false;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (this._readableState.flowing !== false) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          this._readableState.paused = true;
          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {
            ;
          }
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var _this = this;

          var state = this._readableState;
          var paused = false;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) _this.push(chunk);
            }

            _this.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

            var ret = _this.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function methodWrap(method) {
                return function methodWrapReturnFunction() {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          for (var n = 0; n < kProxyEvents.length; n++) {
            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
          } // when we try to consume some more bytes, simply unpause the
          // underlying stream.


          this._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return this;
        };

        if (typeof Symbol === 'function') {
          Readable.prototype[Symbol.asyncIterator] = function () {
            if (createReadableStreamAsyncIterator === undefined) {
              createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
            }

            return createReadableStreamAsyncIterator(this);
          };
        }

        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.highWaterMark;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState && this._readableState.buffer;
          }
        });
        Object.defineProperty(Readable.prototype, 'readableFlowing', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.flowing;
          },
          set: function set(state) {
            if (this._readableState) {
              this._readableState.flowing = state;
            }
          }
        }); // exposed for testing purposes only.

        Readable._fromList = fromList;
        Object.defineProperty(Readable.prototype, 'readableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._readableState.length;
          }
        }); // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.first(); else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = state.buffer.consume(n, state.decoder);
          }
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState;
          debug('endReadable', state.endEmitted);

          if (!state.endEmitted) {
            state.ended = true;
            process.nextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');

            if (state.autoDestroy) {
              // In case of duplex streams we need a way to detect
              // if the writable side is ready for autoDestroy as well
              var wState = stream._writableState;

              if (!wState || wState.autoDestroy && wState.finished) {
                stream.destroy();
              }
            }
          }
        }

        if (typeof Symbol === 'function') {
          Readable.from = function (iterable, opts) {
            if (from === undefined) {
              from = require('./internal/streams/from');
            }

            return from(Readable, iterable, opts);
          };
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "../errors": 297, "./_stream_duplex": 298, "./internal/streams/async_iterator": 303, "./internal/streams/buffer_list": 304, "./internal/streams/destroy": 305, "./internal/streams/from": 307, "./internal/streams/state": 309, "./internal/streams/stream": 310, "_process": 244, "buffer": 96, "events": 162, "inherits": 203, "string_decoder/": 311, "util": 48 }], 301: [function (require, module, exports) {
    arguments[4][82][0].apply(exports, arguments)
  }, { "../errors": 297, "./_stream_duplex": 298, "dup": 82, "inherits": 203 }], 302: [function (require, module, exports) {
    (function (process, global) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';

        module.exports = Writable;
        /* <replacement> */

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function () {
            onCorkedFinish(_this, state);
          };
        }
        /* </replacement> */

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var internalUtil = {
          deprecate: require('util-deprecate')
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream = require('./internal/streams/stream');
        /*</replacement>*/


        var Buffer = require('buffer').Buffer;

        var OurUint8Array = global.Uint8Array || function () { };

        function _uint8ArrayToBuffer(chunk) {
          return Buffer.from(chunk);
        }

        function _isUint8Array(obj) {
          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
        }

        var destroyImpl = require('./internal/streams/destroy');

        var _require = require('./internal/streams/state'),
          getHighWaterMark = _require.getHighWaterMark;

        var _require$codes = require('../errors').codes,
          ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
          ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
          ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
          ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
          ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
          ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
          ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
          ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

        var errorOrDestroy = destroyImpl.errorOrDestroy;

        require('inherits')(Writable, Stream);

        function nop() { }

        function WritableState(options, stream, isDuplex) {
          Duplex = Duplex || require('./_stream_duplex');
          options = options || {}; // Duplex streams are both readable and writable, but share
          // the same options object.
          // However, some cases require setting options to different
          // values for the readable and the writable sides of the duplex stream,
          // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

          if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

          this.finalCalled = false; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // has it been destroyed

          this.destroyed = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

          this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

          this.autoDestroy = !!options.autoDestroy; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
            });
          } catch (_) { }
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function value(object) {
              if (realHasInstance.call(this, object)) return true;
              if (this !== Writable) return false;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function realHasInstance(object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.
          // Checking for a Stream.Duplex instance is faster here instead of inside
          // the WritableState constructor, at least with V8 6.5

          var isDuplex = this instanceof Duplex;
          if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
          this._writableState = new WritableState(options, this, isDuplex); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
            if (typeof options.destroy === 'function') this._destroy = options.destroy;
            if (typeof options.final === 'function') this._final = options.final;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
        };

        function writeAfterEnd(stream, cb) {
          var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var er;

          if (chunk === null) {
            er = new ERR_STREAM_NULL_VALUES();
          } else if (typeof chunk !== 'string' && !state.objectMode) {
            er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
          }

          if (er) {
            errorOrDestroy(stream, er);
            process.nextTick(cb, er);
            return false;
          }

          return true;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;

          var isBuf = !state.objectMode && _isUint8Array(chunk);

          if (isBuf && !Buffer.isBuffer(chunk)) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ending) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          this._writableState.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableBuffer', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState && this._writableState.getBuffer();
          }
        });

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = Buffer.from(chunk, encoding);
          }

          return chunk;
        }

        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.highWaterMark;
          }
        }); // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.

        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            var newChunk = decodeChunk(state, chunk, encoding);

            if (chunk !== newChunk) {
              isBuf = true;
              encoding = 'buffer';
              chunk = newChunk;
            }
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = {
              chunk: chunk,
              encoding: encoding,
              isBuf: isBuf,
              callback: cb,
              next: null
            };

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write')); else if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;

          if (sync) {
            // defer the callback if we are being called synchronously
            // to avoid piling up things on the stack
            process.nextTick(cb, er); // this can emit finish, and it will always happen
            // after error

            process.nextTick(finishMaybe, stream, state);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er);
          } else {
            // the caller expect this to happen before if
            // it is async
            cb(er);
            stream._writableState.errorEmitted = true;
            errorOrDestroy(stream, er); // this can emit finish, but finish must
            // always follow error

            finishMaybe(stream, state);
          }
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb); else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state) || stream.destroyed;

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              process.nextTick(afterWrite, stream, state, finished, cb);
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;
            var allBuffers = true;

            while (entry) {
              buffer[count] = entry;
              if (!entry.isBuf) allBuffers = false;
              entry = entry.next;
              count += 1;
            }

            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }

            state.bufferedRequestCount = 0;
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next;
              state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending) endWritable(this, state, cb);
          return this;
        };

        Object.defineProperty(Writable.prototype, 'writableLength', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            return this._writableState.length;
          }
        });

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function callFinal(stream, state) {
          stream._final(function (err) {
            state.pendingcb--;

            if (err) {
              errorOrDestroy(stream, err);
            }

            state.prefinished = true;
            stream.emit('prefinish');
            finishMaybe(stream, state);
          });
        }

        function prefinish(stream, state) {
          if (!state.prefinished && !state.finalCalled) {
            if (typeof stream._final === 'function' && !state.destroyed) {
              state.pendingcb++;
              state.finalCalled = true;
              process.nextTick(callFinal, stream, state);
            } else {
              state.prefinished = true;
              stream.emit('prefinish');
            }
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            prefinish(stream, state);

            if (state.pendingcb === 0) {
              state.finished = true;
              stream.emit('finish');

              if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;

                if (!rState || rState.autoDestroy && rState.endEmitted) {
                  stream.destroy();
                }
              }
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) process.nextTick(cb); else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        }

        function onCorkedFinish(corkReq, state, err) {
          var entry = corkReq.entry;
          corkReq.entry = null;

          while (entry) {
            var cb = entry.callback;
            state.pendingcb--;
            cb(err);
            entry = entry.next;
          } // reuse the free corkReq.


          state.corkedRequestsFree.next = corkReq;
        }

        Object.defineProperty(Writable.prototype, 'destroyed', {
          // making it explicit this property is not enumerable
          // because otherwise some prototype manipulation in
          // userland will fail
          enumerable: false,
          get: function get() {
            if (this._writableState === undefined) {
              return false;
            }

            return this._writableState.destroyed;
          },
          set: function set(value) {
            // we ignore the value if the stream
            // has not been initialized yet
            if (!this._writableState) {
              return;
            } // backward compatibility, the user is explicitly
            // managing destroyed


            this._writableState.destroyed = value;
          }
        });
        Writable.prototype.destroy = destroyImpl.destroy;
        Writable.prototype._undestroy = destroyImpl.undestroy;

        Writable.prototype._destroy = function (err, cb) {
          cb(err);
        };
      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "../errors": 297, "./_stream_duplex": 298, "./internal/streams/destroy": 305, "./internal/streams/state": 309, "./internal/streams/stream": 310, "_process": 244, "buffer": 96, "inherits": 203, "util-deprecate": 316 }], 303: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict';

        var _Object$setPrototypeO;

        function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

        var finished = require('./end-of-stream');

        var kLastResolve = Symbol('lastResolve');
        var kLastReject = Symbol('lastReject');
        var kError = Symbol('error');
        var kEnded = Symbol('ended');
        var kLastPromise = Symbol('lastPromise');
        var kHandlePromise = Symbol('handlePromise');
        var kStream = Symbol('stream');

        function createIterResult(value, done) {
          return {
            value: value,
            done: done
          };
        }

        function readAndResolve(iter) {
          var resolve = iter[kLastResolve];

          if (resolve !== null) {
            var data = iter[kStream].read(); // we defer if data is null
            // we can be expecting either 'end' or
            // 'error'

            if (data !== null) {
              iter[kLastPromise] = null;
              iter[kLastResolve] = null;
              iter[kLastReject] = null;
              resolve(createIterResult(data, false));
            }
          }
        }

        function onReadable(iter) {
          // we wait for the next tick, because it might
          // emit an error with process.nextTick
          process.nextTick(readAndResolve, iter);
        }

        function wrapForNext(lastPromise, iter) {
          return function (resolve, reject) {
            lastPromise.then(function () {
              if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
              }

              iter[kHandlePromise](resolve, reject);
            }, reject);
          };
        }

        var AsyncIteratorPrototype = Object.getPrototypeOf(function () { });
        var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },

          next: function next() {
            var _this = this;

            // if we have detected an error in the meanwhile
            // reject straight away
            var error = this[kError];

            if (error !== null) {
              return Promise.reject(error);
            }

            if (this[kEnded]) {
              return Promise.resolve(createIterResult(undefined, true));
            }

            if (this[kStream].destroyed) {
              // We need to defer via nextTick because if .destroy(err) is
              // called, the error will be emitted via nextTick, and
              // we cannot guarantee that there is no error lingering around
              // waiting to be emitted.
              return new Promise(function (resolve, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve(createIterResult(undefined, true));
                  }
                });
              });
            } // if we have multiple next() calls
            // we will wait for the previous Promise to finish
            // this logic is optimized to support for await loops,
            // where next() is only called once at a time


            var lastPromise = this[kLastPromise];
            var promise;

            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              // fast path needed to support multiple this.push()
              // without triggering the next() queue
              var data = this[kStream].read();

              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }

              promise = new Promise(this[kHandlePromise]);
            }

            this[kLastPromise] = promise;
            return promise;
          }
        }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
          return this;
        }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this;

          // destroy(err, cb) is a private API
          // we can guarantee we have that here, because we control the
          // Readable class this is attached to
          return new Promise(function (resolve, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err);
                return;
              }

              resolve(createIterResult(undefined, true));
            });
          });
        }), _Object$setPrototypeO), AsyncIteratorPrototype);

        var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
          var _Object$create;

          var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true
          }), _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kError, {
            value: null,
            writable: true
          }), _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true
          }), _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read();

              if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
              } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
              }
            },
            writable: true
          }), _Object$create));
          iterator[kLastPromise] = null;
          finished(stream, function (err) {
            if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
              var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
              // returned by next() and store the error

              if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
              }

              iterator[kError] = err;
              return;
            }

            var resolve = iterator[kLastResolve];

            if (resolve !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              resolve(createIterResult(undefined, true));
            }

            iterator[kEnded] = true;
          });
          stream.on('readable', onReadable.bind(null, iterator));
          return iterator;
        };

        module.exports = createReadableStreamAsyncIterator;
      }).call(this)
    }).call(this, require('_process'))

  }, { "./end-of-stream": 306, "_process": 244 }], 304: [function (require, module, exports) {
    arguments[4][85][0].apply(exports, arguments)
  }, { "buffer": 96, "dup": 85, "util": 48 }], 305: [function (require, module, exports) {
    (function (process) {
      (function () {
        'use strict'; // undocumented cb() API, needed for core, not for public API

        function destroy(err, cb) {
          var _this = this;

          var readableDestroyed = this._readableState && this._readableState.destroyed;
          var writableDestroyed = this._writableState && this._writableState.destroyed;

          if (readableDestroyed || writableDestroyed) {
            if (cb) {
              cb(err);
            } else if (err) {
              if (!this._writableState) {
                process.nextTick(emitErrorNT, this, err);
              } else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
              }
            }

            return this;
          } // we set destroyed to true before firing error callbacks in order
          // to make it re-entrance safe in case destroy() is called within callbacks


          if (this._readableState) {
            this._readableState.destroyed = true;
          } // if this is a duplex stream mark the writable part as destroyed as well


          if (this._writableState) {
            this._writableState.destroyed = true;
          }

          this._destroy(err || null, function (err) {
            if (!cb && err) {
              if (!_this._writableState) {
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
              } else {
                process.nextTick(emitCloseNT, _this);
              }
            } else if (cb) {
              process.nextTick(emitCloseNT, _this);
              cb(err);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          });

          return this;
        }

        function emitErrorAndCloseNT(self, err) {
          emitErrorNT(self, err);
          emitCloseNT(self);
        }

        function emitCloseNT(self) {
          if (self._writableState && !self._writableState.emitClose) return;
          if (self._readableState && !self._readableState.emitClose) return;
          self.emit('close');
        }

        function undestroy() {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }

          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finalCalled = false;
            this._writableState.prefinished = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }

        function emitErrorNT(self, err) {
          self.emit('error', err);
        }

        function errorOrDestroy(stream, err) {
          // We have tests that rely on errors being emitted
          // in the same tick, so changing this is semver major.
          // For now when you opt-in to autoDestroy we allow
          // the error to be emitted nextTick. In a future
          // semver major update we should change the default to this.
          var rState = stream._readableState;
          var wState = stream._writableState;
          if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err); else stream.emit('error', err);
        }

        module.exports = {
          destroy: destroy,
          undestroy: undestroy,
          errorOrDestroy: errorOrDestroy
        };
      }).call(this)
    }).call(this, require('_process'))

  }, { "_process": 244 }], 306: [function (require, module, exports) {
    arguments[4][87][0].apply(exports, arguments)
  }, { "../../../errors": 297, "dup": 87 }], 307: [function (require, module, exports) {
    arguments[4][88][0].apply(exports, arguments)
  }, { "dup": 88 }], 308: [function (require, module, exports) {
    arguments[4][89][0].apply(exports, arguments)
  }, { "../../../errors": 297, "./end-of-stream": 306, "dup": 89 }], 309: [function (require, module, exports) {
    arguments[4][90][0].apply(exports, arguments)
  }, { "../../../errors": 297, "dup": 90 }], 310: [function (require, module, exports) {
    arguments[4][91][0].apply(exports, arguments)
  }, { "dup": 91, "events": 162 }], 311: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    /*<replacement>*/

    var Buffer = require('safe-buffer').Buffer;
    /*</replacement>*/

    var isEncoding = Buffer.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw':
          return true;
        default:
          return false;
      }
    };

    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    };

    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer.allocUnsafe(nb);
    }

    StringDecoder.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder.prototype.end = utf8End;

    // Returns only complete characters in a Buffer
    StringDecoder.prototype.text = utf8Text;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }

    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }
  }, { "safe-buffer": 312 }], 312: [function (require, module, exports) {
    arguments[4][93][0].apply(exports, arguments)
  }, { "buffer": 96, "dup": 93 }], 313: [function (require, module, exports) {
    (function (nacl) {
      'use strict';

      // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
      // Public domain.
      //
      // Implementation derived from TweetNaCl version 20140427.
      // See for details: http://tweetnacl.cr.yp.to/

      var gf = function (init) {
        var i, r = new Float64Array(16);
        if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
        return r;
      };

      //  Pluggable, initialized in high-level API below.
      var randombytes = function (/* x, n */) { throw new Error('no PRNG'); };

      var _0 = new Uint8Array(16);
      var _9 = new Uint8Array(32); _9[0] = 9;

      var gf0 = gf(),
        gf1 = gf([1]),
        _121665 = gf([0xdb41, 1]),
        D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
        D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
        X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
        Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
        I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

      function ts64(x, i, h, l) {
        x[i] = (h >> 24) & 0xff;
        x[i + 1] = (h >> 16) & 0xff;
        x[i + 2] = (h >> 8) & 0xff;
        x[i + 3] = h & 0xff;
        x[i + 4] = (l >> 24) & 0xff;
        x[i + 5] = (l >> 16) & 0xff;
        x[i + 6] = (l >> 8) & 0xff;
        x[i + 7] = l & 0xff;
      }

      function vn(x, xi, y, yi, n) {
        var i, d = 0;
        for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
        return (1 & ((d - 1) >>> 8)) - 1;
      }

      function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
      }

      function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
      }

      function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
          j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
          j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
          j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
          j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
          j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
          j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
          j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
          j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
          j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
          j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
          j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
          j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
          j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
          j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
          j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;

        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;

        for (var i = 0; i < 20; i += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> (32 - 7);
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> (32 - 9);
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> (32 - 13);
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> (32 - 18);

          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> (32 - 7);
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> (32 - 9);
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> (32 - 13);
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> (32 - 18);

          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> (32 - 7);
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> (32 - 9);
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> (32 - 13);
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> (32 - 18);

          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> (32 - 7);
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> (32 - 9);
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> (32 - 13);
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> (32 - 18);

          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> (32 - 7);
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> (32 - 9);
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> (32 - 13);
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> (32 - 18);

          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> (32 - 7);
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> (32 - 9);
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> (32 - 13);
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> (32 - 18);

          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> (32 - 7);
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> (32 - 9);
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> (32 - 13);
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> (32 - 18);

          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> (32 - 7);
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> (32 - 9);
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> (32 - 13);
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> (32 - 18);
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;

        o[0] = x0 >>> 0 & 0xff;
        o[1] = x0 >>> 8 & 0xff;
        o[2] = x0 >>> 16 & 0xff;
        o[3] = x0 >>> 24 & 0xff;

        o[4] = x1 >>> 0 & 0xff;
        o[5] = x1 >>> 8 & 0xff;
        o[6] = x1 >>> 16 & 0xff;
        o[7] = x1 >>> 24 & 0xff;

        o[8] = x2 >>> 0 & 0xff;
        o[9] = x2 >>> 8 & 0xff;
        o[10] = x2 >>> 16 & 0xff;
        o[11] = x2 >>> 24 & 0xff;

        o[12] = x3 >>> 0 & 0xff;
        o[13] = x3 >>> 8 & 0xff;
        o[14] = x3 >>> 16 & 0xff;
        o[15] = x3 >>> 24 & 0xff;

        o[16] = x4 >>> 0 & 0xff;
        o[17] = x4 >>> 8 & 0xff;
        o[18] = x4 >>> 16 & 0xff;
        o[19] = x4 >>> 24 & 0xff;

        o[20] = x5 >>> 0 & 0xff;
        o[21] = x5 >>> 8 & 0xff;
        o[22] = x5 >>> 16 & 0xff;
        o[23] = x5 >>> 24 & 0xff;

        o[24] = x6 >>> 0 & 0xff;
        o[25] = x6 >>> 8 & 0xff;
        o[26] = x6 >>> 16 & 0xff;
        o[27] = x6 >>> 24 & 0xff;

        o[28] = x7 >>> 0 & 0xff;
        o[29] = x7 >>> 8 & 0xff;
        o[30] = x7 >>> 16 & 0xff;
        o[31] = x7 >>> 24 & 0xff;

        o[32] = x8 >>> 0 & 0xff;
        o[33] = x8 >>> 8 & 0xff;
        o[34] = x8 >>> 16 & 0xff;
        o[35] = x8 >>> 24 & 0xff;

        o[36] = x9 >>> 0 & 0xff;
        o[37] = x9 >>> 8 & 0xff;
        o[38] = x9 >>> 16 & 0xff;
        o[39] = x9 >>> 24 & 0xff;

        o[40] = x10 >>> 0 & 0xff;
        o[41] = x10 >>> 8 & 0xff;
        o[42] = x10 >>> 16 & 0xff;
        o[43] = x10 >>> 24 & 0xff;

        o[44] = x11 >>> 0 & 0xff;
        o[45] = x11 >>> 8 & 0xff;
        o[46] = x11 >>> 16 & 0xff;
        o[47] = x11 >>> 24 & 0xff;

        o[48] = x12 >>> 0 & 0xff;
        o[49] = x12 >>> 8 & 0xff;
        o[50] = x12 >>> 16 & 0xff;
        o[51] = x12 >>> 24 & 0xff;

        o[52] = x13 >>> 0 & 0xff;
        o[53] = x13 >>> 8 & 0xff;
        o[54] = x13 >>> 16 & 0xff;
        o[55] = x13 >>> 24 & 0xff;

        o[56] = x14 >>> 0 & 0xff;
        o[57] = x14 >>> 8 & 0xff;
        o[58] = x14 >>> 16 & 0xff;
        o[59] = x14 >>> 24 & 0xff;

        o[60] = x15 >>> 0 & 0xff;
        o[61] = x15 >>> 8 & 0xff;
        o[62] = x15 >>> 16 & 0xff;
        o[63] = x15 >>> 24 & 0xff;
      }

      function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
          j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
          j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
          j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
          j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
          j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
          j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
          j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
          j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
          j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
          j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
          j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
          j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
          j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
          j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
          j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;

        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
          x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
          x15 = j15, u;

        for (var i = 0; i < 20; i += 2) {
          u = x0 + x12 | 0;
          x4 ^= u << 7 | u >>> (32 - 7);
          u = x4 + x0 | 0;
          x8 ^= u << 9 | u >>> (32 - 9);
          u = x8 + x4 | 0;
          x12 ^= u << 13 | u >>> (32 - 13);
          u = x12 + x8 | 0;
          x0 ^= u << 18 | u >>> (32 - 18);

          u = x5 + x1 | 0;
          x9 ^= u << 7 | u >>> (32 - 7);
          u = x9 + x5 | 0;
          x13 ^= u << 9 | u >>> (32 - 9);
          u = x13 + x9 | 0;
          x1 ^= u << 13 | u >>> (32 - 13);
          u = x1 + x13 | 0;
          x5 ^= u << 18 | u >>> (32 - 18);

          u = x10 + x6 | 0;
          x14 ^= u << 7 | u >>> (32 - 7);
          u = x14 + x10 | 0;
          x2 ^= u << 9 | u >>> (32 - 9);
          u = x2 + x14 | 0;
          x6 ^= u << 13 | u >>> (32 - 13);
          u = x6 + x2 | 0;
          x10 ^= u << 18 | u >>> (32 - 18);

          u = x15 + x11 | 0;
          x3 ^= u << 7 | u >>> (32 - 7);
          u = x3 + x15 | 0;
          x7 ^= u << 9 | u >>> (32 - 9);
          u = x7 + x3 | 0;
          x11 ^= u << 13 | u >>> (32 - 13);
          u = x11 + x7 | 0;
          x15 ^= u << 18 | u >>> (32 - 18);

          u = x0 + x3 | 0;
          x1 ^= u << 7 | u >>> (32 - 7);
          u = x1 + x0 | 0;
          x2 ^= u << 9 | u >>> (32 - 9);
          u = x2 + x1 | 0;
          x3 ^= u << 13 | u >>> (32 - 13);
          u = x3 + x2 | 0;
          x0 ^= u << 18 | u >>> (32 - 18);

          u = x5 + x4 | 0;
          x6 ^= u << 7 | u >>> (32 - 7);
          u = x6 + x5 | 0;
          x7 ^= u << 9 | u >>> (32 - 9);
          u = x7 + x6 | 0;
          x4 ^= u << 13 | u >>> (32 - 13);
          u = x4 + x7 | 0;
          x5 ^= u << 18 | u >>> (32 - 18);

          u = x10 + x9 | 0;
          x11 ^= u << 7 | u >>> (32 - 7);
          u = x11 + x10 | 0;
          x8 ^= u << 9 | u >>> (32 - 9);
          u = x8 + x11 | 0;
          x9 ^= u << 13 | u >>> (32 - 13);
          u = x9 + x8 | 0;
          x10 ^= u << 18 | u >>> (32 - 18);

          u = x15 + x14 | 0;
          x12 ^= u << 7 | u >>> (32 - 7);
          u = x12 + x15 | 0;
          x13 ^= u << 9 | u >>> (32 - 9);
          u = x13 + x12 | 0;
          x14 ^= u << 13 | u >>> (32 - 13);
          u = x14 + x13 | 0;
          x15 ^= u << 18 | u >>> (32 - 18);
        }

        o[0] = x0 >>> 0 & 0xff;
        o[1] = x0 >>> 8 & 0xff;
        o[2] = x0 >>> 16 & 0xff;
        o[3] = x0 >>> 24 & 0xff;

        o[4] = x5 >>> 0 & 0xff;
        o[5] = x5 >>> 8 & 0xff;
        o[6] = x5 >>> 16 & 0xff;
        o[7] = x5 >>> 24 & 0xff;

        o[8] = x10 >>> 0 & 0xff;
        o[9] = x10 >>> 8 & 0xff;
        o[10] = x10 >>> 16 & 0xff;
        o[11] = x10 >>> 24 & 0xff;

        o[12] = x15 >>> 0 & 0xff;
        o[13] = x15 >>> 8 & 0xff;
        o[14] = x15 >>> 16 & 0xff;
        o[15] = x15 >>> 24 & 0xff;

        o[16] = x6 >>> 0 & 0xff;
        o[17] = x6 >>> 8 & 0xff;
        o[18] = x6 >>> 16 & 0xff;
        o[19] = x6 >>> 24 & 0xff;

        o[20] = x7 >>> 0 & 0xff;
        o[21] = x7 >>> 8 & 0xff;
        o[22] = x7 >>> 16 & 0xff;
        o[23] = x7 >>> 24 & 0xff;

        o[24] = x8 >>> 0 & 0xff;
        o[25] = x8 >>> 8 & 0xff;
        o[26] = x8 >>> 16 & 0xff;
        o[27] = x8 >>> 24 & 0xff;

        o[28] = x9 >>> 0 & 0xff;
        o[29] = x9 >>> 8 & 0xff;
        o[30] = x9 >>> 16 & 0xff;
        o[31] = x9 >>> 24 & 0xff;
      }

      function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
      }

      function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
      }

      var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
      // "expand 32-byte k"

      function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for (i = 0; i < 16; i++) z[i] = 0;
        for (i = 0; i < 8; i++) z[i] = n[i];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < 64; i++) c[cpos + i] = m[mpos + i] ^ x[i];
          u = 1;
          for (i = 8; i < 16; i++) {
            u = u + (z[i] & 0xff) | 0;
            z[i] = u & 0xff;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
          mpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < b; i++) c[cpos + i] = m[mpos + i] ^ x[i];
        }
        return 0;
      }

      function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for (i = 0; i < 16; i++) z[i] = 0;
        for (i = 0; i < 8; i++) z[i] = n[i];
        while (b >= 64) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < 64; i++) c[cpos + i] = x[i];
          u = 1;
          for (i = 8; i < 16; i++) {
            u = u + (z[i] & 0xff) | 0;
            z[i] = u & 0xff;
            u >>>= 8;
          }
          b -= 64;
          cpos += 64;
        }
        if (b > 0) {
          crypto_core_salsa20(x, z, k, sigma);
          for (i = 0; i < b; i++) c[cpos + i] = x[i];
        }
        return 0;
      }

      function crypto_stream(c, cpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s);
      }

      function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for (var i = 0; i < 8; i++) sn[i] = n[i + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
      }

      /*
      * Port of Andrew Moon's Poly1305-donna-16. Public domain.
      * https://github.com/floodyberry/poly1305-donna
      */

      var poly1305 = function (key) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;

        var t0, t1, t2, t3, t4, t5, t6, t7;

        t0 = key[0] & 0xff | (key[1] & 0xff) << 8; this.r[0] = (t0) & 0x1fff;
        t1 = key[2] & 0xff | (key[3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
        t2 = key[4] & 0xff | (key[5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
        t3 = key[6] & 0xff | (key[7] & 0xff) << 8; this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
        t4 = key[8] & 0xff | (key[9] & 0xff) << 8; this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
        this.r[5] = ((t4 >>> 1)) & 0x1ffe;
        t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
        t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
        t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
        this.r[9] = ((t7 >>> 5)) & 0x007f;

        this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
        this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
        this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
        this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
        this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
        this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
        this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
        this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
      };

      poly1305.prototype.blocks = function (m, mpos, bytes) {
        var hibit = this.fin ? 0 : (1 << 11);
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

        var h0 = this.h[0],
          h1 = this.h[1],
          h2 = this.h[2],
          h3 = this.h[3],
          h4 = this.h[4],
          h5 = this.h[5],
          h6 = this.h[6],
          h7 = this.h[7],
          h8 = this.h[8],
          h9 = this.h[9];

        var r0 = this.r[0],
          r1 = this.r[1],
          r2 = this.r[2],
          r3 = this.r[3],
          r4 = this.r[4],
          r5 = this.r[5],
          r6 = this.r[6],
          r7 = this.r[7],
          r8 = this.r[8],
          r9 = this.r[9];

        while (bytes >= 16) {
          t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8; h0 += (t0) & 0x1fff;
          t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
          t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
          t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8; h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
          t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8; h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
          h5 += ((t4 >>> 1)) & 0x1fff;
          t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
          t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
          t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8; h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
          h9 += ((t7 >>> 5)) | hibit;

          c = 0;

          d0 = c;
          d0 += h0 * r0;
          d0 += h1 * (5 * r9);
          d0 += h2 * (5 * r8);
          d0 += h3 * (5 * r7);
          d0 += h4 * (5 * r6);
          c = (d0 >>> 13); d0 &= 0x1fff;
          d0 += h5 * (5 * r5);
          d0 += h6 * (5 * r4);
          d0 += h7 * (5 * r3);
          d0 += h8 * (5 * r2);
          d0 += h9 * (5 * r1);
          c += (d0 >>> 13); d0 &= 0x1fff;

          d1 = c;
          d1 += h0 * r1;
          d1 += h1 * r0;
          d1 += h2 * (5 * r9);
          d1 += h3 * (5 * r8);
          d1 += h4 * (5 * r7);
          c = (d1 >>> 13); d1 &= 0x1fff;
          d1 += h5 * (5 * r6);
          d1 += h6 * (5 * r5);
          d1 += h7 * (5 * r4);
          d1 += h8 * (5 * r3);
          d1 += h9 * (5 * r2);
          c += (d1 >>> 13); d1 &= 0x1fff;

          d2 = c;
          d2 += h0 * r2;
          d2 += h1 * r1;
          d2 += h2 * r0;
          d2 += h3 * (5 * r9);
          d2 += h4 * (5 * r8);
          c = (d2 >>> 13); d2 &= 0x1fff;
          d2 += h5 * (5 * r7);
          d2 += h6 * (5 * r6);
          d2 += h7 * (5 * r5);
          d2 += h8 * (5 * r4);
          d2 += h9 * (5 * r3);
          c += (d2 >>> 13); d2 &= 0x1fff;

          d3 = c;
          d3 += h0 * r3;
          d3 += h1 * r2;
          d3 += h2 * r1;
          d3 += h3 * r0;
          d3 += h4 * (5 * r9);
          c = (d3 >>> 13); d3 &= 0x1fff;
          d3 += h5 * (5 * r8);
          d3 += h6 * (5 * r7);
          d3 += h7 * (5 * r6);
          d3 += h8 * (5 * r5);
          d3 += h9 * (5 * r4);
          c += (d3 >>> 13); d3 &= 0x1fff;

          d4 = c;
          d4 += h0 * r4;
          d4 += h1 * r3;
          d4 += h2 * r2;
          d4 += h3 * r1;
          d4 += h4 * r0;
          c = (d4 >>> 13); d4 &= 0x1fff;
          d4 += h5 * (5 * r9);
          d4 += h6 * (5 * r8);
          d4 += h7 * (5 * r7);
          d4 += h8 * (5 * r6);
          d4 += h9 * (5 * r5);
          c += (d4 >>> 13); d4 &= 0x1fff;

          d5 = c;
          d5 += h0 * r5;
          d5 += h1 * r4;
          d5 += h2 * r3;
          d5 += h3 * r2;
          d5 += h4 * r1;
          c = (d5 >>> 13); d5 &= 0x1fff;
          d5 += h5 * r0;
          d5 += h6 * (5 * r9);
          d5 += h7 * (5 * r8);
          d5 += h8 * (5 * r7);
          d5 += h9 * (5 * r6);
          c += (d5 >>> 13); d5 &= 0x1fff;

          d6 = c;
          d6 += h0 * r6;
          d6 += h1 * r5;
          d6 += h2 * r4;
          d6 += h3 * r3;
          d6 += h4 * r2;
          c = (d6 >>> 13); d6 &= 0x1fff;
          d6 += h5 * r1;
          d6 += h6 * r0;
          d6 += h7 * (5 * r9);
          d6 += h8 * (5 * r8);
          d6 += h9 * (5 * r7);
          c += (d6 >>> 13); d6 &= 0x1fff;

          d7 = c;
          d7 += h0 * r7;
          d7 += h1 * r6;
          d7 += h2 * r5;
          d7 += h3 * r4;
          d7 += h4 * r3;
          c = (d7 >>> 13); d7 &= 0x1fff;
          d7 += h5 * r2;
          d7 += h6 * r1;
          d7 += h7 * r0;
          d7 += h8 * (5 * r9);
          d7 += h9 * (5 * r8);
          c += (d7 >>> 13); d7 &= 0x1fff;

          d8 = c;
          d8 += h0 * r8;
          d8 += h1 * r7;
          d8 += h2 * r6;
          d8 += h3 * r5;
          d8 += h4 * r4;
          c = (d8 >>> 13); d8 &= 0x1fff;
          d8 += h5 * r3;
          d8 += h6 * r2;
          d8 += h7 * r1;
          d8 += h8 * r0;
          d8 += h9 * (5 * r9);
          c += (d8 >>> 13); d8 &= 0x1fff;

          d9 = c;
          d9 += h0 * r9;
          d9 += h1 * r8;
          d9 += h2 * r7;
          d9 += h3 * r6;
          d9 += h4 * r5;
          c = (d9 >>> 13); d9 &= 0x1fff;
          d9 += h5 * r4;
          d9 += h6 * r3;
          d9 += h7 * r2;
          d9 += h8 * r1;
          d9 += h9 * r0;
          c += (d9 >>> 13); d9 &= 0x1fff;

          c = (((c << 2) + c)) | 0;
          c = (c + d0) | 0;
          d0 = c & 0x1fff;
          c = (c >>> 13);
          d1 += c;

          h0 = d0;
          h1 = d1;
          h2 = d2;
          h3 = d3;
          h4 = d4;
          h5 = d5;
          h6 = d6;
          h7 = d7;
          h8 = d8;
          h9 = d9;

          mpos += 16;
          bytes -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
      };

      poly1305.prototype.finish = function (mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask, f, i;

        if (this.leftover) {
          i = this.leftover;
          this.buffer[i++] = 1;
          for (; i < 16; i++) this.buffer[i] = 0;
          this.fin = 1;
          this.blocks(this.buffer, 0, 16);
        }

        c = this.h[1] >>> 13;
        this.h[1] &= 0x1fff;
        for (i = 2; i < 10; i++) {
          this.h[i] += c;
          c = this.h[i] >>> 13;
          this.h[i] &= 0x1fff;
        }
        this.h[0] += (c * 5);
        c = this.h[0] >>> 13;
        this.h[0] &= 0x1fff;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 0x1fff;
        this.h[2] += c;

        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 0x1fff;
        for (i = 1; i < 10; i++) {
          g[i] = this.h[i] + c;
          c = g[i] >>> 13;
          g[i] &= 0x1fff;
        }
        g[9] -= (1 << 13);

        mask = (c ^ 1) - 1;
        for (i = 0; i < 10; i++) g[i] &= mask;
        mask = ~mask;
        for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

        this.h[0] = ((this.h[0]) | (this.h[1] << 13)) & 0xffff;
        this.h[1] = ((this.h[1] >>> 3) | (this.h[2] << 10)) & 0xffff;
        this.h[2] = ((this.h[2] >>> 6) | (this.h[3] << 7)) & 0xffff;
        this.h[3] = ((this.h[3] >>> 9) | (this.h[4] << 4)) & 0xffff;
        this.h[4] = ((this.h[4] >>> 12) | (this.h[5] << 1) | (this.h[6] << 14)) & 0xffff;
        this.h[5] = ((this.h[6] >>> 2) | (this.h[7] << 11)) & 0xffff;
        this.h[6] = ((this.h[7] >>> 5) | (this.h[8] << 8)) & 0xffff;
        this.h[7] = ((this.h[8] >>> 8) | (this.h[9] << 5)) & 0xffff;

        f = this.h[0] + this.pad[0];
        this.h[0] = f & 0xffff;
        for (i = 1; i < 8; i++) {
          f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
          this.h[i] = f & 0xffff;
        }

        mac[macpos + 0] = (this.h[0] >>> 0) & 0xff;
        mac[macpos + 1] = (this.h[0] >>> 8) & 0xff;
        mac[macpos + 2] = (this.h[1] >>> 0) & 0xff;
        mac[macpos + 3] = (this.h[1] >>> 8) & 0xff;
        mac[macpos + 4] = (this.h[2] >>> 0) & 0xff;
        mac[macpos + 5] = (this.h[2] >>> 8) & 0xff;
        mac[macpos + 6] = (this.h[3] >>> 0) & 0xff;
        mac[macpos + 7] = (this.h[3] >>> 8) & 0xff;
        mac[macpos + 8] = (this.h[4] >>> 0) & 0xff;
        mac[macpos + 9] = (this.h[4] >>> 8) & 0xff;
        mac[macpos + 10] = (this.h[5] >>> 0) & 0xff;
        mac[macpos + 11] = (this.h[5] >>> 8) & 0xff;
        mac[macpos + 12] = (this.h[6] >>> 0) & 0xff;
        mac[macpos + 13] = (this.h[6] >>> 8) & 0xff;
        mac[macpos + 14] = (this.h[7] >>> 0) & 0xff;
        mac[macpos + 15] = (this.h[7] >>> 8) & 0xff;
      };

      poly1305.prototype.update = function (m, mpos, bytes) {
        var i, want;

        if (this.leftover) {
          want = (16 - this.leftover);
          if (want > bytes)
            want = bytes;
          for (i = 0; i < want; i++)
            this.buffer[this.leftover + i] = m[mpos + i];
          bytes -= want;
          mpos += want;
          this.leftover += want;
          if (this.leftover < 16)
            return;
          this.blocks(this.buffer, 0, 16);
          this.leftover = 0;
        }

        if (bytes >= 16) {
          want = bytes - (bytes % 16);
          this.blocks(m, mpos, want);
          mpos += want;
          bytes -= want;
        }

        if (bytes) {
          for (i = 0; i < bytes; i++)
            this.buffer[this.leftover + i] = m[mpos + i];
          this.leftover += bytes;
        }
      };

      function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s = new poly1305(k);
        s.update(m, mpos, n);
        s.finish(out, outpos);
        return 0;
      }

      function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
      }

      function crypto_secretbox(c, m, d, n, k) {
        var i;
        if (d < 32) return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for (i = 0; i < 16; i++) c[i] = 0;
        return 0;
      }

      function crypto_secretbox_open(m, c, d, n, k) {
        var i;
        var x = new Uint8Array(32);
        if (d < 32) return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for (i = 0; i < 32; i++) m[i] = 0;
        return 0;
      }

      function set25519(r, a) {
        var i;
        for (i = 0; i < 16; i++) r[i] = a[i] | 0;
      }

      function car25519(o) {
        var i, v, c = 1;
        for (i = 0; i < 16; i++) {
          v = o[i] + c + 65535;
          c = Math.floor(v / 65536);
          o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
      }

      function sel25519(p, q, b) {
        var t, c = ~(b - 1);
        for (var i = 0; i < 16; i++) {
          t = c & (p[i] ^ q[i]);
          p[i] ^= t;
          q[i] ^= t;
        }
      }

      function pack25519(o, n) {
        var i, j, b;
        var m = gf(), t = gf();
        for (i = 0; i < 16; i++) t[i] = n[i];
        car25519(t);
        car25519(t);
        car25519(t);
        for (j = 0; j < 2; j++) {
          m[0] = t[0] - 0xffed;
          for (i = 1; i < 15; i++) {
            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
            m[i - 1] &= 0xffff;
          }
          m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
          b = (m[15] >> 16) & 1;
          m[14] &= 0xffff;
          sel25519(t, m, 1 - b);
        }
        for (i = 0; i < 16; i++) {
          o[2 * i] = t[i] & 0xff;
          o[2 * i + 1] = t[i] >> 8;
        }
      }

      function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
      }

      function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
      }

      function unpack25519(o, n) {
        var i;
        for (i = 0; i < 16; i++) o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        o[15] &= 0x7fff;
      }

      function A(o, a, b) {
        for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
      }

      function Z(o, a, b) {
        for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
      }

      function M(o, a, b) {
        var v, c,
          t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0,
          t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
          t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
          t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
          b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3],
          b4 = b[4],
          b5 = b[5],
          b6 = b[6],
          b7 = b[7],
          b8 = b[8],
          b9 = b[9],
          b10 = b[10],
          b11 = b[11],
          b12 = b[12],
          b13 = b[13],
          b14 = b[14],
          b15 = b[15];

        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;

        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is

        // first car
        c = 1;
        v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536;
        v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536;
        v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536;
        v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536;
        v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536;
        v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536;
        v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536;
        v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536;
        v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536;
        v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536;
        v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
        v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
        v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
        v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
        v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
        v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);

        // second car
        c = 1;
        v = t0 + c + 65535; c = Math.floor(v / 65536); t0 = v - c * 65536;
        v = t1 + c + 65535; c = Math.floor(v / 65536); t1 = v - c * 65536;
        v = t2 + c + 65535; c = Math.floor(v / 65536); t2 = v - c * 65536;
        v = t3 + c + 65535; c = Math.floor(v / 65536); t3 = v - c * 65536;
        v = t4 + c + 65535; c = Math.floor(v / 65536); t4 = v - c * 65536;
        v = t5 + c + 65535; c = Math.floor(v / 65536); t5 = v - c * 65536;
        v = t6 + c + 65535; c = Math.floor(v / 65536); t6 = v - c * 65536;
        v = t7 + c + 65535; c = Math.floor(v / 65536); t7 = v - c * 65536;
        v = t8 + c + 65535; c = Math.floor(v / 65536); t8 = v - c * 65536;
        v = t9 + c + 65535; c = Math.floor(v / 65536); t9 = v - c * 65536;
        v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
        v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
        v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
        v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
        v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
        v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);

        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
      }

      function S(o, a) {
        M(o, a, a);
      }

      function inv25519(o, i) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++) c[a] = i[a];
        for (a = 253; a >= 0; a--) {
          S(c, c);
          if (a !== 2 && a !== 4) M(c, c, i);
        }
        for (a = 0; a < 16; a++) o[a] = c[a];
      }

      function pow2523(o, i) {
        var c = gf();
        var a;
        for (a = 0; a < 16; a++) c[a] = i[a];
        for (a = 250; a >= 0; a--) {
          S(c, c);
          if (a !== 1) M(c, c, i);
        }
        for (a = 0; a < 16; a++) o[a] = c[a];
      }

      function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r, i;
        var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf();
        for (i = 0; i < 31; i++) z[i] = n[i];
        z[31] = (n[31] & 127) | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for (i = 0; i < 16; i++) {
          b[i] = x[i];
          d[i] = a[i] = c[i] = 0;
        }
        a[0] = d[0] = 1;
        for (i = 254; i >= 0; --i) {
          r = (z[i >>> 3] >>> (i & 7)) & 1;
          sel25519(a, b, r);
          sel25519(c, d, r);
          A(e, a, c);
          Z(a, a, c);
          A(c, b, d);
          Z(b, b, d);
          S(d, e);
          S(f, a);
          M(a, c, a);
          M(c, b, e);
          A(e, a, c);
          Z(a, a, c);
          S(b, a);
          Z(c, d, f);
          M(a, c, _121665);
          A(a, a, d);
          M(c, c, a);
          M(a, d, f);
          M(d, b, x);
          S(b, e);
          sel25519(a, b, r);
          sel25519(c, d, r);
        }
        for (i = 0; i < 16; i++) {
          x[i + 16] = a[i];
          x[i + 32] = c[i];
          x[i + 48] = b[i];
          x[i + 64] = d[i];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
      }

      function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
      }

      function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
      }

      function crypto_box_beforenm(k, y, x) {
        var s = new Uint8Array(32);
        crypto_scalarmult(s, x, y);
        return crypto_core_hsalsa20(k, _0, s, sigma);
      }

      var crypto_box_afternm = crypto_secretbox;
      var crypto_box_open_afternm = crypto_secretbox_open;

      function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
      }

      function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
      }

      var K = [
        0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
        0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
        0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
        0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
        0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
        0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
        0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
        0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
        0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
        0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
        0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
        0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
        0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
        0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
        0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
        0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
        0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
        0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
        0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
        0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
        0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
        0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
        0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
        0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
        0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
        0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
        0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
        0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
        0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
        0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
        0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
        0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
        0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
        0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
        0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
        0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
        0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
        0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
        0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
        0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
      ];

      function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16),
          bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
          bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
          th, tl, i, j, h, l, a, b, c, d;

        var ah0 = hh[0],
          ah1 = hh[1],
          ah2 = hh[2],
          ah3 = hh[3],
          ah4 = hh[4],
          ah5 = hh[5],
          ah6 = hh[6],
          ah7 = hh[7],

          al0 = hl[0],
          al1 = hl[1],
          al2 = hl[2],
          al3 = hl[3],
          al4 = hl[4],
          al5 = hl[5],
          al6 = hl[6],
          al7 = hl[7];

        var pos = 0;
        while (n >= 128) {
          for (i = 0; i < 16; i++) {
            j = 8 * i + pos;
            wh[i] = (m[j + 0] << 24) | (m[j + 1] << 16) | (m[j + 2] << 8) | m[j + 3];
            wl[i] = (m[j + 4] << 24) | (m[j + 5] << 16) | (m[j + 6] << 8) | m[j + 7];
          }
          for (i = 0; i < 80; i++) {
            bh0 = ah0;
            bh1 = ah1;
            bh2 = ah2;
            bh3 = ah3;
            bh4 = ah4;
            bh5 = ah5;
            bh6 = ah6;
            bh7 = ah7;

            bl0 = al0;
            bl1 = al1;
            bl2 = al2;
            bl3 = al3;
            bl4 = al4;
            bl5 = al5;
            bl6 = al6;
            bl7 = al7;

            // add
            h = ah7;
            l = al7;

            a = l & 0xffff; b = l >>> 16;
            c = h & 0xffff; d = h >>> 16;

            // Sigma1
            h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) | (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));
            l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) | (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            // Ch
            h = (ah4 & ah5) ^ (~ah4 & ah6);
            l = (al4 & al5) ^ (~al4 & al6);

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            // K
            h = K[i * 2];
            l = K[i * 2 + 1];

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            // w
            h = wh[i % 16];
            l = wl[i % 16];

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;

            th = c & 0xffff | d << 16;
            tl = a & 0xffff | b << 16;

            // add
            h = th;
            l = tl;

            a = l & 0xffff; b = l >>> 16;
            c = h & 0xffff; d = h >>> 16;

            // Sigma0
            h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) | (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));
            l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) | (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            // Maj
            h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
            l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;

            bh7 = (c & 0xffff) | (d << 16);
            bl7 = (a & 0xffff) | (b << 16);

            // add
            h = bh3;
            l = bl3;

            a = l & 0xffff; b = l >>> 16;
            c = h & 0xffff; d = h >>> 16;

            h = th;
            l = tl;

            a += l & 0xffff; b += l >>> 16;
            c += h & 0xffff; d += h >>> 16;

            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;

            bh3 = (c & 0xffff) | (d << 16);
            bl3 = (a & 0xffff) | (b << 16);

            ah1 = bh0;
            ah2 = bh1;
            ah3 = bh2;
            ah4 = bh3;
            ah5 = bh4;
            ah6 = bh5;
            ah7 = bh6;
            ah0 = bh7;

            al1 = bl0;
            al2 = bl1;
            al3 = bl2;
            al4 = bl3;
            al5 = bl4;
            al6 = bl5;
            al7 = bl6;
            al0 = bl7;

            if (i % 16 === 15) {
              for (j = 0; j < 16; j++) {
                // add
                h = wh[j];
                l = wl[j];

                a = l & 0xffff; b = l >>> 16;
                c = h & 0xffff; d = h >>> 16;

                h = wh[(j + 9) % 16];
                l = wl[(j + 9) % 16];

                a += l & 0xffff; b += l >>> 16;
                c += h & 0xffff; d += h >>> 16;

                // sigma0
                th = wh[(j + 1) % 16];
                tl = wl[(j + 1) % 16];
                h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) | (tl << (32 - 8))) ^ (th >>> 7);
                l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) | (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));

                a += l & 0xffff; b += l >>> 16;
                c += h & 0xffff; d += h >>> 16;

                // sigma1
                th = wh[(j + 14) % 16];
                tl = wl[(j + 14) % 16];
                h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) | (th << (32 - (61 - 32)))) ^ (th >>> 6);
                l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) | (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));

                a += l & 0xffff; b += l >>> 16;
                c += h & 0xffff; d += h >>> 16;

                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;

                wh[j] = (c & 0xffff) | (d << 16);
                wl[j] = (a & 0xffff) | (b << 16);
              }
            }
          }

          // add
          h = ah0;
          l = al0;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[0];
          l = hl[0];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[0] = ah0 = (c & 0xffff) | (d << 16);
          hl[0] = al0 = (a & 0xffff) | (b << 16);

          h = ah1;
          l = al1;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[1];
          l = hl[1];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[1] = ah1 = (c & 0xffff) | (d << 16);
          hl[1] = al1 = (a & 0xffff) | (b << 16);

          h = ah2;
          l = al2;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[2];
          l = hl[2];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[2] = ah2 = (c & 0xffff) | (d << 16);
          hl[2] = al2 = (a & 0xffff) | (b << 16);

          h = ah3;
          l = al3;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[3];
          l = hl[3];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[3] = ah3 = (c & 0xffff) | (d << 16);
          hl[3] = al3 = (a & 0xffff) | (b << 16);

          h = ah4;
          l = al4;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[4];
          l = hl[4];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[4] = ah4 = (c & 0xffff) | (d << 16);
          hl[4] = al4 = (a & 0xffff) | (b << 16);

          h = ah5;
          l = al5;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[5];
          l = hl[5];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[5] = ah5 = (c & 0xffff) | (d << 16);
          hl[5] = al5 = (a & 0xffff) | (b << 16);

          h = ah6;
          l = al6;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[6];
          l = hl[6];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[6] = ah6 = (c & 0xffff) | (d << 16);
          hl[6] = al6 = (a & 0xffff) | (b << 16);

          h = ah7;
          l = al7;

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = hh[7];
          l = hl[7];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          hh[7] = ah7 = (c & 0xffff) | (d << 16);
          hl[7] = al7 = (a & 0xffff) | (b << 16);

          pos += 128;
          n -= 128;
        }

        return n;
      }

      function crypto_hash(out, m, n) {
        var hh = new Int32Array(8),
          hl = new Int32Array(8),
          x = new Uint8Array(256),
          i, b = n;

        hh[0] = 0x6a09e667;
        hh[1] = 0xbb67ae85;
        hh[2] = 0x3c6ef372;
        hh[3] = 0xa54ff53a;
        hh[4] = 0x510e527f;
        hh[5] = 0x9b05688c;
        hh[6] = 0x1f83d9ab;
        hh[7] = 0x5be0cd19;

        hl[0] = 0xf3bcc908;
        hl[1] = 0x84caa73b;
        hl[2] = 0xfe94f82b;
        hl[3] = 0x5f1d36f1;
        hl[4] = 0xade682d1;
        hl[5] = 0x2b3e6c1f;
        hl[6] = 0xfb41bd6b;
        hl[7] = 0x137e2179;

        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;

        for (i = 0; i < n; i++) x[i] = m[b - n + i];
        x[n] = 128;

        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, (b / 0x20000000) | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);

        for (i = 0; i < 8; i++) ts64(out, 8 * i, hh[i], hl[i]);

        return 0;
      }

      function add(p, q) {
        var a = gf(), b = gf(), c = gf(),
          d = gf(), e = gf(), f = gf(),
          g = gf(), h = gf(), t = gf();

        Z(a, p[1], p[0]);
        Z(t, q[1], q[0]);
        M(a, a, t);
        A(b, p[0], p[1]);
        A(t, q[0], q[1]);
        M(b, b, t);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f, d, c);
        A(g, d, c);
        A(h, b, a);

        M(p[0], e, f);
        M(p[1], h, g);
        M(p[2], g, f);
        M(p[3], e, h);
      }

      function cswap(p, q, b) {
        var i;
        for (i = 0; i < 4; i++) {
          sel25519(p[i], q[i], b);
        }
      }

      function pack(r, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
      }

      function scalarmult(p, q, s) {
        var b, i;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for (i = 255; i >= 0; --i) {
          b = (s[(i / 8) | 0] >> (i & 7)) & 1;
          cswap(p, q, b);
          add(q, p);
          add(p, p);
          cswap(p, q, b);
        }
      }

      function scalarbase(p, s) {
        var q = [gf(), gf(), gf(), gf()];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s);
      }

      function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()];
        var i;

        if (!seeded) randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;

        scalarbase(p, d);
        pack(pk, p);

        for (i = 0; i < 32; i++) sk[i + 32] = pk[i];
        return 0;
      }

      var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

      function modL(r, x) {
        var carry, i, j, k;
        for (i = 63; i >= 32; --i) {
          carry = 0;
          for (j = i - 32, k = i - 12; j < k; ++j) {
            x[j] += carry - 16 * x[i] * L[j - (i - 32)];
            carry = Math.floor((x[j] + 128) / 256);
            x[j] -= carry * 256;
          }
          x[j] += carry;
          x[i] = 0;
        }
        carry = 0;
        for (j = 0; j < 32; j++) {
          x[j] += carry - (x[31] >> 4) * L[j];
          carry = x[j] >> 8;
          x[j] &= 255;
        }
        for (j = 0; j < 32; j++) x[j] -= carry * L[j];
        for (i = 0; i < 32; i++) {
          x[i + 1] += x[i] >> 8;
          r[i] = x[i] & 255;
        }
      }

      function reduce(r) {
        var x = new Float64Array(64), i;
        for (i = 0; i < 64; i++) x[i] = r[i];
        for (i = 0; i < 64; i++) r[i] = 0;
        modL(r, x);
      }

      // Note: difference from C - smlen returned, not passed as argument.
      function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
        var i, j, x = new Float64Array(64);
        var p = [gf(), gf(), gf(), gf()];

        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;

        var smlen = n + 64;
        for (i = 0; i < n; i++) sm[64 + i] = m[i];
        for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

        crypto_hash(r, sm.subarray(32), n + 32);
        reduce(r);
        scalarbase(p, r);
        pack(sm, p);

        for (i = 32; i < 64; i++) sm[i] = sk[i];
        crypto_hash(h, sm, n + 64);
        reduce(h);

        for (i = 0; i < 64; i++) x[i] = 0;
        for (i = 0; i < 32; i++) x[i] = r[i];
        for (i = 0; i < 32; i++) {
          for (j = 0; j < 32; j++) {
            x[i + j] += h[i] * d[j];
          }
        }

        modL(sm.subarray(32), x);
        return smlen;
      }

      function unpackneg(r, p) {
        var t = gf(), chk = gf(), num = gf(),
          den = gf(), den2 = gf(), den4 = gf(),
          den6 = gf();

        set25519(r[2], gf1);
        unpack25519(r[1], p);
        S(num, r[1]);
        M(den, num, D);
        Z(num, num, r[2]);
        A(den, r[2], den);

        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t, den6, num);
        M(t, t, den);

        pow2523(t, t);
        M(t, t, num);
        M(t, t, den);
        M(t, t, den);
        M(r[0], t, den);

        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) M(r[0], r[0], I);

        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) return -1;

        if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

        M(r[3], r[0], r[1]);
        return 0;
      }

      function crypto_sign_open(m, sm, n, pk) {
        var i;
        var t = new Uint8Array(32), h = new Uint8Array(64);
        var p = [gf(), gf(), gf(), gf()],
          q = [gf(), gf(), gf(), gf()];

        if (n < 64) return -1;

        if (unpackneg(q, pk)) return -1;

        for (i = 0; i < n; i++) m[i] = sm[i];
        for (i = 0; i < 32; i++) m[i + 32] = pk[i];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);

        scalarbase(q, sm.subarray(32));
        add(p, q);
        pack(t, p);

        n -= 64;
        if (crypto_verify_32(sm, 0, t, 0)) {
          for (i = 0; i < n; i++) m[i] = 0;
          return -1;
        }

        for (i = 0; i < n; i++) m[i] = sm[i + 64];
        return n;
      }

      var crypto_secretbox_KEYBYTES = 32,
        crypto_secretbox_NONCEBYTES = 24,
        crypto_secretbox_ZEROBYTES = 32,
        crypto_secretbox_BOXZEROBYTES = 16,
        crypto_scalarmult_BYTES = 32,
        crypto_scalarmult_SCALARBYTES = 32,
        crypto_box_PUBLICKEYBYTES = 32,
        crypto_box_SECRETKEYBYTES = 32,
        crypto_box_BEFORENMBYTES = 32,
        crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
        crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
        crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
        crypto_sign_BYTES = 64,
        crypto_sign_PUBLICKEYBYTES = 32,
        crypto_sign_SECRETKEYBYTES = 64,
        crypto_sign_SEEDBYTES = 32,
        crypto_hash_BYTES = 64;

      nacl.lowlevel = {
        crypto_core_hsalsa20: crypto_core_hsalsa20,
        crypto_stream_xor: crypto_stream_xor,
        crypto_stream: crypto_stream,
        crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
        crypto_stream_salsa20: crypto_stream_salsa20,
        crypto_onetimeauth: crypto_onetimeauth,
        crypto_onetimeauth_verify: crypto_onetimeauth_verify,
        crypto_verify_16: crypto_verify_16,
        crypto_verify_32: crypto_verify_32,
        crypto_secretbox: crypto_secretbox,
        crypto_secretbox_open: crypto_secretbox_open,
        crypto_scalarmult: crypto_scalarmult,
        crypto_scalarmult_base: crypto_scalarmult_base,
        crypto_box_beforenm: crypto_box_beforenm,
        crypto_box_afternm: crypto_box_afternm,
        crypto_box: crypto_box,
        crypto_box_open: crypto_box_open,
        crypto_box_keypair: crypto_box_keypair,
        crypto_hash: crypto_hash,
        crypto_sign: crypto_sign,
        crypto_sign_keypair: crypto_sign_keypair,
        crypto_sign_open: crypto_sign_open,

        crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES: crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
        crypto_hash_BYTES: crypto_hash_BYTES,

        gf: gf,
        D: D,
        L: L,
        pack25519: pack25519,
        unpack25519: unpack25519,
        M: M,
        A: A,
        S: S,
        Z: Z,
        pow2523: pow2523,
        add: add,
        set25519: set25519,
        modL: modL,
        scalarmult: scalarmult,
        scalarbase: scalarbase,
      };

      /* High-level API */

      function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
      }

      function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
      }

      function checkArrayTypes() {
        for (var i = 0; i < arguments.length; i++) {
          if (!(arguments[i] instanceof Uint8Array))
            throw new TypeError('unexpected type, use Uint8Array');
        }
      }

      function cleanup(arr) {
        for (var i = 0; i < arr.length; i++) arr[i] = 0;
      }

      nacl.randomBytes = function (n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
      };

      nacl.secretbox = function (msg, nonce, key) {
        checkArrayTypes(msg, nonce, key);
        checkLengths(key, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for (var i = 0; i < msg.length; i++) m[i + crypto_secretbox_ZEROBYTES] = msg[i];
        crypto_secretbox(c, m, m.length, nonce, key);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
      };

      nacl.secretbox.open = function (box, nonce, key) {
        checkArrayTypes(box, nonce, key);
        checkLengths(key, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for (var i = 0; i < box.length; i++) c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
        if (c.length < 32) return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
      };

      nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
      nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
      nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

      nacl.scalarMult = function (n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
        if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
      };

      nacl.scalarMult.base = function (n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
      };

      nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
      nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

      nacl.box = function (msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox(msg, nonce, k);
      };

      nacl.box.before = function (publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
      };

      nacl.box.after = nacl.secretbox;

      nacl.box.open = function (msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox.open(msg, nonce, k);
      };

      nacl.box.open.after = nacl.secretbox.open;

      nacl.box.keyPair = function () {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };

      nacl.box.keyPair.fromSecretKey = function (secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES)
          throw new Error('bad secret key size');
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };

      nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
      nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
      nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
      nacl.box.nonceLength = crypto_box_NONCEBYTES;
      nacl.box.overheadLength = nacl.secretbox.overheadLength;

      nacl.sign = function (msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error('bad secret key size');
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
      };

      nacl.sign.open = function (signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error('bad public key size');
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0) return null;
        var m = new Uint8Array(mlen);
        for (var i = 0; i < m.length; i++) m[i] = tmp[i];
        return m;
      };

      nacl.sign.detached = function (msg, secretKey) {
        var signedMsg = nacl.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
        return sig;
      };

      nacl.sign.detached.verify = function (msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES)
          throw new Error('bad signature size');
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
          throw new Error('bad public key size');
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i;
        for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
        for (i = 0; i < msg.length; i++) sm[i + crypto_sign_BYTES] = msg[i];
        return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
      };

      nacl.sign.keyPair = function () {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return { publicKey: pk, secretKey: sk };
      };

      nacl.sign.keyPair.fromSecretKey = function (secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
          throw new Error('bad secret key size');
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32 + i];
        return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
      };

      nacl.sign.keyPair.fromSeed = function (seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES)
          throw new Error('bad seed size');
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for (var i = 0; i < 32; i++) sk[i] = seed[i];
        crypto_sign_keypair(pk, sk, true);
        return { publicKey: pk, secretKey: sk };
      };

      nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
      nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
      nacl.sign.seedLength = crypto_sign_SEEDBYTES;
      nacl.sign.signatureLength = crypto_sign_BYTES;

      nacl.hash = function (msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
      };

      nacl.hash.hashLength = crypto_hash_BYTES;

      nacl.verify = function (x, y) {
        checkArrayTypes(x, y);
        // Zero length arguments are considered not equal.
        if (x.length === 0 || y.length === 0) return false;
        if (x.length !== y.length) return false;
        return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
      };

      nacl.setPRNG = function (fn) {
        randombytes = fn;
      };

      (function () {
        // Initialize PRNG if environment provides CSPRNG.
        // If not, methods calling randombytes will throw.
        var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
        if (crypto && crypto.getRandomValues) {
          // Browsers.
          var QUOTA = 65536;
          nacl.setPRNG(function (x, n) {
            var i, v = new Uint8Array(n);
            for (i = 0; i < n; i += QUOTA) {
              crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
            }
            for (i = 0; i < n; i++) x[i] = v[i];
            cleanup(v);
          });
        } else if (typeof require !== 'undefined') {
          // Node.js.
          crypto = require('crypto');
          if (crypto && crypto.randomBytes) {
            nacl.setPRNG(function (x, n) {
              var i, v = crypto.randomBytes(n);
              for (i = 0; i < n; i++) x[i] = v[i];
              cleanup(v);
            });
          }
        }
      })();

    })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

  }, { "crypto": 48 }], 314: [function (require, module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    'use strict';

    var punycode = require('punycode');
    var util = require('./util');

    exports.parse = urlParse;
    exports.resolve = urlResolve;
    exports.resolveObject = urlResolveObject;
    exports.format = urlFormat;

    exports.Url = Url;

    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }

    // Reference: RFC 3986, RFC 1808, RFC 2396

    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,

      // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      },
      querystring = require('querystring');

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && util.isObject(url) && url instanceof Url) return url;

      var u = new Url;
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }

    Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
      if (!util.isString(url)) {
        throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
      }

      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      var queryIndex = url.indexOf('?'),
        splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);

      var rest = url;

      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.path = rest;
          this.href = rest;
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
            if (parseQueryString) {
              this.query = querystring.parse(this.search.substr(1));
            } else {
              this.query = this.search.substr(1);
            }
          } else if (parseQueryString) {
            this.search = '';
            this.query = {};
          }
          return this;
        }
      }

      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }

      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }

      if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {

        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c

        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.

        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (var i = 0; i < hostEndingChars.length; i++) {
          var hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }

        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }

        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = decodeURIComponent(auth);
        }

        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (var i = 0; i < nonHostChars.length; i++) {
          var hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1)
          hostEnd = rest.length;

        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);

        // pull out port.
        this.parseHost();

        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || '';

        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';

        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (var i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }
                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        } else {
          // hostnames are always lower case.
          this.hostname = this.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          this.hostname = punycode.toASCII(this.hostname);
        }

        var p = this.port ? ':' + this.port : '';
        var h = this.hostname || '';
        this.host = h + p;
        this.href += this.host;

        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      }

      // now rest is set to the post-host stuff.
      // chop off any delim chars.
      if (!unsafeProtocol[lowerProto]) {

        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (var i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }


      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) {
          this.query = querystring.parse(this.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = '';
        this.query = {};
      }
      if (rest) this.pathname = rest;
      if (slashedProtocol[lowerProto] &&
        this.hostname && !this.pathname) {
        this.pathname = '/';
      }

      //to support http.request
      if (this.pathname || this.search) {
        var p = this.pathname || '';
        var s = this.search || '';
        this.path = p + s;
      }

      // finally, reconstruct the href based on what has been validated.
      this.href = this.format();
      return this;
    };

    // format a parsed object into a url string
    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (util.isString(obj)) obj = urlParse(obj);
      if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
      return obj.format();
    }

    Url.prototype.format = function () {
      var auth = this.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = this.protocol || '',
        pathname = this.pathname || '',
        hash = this.hash || '',
        host = false,
        query = '';

      if (this.host) {
        host = auth + this.host;
      } else if (this.hostname) {
        host = auth + (this.hostname.indexOf(':') === -1 ?
          this.hostname :
          '[' + this.hostname + ']');
        if (this.port) {
          host += ':' + this.port;
        }
      }

      if (this.query &&
        util.isObject(this.query) &&
        Object.keys(this.query).length) {
        query = querystring.stringify(this.query);
      }

      var search = this.search || (query && ('?' + query)) || '';

      if (protocol && protocol.substr(-1) !== ':') protocol += ':';

      // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.
      if (this.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;

      pathname = pathname.replace(/[?#]/g, function (match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');

      return protocol + host + pathname + search + hash;
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function (relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function (relative) {
      if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }

      // hash is always overridden, no matter what.
      // even href="" will remove it.
      result.hash = relative.hash;

      // if the relative url is empty, then there's nothing left to do here.
      if (relative.href === '') {
        result.href = result.format();
        return result;
      }

      // hrefs like //foo/bar always cut to the protocol.
      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol')
            result[rkey] = relative[rkey];
        }

        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }

      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          var relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift()));
          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
          (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        relPath = relative.pathname && relative.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];

      // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.
      if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;
          else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;
            else relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }

      if (isRelAbs) {
        // it's absolute.
        result.host = (relative.host || relative.host === '') ?
          relative.host : result.host;
        result.hostname = (relative.hostname || relative.hostname === '') ?
          relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
        // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          var authInHost = result.host && result.host.indexOf('@') > 0 ?
            result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
            (result.search ? result.search : '');
        }
        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }

      // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');

      // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');

      // put the host back
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' :
          srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || (result.host && srcPath.length);

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      }

      //to support request.http
      if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function () {
      var host = this.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) this.hostname = host;
    };

  }, { "./util": 315, "punycode": 251, "querystring": 282 }], 315: [function (require, module, exports) {
    'use strict';

    module.exports = {
      isString: function (arg) {
        return typeof (arg) === 'string';
      },
      isObject: function (arg) {
        return typeof (arg) === 'object' && arg !== null;
      },
      isNull: function (arg) {
        return arg === null;
      },
      isNullOrUndefined: function (arg) {
        return arg == null;
      }
    };

  }, {}], 316: [function (require, module, exports) {
    (function (global) {
      (function () {

        /**
         * Module exports.
         */

        module.exports = deprecate;

        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config('noDeprecation')) {
            return fn;
          }

          var warned = false;
          function deprecated() {
            if (!warned) {
              if (config('throwDeprecation')) {
                throw new Error(msg);
              } else if (config('traceDeprecation')) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }
              warned = true;
            }
            return fn.apply(this, arguments);
          }

          return deprecated;
        }

        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */

        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }
          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === 'true';
        }

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, {}], 317: [function (require, module, exports) {
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === 'object'
        && typeof arg.copy === 'function'
        && typeof arg.fill === 'function'
        && typeof arg.readUInt8 === 'function';
    }
  }, {}], 318: [function (require, module, exports) {
    // Currently in sync with Node.js lib/internal/util/types.js
    // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

    'use strict';

    var isArgumentsObject = require('is-arguments');
    var isGeneratorFunction = require('is-generator-function');
    var whichTypedArray = require('which-typed-array');
    var isTypedArray = require('is-typed-array');

    function uncurryThis(f) {
      return f.call.bind(f);
    }

    var BigIntSupported = typeof BigInt !== 'undefined';
    var SymbolSupported = typeof Symbol !== 'undefined';

    var ObjectToString = uncurryThis(Object.prototype.toString);

    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);

    if (BigIntSupported) {
      var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }

    if (SymbolSupported) {
      var symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }

    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== 'object') {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }

    exports.isArgumentsObject = isArgumentsObject;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray;

    // Taken from here and modified for better browser support
    // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
    function isPromise(input) {
      return (
        (
          typeof Promise !== 'undefined' &&
          input instanceof Promise
        ) ||
        (
          input !== null &&
          typeof input === 'object' &&
          typeof input.then === 'function' &&
          typeof input.catch === 'function'
        )
      );
    }
    exports.isPromise = isPromise;

    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }

      return (
        isTypedArray(value) ||
        isDataView(value)
      );
    }
    exports.isArrayBufferView = isArrayBufferView;


    function isUint8Array(value) {
      return whichTypedArray(value) === 'Uint8Array';
    }
    exports.isUint8Array = isUint8Array;

    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === 'Uint8ClampedArray';
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;

    function isUint16Array(value) {
      return whichTypedArray(value) === 'Uint16Array';
    }
    exports.isUint16Array = isUint16Array;

    function isUint32Array(value) {
      return whichTypedArray(value) === 'Uint32Array';
    }
    exports.isUint32Array = isUint32Array;

    function isInt8Array(value) {
      return whichTypedArray(value) === 'Int8Array';
    }
    exports.isInt8Array = isInt8Array;

    function isInt16Array(value) {
      return whichTypedArray(value) === 'Int16Array';
    }
    exports.isInt16Array = isInt16Array;

    function isInt32Array(value) {
      return whichTypedArray(value) === 'Int32Array';
    }
    exports.isInt32Array = isInt32Array;

    function isFloat32Array(value) {
      return whichTypedArray(value) === 'Float32Array';
    }
    exports.isFloat32Array = isFloat32Array;

    function isFloat64Array(value) {
      return whichTypedArray(value) === 'Float64Array';
    }
    exports.isFloat64Array = isFloat64Array;

    function isBigInt64Array(value) {
      return whichTypedArray(value) === 'BigInt64Array';
    }
    exports.isBigInt64Array = isBigInt64Array;

    function isBigUint64Array(value) {
      return whichTypedArray(value) === 'BigUint64Array';
    }
    exports.isBigUint64Array = isBigUint64Array;

    function isMapToString(value) {
      return ObjectToString(value) === '[object Map]';
    }
    isMapToString.working = (
      typeof Map !== 'undefined' &&
      isMapToString(new Map())
    );

    function isMap(value) {
      if (typeof Map === 'undefined') {
        return false;
      }

      return isMapToString.working
        ? isMapToString(value)
        : value instanceof Map;
    }
    exports.isMap = isMap;

    function isSetToString(value) {
      return ObjectToString(value) === '[object Set]';
    }
    isSetToString.working = (
      typeof Set !== 'undefined' &&
      isSetToString(new Set())
    );
    function isSet(value) {
      if (typeof Set === 'undefined') {
        return false;
      }

      return isSetToString.working
        ? isSetToString(value)
        : value instanceof Set;
    }
    exports.isSet = isSet;

    function isWeakMapToString(value) {
      return ObjectToString(value) === '[object WeakMap]';
    }
    isWeakMapToString.working = (
      typeof WeakMap !== 'undefined' &&
      isWeakMapToString(new WeakMap())
    );
    function isWeakMap(value) {
      if (typeof WeakMap === 'undefined') {
        return false;
      }

      return isWeakMapToString.working
        ? isWeakMapToString(value)
        : value instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap;

    function isWeakSetToString(value) {
      return ObjectToString(value) === '[object WeakSet]';
    }
    isWeakSetToString.working = (
      typeof WeakSet !== 'undefined' &&
      isWeakSetToString(new WeakSet())
    );
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports.isWeakSet = isWeakSet;

    function isArrayBufferToString(value) {
      return ObjectToString(value) === '[object ArrayBuffer]';
    }
    isArrayBufferToString.working = (
      typeof ArrayBuffer !== 'undefined' &&
      isArrayBufferToString(new ArrayBuffer())
    );
    function isArrayBuffer(value) {
      if (typeof ArrayBuffer === 'undefined') {
        return false;
      }

      return isArrayBufferToString.working
        ? isArrayBufferToString(value)
        : value instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer;

    function isDataViewToString(value) {
      return ObjectToString(value) === '[object DataView]';
    }
    isDataViewToString.working = (
      typeof ArrayBuffer !== 'undefined' &&
      typeof DataView !== 'undefined' &&
      isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
    );
    function isDataView(value) {
      if (typeof DataView === 'undefined') {
        return false;
      }

      return isDataViewToString.working
        ? isDataViewToString(value)
        : value instanceof DataView;
    }
    exports.isDataView = isDataView;

    // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === '[object SharedArrayBuffer]';
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === 'undefined') {
        return false;
      }

      if (typeof isSharedArrayBufferToString.working === 'undefined') {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }

      return isSharedArrayBufferToString.working
        ? isSharedArrayBufferToString(value)
        : value instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;

    function isAsyncFunction(value) {
      return ObjectToString(value) === '[object AsyncFunction]';
    }
    exports.isAsyncFunction = isAsyncFunction;

    function isMapIterator(value) {
      return ObjectToString(value) === '[object Map Iterator]';
    }
    exports.isMapIterator = isMapIterator;

    function isSetIterator(value) {
      return ObjectToString(value) === '[object Set Iterator]';
    }
    exports.isSetIterator = isSetIterator;

    function isGeneratorObject(value) {
      return ObjectToString(value) === '[object Generator]';
    }
    exports.isGeneratorObject = isGeneratorObject;

    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === '[object WebAssembly.Module]';
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports.isNumberObject = isNumberObject;

    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports.isStringObject = isStringObject;

    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject;

    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;

    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;

    function isBoxedPrimitive(value) {
      return (
        isNumberObject(value) ||
        isStringObject(value) ||
        isBooleanObject(value) ||
        isBigIntObject(value) ||
        isSymbolObject(value)
      );
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;

    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== 'undefined' && (
        isArrayBuffer(value) ||
        isSharedArrayBuffer(value)
      );
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;

    ['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function (method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function () {
          throw new Error(method + ' is not supported in userland');
        }
      });
    });

  }, { "is-arguments": 204, "is-generator-function": 207, "is-typed-array": 208, "which-typed-array": 320 }], 319: [function (require, module, exports) {
    (function (process) {
      (function () {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.

        var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
          function getOwnPropertyDescriptors(obj) {
            var keys = Object.keys(obj);
            var descriptors = {};
            for (var i = 0; i < keys.length; i++) {
              descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
            }
            return descriptors;
          };

        var formatRegExp = /%[sdj%]/g;
        exports.format = function (f) {
          if (!isString(f)) {
            var objects = [];
            for (var i = 0; i < arguments.length; i++) {
              objects.push(inspect(arguments[i]));
            }
            return objects.join(' ');
          }

          var i = 1;
          var args = arguments;
          var len = args.length;
          var str = String(f).replace(formatRegExp, function (x) {
            if (x === '%%') return '%';
            if (i >= len) return x;
            switch (x) {
              case '%s': return String(args[i++]);
              case '%d': return Number(args[i++]);
              case '%j':
                try {
                  return JSON.stringify(args[i++]);
                } catch (_) {
                  return '[Circular]';
                }
              default:
                return x;
            }
          });
          for (var x = args[i]; i < len; x = args[++i]) {
            if (isNull(x) || !isObject(x)) {
              str += ' ' + x;
            } else {
              str += ' ' + inspect(x);
            }
          }
          return str;
        };


        // Mark that a method should not be used.
        // Returns a modified function which warns once by default.
        // If --no-deprecation is set, then it is a no-op.
        exports.deprecate = function (fn, msg) {
          if (typeof process !== 'undefined' && process.noDeprecation === true) {
            return fn;
          }

          // Allow for deprecating things in the process of starting up.
          if (typeof process === 'undefined') {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }

          var warned = false;
          function deprecated() {
            if (!warned) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              } else if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }
              warned = true;
            }
            return fn.apply(this, arguments);
          }

          return deprecated;
        };


        var debugs = {};
        var debugEnvRegex = /^$/;

        if (process.env.NODE_DEBUG) {
          var debugEnv = process.env.NODE_DEBUG;
          debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
            .replace(/\*/g, '.*')
            .replace(/,/g, '$|^')
            .toUpperCase();
          debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
        }
        exports.debuglog = function (set) {
          set = set.toUpperCase();
          if (!debugs[set]) {
            if (debugEnvRegex.test(set)) {
              var pid = process.pid;
              debugs[set] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
              };
            } else {
              debugs[set] = function () { };
            }
          }
          return debugs[set];
        };


        /**
         * Echos the value of a value. Trys to print the value out
         * in the best way possible given the different types.
         *
         * @param {Object} obj The object to print out.
         * @param {Object} opts Optional options object that alters the output.
         */
        /* legacy: obj, showHidden, depth, colors*/
        function inspect(obj, opts) {
          // default options
          var ctx = {
            seen: [],
            stylize: stylizeNoColor
          };
          // legacy...
          if (arguments.length >= 3) ctx.depth = arguments[2];
          if (arguments.length >= 4) ctx.colors = arguments[3];
          if (isBoolean(opts)) {
            // legacy...
            ctx.showHidden = opts;
          } else if (opts) {
            // got an "options" object
            exports._extend(ctx, opts);
          }
          // set default options
          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
          if (isUndefined(ctx.depth)) ctx.depth = 2;
          if (isUndefined(ctx.colors)) ctx.colors = false;
          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
          if (ctx.colors) ctx.stylize = stylizeWithColor;
          return formatValue(ctx, obj, ctx.depth);
        }
        exports.inspect = inspect;


        // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
        inspect.colors = {
          'bold': [1, 22],
          'italic': [3, 23],
          'underline': [4, 24],
          'inverse': [7, 27],
          'white': [37, 39],
          'grey': [90, 39],
          'black': [30, 39],
          'blue': [34, 39],
          'cyan': [36, 39],
          'green': [32, 39],
          'magenta': [35, 39],
          'red': [31, 39],
          'yellow': [33, 39]
        };

        // Don't use 'blue' not visible on cmd.exe
        inspect.styles = {
          'special': 'cyan',
          'number': 'yellow',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red'
        };


        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];

          if (style) {
            return '\u001b[' + inspect.colors[style][0] + 'm' + str +
              '\u001b[' + inspect.colors[style][1] + 'm';
          } else {
            return str;
          }
        }


        function stylizeNoColor(str, styleType) {
          return str;
        }


        function arrayToHash(array) {
          var hash = {};

          array.forEach(function (val, idx) {
            hash[val] = true;
          });

          return hash;
        }


        function formatValue(ctx, value, recurseTimes) {
          // Provide a hook for user-specified inspect functions.
          // Check that value is an object with an inspect function on it
          if (ctx.customInspect &&
            value &&
            isFunction(value.inspect) &&
            // Filter out the util module, it's inspect function is special
            value.inspect !== exports.inspect &&
            // Also filter out any prototype objects using the circular check.
            !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);
            if (!isString(ret)) {
              ret = formatValue(ctx, ret, recurseTimes);
            }
            return ret;
          }

          // Primitive types cannot have properties
          var primitive = formatPrimitive(ctx, value);
          if (primitive) {
            return primitive;
          }

          // Look up the keys of the object.
          var keys = Object.keys(value);
          var visibleKeys = arrayToHash(keys);

          if (ctx.showHidden) {
            keys = Object.getOwnPropertyNames(value);
          }

          // IE doesn't make error fields non-enumerable
          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
          if (isError(value)
            && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
            return formatError(value);
          }

          // Some type of object without properties can be shortcutted.
          if (keys.length === 0) {
            if (isFunction(value)) {
              var name = value.name ? ': ' + value.name : '';
              return ctx.stylize('[Function' + name + ']', 'special');
            }
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            }
            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), 'date');
            }
            if (isError(value)) {
              return formatError(value);
            }
          }

          var base = '', array = false, braces = ['{', '}'];

          // Make Array say that they are Array
          if (isArray(value)) {
            array = true;
            braces = ['[', ']'];
          }

          // Make functions say that they are functions
          if (isFunction(value)) {
            var n = value.name ? ': ' + value.name : '';
            base = ' [Function' + n + ']';
          }

          // Make RegExps say that they are RegExps
          if (isRegExp(value)) {
            base = ' ' + RegExp.prototype.toString.call(value);
          }

          // Make dates with properties first say the date
          if (isDate(value)) {
            base = ' ' + Date.prototype.toUTCString.call(value);
          }

          // Make error with message first say the error
          if (isError(value)) {
            base = ' ' + formatError(value);
          }

          if (keys.length === 0 && (!array || value.length == 0)) {
            return braces[0] + base + braces[1];
          }

          if (recurseTimes < 0) {
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
            } else {
              return ctx.stylize('[Object]', 'special');
            }
          }

          ctx.seen.push(value);

          var output;
          if (array) {
            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
          } else {
            output = keys.map(function (key) {
              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
            });
          }

          ctx.seen.pop();

          return reduceToSingleString(output, base, braces);
        }


        function formatPrimitive(ctx, value) {
          if (isUndefined(value))
            return ctx.stylize('undefined', 'undefined');
          if (isString(value)) {
            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
              .replace(/'/g, "\\'")
              .replace(/\\"/g, '"') + '\'';
            return ctx.stylize(simple, 'string');
          }
          if (isNumber(value))
            return ctx.stylize('' + value, 'number');
          if (isBoolean(value))
            return ctx.stylize('' + value, 'boolean');
          // For some reason typeof null is "object", so special case here.
          if (isNull(value))
            return ctx.stylize('null', 'null');
        }


        function formatError(value) {
          return '[' + Error.prototype.toString.call(value) + ']';
        }


        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
          var output = [];
          for (var i = 0, l = value.length; i < l; ++i) {
            if (hasOwnProperty(value, String(i))) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                String(i), true));
            } else {
              output.push('');
            }
          }
          keys.forEach(function (key) {
            if (!key.match(/^\d+$/)) {
              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                key, true));
            }
          });
          return output;
        }


        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
          var name, str, desc;
          desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
          if (desc.get) {
            if (desc.set) {
              str = ctx.stylize('[Getter/Setter]', 'special');
            } else {
              str = ctx.stylize('[Getter]', 'special');
            }
          } else {
            if (desc.set) {
              str = ctx.stylize('[Setter]', 'special');
            }
          }
          if (!hasOwnProperty(visibleKeys, key)) {
            name = '[' + key + ']';
          }
          if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
              if (isNull(recurseTimes)) {
                str = formatValue(ctx, desc.value, null);
              } else {
                str = formatValue(ctx, desc.value, recurseTimes - 1);
              }
              if (str.indexOf('\n') > -1) {
                if (array) {
                  str = str.split('\n').map(function (line) {
                    return '  ' + line;
                  }).join('\n').substr(2);
                } else {
                  str = '\n' + str.split('\n').map(function (line) {
                    return '   ' + line;
                  }).join('\n');
                }
              }
            } else {
              str = ctx.stylize('[Circular]', 'special');
            }
          }
          if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) {
              return str;
            }
            name = JSON.stringify('' + key);
            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, 'name');
            } else {
              name = name.replace(/'/g, "\\'")
                .replace(/\\"/g, '"')
                .replace(/(^"|"$)/g, "'");
              name = ctx.stylize(name, 'string');
            }
          }

          return name + ': ' + str;
        }


        function reduceToSingleString(output, base, braces) {
          var numLinesEst = 0;
          var length = output.reduce(function (prev, cur) {
            numLinesEst++;
            if (cur.indexOf('\n') >= 0) numLinesEst++;
            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
          }, 0);

          if (length > 60) {
            return braces[0] +
              (base === '' ? '' : base + '\n ') +
              ' ' +
              output.join(',\n  ') +
              ' ' +
              braces[1];
          }

          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
        }


        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.
        exports.types = require('./support/types');

        function isArray(ar) {
          return Array.isArray(ar);
        }
        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }
        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }
        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }
        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }
        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }
        exports.isString = isString;

        function isSymbol(arg) {
          return typeof arg === 'symbol';
        }
        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }
        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return isObject(re) && objectToString(re) === '[object RegExp]';
        }
        exports.isRegExp = isRegExp;
        exports.types.isRegExp = isRegExp;

        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }
        exports.isObject = isObject;

        function isDate(d) {
          return isObject(d) && objectToString(d) === '[object Date]';
        }
        exports.isDate = isDate;
        exports.types.isDate = isDate;

        function isError(e) {
          return isObject(e) &&
            (objectToString(e) === '[object Error]' || e instanceof Error);
        }
        exports.isError = isError;
        exports.types.isNativeError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }
        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null ||
            typeof arg === 'boolean' ||
            typeof arg === 'number' ||
            typeof arg === 'string' ||
            typeof arg === 'symbol' ||  // ES6 symbol
            typeof arg === 'undefined';
        }
        exports.isPrimitive = isPrimitive;

        exports.isBuffer = require('./support/isBuffer');

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }


        function pad(n) {
          return n < 10 ? '0' + n.toString(10) : n.toString(10);
        }


        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
          'Oct', 'Nov', 'Dec'];

        // 26 Feb 16:19:34
        function timestamp() {
          var d = new Date();
          var time = [pad(d.getHours()),
          pad(d.getMinutes()),
          pad(d.getSeconds())].join(':');
          return [d.getDate(), months[d.getMonth()], time].join(' ');
        }


        // log is just a thin wrapper to console.log that prepends a timestamp
        exports.log = function () {
          console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
        };


        /**
         * Inherit the prototype methods from one constructor into another.
         *
         * The Function.prototype.inherits from lang.js rewritten as a standalone
         * function (not on Function.prototype). NOTE: If this file is to be loaded
         * during bootstrapping this function needs to be rewritten using some native
         * functions as prototype setup using normal JavaScript does not work as
         * expected during bootstrapping (see mirror.js in r114903).
         *
         * @param {function} ctor Constructor function which needs to inherit the
         *     prototype.
         * @param {function} superCtor Constructor function to inherit prototype from.
         */
        exports.inherits = require('inherits');

        exports._extend = function (origin, add) {
          // Don't do anything if add isn't an object
          if (!add || !isObject(add)) return origin;

          var keys = Object.keys(add);
          var i = keys.length;
          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }
          return origin;
        };

        function hasOwnProperty(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        }

        var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

        exports.promisify = function promisify(original) {
          if (typeof original !== 'function')
            throw new TypeError('The "original" argument must be of type Function');

          if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
            var fn = original[kCustomPromisifiedSymbol];
            if (typeof fn !== 'function') {
              throw new TypeError('The "util.promisify.custom" argument must be of type Function');
            }
            Object.defineProperty(fn, kCustomPromisifiedSymbol, {
              value: fn, enumerable: false, writable: false, configurable: true
            });
            return fn;
          }

          function fn() {
            var promiseResolve, promiseReject;
            var promise = new Promise(function (resolve, reject) {
              promiseResolve = resolve;
              promiseReject = reject;
            });

            var args = [];
            for (var i = 0; i < arguments.length; i++) {
              args.push(arguments[i]);
            }
            args.push(function (err, value) {
              if (err) {
                promiseReject(err);
              } else {
                promiseResolve(value);
              }
            });

            try {
              original.apply(this, args);
            } catch (err) {
              promiseReject(err);
            }

            return promise;
          }

          Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

          if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn, enumerable: false, writable: false, configurable: true
          });
          return Object.defineProperties(
            fn,
            getOwnPropertyDescriptors(original)
          );
        }

        exports.promisify.custom = kCustomPromisifiedSymbol

        function callbackifyOnRejected(reason, cb) {
          // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
          // Because `null` is a special error value in callbacks which means "no error
          // occurred", we error-wrap so the callback consumer can distinguish between
          // "the promise rejected with null" or "the promise fulfilled with undefined".
          if (!reason) {
            var newReason = new Error('Promise відхилено з помилковим значенням');
            newReason.reason = reason;
            reason = newReason;
          }
          return cb(reason);
        }

        function callbackify(original) {
          if (typeof original !== 'function') {
            throw new TypeError('«Оригінальний» аргумент має бути типу Function');
          }

          // We DO NOT return the promise as it gives the user a false sense that
          // the promise is actually somehow related to the callback's execution
          // and that the callback throwing will reject the promise.
          function callbackified() {
            var args = [];
            for (var i = 0; i < arguments.length; i++) {
              args.push(arguments[i]);
            }

            var maybeCb = args.pop();
            if (typeof maybeCb !== 'function') {
              throw new TypeError('The last argument must be of type Function');
            }
            var self = this;
            var cb = function () {
              return maybeCb.apply(self, arguments);
            };
            // In true node style we process the callback on `nextTick` with all the
            // implications (stack, `uncaughtException`, `async_hooks`)
            original.apply(this, args)
              .then(function (ret) { process.nextTick(cb.bind(null, null, ret)) },
                function (rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
          }

          Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
          Object.defineProperties(callbackified,
            getOwnPropertyDescriptors(original));
          return callbackified;
        }
        exports.callbackify = callbackify;

      }).call(this)
    }).call(this, require('_process'))

  }, { "./support/isBuffer": 317, "./support/types": 318, "_process": 244, "inherits": 203 }], 320: [function (require, module, exports) {
    (function (global) {
      (function () {
        'use strict';

        var forEach = require('for-each');
        var availableTypedArrays = require('available-typed-arrays');
        var callBound = require('call-bind/callBound');

        var $toString = callBound('Object.prototype.toString');
        var hasToStringTag = require('has-tostringtag/shams')();

        var g = typeof globalThis === 'undefined' ? global : globalThis;
        var typedArrays = availableTypedArrays();

        var $slice = callBound('String.prototype.slice');
        var toStrTags = {};
        var gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');
        var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
        if (hasToStringTag && gOPD && getPrototypeOf) {
          forEach(typedArrays, function (typedArray) {
            if (typeof g[typedArray] === 'function') {
              var arr = new g[typedArray]();
              if (Symbol.toStringTag in arr) {
                var proto = getPrototypeOf(arr);
                var descriptor = gOPD(proto, Symbol.toStringTag);
                if (!descriptor) {
                  var superProto = getPrototypeOf(proto);
                  descriptor = gOPD(superProto, Symbol.toStringTag);
                }
                toStrTags[typedArray] = descriptor.get;
              }
            }
          });
        }

        var tryTypedArrays = function tryAllTypedArrays(value) {
          var foundName = false;
          forEach(toStrTags, function (getter, typedArray) {
            if (!foundName) {
              try {
                var name = getter.call(value);
                if (name === typedArray) {
                  foundName = name;
                }
              } catch (e) { }
            }
          });
          return foundName;
        };

        var isTypedArray = require('is-typed-array');

        module.exports = function whichTypedArray(value) {
          if (!isTypedArray(value)) { return false; }
          if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
          return tryTypedArrays(value);
        };

      }).call(this)
    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

  }, { "available-typed-arrays": 41, "call-bind/callBound": 97, "es-abstract/helpers/getOwnPropertyDescriptor": 161, "for-each": 164, "has-tostringtag/shams": 170, "is-typed-array": 208 }], 321: [function (require, module, exports) {
    "use strict";

    var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

    var _typeof = require("@babel/runtime/helpers/typeof");

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.EUGreenCertificate = void 0;

    var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

    var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

    var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

    var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

    var base45 = _interopRequireWildcard(require("base45"));

    var zlib = _interopRequireWildcard(require("pako"));

    var cbor = _interopRequireWildcard(require("cbor"));

    function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    var EUGreenCertificate = /*#__PURE__*/function (kid) {

      function EUGreenCertificate(greenpassStr) {
        (0, _classCallCheck2["default"])(this, EUGreenCertificate);
        (0, _defineProperty2["default"])(this, "encodedText", "");
        (0, _defineProperty2["default"])(this, "raw", null);
        (0, _defineProperty2["default"])(this, "data", {});
        // Digital Covid Certificate structure:
        // [JSON Schema] ==> CBOR serialization ==> {headers; CBOR; COSE signature} => 
        // => zlib compression => base45 encoding => QR
        //
        // For more details, see Section 3 of:
        // https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_v1_en.pdf
        if (greenpassStr.substring(0, 4) !== "HC1:") throw Error("Відсутній заголовок HC1"); // Remove the "HC1:" heading

        var greenpassBody = greenpassStr.substr(4); // Decode the base45 representation

        var decodedData = base45.decode(greenpassBody); // Decompression (zlib)

        var cwt = zlib.inflate(decodedData); // Now we have the COSE message

        var results = cbor.decodeAllSync(cwt);

        var _results$0$value = (0, _slicedToArray2["default"])(results[0].value, 4),
          protected_header = _results$0$value[0],
          unprotected_header = _results$0$value[1],
          payload = _results$0$value[2],
          signature = _results$0$value[3];

        this.data = {
          header1: cbor.decodeAllSync(protected_header),
          header2: unprotected_header,
          payload: cbor.decodeAllSync(payload),
          signature: signature
        };
        this.raw = cwt;
        this.encodedText = greenpassStr;
      }

      (0, _createClass2["default"])(EUGreenCertificate, [{
        key: "getRawCwt",
        value: function getRawCwt() {
          return this.raw;
        }
      }, {
        key: "getEncodedString",
        value: function getEncodedString() {
          return this.encodedText;
        }
      }, {
        key: "getKid",
        value: function getKid() {
          var kid = null;
          kid = this.data.header1[0].get(4);

          if (!kid) {
            kid = this.data.header2.get(4);
            if (!kid) throw Error("Не знайдено ідентифікатора  KID в заголовках");
          }

          kid = kid.reduce(function (str, v) {
            return str + String.fromCharCode(v);
          }, ""); //uint8array -> bstr

          kid = btoa(kid); //bstr -> base64

          return kid;
        }
      }, {
        key: "getSignAlgorithm",
        value: function getSignAlgorithm() {
          return this.data.header1[0].get(1);
        }
      }, {
        key: "getHCertJson",
        value: function getHCertJson() {
          var payload = this.data.payload[0];
          if (payload instanceof Map) return payload.get(-260).get(1); else return payload[-260][1];
        }
      }, {
        key: "toRawJSON",
        value: function toRawJSON() {
          function map2json(map) {
            return Array.from(map).reduce(function (acc, _ref) {
              var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                key = _ref2[0],
                value = _ref2[1];

              if (value instanceof Uint8Array) {
                acc[key] = value.data;
              } else if (value instanceof Map) {
                acc[key] = map2json(value);
              } else {
                acc[key] = value;
              }

              return acc;
            }, {});
          }

          var header1 = map2json(this.data.header1[0]);
          var header2 = map2json(this.data.header2);
          var payload = this.data.payload[0] instanceof Map ? map2json(this.data.payload[0]) : this.data.payload[0];
          var signature = this.data.signature.reduce(function (str, v) {
            return str + " " + v;
          }, ""); //let signature = JSON.stringify(this.data.signature);

          return {
            protected_header: header1,
            unprotected_header: header2,
            payload: payload,
            signature: signature
          };
        }
      }, {
        key: "toRawString",
        value: function toRawString() {
          var raw = this.toRawJSON(); //let out = `${JSON.stringify(raw.header1,null,2)},\n${JSON.stringify(raw.header2,null,2)},\n${JSON.stringify(raw.payload,null,2)},\n${raw.signature}`;

          var out = "protected header: ".concat(JSON.stringify(raw.protected_header, null, 2), ",\nunprotected header: ").concat(JSON.stringify(raw.unprotected_header, null, 2), ",\npayload: ").concat(JSON.stringify(raw.payload, null, 2), ",\nsignature: ").concat(raw.signature); //let out = JSON.stringify(raw,null,2)

          return out;
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.getHCertJson();
        }
        /* 
            Field values Decoding 
        */

      }, {
        key: "decodeValue",
        value: function decodeValue(valueType, id) {
          var valueSet = valueSets[valueType].json;
          if (!valueSet) {
            console.warn("ValueSets not loaded for: " + id);
            return id;
          } else {
            return valueSet.valueSetValues[id] ? valueSet.valueSetValues[id].display : id;
          }
        }
      }, {
        key: "withDecodedValues",
        value: function withDecodedValues() {
          // see 
          // https://github.com/ehn-dcc-development/ehn-dcc-schema
          var greenpassJSON = this.getHCertJson();
          greenpassJSON.v[0] = Object.assign(greenpassJSON.v[0], { "mpr": greenpassJSON.v[0].mp })

          var schema = {
            nam: {
              fnt: {
                description: "Standardised name(s)",
                decoder: null
              },
              fn: {
                description: "Name(s)",
                decoder: null
              },
              gnt: {
                description: "Standardised surname(s)",
                decoder: null
              },
              gn: {
                description: "Surname(s)",
                decoder: null
              }
            },
            ver: {
              description: "Schema version",
              decoder: null
            },
            dob: {
              description: "Date of birth",
              decoder: null
            }
          };
          var vaccineSchema = [{
            dn: {
              description: "Dose number",
              decoder: null
            },
            ma: {
              description: "Vaccine manufacturer or Marketing Authorization Holder",
              decoder: "vaccine-mah-manf"
            },
            vp: {
              description: "Vaccine or prophilaxis",
              decoder: "vaccine-prophilaxis"
            },
            dt: {
              description: "Date of vaccination",
              decoder: null
            },
            co: {
              description: "Country of vaccination",
              decoder: "country-codes"
            },
            ci: {
              description: "Unique certificate identifier (UVCI)",
              decoder: null
            },
            mp: {
              description: "Vaccine or medicinal product",
              decoder: "vaccine-medicinal-product"
            },
            mpr: {
              description: "Vaccine or medicinal product(RAW data)",
              decoder: null
            },
            is: {
              description: "Certificate issuer",
              decoder: null
            },
            sd: {
              description: "Total series of doses",
              decoder: null
            },
            tg: {
              description: "Disease or agent targeted",
              decoder: "disease-agent-targeted"
            }
          }];
          var recoverySchema = [{
            du: {
              description: "Certificate valid until",
              field_id: "r-du",
              decoder: null
            },
            co: {
              description: "Country",
              field_id: "r-co",
              decoder: "country-codes"
            },
            ci: {
              description: "Unique certificate identifier (UVCI)",
              field_id: "r-ci",
              decoder: null
            },
            is: {
              description: "Certificate issuer",
              field_id: "r-is",
              decoder: null
            },
            tg: {
              description: "Disease or agent targeted",
              field_id: "r-tg",
              decoder: "disease-agent-targeted"
            },
            df: {
              description: "Certificate valid from",
              field_id: "r-df",
              decoder: null
            },
            fr: {
              description: "Date of first positive NAA test result",
              field_id: "r-fr",
              decoder: null
            }
          }];
          var testSchema = [{
            sc: {
              description: "Date and time of sample collection",
              field_id: "t-sc",
              decoder: dateFormat
            },
            ma: {
              description: "RAT test name and manufacturer",
              field_id: "t-ma",
              decoder: "test-manf"
            },
            dr: {
              description: "Date and time of test result",
              field_id: "t-dr",
              decoder: dateFormat
            },
            tt: {
              description: "Type of Test",
              field_id: "t-tt",
              decoder: "test-type"
            },
            nm: {
              description: "Nucleic acid amplification test name",
              field_id: "t-nm",
              decoder: null
            },
            co: {
              description: "Country of test",
              field_id: "t-co",
              decoder: "country-codes"
            },
            tc: {
              description: "Testing centre",
              field_id: "t-tc",
              decoder: null
            },
            ci: {
              description: "Unique certificate identifier (UVCI)",
              field_id: "t-ci",
              decoder: null
            },
            is: {
              description: "Certificate issuer",
              field_id: "t-is",
              decoder: null
            },
            tg: {
              description: "Disease or agent targeted",
              field_id: "t-tg",
              decoder: "disease-agent-targeted"
            },
            tr: {
              description: "Test result",
              field_id: "t-tr",
              decoder: "test-result"
            }
          }];

          if (greenpassJSON["v"]) {
            schema.v = vaccineSchema;
          } else if (greenpassJSON["r"]) {
            schema.r = recoverySchema;
          } else if (greenpassJSON["t"]) {
            schema.t = testSchema;
          } else throw Error("Невідомий тип сертифіката"); // Decode the values before displaying them
          // https://ec.europa.eu/health/sites/default/files/ehealth/docs/digital-green-certificates_dt-specifications_en.pdf


          for (var _i = 0, _Object$keys = Object.keys(greenpassJSON); _i < _Object$keys.length; _i++) {
            var g = _Object$keys[_i];
            var group = null;
            var schemagroup = null;

            switch (g) {
              case "v":
              case "r":
              case "t":
                group = greenpassJSON[g][0];
                schemagroup = schema[g][0]; //console.log(greenpassJSON[p][0])

                for (var _i2 = 0, _Object$keys2 = Object.keys(group); _i2 < _Object$keys2.length; _i2++) {
                  var prop = _Object$keys2[_i2];
                  //console.log(prop)
                  var _json = schemagroup[prop];
                  var decoder = schemagroup[prop].decoder;

                  if (decoder) {
                    if (typeof decoder === "function") {
                      _json.value = decoder(group[prop]);
                    } else if (typeof decoder === "string") {
                      _json.value = this.decodeValue(decoder, group[prop]);
                    }
                  } else {
                    _json.value = group[prop];
                  }
                }

                break;

              case "nam":
                group = greenpassJSON[g];
                schemagroup = schema[g];

                for (var _i3 = 0, _Object$keys3 = Object.keys(group); _i3 < _Object$keys3.length; _i3++) {
                  var _prop = _Object$keys3[_i3];
                  var _json2 = schemagroup[_prop];
                  var _decoder = schemagroup[_prop].decoder;

                  if (_decoder) {
                    if (typeof _decoder === "function") {
                      _json2.value = _decoder(group[_prop]);
                    } else if (typeof _decoder === "string") {
                      _json2.value = this.decodeValue(_decoder, group[_prop]);
                    }
                  } else {
                    _json2.value = group[_prop];
                  }
                }

                break;

              case "dob":
              case "ver":
                var json = schema[g];
                json.value = greenpassJSON[g];

              default:
                break;
            }
          }

          return schema;
        }
      }]);
      return EUGreenCertificate;
    }();

    exports.EUGreenCertificate = EUGreenCertificate;

    function dateFormat(dateStr) {
      var locale = navigator.language ? navigator.language : "en";
      var date = new Date(dateStr);
      return Intl.DateTimeFormat(locale, {
        dateStyle: 'medium',
        timeStyle: 'long'
      }).format(date);
    }

    var valueSets = {
      "test-manf": {
        abbr: "ma",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/test-manf.json",
        json: null
      },
      "country-codes": {
        abbr: "co",
        //url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/country-2-codes.json",
        url: "https://raw.githubusercontent.com/svc-git/dgc-dict/main/country-2-codes.json",
        json: null
      },
      "disease-agent-targeted": {
        abbr: "tg",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/disease-agent-targeted.json",
        json: null
      },
      "test-result": {
        abbr: "tr",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/test-result.json",
        json: null
      },
      "test-type": {
        abbr: "tt",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/test-type.json",
        json: null
      },
      "vaccine-mah-manf": {
        abbr: "ma",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/vaccine-mah-manf.json",
        json: null
      },
      "vaccine-medicinal-product": {
        abbr: "mp",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/vaccine-medicinal-product.json",
        json: null
      },
      "vaccine-prophilaxis": {
        abbr: "vp",
        url: "https://raw.githubusercontent.com/ehn-dcc-development/ehn-dcc-valuesets/release/2.0.0/vaccine-prophylaxis.json",
        json: null
      }
    };
    var valueSetsLoaded = false; // fetch valuesets jsons on load
    // to speed up dgc decoding

    function loadValueSets() {
      var promises = [];
      Object.keys(valueSets).forEach(function (k) {
        var elem = valueSets[k];
        promises.push(fetch(elem.url).then(function (res) {
          return res.json();
        }).then(function (json) {
          return elem.json = json;
        }));
      });
      Promise.all(promises).then(function () {
        valueSetsLoaded = true;
        console.info("Valuesets loaded!");
      });
    }

    window.addEventListener("load", loadValueSets());

  }, { "@babel/runtime/helpers/classCallCheck": 4, "@babel/runtime/helpers/createClass": 5, "@babel/runtime/helpers/defineProperty": 6, "@babel/runtime/helpers/interopRequireDefault": 7, "@babel/runtime/helpers/slicedToArray": 11, "@babel/runtime/helpers/typeof": 12, "base45": 42, "cbor": 99, "pako": 217 }], 322: [function (require, module, exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.displayDecodedHCERT = displayDecodedHCERT;
    exports.displayRawHCERT = displayRawHCERT;
    exports.displayRawText = displayRawText;
    exports.displaySignatureCheckResult = displaySignatureCheckResult;
    exports.displaySignatureDetails = displaySignatureDetails;
    exports.displaySigner = displaySigner;
    exports.getQRCanvas = getQRCanvas;
    exports.hideProgress = hideProgress;
    exports.hideQRCanvas = hideQRCanvas;
    exports.reset = reset;
    exports.scannerVideo = exports.scanner = exports.scanButton = void 0;
    exports.setProgressText = setProgressText;
    exports.showDecodedHCertGroup = showDecodedHCertGroup;
    exports.showDecodedText = showDecodedText;
    exports.showErrorMessage = showErrorMessage;
    exports.showQRCanvas = showQRCanvas;
    exports.signatureDetailsToggle = void 0;
    exports.toggleDecodedHCertView = toggleDecodedHCertView;

    function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() { }; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    // UI wrappers
    function reset() {
      var dgcform = document.getElementsByClassName("dgc input");

      var _iterator = _createForOfIteratorHelper(dgcform),
        _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var elem = _step.value;
          elem.value = null;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      document.getElementById("dgc-json").innerText = "";
      document.getElementById("error-bar").hidden = true;
      document.getElementById("progress").classList.remove("is-hidden");
      document.getElementById("signature-invalid-notification").hidden = true;
      document.getElementById("signature-verified-notification").hidden = true;
      document.getElementById("qr-decoded-content").innerText = "";
      document.querySelector("#qr-decoded-content").parentElement.hidden = true;
      getQRCanvas().height += 0; //clean preview 

      document.getElementById("cert-type").innerText = "";
      document.getElementById("common-group").hidden = true;
      document.getElementById("vaccination-group").hidden = true;
      document.getElementById("recovery-group").hidden = true;
      document.getElementById("test-group").hidden = true;
      document.getElementById("hide-btn-text").hidden = true;
        document.getElementById("format-text").hidden = true;
        document.getElementById("is-authentic-text").hidden = true;
        document.getElementById("show-btn-text").hidden = true;
      signatureDetails.hidden = true;
      document.getElementById("cert-co").innerText = "unavailable";
      document.getElementById("kid").innerText = "";
      document.getElementById("alg").innerText = "";
    } // Progress indicator 


    function setProgressText(msg) {
      document.getElementById("progress-text").innerText = msg;
    }

    function hideProgress() {
      document.getElementById("progress").classList.add("is-hidden");
    } // PREVIEW CANVAS


    function getQRCanvas() {
      return document.getElementById("qr-canvas");
    }

    function showQRCanvas() {
      document.getElementById("drag-drop-text").hidden = true;
      document.getElementsByClassName("canvas-wrapper")[0].classList.remove("is-hidden");
    }

    function hideQRCanvas() {
      document.getElementById("drag-drop-text").hidden = false;
      document.getElementsByClassName("canvas-wrapper")[0].classList.add("is-hidden");
    } // Human Readable TOGGLE


    document.querySelector("#dgcHumanReadableToggle").addEventListener("click", function (event) {
      toggleDecodedHCertView(event.target.checked);
    });

    function toggleDecodedHCertView(checked) {
      document.querySelector("#dgc-code").hidden = checked;
      document.querySelector("#dgc-hr").hidden = !checked;
    } // Apply toggle default state


    window.addEventListener("load", function () {
      var toggle = document.querySelector("#dgcHumanReadableToggle");
      toggleDecodedHCertView(toggle.checked);
    }); // Signature details TOGGLE

    var signatureDetailsToggle = document.querySelector("#displaySignatureDetailsToggle");
    exports.signatureDetailsToggle = signatureDetailsToggle;
    var signatureDetails = document.querySelector("#signature-details-field");

    function toggleSignatureDetails(checked) {
      signatureDetails.hidden = !checked;
    }

    signatureDetailsToggle.addEventListener("click", function (event) {
      toggleSignatureDetails(event.target.checked);
    }); // ERROR BAR

    function showErrorMessage(err) {
      var error_title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Помилка";
      var error_text = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var display_in_raw_field = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      console.warn("NOT A DGC: " + err); // Show error message

      var message = error_text ? error_text : err;
      if (display_in_raw_field) document.querySelector("#dgc-json").textContent = error_title + "\n" + message;
      document.querySelector("#error-title").textContent = error_title;
      document.querySelector("#error-text").textContent = message;
      document.querySelector("#error-bar").hidden = false;
      document.querySelector("#progress").classList.add("is-hidden");
        document.getElementById("show-btn-text").hidden = false;
        document.getElementById("signature-verified-notification").hidden = true;
    }

    function showDecodedText(text) {
      document.querySelector("#qr-decoded-content").innerText = text;
      document.querySelector("#qr-decoded-content").parentElement.hidden = false;
    } // Vaccine/Test/Recovery group display manager


    function showDecodedHCertGroup(type) {
      document.getElementById("load-tip").hidden = true;
      var vgroup = document.getElementById("vaccination-group");
      var rgroup = document.getElementById("recovery-group");
      var tgroup = document.getElementById("test-group");
      var cert_type = document.getElementById("cert-type");

      switch (type) {
        case "v":
          vgroup.hidden = false;
          cert_type.innerText = "Щеплення";
          break;

        case "r":
          rgroup.hidden = false;
          cert_type.innerText = "Одужання";
          break;

        case "t":
          tgroup.hidden = false;
          cert_type.innerText = "Тест";
          break;

        default:
          throw Error("Недійсний тип сертифіката");
          break;
      }

      document.getElementById("common-group").hidden = false;
      document.getElementById("person-group").hidden = false;
    } //
    // Fills the UI with human readable values 
    // of the dgc fields
    //


    function displayDecodedHCERT(greenpassJSON) {
      // Enable the necessary UI sections
      var type = null;

      if ("v" in greenpassJSON) {
        type = "v";
      } else if ("r" in greenpassJSON) {
        type = "r";
      } else if ("t" in greenpassJSON) {
        type = "t";
      } else throw Error("Недійсний тип сертифіката");

      showDecodedHCertGroup(type); // Fill the UI
      // Display the top-level properties(dob, ver)

      document.getElementById("dob").value = greenpassJSON.dob.value;
      document.getElementById("ver").innerText = greenpassJSON.ver.value; // Display the person's name group properties

      for (var _i = 0, _Object$keys = Object.keys(greenpassJSON.nam); _i < _Object$keys.length; _i++) {
        var p = _Object$keys[_i];
        var textbox = document.getElementById(p);
        textbox.value = greenpassJSON.nam[p].value;
      } // Display the type specific group properties
      // v | r | t


      var type_group = greenpassJSON[type][0];

      for (var _i2 = 0, _Object$keys2 = Object.keys(type_group); _i2 < _Object$keys2.length; _i2++) {
        var _p = _Object$keys2[_i2];

        var _textbox = document.getElementById(type + "-" + _p);

        _textbox.value = type_group[_p].value;
      }
    } // Display raw certificate values


    function displayRawText(text) {
      document.querySelector("#dgc-raw").textContent = text;
    }

    function displayRawHCERT(json) {
      document.querySelector("#dgc-json").textContent = json;
    }

    function displaySignatureCheckResult(isAuthentic) {
      document.getElementById("progress").classList.add("is-hidden");

      switch (isAuthentic) {
        case null:
            document.getElementById("hide-btn-text").hidden = false;
          // no keys available for validation
          break;

        case false:
          document.getElementById("signature-invalid-notification").hidden = false;
            document.getElementById("show-btn-text").hidden = false;
          break;

        case true:
          document.getElementById("signature-verified-notification").hidden = false;
            document.getElementById("hide-btn-text").hidden = false;
            document.getElementById("is-authentic-text").hidden = false;
            document.getElementById("format-text").hidden = true;
          break;

        default:
          break;
      }
    }

    function displaySignatureDetails(kid, alg) {
      var displayStatus = signatureDetailsToggle.checked;

      if (displayStatus === true) {
        signatureDetails.hidden = false;
      }

      document.getElementById("kid").innerText = kid;

      /* fetch("assets/it_dgc_public_keys.json")
      .then(res => res.json())
      .then(keys => {
        document.getElementById("pubkey-pem").innerText = keys[kid][0]
      })
      .catch(e => {
        console.error(e)
      }) */

      var alg_decoder = {
        "-37": "PS256 (RSASSA-PSS w/ SHA-256)",
        "-7": "ES256 (ECDSA w/ SHA-256)"
      };
      /* const alg_decoder = {
        "-39": "RSASSA-PSS w/ SHA-512",
        "-38": "RSASSA-PSS w/ SHA-384",
        "-37": "RSASSA-PSS w/ SHA-256",
        "-36": "ECDSA w/ SHA-512",
        "-35": "ECDSA w/ SHA-384",
      
        "-15": "SHA-2 256-bit Hash",
        "-15": "SHA-2 256-bit Hash truncated to 64-bits",
        "-14": "SHA-1 Hash",
      	
        "-8": "EdDSA",
        "-7": "ECDSA w/ SHA-256",
        "4": "HMAC w/ SHA-256 truncated to 64 bits",
        "5": "HMAC w/ SHA-256",
        "6": "HMAC w/ SHA-384",
        "7": "HMAC w/ SHA-512",
      } */

      document.getElementById("alg").innerText = alg_decoder[alg] ? alg_decoder[alg] : alg;
    }

    function displaySigner(str) {
      document.getElementById("cert-co").innerText = str;
    }

    var scanButton = document.getElementById("start-scan");
    exports.scanButton = scanButton;
    var scannerVideo = document.getElementById("camera-stream");
    exports.scannerVideo = scannerVideo;
    var scanner = document.getElementById("qr-scanner");
    exports.scanner = scanner;

  }, {}], 323: [function (require, module, exports) {
    "use strict";

    var _typeof = require("@babel/runtime/helpers/typeof");

    var UI = _interopRequireWildcard(require("./UI"));

    var QR = _interopRequireWildcard(require("./qr"));

    function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    // Scan button
    window.addEventListener("load", function (event) {
      var scanButton = document.getElementById("start-scan");
      /*scanButton.addEventListener("click", function (event) {

        if (location.protocol !== "https:") {
          scanButton.disabled = true;
          scanButton.classList.add("is-static");
          alert("This feature is only available on HTTPS");
          return -1;
        }

        UI.setProgressText("Loading scanner");
        QR.scanner.start().then(function () {
          UI.reset();
          UI.hideQRCanvas();
          UI.scanner.hidden = false;
          UI.setProgressText("Awaiting for scan results");
        })["catch"](function (err) {
          UI.hideProgress(); //UI.showErrorMessage(`You may need to grant camera access on the ${window.location.hostname} domain from your browser's settings.`, err)

          alert(err + "\n\nNote: If this device has a working camera, you may need to grant camera access to this page. Check the site permissions. Camera streams also require an HTTPS connection");
        });
      });*/
  });

  }, { "./UI": 322, "./qr": 326, "@babel/runtime/helpers/typeof": 12 }], 324: [function (require, module, exports) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  var _typeof = require("@babel/runtime/helpers/typeof");

  var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

  var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

  var UI = _interopRequireWildcard(require("./UI"));

  var _source = require("./source");

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }



  /*PDF.JS*/

  // Loaded via <script> tag, create shortcut to access PDF.js exports.
  var pdfjs = window['pdfjs-dist/build/pdf'];

  // The workerSrc property shall be specified.
  pdfjs.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';


  var pdfDoc = null,
    pageNum = 1,
    pdfFileObject = null,
    pageRendering = false,
    pageCount = 0,
    pageNumPending = null,
    pageScale = 1,
    input_scale = 1,
    pageQuality = 1,
    pageFormat = 'image/png',
    imgData = null,
    pdfName = "doc";


  var canvas = document.createElement("canvas");
  canvas.setAttribute("id", "the-canvas");
  canvas.hidden = true;
  document.body.appendChild(canvas);
  var ctx = canvas.getContext('2d');
  function toggleStates(enable) {
    disabled = !enable;
    input_pdf.disabled = disabled;
    format_select.disabled = disabled;
    quality_input.disabled = disabled;
    scale_input.disabled = disabled;
    convert_pdf.disabled = disabled;
  }

  async function pdf2img(pdf_url) {
    readPDF(pdf_url)
      .then(() => downloadAll(),
        () => {
          console.log("Error reading PDF... May be an encrypted one [-_^]");
          toggleStates(true);
        });
  }


  async function readPDF(url) {
    return new Promise((resolve, reject) => {

      var loadingTask = pdfjsLib.getDocument(url);
      loadingTask.promise.then(function (pdfDoc_) {
        pdfDoc = pdfDoc_;
        resetPDFMetaStore(pdfDoc.numPages);
        console.log("PDF Loaded: " + pdfName);
        resolve(1);
      },
        () => reject(1));
    });
  }

  async function resetPDFMetaStore(numPages) {
    pageCount = numPages;
    imgData = {};
    pageNumPending = [];
    pageScale = 1;
    pageQuality = 1;
    pageFormat = 'image/png';
  }

  async function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    pdfDoc.getPage(num).then(function (page) {
      var viewport = page.getViewport({ scale: pageScale, });
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      // Render PDF page into canvas context
      var renderContext = {
        canvasContext: ctx,
        viewport: viewport,
      };
      var renderTask = page.render(renderContext);

      // Wait for rendering to finish
      renderTask.promise.then(() => {

        canvas.toBlob(async function (blob) {
          imgData[num] = blob;
          console.log("Completed page: " + num);
          pageRendering = false;

          if (pageNumPending !== null && pageNumPending.length != 0) {
            // New page rendering is pending
            renderPage(pageNumPending.shift());

          } else {
            if (Object.keys(imgData).length == pageCount) {
              console.log("Rendering complete");
              processImageData();
            }
          }
        }, pageFormat, pageQuality);
      });
    });

    console.log("Processing page: " + num);
  }

  async function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending.push(num);
    }
    else {
      renderPage(num);
    }
  }

  async function downloadAll() {

    queueRenderPage(1);

  }
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  async function blobToDataUrl(blob) {
    return new Promise(r => { let a = new FileReader(); a.onload = r; a.readAsDataURL(blob) }).then(e => e.target.result);
  }
  var convertedPdf = null;
  var dataUrl;


  async function processImageData() {
    console.log("Creating jpeg...");

    dataUrl = await blobToDataUrl(imgData[1]);
    window["dataurl"] = dataUrl;
    console.log(dataUrl);

    return dataUrl;
  }


  /* DRAG & DROP */
  var dropArea = document.getElementById('drop-area');
  dropArea.addEventListener('dragover', function (event) {
    event.stopPropagation();
    event.preventDefault(); // Style the drag-and-drop as a "copy file" operation.

    event.dataTransfer.dropEffect = 'copy';
  });
  dropArea.addEventListener('drop', function (event) {
    event.stopPropagation();
    event.preventDefault();
    var fileList = event.dataTransfer.files;
    reader.readAsDataURL(fileList[0]);
  });




  /* FILE SELECTOR */

  var reader = new FileReader(); // Repeat computation when user re-selects the same file

  document.querySelector("#file-selector").addEventListener('click', function (event) {
    event.target.value = null;
  }); // Load the image as a dataurl to get the correct image size.
  // The ImageData constructor requires width and height

  document.querySelector("#file-selector").addEventListener('change', function (event) {
    reader.readAsDataURL(event.target.files[0]);
  }); // event fired when file reading failed

  reader.addEventListener('error', function () {
    UI.showErrorMessage(err);
  }); // event fired when file reading finished
  reader.addEventListener('load', /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(event) {
      var file;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              UI.reset();
              UI.setProgressText("Обробка зображення");
              file = event.target.result;
              // var fileURL = windows.URL.createObjectURL(file);
              console.log("Обробка зображення");
              console.log(file);
              if (file.substr(0, 21) == "data:application/pdf;") {

                var pdfAsDataUri = file; // shortened
                pdfAsDataUri = atob(pdfAsDataUri.replace('data:application/pdf;base64,', ''));
                pdf2img(file);


                console.log(window["dataurl"]);

                //Bullshit!!!  It need to be refactored.
                sleep(3000).then(() => {
                  file = window["dataurl"];
                  console.log(window["dataurl"]);
                  return file
                }
                ).then(fileNew => {
                  (0, _source.loadDGCFromFile)(file)["catch"](function (err) {
                    UI.showErrorMessage(err, "Це не цифровий COVID-сертифікат ЄС");
                  });
                }
                );


              } else {
                (0, _source.loadDGCFromFile)(file)["catch"](function (err) {
                  UI.showErrorMessage(err, "Це не цифровий COVID-сертифікат ЄС");
                });
              }

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
}, { "./UI": 322, "./source": 328, "@babel/runtime/helpers/asyncToGenerator": 3, "@babel/runtime/helpers/interopRequireDefault": 7, "@babel/runtime/helpers/typeof": 12, "@babel/runtime/regenerator": 14 }], 325: [function (require, module, exports) {
  "use strict";

  require("./filereader");

  require("./camerascanner");

  /* 
   * This file acts as an entry point for the JS bundler 
   */
  console.info("Up and running! 😃👍");

}, { "./camerascanner": 323, "./filereader": 324 }], 326: [function (require, module, exports) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  var _typeof = require("@babel/runtime/helpers/typeof");

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.beautify = beautify;
  exports.decode = decode;
  exports.scanner = void 0;

  var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

  var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

  var UI = _interopRequireWildcard(require("./UI"));

  var _source = require("./source");

  var _jsqr = _interopRequireDefault(require("jsqr"));

  var _qrcode = _interopRequireDefault(require("qrcode"));

  var _qrScanner = _interopRequireDefault(require("qr-scanner"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  // Initialize QrScanner
  _qrScanner["default"].WORKER_PATH = 'qr-scanner-worker.min.js';
  var scanner = new _qrScanner["default"](UI.scannerVideo, function (rawstring) {
    scanner.stop(); // Do not attempt to vibrate on successful scan if the browser
    // lacks support for navigator.vibrate (e.g Safari)

    if ("vibrate" in navigator) {
      try {
        navigator.vibrate(200);
      } catch (_unused) {// There's nothing we can do if it fails ¯\_(ツ)_/¯
      }
    }

    UI.scanner.hidden = true; // Decode the DGC and display its content

    console.log(rawstring);
    (0, _source.loadDGCFromString)(rawstring)["catch"](function (err) {
      UI.showErrorMessage(err, "Це не цифровий COVID-сертифікат ЄС");
      UI.hideQRCanvas();
    });
  }); // QR DECODER
  //
  // uses 2 libs for a better detection
  // as QrScanner is faster than jsqr but can't detect some barcodes
  // (mostly rotated and logoed qr-codes)

  exports.scanner = scanner;

  function decode(_x) {
    return _decode.apply(this, arguments);
  } // Redraw QR 


  function _decode() {
    _decode = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(imageDataUrl) {
      var decoded, createImage, img, _canvas, context, imgdata;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              decoded = null; // TODO: Experiment with a Promise.any() based fallback instead of try-catch
              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any

              _context2.prev = 1;
              _context2.next = 4;
              return _qrScanner["default"].scanImage(imageDataUrl);

            case 4:
              decoded = _context2.sent;
              return _context2.abrupt("return", decoded);

            case 8:
              _context2.prev = 8;
              _context2.t0 = _context2["catch"](1);

              // create an image structure to get the image size (width, height)
              createImage = /*#__PURE__*/function () {
                var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(file) {
                  return _regenerator["default"].wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          return _context.abrupt("return", new Promise(function (resolve, reject) {
                            if (!file) reject();
                            var img = new Image();
                            img.src = file;
                            resolve(img);
                          }));

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function createImage(_x4) {
                  return _ref.apply(this, arguments);
                };
              }();

              //fallback to the old qr decoder procedure if QrScanner fails
              console.info("QrScanner detection failed, falling back to jsqr");
              _context2.next = 14;
              return createImage(imageDataUrl);

            case 14:
              img = _context2.sent;
              // Now we use a canvas to convert the dataurl image into an ImageData structure
              // This is needed to decode the QR code with jsQR 
              _canvas = UI.getQRCanvas();
              _canvas.width = img.width;
              _canvas.height = img.height;
              context = _canvas.getContext('2d');
              _context2.next = 21;
              return imageDataUrlToImageData(img, context);

            case 21:
              imgdata = _context2.sent;
              decoded = (0, _jsqr["default"])(imgdata.data, imgdata.width, imgdata.height);

              if (!decoded) {
                _context2.next = 27;
                break;
              }

              return _context2.abrupt("return", decoded.data);

            case 27:
              throw Error(
                "Не вдається розпізнати QR-код у завантаженому файлі. Зображення QR-коду недостатньої для розпізнавання якості або QR-код в документі відсутнійСпробуйте завантажити якісніше зображення QR-коду, будь-ласка. Якщо завантажуєте багатосторінковий файл pdf, то QR-код має в ньому бути на першій сторінці"
            );


            case 28:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[1, 8]]);
    }));
    return _decode.apply(this, arguments);
  }

  function beautify(str, canvas) {
    var SIZE = 600;
    canvas.width = SIZE;
    canvas.height = SIZE; // see https://github.com/soldair/node-qrcode

    var config = {
      errorCorrectionLevel: 'H',
      type: "image/png"
    };

    _qrcode["default"].toDataURL(str, config).then(function (qr) {
      var img = new Image();
      img.src = qr;

      img.onload = function () {
        canvas.width = img.width;
        canvas.height = img.height;
        var context = canvas.getContext("2d");
        context.drawImage(img, 0, 0);
      };
    })["catch"](function (err) {
      console.error("qr-code beautify", err);
    });
  } // Convert a Data URL image into an ImageData structure via the Canvas API
  // See https://stackoverflow.com/questions/51869520/image-to-uint8array-in-javascript


  function imageDataUrlToImageData(_x2, _x3) {
    return _imageDataUrlToImageData.apply(this, arguments);
  }

  function _imageDataUrlToImageData() {
    _imageDataUrlToImageData = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(image, context) {
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", new Promise(function (resolve, reject) {
                context.width = image.width;
                context.height = image.height;
                context.drawImage(image, 0, 0);

                if (!context.width) {
                  canvas.width = 300;
                  canvas.height = 300;
                  reject("not a valid image file");
                }

                resolve(context.getImageData(0, 0, context.width, context.height));
              }));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _imageDataUrlToImageData.apply(this, arguments);
  }

}, { "./UI": 322, "./source": 328, "@babel/runtime/helpers/asyncToGenerator": 3, "@babel/runtime/helpers/interopRequireDefault": 7, "@babel/runtime/helpers/typeof": 12, "@babel/runtime/regenerator": 14, "jsqr": 209, "qr-scanner": 252, "qrcode": 253 }], 327: [function (require, module, exports) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  var _typeof = require("@babel/runtime/helpers/typeof");

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getIdentityFromKID = getIdentityFromKID;
  exports.verify = verify;

  var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

  var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

  var _x4 = require("@fidm/x509");

  var cose = _interopRequireWildcard(require("cose-js"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() { }; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function verify(_x, _x2) {
    return _verify.apply(this, arguments);
  }

  function _verify() {
    _verify = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(greenpassRawData, kid) {
      var res, keys, eligible_keys, verified, _iterator, _step, k, key, pk, keyX, keyY, verifier;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return fetch("assets/it_dgc_public_keys.json");

            case 2:
              res = _context.sent;
              _context.next = 5;
              return res.json();

            case 5:
              keys = _context.sent;

              if (keys) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", null);

            case 8:
              eligible_keys = keys[kid];

              if (eligible_keys) {
                _context.next = 11;
                break;
              }

              return _context.abrupt("return", false);

            case 11:
              verified = false;
              _iterator = _createForOfIteratorHelper(eligible_keys);
              _context.prev = 13;

              _iterator.s();

            case 15:
              if ((_step = _iterator.n()).done) {
                _context.next = 35;
                break;
              }

              k = _step.value;
              key = _x4.PublicKey.fromPEM("-----BEGIN PUBLIC KEY-----\n" + k + "\n-----END PUBLIC KEY-----\n"); // Signature verification

              pk = key.keyRaw; //const _keyB = pk.slice(0, 1);

              keyX = pk.slice(1, 1 + 32);
              keyY = pk.slice(33, 33 + 32);
              _context.prev = 21;
              verifier = {
                key: {
                  x: keyX,
                  y: keyY
                }
              };
              _context.next = 25;
              return cose.sign.verify(greenpassRawData, verifier);

            case 25:
              //console.info("Matching key", key);
              //console.info("KID", kid)
              verified = true;
              return _context.abrupt("break", 35);

            case 29:
              _context.prev = 29;
              _context.t0 = _context["catch"](21);
              // try the next key;
              console.error(_context.t0.message);
              console.error(_context.t0.stack);

            case 33:
              _context.next = 15;
              break;

            case 35:
              _context.next = 40;
              break;

            case 37:
              _context.prev = 37;
              _context.t1 = _context["catch"](13);

              _iterator.e(_context.t1);

            case 40:
              _context.prev = 40;

              _iterator.f();

              return _context.finish(40);

            case 43:
              return _context.abrupt("return", verified);

            case 44:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[13, 37, 40, 43], [21, 29]]);
    }));
    return _verify.apply(this, arguments);
  }

  function getIdentityFromKID(_x3) {
    return _getIdentityFromKID.apply(this, arguments);
  }

  function _getIdentityFromKID() {
    _getIdentityFromKID = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(kid) {
      var res, certstore, eligible_certs, CERT_PEM_STR, cert;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return fetch("assets/it_dgc_certificates.json");

            case 2:
              res = _context2.sent;
              _context2.next = 5;
              return res.json();

            case 5:
              certstore = _context2.sent;

              if (certstore) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt("return", null);

            case 8:
              eligible_certs = certstore[kid];

              if (eligible_certs) {
                _context2.next = 11;
                break;
              }

              return _context2.abrupt("return", false);

            case 11:
              CERT_PEM_STR = "-----BEGIN CERTIFICATE-----\n".concat(eligible_certs[0], "\n-----END CERTIFICATE-----");
              cert = _x4.Certificate.fromPEM(CERT_PEM_STR);
              return _context2.abrupt("return", cert);

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _getIdentityFromKID.apply(this, arguments);
  }

}, { "@babel/runtime/helpers/asyncToGenerator": 3, "@babel/runtime/helpers/interopRequireDefault": 7, "@babel/runtime/helpers/typeof": 12, "@babel/runtime/regenerator": 14, "@fidm/x509": 20, "cose-js": 113 }], 328: [function (require, module, exports) {
  "use strict";

  var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

  var _typeof = require("@babel/runtime/helpers/typeof");

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.loadDGCFromFile = loadDGCFromFile;
  exports.loadDGCFromString = loadDGCFromString;

  var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

  var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

  var _DGC = require("./DGC");

  var signature = _interopRequireWildcard(require("./signature"));

  var QR = _interopRequireWildcard(require("./qr"));

  var UI = _interopRequireWildcard(require("./UI"));

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function loadDGCFromString(_x) {
    return _loadDGCFromString.apply(this, arguments);
  }

  function _loadDGCFromString() {
    _loadDGCFromString = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(rawstring) {
      var canvas, dgc, rawdgc, kid, algid, hrDGC;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Load QR Preview
              canvas = UI.getQRCanvas();
              QR.beautify(rawstring, canvas);
              UI.showQRCanvas(); // Load the DCC

              UI.setProgressText("Розшифровка сертифіката...");

              if (rawstring) {
                _context.next = 6;
                break;
              }

              throw Error("Немає даних");

            case 6:
              dgc = new _DGC.EUGreenCertificate(rawstring);
              //console.log(dgc);

              rawdgc = dgc.getRawCwt();
              kid = dgc.getKid();
              algid = dgc.getSignAlgorithm(); // Display the Certificate content
              // raw content

              UI.displayRawText(dgc.getEncodedString());
              UI.displayRawHCERT(dgc.toRawString()); // parsed content

              try {
                hrDGC = dgc.withDecodedValues();
                UI.displayDecodedHCERT(hrDGC);
                //console.log(dgc.getMp.mp); 
              } catch (err) {
                  if(err){
                      document.getElementById("signature-verified-notification").classList.add("is-hidden")
                      document.getElementById("hide-btn-text").classList.add("is-hidden")
                      document.getElementById("is-authentic-text").classList.add("is-hidden")
                      document.getElementById("format-text").classList.add("is-hidden")
                  }else{
                      document.getElementById("signature-verified-notification").classList.remove("is-hidden")
                      document.getElementById("hide-btn-text").classList.remove("is-hidden")
                      document.getElementById("is-authentic-text").classList.remove("is-hidden")
                      document.getElementById("format-text").classList.remove("is-hidden")
                  }
                UI.showErrorMessage(err, "Недійсний формат сертифіката", "Зчитаний файл є COVID-сертифікатом, але підтверджує не вакцинацію.");
              } // Signature Verification!


              UI.setProgressText("Виконую перевірку підпису");
              signature.verify(rawdgc, kid).then(function (isAuthentic) {
                UI.displaySignatureCheckResult(isAuthentic);
              })["catch"](function (err) {
                UI.setProgressText("Не вдалося завантажити список сертифікатів підписувача.\n Перевірте інтернет з'єднання\n");
                window.setTimeout(function () {
                  UI.hideProgress();
                }, 3500, null);
              }); // Display signer details

              signature.getIdentityFromKID(kid, algid).then(function (cert) {
                UI.displaySignatureDetails(kid, algid);

                if (cert) {
                  var subject = "".concat(cert.subject.commonName, " (").concat(cert.subject.countryName, ")");
                  var issuer = "".concat(cert.issuer.commonName, " (").concat(cert.issuer.countryName, ")");
                  UI.displaySigner("".concat(subject, ", виданий ").concat(issuer));
                } else {
                  UI.displaySigner("Невідомий");
                }
              });

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _loadDGCFromString.apply(this, arguments);
  }

  function loadDGCFromFile(_x2) {
    return _loadDGCFromFile.apply(this, arguments);
  }

  function _loadDGCFromFile() {
    _loadDGCFromFile = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(file) {
      var rawstring;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(file.substr(0, 10) != "data:image")) {
                _context2.next = 4;
                break;
              }

              UI.hideQRCanvas();
              UI.showErrorMessage(Error("Будь-ласка, завантажте файл jpg, або png, або pdf."), "Завантажений формат графічного файлу не підтримано.\n");
              return _context2.abrupt("return");

            case 4:
              _context2.prev = 4;
              _context2.next = 7;
              return QR.decode(file);

            case 7:
              rawstring = _context2.sent;
              //console.log(rawstring)
              loadDGCFromString(rawstring)["catch"](function (err) {
                UI.showErrorMessage(err, "\"Зчитувач\" розпізнає тільки документ COVID-сертифікат у форматі EU DCC.\n" +
                    "\n" +
                    "Зчитування виявило, що завантажений документ в іншому форматі.\n" +
                    "\n" +
                    "Дійте відповідно до Наказу МОЗ № 234 від 04.02.22 року. (посилання https://zakon.rada.gov.ua/laws/show/z0187-22#Text) та інструкції (посилання https://docs.google.com/document/d/1935m-pWco0nRFAAQjT6dEKl6n2Mr7AqChDd2ZY2B0jE/edit )\n");
                // UI.showDecodedText(rawstring);
              });
              _context2.next = 15;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](4);
              UI.hideQRCanvas();
              UI.showErrorMessage(_context2.t0);

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[4, 11]]);
    }));
    return _loadDGCFromFile.apply(this, arguments);
  }

}, { "./DGC": 321, "./UI": 322, "./qr": 326, "./signature": 327, "@babel/runtime/helpers/asyncToGenerator": 3, "@babel/runtime/helpers/interopRequireDefault": 7, "@babel/runtime/helpers/typeof": 12, "@babel/runtime/regenerator": 14 }]
}, { }, [325])

